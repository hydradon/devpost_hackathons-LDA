[
    {
        "url": "https://api.github.com/repos/lgessler/kbrpc/issues/comments/202703425",
        "html_url": "https://github.com/lgessler/kbrpc/issues/2#issuecomment-202703425",
        "issue_url": "https://api.github.com/repos/lgessler/kbrpc/issues/2",
        "id": 202703425,
        "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjcwMzQyNQ==",
        "user": {
            "login": "lgessler",
            "id": 7650725,
            "node_id": "MDQ6VXNlcjc2NTA3MjU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/7650725?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lgessler",
            "html_url": "https://github.com/lgessler",
            "followers_url": "https://api.github.com/users/lgessler/followers",
            "following_url": "https://api.github.com/users/lgessler/following{/other_user}",
            "gists_url": "https://api.github.com/users/lgessler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lgessler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lgessler/subscriptions",
            "organizations_url": "https://api.github.com/users/lgessler/orgs",
            "repos_url": "https://api.github.com/users/lgessler/repos",
            "events_url": "https://api.github.com/users/lgessler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lgessler/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-29T04:28:00Z",
        "updated_at": "2016-03-29T05:00:59Z",
        "author_association": "OWNER",
        "body": "edit: as @atondwal pointed out to me, maybe I'm overthinking this, as anything that can be done in these ways could have also been done by just writing directly to the file. The only safeguard against that is detecting a malicious write before you do anything with it--that sounds pretty hard.\n\nYikes. So let's see. An attacker could either replace the `/keybase/private/me,you/private/.kbrpc` folder entirely or replace one of its files, e.g. `chat.lgessler.macbook.sent`[1], and replace it with arbitrary data.\n\nThere are two cases:\n\n#### Symlink points to something on local machine not controlled by attacker\n\nIt's unclear what the risks are here--our file format is pretty idiosyncratic:\n\n```\n1459223606081\u0007lgessler\u0007bGZrd2U=\n1459224756550\u0007lgessler\u0007bGt3amVmbGVrd2ZqbGZ3amVmd2VrZg==\n1459224757421\u0007lgessler\u0007ZWZud2VsZg==\n1459224760781\u0007lgessler\u0007cWx3amVxd2w=\n```\n\n(Note: the question mark character is ASCII 0x7 'bell', and the data is base 64 encoded--quick hacks we relied on to avoid thinking about escaping things, and a nice bonus about the encoding is that the file remains human readable. Hopefully 0x7 isn't allowable in a username, right?)\n\nThe attacker would need to turn KBRPC's expectation about file structure against it. It's not immediately clear to me how you would do evil things with this, as our format is (for better or worse) pretty idiosyncratic.\n\n#### Symlink points to a something controlled by attacker\n\nThis is Pandora's box. Suppose the attacker put something in their public directory, e.g. `/keybase/public/attacker/cryptolocker-binary-in-kbrpc-data`. Suppose then the attacker symlinks to that from `/keybase/private/me,attacker/.kbrpc/chat.attacker.microsoftbob.sent` \n\nIf the app is restricted just to printing the data maybe nothing will go so wrong, but as soon as you start allowing the execution of arbitrary code (in overt or subtle ways, like on a PDF) everything would go wrong.\n\nAs @emumoo pointed out in a discussion we had, KBRPC could just check everything it's working with and refuse to work with symlinks, but it sounds like the KBFS team is encouraging honoring symlinks if possible.\n\n[1] `chat` is an additional layer of namespacing we added--probably should have been a directory instead, going to change that.\n"
    },
    {
        "url": "https://api.github.com/repos/lgessler/kbrpc/issues/comments/202707726",
        "html_url": "https://github.com/lgessler/kbrpc/issues/2#issuecomment-202707726",
        "issue_url": "https://api.github.com/repos/lgessler/kbrpc/issues/2",
        "id": 202707726,
        "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjcwNzcyNg==",
        "user": {
            "login": "atondwal",
            "id": 343048,
            "node_id": "MDQ6VXNlcjM0MzA0OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/343048?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/atondwal",
            "html_url": "https://github.com/atondwal",
            "followers_url": "https://api.github.com/users/atondwal/followers",
            "following_url": "https://api.github.com/users/atondwal/following{/other_user}",
            "gists_url": "https://api.github.com/users/atondwal/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/atondwal/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/atondwal/subscriptions",
            "organizations_url": "https://api.github.com/users/atondwal/orgs",
            "repos_url": "https://api.github.com/users/atondwal/repos",
            "events_url": "https://api.github.com/users/atondwal/events{/privacy}",
            "received_events_url": "https://api.github.com/users/atondwal/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-29T04:42:10Z",
        "updated_at": "2016-03-29T04:44:17Z",
        "author_association": "COLLABORATOR",
        "body": "Yeah, so as far as I can tell, all the attacker can do with symlinks is serve whatever data (which they could've done just by writing to the file) or make you append to a file that you don't want to: say link `/keybase/private/me,attacker/.kbrpc/chat.me.laptop.sent -> /home/me/.zshrc`\n\nThe latter seems like it could a good reason to disallow symlinks... OR we could just move `/keybase/private/me,u1,u2/.kbrpc/chat.me.laptop.sent` to say `/keybase/private/me#u1,u2/.kbrpc/chat.me.laptop.sent` so that only I can write to the files that I later write to.\n\n...but I don't think there's any coherent way to stop someone sending you bad data signed by themselves... I suppose we could stop trusting the username metadata provided, and just get it from where we read the file, if we implement the above fix, but beyond that it's just data and a time. I suppose we should just tell clients that that metadata is not to be trusted to not have been tampered with by the person sending you the message (or have them roll their own)\n"
    },
    {
        "url": "https://api.github.com/repos/lgessler/kbrpc/issues/comments/202715925",
        "html_url": "https://github.com/lgessler/kbrpc/issues/2#issuecomment-202715925",
        "issue_url": "https://api.github.com/repos/lgessler/kbrpc/issues/2",
        "id": 202715925,
        "node_id": "MDEyOklzc3VlQ29tbWVudDIwMjcxNTkyNQ==",
        "user": {
            "login": "lgessler",
            "id": 7650725,
            "node_id": "MDQ6VXNlcjc2NTA3MjU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/7650725?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lgessler",
            "html_url": "https://github.com/lgessler",
            "followers_url": "https://api.github.com/users/lgessler/followers",
            "following_url": "https://api.github.com/users/lgessler/following{/other_user}",
            "gists_url": "https://api.github.com/users/lgessler/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lgessler/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lgessler/subscriptions",
            "organizations_url": "https://api.github.com/users/lgessler/orgs",
            "repos_url": "https://api.github.com/users/lgessler/repos",
            "events_url": "https://api.github.com/users/lgessler/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lgessler/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-29T05:24:56Z",
        "updated_at": "2016-03-29T05:25:57Z",
        "author_association": "OWNER",
        "body": "as @atondwal says, adopting a directory structure like `/keybase/private/me#u1,u2/.kbrpc/chat.me.laptop.sent` would remove attacks that rely on you writing to an unintended file or impersonating someone else. That leaves the domain of possible attacks (at least ones that are on our radar right now) within the files in `/keybase/private/attacker#me/.kbrpc/...`. \n\nThat still allows the attacker to send whatever they want, but perhaps this is where we'd tell anyone building on top of this to add their own security layer.\n"
    },
    {
        "url": "https://api.github.com/repos/lgessler/kbrpc/issues/comments/203143035",
        "html_url": "https://github.com/lgessler/kbrpc/issues/2#issuecomment-203143035",
        "issue_url": "https://api.github.com/repos/lgessler/kbrpc/issues/2",
        "id": 203143035,
        "node_id": "MDEyOklzc3VlQ29tbWVudDIwMzE0MzAzNQ==",
        "user": {
            "login": "malgorithms",
            "id": 614943,
            "node_id": "MDQ6VXNlcjYxNDk0Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/614943?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/malgorithms",
            "html_url": "https://github.com/malgorithms",
            "followers_url": "https://api.github.com/users/malgorithms/followers",
            "following_url": "https://api.github.com/users/malgorithms/following{/other_user}",
            "gists_url": "https://api.github.com/users/malgorithms/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/malgorithms/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/malgorithms/subscriptions",
            "organizations_url": "https://api.github.com/users/malgorithms/orgs",
            "repos_url": "https://api.github.com/users/malgorithms/repos",
            "events_url": "https://api.github.com/users/malgorithms/events{/privacy}",
            "received_events_url": "https://api.github.com/users/malgorithms/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-03-29T22:40:54Z",
        "updated_at": "2016-03-29T22:40:54Z",
        "author_association": "NONE",
        "body": "We're internally talking a lot about a policy with symlinks in KBFS, so it's nice to see you all talking about these issues here. The short-term answer is that you should probably just check the files and insist they're not symlinks before using them.\n\nEven this solution:\n\n```\n/keybase/private/a#b,c/foo\n```\n\nallows `a` (a bad guy) to make that a symbolic link to:\n\n```\n/keybase/private/a#b,c/foo -> /keybase/private/x#b,c/foo\n```\n\nSo when `b` an `c` think they're getting a message from a, they're actually getting data that `x` wrote to them. This can confuse `b` and `c` and make them think `a` has stolen private data, or trip them up into replying with something they shouldn't.\n\nThis user is interesting to look at - a test user I made for keybase.pub unit tests...(enyoc is my last name backwards). it has symlinks to all kinds of different places:\n\nhttps://keybase.pub/enyoc/keybase.pub-tests/symlinks/\n\nThe site recognizes that they're symlinks and won't serve any of that data raw. In the case where they're symlinks staying inside public folders, it links directly to the appropriate page but doesn't let you surf inside keybase.\n\nFor example, this actually works in KBFS:\n\n```\n# this prints a public file in MAX's folder, not enyoc's\ncat /keybase/public/enyoc/keybase.pub-tests/symlinks/max_krohn_keys\n```\n\nyet keybase.pub won't honor it:\n\nhttps://keybase.pub/enyoc/keybase.pub-tests/symlinks/max_krohn_keys\n"
    }
]