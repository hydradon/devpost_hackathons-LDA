[
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/158599007",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/17#issuecomment-158599007",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/17",
        "id": 158599007,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE1ODU5OTAwNw==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-11-21T07:07:33Z",
        "updated_at": "2015-11-21T07:07:33Z",
        "author_association": "COLLABORATOR",
        "body": "More thought needs to be put here. In the ideal case, a user accepts one of the given optional meeting times and one of the given optional meeting places. But counter meeting requests should also be a possibility (i.e. suggest different location or time that wasn't in the request). Also, rejection of meeting request needs to be an option. \n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/159147197",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/20#issuecomment-159147197",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/20",
        "id": 159147197,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTE0NzE5Nw==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-11-24T04:32:55Z",
        "updated_at": "2015-11-24T04:32:55Z",
        "author_association": "COLLABORATOR",
        "body": "https://cloud.google.com/solutions/mobile/ios-push-notifications/\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/159977036",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/3#issuecomment-159977036",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/3",
        "id": 159977036,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE1OTk3NzAzNg==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-11-26T18:55:34Z",
        "updated_at": "2015-11-26T18:55:34Z",
        "author_association": "OWNER",
        "body": "Shelving until we have our own domain. Mailgun's sandbox email sends from \"https\" URL that requires extra SSL setup that we do not need once we have our own \"http\" domain.\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/160023277",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/4#issuecomment-160023277",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/4",
        "id": 160023277,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDAyMzI3Nw==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-11-27T02:10:02Z",
        "updated_at": "2015-11-27T02:10:02Z",
        "author_association": "COLLABORATOR",
        "body": "Braintree takes a small fee ($0.30) and a percentage (2.9%) for each processed transaction. The constant $0.30 charge means that minimizing the number of times we have to process transactions will increase revenues (small change adds up). If we can aggregate multiple transactions, we could save money by avoiding multiple unnecessary charges.  example, each owner shouldn't get paid until the end of the week. Each renter should be charged when they hand the item back to the owner. But the owner shouldn't be  paid until the end of the Saturday of that week. This way, if the owner earns revenues on multiple items, there's only one $0.30 charge for paying  that owner rather than multiple charges. \n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/160195574",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/20#issuecomment-160195574",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/20",
        "id": 160195574,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDE5NTU3NA==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-11-27T19:51:02Z",
        "updated_at": "2015-11-27T19:51:02Z",
        "author_association": "OWNER",
        "body": "Google Cloud Messaging notifications: https://developers.google.com/cloud-messaging/\n\nhttps://www.youtube.com/watch?v=HxbidYYAek8&list=PLOU2XLYxmsIIiaVcbQ9_rbI9IzF2agybt\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/160203278",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/20#issuecomment-160203278",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/20",
        "id": 160203278,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2MDIwMzI3OA==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-11-27T21:03:11Z",
        "updated_at": "2015-11-27T21:03:11Z",
        "author_association": "COLLABORATOR",
        "body": "Perfect \n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/166579728",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/26#issuecomment-166579728",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/26",
        "id": 166579728,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjU3OTcyOA==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-22T10:49:24Z",
        "updated_at": "2015-12-22T10:49:24Z",
        "author_association": "OWNER",
        "body": "http://stackoverflow.com/questions/11122846/whats-the-alternative-to-back-reference-property-in-ndb\ncollection_name does not exist in ndb, check this link for help with back references\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/166581242",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/26#issuecomment-166581242",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/26",
        "id": 166581242,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjU4MTI0Mg==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-22T10:58:50Z",
        "updated_at": "2015-12-22T10:58:50Z",
        "author_association": "OWNER",
        "body": "Awesome cheat sheet: https://docs.google.com/document/d/1AefylbadN456_Z7BZOpZEXDq8cR8LYu7QgI7bt5V0Iw/mobilebasic\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/166641918",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/27#issuecomment-166641918",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/27",
        "id": 166641918,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjY0MTkxOA==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-22T15:11:50Z",
        "updated_at": "2015-12-22T15:11:50Z",
        "author_association": "COLLABORATOR",
        "body": "Is Structured Propeety better than Key Property for our setup? This post shows the decision is kind of a cost/features trade off \n\nhttp://stackoverflow.com/questions/11748695/most-efficient-one-to-many-relationships-in-google-app-engine-datastore\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/166642902",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/27#issuecomment-166642902",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/27",
        "id": 166642902,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjY0MjkwMg==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-22T15:14:22Z",
        "updated_at": "2015-12-22T15:14:22Z",
        "author_association": "COLLABORATOR",
        "body": "Structured Property would be cheaper (less read/write operations) but do we need all of the reviews every time we show an item/user? Also could the number of comments push the size of those item/user objects over 1MB?\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/166643725",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/27#issuecomment-166643725",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/27",
        "id": 166643725,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjY0MzcyNQ==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-22T15:17:23Z",
        "updated_at": "2015-12-22T15:17:23Z",
        "author_association": "COLLABORATOR",
        "body": "Maybe we should use Structured Property and hold only the latest 50 text reviews or so? The limit could be higher/lower depending on how many comments we find users are actually looking at\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/166644903",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/27#issuecomment-166644903",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/27",
        "id": 166644903,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjY0NDkwMw==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-22T15:21:12Z",
        "updated_at": "2015-12-22T15:21:12Z",
        "author_association": "COLLABORATOR",
        "body": "Another option could be to create a GroupOfReviews object that holds like max 5-7 reviews. Then each item/user has a KeyProperty thar points to GroupOfReviews objects. On the client side, we load the latest GroupOfReviews, and present a \"See More\" button that loads the next GroupOfReviews object  \n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/166728898",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/27#issuecomment-166728898",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/27",
        "id": 166728898,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NjcyODg5OA==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-22T21:03:15Z",
        "updated_at": "2015-12-22T21:03:41Z",
        "author_association": "OWNER",
        "body": "I really like the idea of having the latest x amount of reviews as a structured property and load the rest if the user clicks see more. By the way, ReferenceProperty in db == KeyProperty in ndb\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/167446823",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/18#issuecomment-167446823",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/18",
        "id": 167446823,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzQ0NjgyMw==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-27T23:07:07Z",
        "updated_at": "2015-12-27T23:11:12Z",
        "author_association": "OWNER",
        "body": "Moved to blobs.py. In webapp form, NOT flask (yet).\nThe current method for uploading: \n\n> curl URL.../blobs/new_user_image\n> (returns a URL, let us call it uploadURL)\n> curl -X POST -F \"file=@C:/.....dickpic.jpg\" uploadURL\n\nAnother issue (probably simple fix): can't send both data and a file using the curl command. For example, you can't do curl -d \"user_id\"=\"3458237452834\" -f \"##imageFile##\" uploadURL\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/167447474",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/18#issuecomment-167447474",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/18",
        "id": 167447474,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzQ0NzQ3NA==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-27T23:27:49Z",
        "updated_at": "2015-12-27T23:27:49Z",
        "author_association": "OWNER",
        "body": "http://stackoverflow.com/questions/31446308/app-engine-blobstore-self-get-uploads-empty\nhttp://stackoverflow.com/questions/18061264/serve-image-from-gae-datastore-with-flask-python\nhttp://stackoverflow.com/questions/14784295/handling-image-upload-with-blobstoreuploadhandler-and-returning-a-json-message\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/167451014",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/18#issuecomment-167451014",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/18",
        "id": 167451014,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzQ1MTAxNA==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-28T00:41:51Z",
        "updated_at": "2015-12-28T00:41:51Z",
        "author_association": "COLLABORATOR",
        "body": "So is it not doable with Flask?\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/167451161",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/18#issuecomment-167451161",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/18",
        "id": 167451161,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2NzQ1MTE2MQ==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2015-12-28T00:46:33Z",
        "updated_at": "2015-12-28T03:21:47Z",
        "author_association": "OWNER",
        "body": "It is doable, have yet to find some working flask syntax though. Some of the function calls in what I have are webapp specific.\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169497949",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169497949",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169497949,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTQ5Nzk0OQ==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-06T23:37:48Z",
        "updated_at": "2016-01-06T23:37:48Z",
        "author_association": "COLLABORATOR",
        "body": "I think this is something pretty far off. For example, even if we got half of the US population (150,000,000 people) listing 5 items each, all on one data store, that's about 750 million items. Most of the time, the client actually has the id of the entity it needs which I believe is constant look up time using the get_by_id method (I haven't confirmed that but that seems like it should be the case). In the case that it doesn't, assuming a worst case search of O(n) to, for example, find all of a user's items shouldn't take an unreasonable amount of time I believe. I could be wrong but asking datastore to search through ~750 million entities might take at most a couple seconds. And this only occurs at login time which is a reasonable amount of time to wait for logging in\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169498697",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169498697",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169498697,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTQ5ODY5Nw==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-06T23:41:08Z",
        "updated_at": "2016-01-06T23:41:08Z",
        "author_association": "COLLABORATOR",
        "body": "Further, I think there is some logic we can write which determines which actual geographic data center we want our data hosted at. If this gets to be a problem, we could store data at multiple data centers reducing the number of entities stored and needed to be searched through on any one them \n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169499025",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169499025",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169499025,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTQ5OTAyNQ==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-06T23:41:52Z",
        "updated_at": "2016-01-06T23:42:52Z",
        "author_association": "OWNER",
        "body": "I'm thinking of the case where the user is searching for an item by typing keywords and we want to return say 10 possible items. You can't filter with substrings, so my current process is:\n1) query db and return some large number of  items (let's call this ItemsFetchedPerQueryCycle)\n2) search item name/descriptions for the substring\n3) once 10 matches are found, return them\n4) if 10 matches are not yet found, query db for another ItemsFetchedPerQueryCycle\n5) repeat until 10 found\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169501752",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169501752",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169501752,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwMTc1Mg==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-06T23:52:21Z",
        "updated_at": "2016-01-06T23:52:21Z",
        "author_association": "COLLABORATOR",
        "body": "Can you use these query strings?\n\nhttps://cloud.google.com/appengine/docs/python/search/query_strings\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169501814",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169501814",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169501814,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwMTgxNA==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-06T23:52:44Z",
        "updated_at": "2016-01-06T23:52:44Z",
        "author_association": "COLLABORATOR",
        "body": "I keep accidentally tapping \"close and comment\"\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169505413",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169505413",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169505413,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUwNTQxMw==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-07T00:12:55Z",
        "updated_at": "2016-01-07T00:12:55Z",
        "author_association": "OWNER",
        "body": "We're using ndb (Datastore), not the Search API\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169510296",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169510296",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169510296,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUxMDI5Ng==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-07T00:40:43Z",
        "updated_at": "2016-01-07T00:40:43Z",
        "author_association": "OWNER",
        "body": "http://stackoverflow.com/questions/23317280/appengine-search-api-vs-datastore\n\nOne solution offered is to combine the two because the Search API is easy for querying for pieces of strings and geolocations, while datastore holds the rest of the data\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169512388",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169512388",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169512388,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUxMjM4OA==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-07T00:55:57Z",
        "updated_at": "2016-01-07T00:55:57Z",
        "author_association": "COLLABORATOR",
        "body": "Wow.. Just learned a couple things.\n\nFor one, we could do basic text search using just the beginning of the term according to this post\nhttp://stackoverflow.com/questions/17702958/ndb-querying-results-that-start-with-a-string?rq=1\n\nTwo: We shouldn't use blobstore for images. It's a superseded storage option (like db is compared to nab). https://cloud.google.com/appengine/docs/python/storage. One option we have in place of blobstore might be this Images API https://cloud.google.com/appengine/docs/python/images/ but I haven't looked into this\n\nThree: After reading to your last post and this one: http://stackoverflow.com/questions/26926701/ndb-querying-results-that-contain-a-string, I was beginning to wonder if Datastore is even the right choice for storage at all. The other option would be to use Google Cloud Storage. But this doesn't seem to fit our application needs. Google Cloud Storage appears to be for large files like documents, movies, videos, etc. In our case, most of our entities are just small collections of numbers and strings. \n\nIn order to use the Search API, we would need to store just the item names and item descriptions on Google Cloud Storage and everything else on Datastore. I feel like this would quickly get pretty complicated and confusing?\n\nThe simplest solution seems to be attempting a text search using the beginning of the item name as described in the first link\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169513774",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169513774",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169513774,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUxMzc3NA==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-07T01:05:03Z",
        "updated_at": "2016-01-07T01:05:03Z",
        "author_association": "COLLABORATOR",
        "body": "Also, StringProperties like the item name are supposed to be indexed. Part of that means the string is tokenized and split according to whitespace, punctuation, etc. So, I could be wrong, but I think if the item name is \"Dyson Vacuum\" and you search with a query matching item names to \"Vacuum\", the item with the name \"Dyson Vacuum\" should be returned.\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169526829",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169526829",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169526829,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUyNjgyOQ==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-07T02:30:17Z",
        "updated_at": "2016-01-07T02:30:17Z",
        "author_association": "OWNER",
        "body": "Indexing does not tokenize or split the string. Indexing only allows us to order by that attribute.\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169527859",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169527859",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169527859,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTUyNzg1OQ==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-07T02:33:06Z",
        "updated_at": "2016-01-07T02:33:06Z",
        "author_association": "OWNER",
        "body": "I don't really think the solution is as easy as your simple solution. If we do that, searching for \"vacuum\" won't return \"Dyson vacuum\". Also, I want to search the item's description too, not just the names.\n\nAs for our storage dilemma, check this out: https://cloud.google.com/docs/storing-your-data\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169638005",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169638005",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169638005,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTYzODAwNQ==",
        "user": {
            "login": "nickgarfield",
            "id": 8634334,
            "node_id": "MDQ6VXNlcjg2MzQzMzQ=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8634334?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nickgarfield",
            "html_url": "https://github.com/nickgarfield",
            "followers_url": "https://api.github.com/users/nickgarfield/followers",
            "following_url": "https://api.github.com/users/nickgarfield/following{/other_user}",
            "gists_url": "https://api.github.com/users/nickgarfield/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nickgarfield/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nickgarfield/subscriptions",
            "organizations_url": "https://api.github.com/users/nickgarfield/orgs",
            "repos_url": "https://api.github.com/users/nickgarfield/repos",
            "events_url": "https://api.github.com/users/nickgarfield/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nickgarfield/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-07T11:42:03Z",
        "updated_at": "2016-01-07T11:42:03Z",
        "author_association": "COLLABORATOR",
        "body": "So according to that link, datastore is still the best choice for our application?\n\nOne thing we could do is add a repeated StringProperty to each item called key_word and then tokenize the name and description to create  key_words. We can then query by matching keywords. I think this would satisfy what you're trying to do\n\nhttps://cloud.google.com/appengine/docs/python/ndb/queries#repeated_properties\n\nTo reduce the number of redundant keywords, we could create a list of redundant words like (a, an, the, this, that, etc.) that we don't add as key_words.\n"
    },
    {
        "url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/comments/169867208",
        "html_url": "https://github.com/sayanroyc/Spartan_Server/issues/29#issuecomment-169867208",
        "issue_url": "https://api.github.com/repos/sayanroyc/Spartan_Server/issues/29",
        "id": 169867208,
        "node_id": "MDEyOklzc3VlQ29tbWVudDE2OTg2NzIwOA==",
        "user": {
            "login": "sayanroyc",
            "id": 5024722,
            "node_id": "MDQ6VXNlcjUwMjQ3MjI=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5024722?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sayanroyc",
            "html_url": "https://github.com/sayanroyc",
            "followers_url": "https://api.github.com/users/sayanroyc/followers",
            "following_url": "https://api.github.com/users/sayanroyc/following{/other_user}",
            "gists_url": "https://api.github.com/users/sayanroyc/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sayanroyc/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sayanroyc/subscriptions",
            "organizations_url": "https://api.github.com/users/sayanroyc/orgs",
            "repos_url": "https://api.github.com/users/sayanroyc/repos",
            "events_url": "https://api.github.com/users/sayanroyc/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sayanroyc/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2016-01-08T02:17:38Z",
        "updated_at": "2016-01-08T02:18:52Z",
        "author_association": "OWNER",
        "body": "I think the geopt property in ndb is relatively useless, there are no functions to calculate/query for all items within a radial distance. In ndb, the geopt property is stored as (lat, lon), and when indexed, it is organized by lat first and then lon. Converting miles to latitude/longitude looks like a bitch when I googled it.\n\n So Search API looks more and more useful because it contains a distance query that can return all items within a certain distance (kilometers, which can easily be converted to miles). It might be a good idea to store searchable text fields (item name and maybe description) and geolocations should be stored with Search, everything else put into Datastore.\n\nhttp://stackoverflow.com/questions/13112161/use-the-datastore-ndb-the-search-api-or-both-for-views-on-data\n\nhttps://cloud.google.com/appengine/docs/python/search/query_strings#Python_Queries_on_geopoint_fields\n"
    }
]