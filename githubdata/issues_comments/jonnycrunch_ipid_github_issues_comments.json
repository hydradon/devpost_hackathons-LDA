[
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/502207601",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/5#issuecomment-502207601",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/5",
        "id": 502207601,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjIwNzYwMQ==",
        "user": {
            "login": "jonnycrunch",
            "id": 8137617,
            "node_id": "MDQ6VXNlcjgxMzc2MTc=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/8137617?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonnycrunch",
            "html_url": "https://github.com/jonnycrunch",
            "followers_url": "https://api.github.com/users/jonnycrunch/followers",
            "following_url": "https://api.github.com/users/jonnycrunch/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonnycrunch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonnycrunch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonnycrunch/subscriptions",
            "organizations_url": "https://api.github.com/users/jonnycrunch/orgs",
            "repos_url": "https://api.github.com/users/jonnycrunch/repos",
            "events_url": "https://api.github.com/users/jonnycrunch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonnycrunch/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-14T18:01:55Z",
        "updated_at": "2019-06-14T18:01:55Z",
        "author_association": "OWNER",
        "body": "behind the scenes IPID uses IPLD and thus the json is canonicalized to dag-cbor. thus whitespace is removed, attributes are ordered deterministically.  "
    },
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/502207942",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/4#issuecomment-502207942",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/4",
        "id": 502207942,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwMjIwNzk0Mg==",
        "user": {
            "login": "jonnycrunch",
            "id": 8137617,
            "node_id": "MDQ6VXNlcjgxMzc2MTc=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/8137617?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonnycrunch",
            "html_url": "https://github.com/jonnycrunch",
            "followers_url": "https://api.github.com/users/jonnycrunch/followers",
            "following_url": "https://api.github.com/users/jonnycrunch/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonnycrunch/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonnycrunch/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonnycrunch/subscriptions",
            "organizations_url": "https://api.github.com/users/jonnycrunch/orgs",
            "repos_url": "https://api.github.com/users/jonnycrunch/repos",
            "events_url": "https://api.github.com/users/jonnycrunch/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonnycrunch/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-14T18:02:59Z",
        "updated_at": "2019-06-14T18:02:59Z",
        "author_association": "OWNER",
        "body": "Cool, let's chat. "
    },
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/503897437",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/4#issuecomment-503897437",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/4",
        "id": 503897437,
        "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzg5NzQzNw==",
        "user": {
            "login": "aschmahmann",
            "id": 2733228,
            "node_id": "MDQ6VXNlcjI3MzMyMjg=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2733228?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aschmahmann",
            "html_url": "https://github.com/aschmahmann",
            "followers_url": "https://api.github.com/users/aschmahmann/followers",
            "following_url": "https://api.github.com/users/aschmahmann/following{/other_user}",
            "gists_url": "https://api.github.com/users/aschmahmann/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aschmahmann/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aschmahmann/subscriptions",
            "organizations_url": "https://api.github.com/users/aschmahmann/orgs",
            "repos_url": "https://api.github.com/users/aschmahmann/repos",
            "events_url": "https://api.github.com/users/aschmahmann/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aschmahmann/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2019-06-20T06:40:33Z",
        "updated_at": "2019-06-20T06:40:33Z",
        "author_association": "NONE",
        "body": "Some thoughts on this (derived largely from https://github.com/ipfs-shipyard/pm-idm/issues/2#issuecomment-451032749). \r\n\r\nThere are two types of functions that we tend to worry about here:\r\n1. Revocation: How do I know that the keys that I'm using are out of date?\r\n2. Rotation: What is the new key and how do I know it actually belongs to the correct party?\r\n\r\nWe also need to take into account the threat model and timing around revocation/rotation. For example:\r\n1. Did we revoke our key long before the compromise occurred? (e.g. RSA-1024 no longer deemed secure)\r\n2. Did we revoke the key after the compromise occurred? (e.g. laptop is stolen)\r\n\r\nBelow are some thoughts on how to solve this using a blockchain/global consensus system (which while not in the IPID spirit, is what most of the DID space is using) and an IPNS/eventual consistency system. I will use as a short-hand blockchain = global consensus system and IPNS = eventual consistency system.\r\n\r\n## Blockchain\r\n### Before Key Compromise\r\n* Revocation: Advertise a message to the world saying \"This key is compromised\"\r\n* Rotation: Advertise a message to the world saying \"The new key is K\"\r\n\r\n### After Key Compromise\r\n* Revocation:  If the system allows for key rotation then we're generally sad \ud83d\ude22 because the adversary rotated your key before you had a chance to revoke and now there's no way to signal the revocation.\r\n   * However, if there's no key rotation scheme then just advertise the same \"this key is compromised\" message as above.\r\n* Rotation: Generally no, because the key may have already been rotated by the adversary.\r\n  * However, any non-consensus solution could potentially work in a consensus environment since consensus systems can theoretically have a superset of the functionality of non-consensus systems (e.g. by not choosing not to care about the consensus).\r\n\r\n## IPNS\r\nEventually consistent systems' lack of total global order makes using the breakdown of \"before\" vs \"after\" generally difficult, since depending on the state of the network \"after\" can always look like \"before\".\r\n\r\n### Revocation\r\n* Change IPNS validation to reason about revocation\r\n  * Implicit Revoke: Ensure that two logically simultaneous writes result in an error (since IPNS currently assumes only one writer is active)\r\n    * E.G. There is an update key U that users can publish the next version of the DID to `IPNS[U] = DID'`. If there exists a record IPNS[U] then the current record is out of date. If there is exactly one update published then the update can be used, however if there is more than one update then flag that the key has been compromised => revocation.\r\n  * Having a multi-writer IPNS would allow the application layer to worry about the implicit revoke instead of the IPNS layer\r\n  * Explicit Revoke: An IPNS-record type with a flag that says \"Revoke me\", just as in the blockchain case\r\n    * Would also need validation to assert that no updates can happen after a revocation and that for logically simultaneous updates revoke always wins\r\n\r\nThe security tradeoff here with a blockchain is related to availability, if an attacker can eclipse or distort a users' view of IPNS to see only one update instead of two then they are successful. Given that this is a forking attack some of the standard solutions to mitigate forking attacks can be employed (e.g. Keybase uses user tracking of keys, but any sort of embedding DIDs into other data to increase the amount of the network that needs to be forked is useful)\r\n\r\n### Rotation\r\nAs with blockchains this is very difficult to figure out after the key has been compromised. Additionally, since before and after are harder to tell apart here, we have difficulty even before the key has been compromised.\r\n\r\nHowever, there are some options for key rotation that are viable and exist outside the IPNS/blockchain system.\r\n\r\n1. Rediscover the key. IPNS keys are long strings of characters that are difficult to remember, the user probably found them somehow. Maybe it was via a distributed social network, maybe a blog post, a centralized lookup service, utilizing search + verifiable credentials, or any other mechanism. Redo whatever you needed to do the first time.\r\n2. A single trusted authority. Maybe the it's the government, maybe it's my super secret key that I promise won't get compromised (I've seen this one proposed in various systems)\r\n3. Some social based identifier recovery. Like the single trusted authority a user pre-designates a group of trustees that are the only ones who can do key rotation and then the user asks them to do the rotation. This could be via some group signature or Shamir secret sharing scheme to allow m of n users/organizations that can collectively work to restore the user's identity\r\n\r\n### Rotation => Revocation, but that's not the whole story\r\n\r\nIt is worth noting that if we wanted to, we could use our solution to rotation to help with revocation. For example, if users were willing to use a single trusted authority for key rotation it could also be used for discovering/dealing with revocation. However, these schemes are generally not as easy to work with (or secure) as the revocation schemes so separating revocation from rotation is likely a good way to go."
    },
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/576775061",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/7#issuecomment-576775061",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/7",
        "id": 576775061,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU3Njc3NTA2MQ==",
        "user": {
            "login": "SmithSamuelM",
            "id": 602685,
            "node_id": "MDQ6VXNlcjYwMjY4NQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/602685?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SmithSamuelM",
            "html_url": "https://github.com/SmithSamuelM",
            "followers_url": "https://api.github.com/users/SmithSamuelM/followers",
            "following_url": "https://api.github.com/users/SmithSamuelM/following{/other_user}",
            "gists_url": "https://api.github.com/users/SmithSamuelM/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SmithSamuelM/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SmithSamuelM/subscriptions",
            "organizations_url": "https://api.github.com/users/SmithSamuelM/orgs",
            "repos_url": "https://api.github.com/users/SmithSamuelM/repos",
            "events_url": "https://api.github.com/users/SmithSamuelM/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SmithSamuelM/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-01-21T16:53:49Z",
        "updated_at": "2020-01-21T16:53:49Z",
        "author_association": "NONE",
        "body": "IPID/IPLD  and KERI are going to the same place but with different starting points. On want to make them recognize each other. I think it would be good for us to talk at length on how to do this."
    },
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/576775932",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/7#issuecomment-576775932",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/7",
        "id": 576775932,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU3Njc3NTkzMg==",
        "user": {
            "login": "SmithSamuelM",
            "id": 602685,
            "node_id": "MDQ6VXNlcjYwMjY4NQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/602685?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SmithSamuelM",
            "html_url": "https://github.com/SmithSamuelM",
            "followers_url": "https://api.github.com/users/SmithSamuelM/followers",
            "following_url": "https://api.github.com/users/SmithSamuelM/following{/other_user}",
            "gists_url": "https://api.github.com/users/SmithSamuelM/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SmithSamuelM/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SmithSamuelM/subscriptions",
            "organizations_url": "https://api.github.com/users/SmithSamuelM/orgs",
            "repos_url": "https://api.github.com/users/SmithSamuelM/repos",
            "events_url": "https://api.github.com/users/SmithSamuelM/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SmithSamuelM/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-01-21T16:55:46Z",
        "updated_at": "2020-01-21T16:55:46Z",
        "author_association": "NONE",
        "body": "Looks like this link only has two slides.  https://cloudflare-ipfs.com/ipfs/QmXFhzGYF27zvjNxbJNcfn226ZkJpRg2sQGRgK7JKdCKje/#/1\r\n"
    },
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/576783262",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/7#issuecomment-576783262",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/7",
        "id": 576783262,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU3Njc4MzI2Mg==",
        "user": {
            "login": "SmithSamuelM",
            "id": 602685,
            "node_id": "MDQ6VXNlcjYwMjY4NQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/602685?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SmithSamuelM",
            "html_url": "https://github.com/SmithSamuelM",
            "followers_url": "https://api.github.com/users/SmithSamuelM/followers",
            "following_url": "https://api.github.com/users/SmithSamuelM/following{/other_user}",
            "gists_url": "https://api.github.com/users/SmithSamuelM/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SmithSamuelM/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SmithSamuelM/subscriptions",
            "organizations_url": "https://api.github.com/users/SmithSamuelM/orgs",
            "repos_url": "https://api.github.com/users/SmithSamuelM/repos",
            "events_url": "https://api.github.com/users/SmithSamuelM/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SmithSamuelM/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-01-21T17:11:23Z",
        "updated_at": "2020-01-21T17:11:23Z",
        "author_association": "NONE",
        "body": "I have been using the term \"ambient verifiability\" to mean attestations are verifiable by anyone, anywhere, at anytime.  This implies end verifiability to the root-of-trust. Verifiability in this context means signatures not hashes (although a signature is a hash but not merely a hash). So a self-certifying identifier has a cryptographic  root-of-trust only the controller of that identifier is a verifiable source of truth. So an end-verifiable statement has a signature that can be verified as belonging to the authoritative source of truth.  In an ephemeral self-certifying identifier, there is no possibility of transfer of control  to a different public/private key pair so the incepting statement for the identifier is enough to verify to the root-of-trust that is that originating self-certifying public/private key pai.  A persistent identifier allows transfers of control. So end verifiability of the root-of-trust requires verifying the chain of transfers of control from the incepting public/private key pair to the current authoritative one. This is a signed chain which is also but not merely a content addressable chain. Signature are hashes so any signature can be used as a content address. The difference is the signature is tied a root of trust and therefore satisfies end verifiability. So a DAG of transfers of control statement has ambient verifiability."
    },
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/576783696",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/7#issuecomment-576783696",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/7",
        "id": 576783696,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU3Njc4MzY5Ng==",
        "user": {
            "login": "SmithSamuelM",
            "id": 602685,
            "node_id": "MDQ6VXNlcjYwMjY4NQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/602685?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SmithSamuelM",
            "html_url": "https://github.com/SmithSamuelM",
            "followers_url": "https://api.github.com/users/SmithSamuelM/followers",
            "following_url": "https://api.github.com/users/SmithSamuelM/following{/other_user}",
            "gists_url": "https://api.github.com/users/SmithSamuelM/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SmithSamuelM/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SmithSamuelM/subscriptions",
            "organizations_url": "https://api.github.com/users/SmithSamuelM/orgs",
            "repos_url": "https://api.github.com/users/SmithSamuelM/repos",
            "events_url": "https://api.github.com/users/SmithSamuelM/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SmithSamuelM/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-01-21T17:12:27Z",
        "updated_at": "2020-01-21T17:12:27Z",
        "author_association": "NONE",
        "body": "ambient verifiability is similar to the concept you espoused for IPLD in that it doesn't need anything else.\r\n"
    },
    {
        "url": "https://api.github.com/repos/jonnycrunch/ipid/issues/comments/577779787",
        "html_url": "https://github.com/jonnycrunch/ipid/issues/7#issuecomment-577779787",
        "issue_url": "https://api.github.com/repos/jonnycrunch/ipid/issues/7",
        "id": 577779787,
        "node_id": "MDEyOklzc3VlQ29tbWVudDU3Nzc3OTc4Nw==",
        "user": {
            "login": "SmithSamuelM",
            "id": 602685,
            "node_id": "MDQ6VXNlcjYwMjY4NQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/602685?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SmithSamuelM",
            "html_url": "https://github.com/SmithSamuelM",
            "followers_url": "https://api.github.com/users/SmithSamuelM/followers",
            "following_url": "https://api.github.com/users/SmithSamuelM/following{/other_user}",
            "gists_url": "https://api.github.com/users/SmithSamuelM/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SmithSamuelM/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SmithSamuelM/subscriptions",
            "organizations_url": "https://api.github.com/users/SmithSamuelM/orgs",
            "repos_url": "https://api.github.com/users/SmithSamuelM/repos",
            "events_url": "https://api.github.com/users/SmithSamuelM/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SmithSamuelM/received_events",
            "type": "User",
            "site_admin": false
        },
        "created_at": "2020-01-23T17:15:02Z",
        "updated_at": "2020-01-23T17:15:02Z",
        "author_association": "NONE",
        "body": "@jonnycrunch   Tagging you so you see my request to connect."
    }
]