[
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29819",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29819/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29819/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29819/events",
        "html_url": "https://github.com/apple/swift/pull/29819",
        "id": 564953838,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDkwOTIw",
        "number": 29819,
        "title": "build: add an option to optionally build tensorflow-swift-apis",
        "user": {
            "login": "compnerd",
            "id": 63311,
            "node_id": "MDQ6VXNlcjYzMzEx",
            "avatar_url": "https://avatars3.githubusercontent.com/u/63311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/compnerd",
            "html_url": "https://github.com/compnerd",
            "followers_url": "https://api.github.com/users/compnerd/followers",
            "following_url": "https://api.github.com/users/compnerd/following{/other_user}",
            "gists_url": "https://api.github.com/users/compnerd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/compnerd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/compnerd/subscriptions",
            "organizations_url": "https://api.github.com/users/compnerd/orgs",
            "repos_url": "https://api.github.com/users/compnerd/repos",
            "events_url": "https://api.github.com/users/compnerd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/compnerd/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-02-13T21:14:43Z",
        "updated_at": "2020-02-13T21:41:41Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29819",
            "html_url": "https://github.com/apple/swift/pull/29819",
            "diff_url": "https://github.com/apple/swift/pull/29819.diff",
            "patch_url": "https://github.com/apple/swift/pull/29819.patch"
        },
        "body": "Now that the autodifferentiation support is being upstreamed, add an\r\noption to enable building the TensorFlow swift-apis package optionally.\r\nThis enables easier development cycles for the engineers working on it.\r\n\r\n<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves SR-NNNN.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29818",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29818/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29818/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29818/events",
        "html_url": "https://github.com/apple/swift/pull/29818",
        "id": 564952795,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDkwMDUx",
        "number": 29818,
        "title": "[CodeCompletion] Update for SE-0249 KeyPath as functions",
        "user": {
            "login": "rintaro",
            "id": 142081,
            "node_id": "MDQ6VXNlcjE0MjA4MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/142081?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rintaro",
            "html_url": "https://github.com/rintaro",
            "followers_url": "https://api.github.com/users/rintaro/followers",
            "following_url": "https://api.github.com/users/rintaro/following{/other_user}",
            "gists_url": "https://api.github.com/users/rintaro/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rintaro/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rintaro/subscriptions",
            "organizations_url": "https://api.github.com/users/rintaro/orgs",
            "repos_url": "https://api.github.com/users/rintaro/repos",
            "events_url": "https://api.github.com/users/rintaro/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rintaro/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-13T21:12:37Z",
        "updated_at": "2020-02-13T21:15:17Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29818",
            "html_url": "https://github.com/apple/swift/pull/29818",
            "diff_url": "https://github.com/apple/swift/pull/29818.diff",
            "patch_url": "https://github.com/apple/swift/pull/29818.patch"
        },
        "body": "If the context type is a function type that receives one argument, infer the key path expressions root type from the context.\r\n\r\nhttps://bugs.swift.org/browse/SR-12144\r\nrdar://problem/59302416\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29817",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29817/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29817/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29817/events",
        "html_url": "https://github.com/apple/swift/pull/29817",
        "id": 564951947,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDg5MzQ2",
        "number": 29817,
        "title": "[Constraint System] Move bindVariablesInPattern into the constraint system",
        "user": {
            "login": "DougGregor",
            "id": 989428,
            "node_id": "MDQ6VXNlcjk4OTQyOA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/989428?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/DougGregor",
            "html_url": "https://github.com/DougGregor",
            "followers_url": "https://api.github.com/users/DougGregor/followers",
            "following_url": "https://api.github.com/users/DougGregor/following{/other_user}",
            "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions",
            "organizations_url": "https://api.github.com/users/DougGregor/orgs",
            "repos_url": "https://api.github.com/users/DougGregor/repos",
            "events_url": "https://api.github.com/users/DougGregor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/DougGregor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-13T21:10:51Z",
        "updated_at": "2020-02-13T21:10:59Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29817",
            "html_url": "https://github.com/apple/swift/pull/29817",
            "diff_url": "https://github.com/apple/swift/pull/29817.diff",
            "patch_url": "https://github.com/apple/swift/pull/29817.patch"
        },
        "body": "This general notion of wiring up the types of variables that occur\r\nwithin a pattern to the types in the produced pattern type is useful\r\noutside of function builders, too.\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29816",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29816/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29816/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29816/events",
        "html_url": "https://github.com/apple/swift/pull/29816",
        "id": 564913684,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDU3NTQ0",
        "number": 29816,
        "title": "[CodeCompletion] Fix a crash in context type analysis",
        "user": {
            "login": "rintaro",
            "id": 142081,
            "node_id": "MDQ6VXNlcjE0MjA4MQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/142081?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rintaro",
            "html_url": "https://github.com/rintaro",
            "followers_url": "https://api.github.com/users/rintaro/followers",
            "following_url": "https://api.github.com/users/rintaro/following{/other_user}",
            "gists_url": "https://api.github.com/users/rintaro/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rintaro/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rintaro/subscriptions",
            "organizations_url": "https://api.github.com/users/rintaro/orgs",
            "repos_url": "https://api.github.com/users/rintaro/repos",
            "events_url": "https://api.github.com/users/rintaro/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rintaro/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-13T19:51:56Z",
        "updated_at": "2020-02-13T19:54:01Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29816",
            "html_url": "https://github.com/apple/swift/pull/29816",
            "diff_url": "https://github.com/apple/swift/pull/29816.diff",
            "patch_url": "https://github.com/apple/swift/pull/29816.patch"
        },
        "body": "`IfExpr` (ternary expression) does not have the condition part until sequence folding. Add a simple guard to avoid a crash.\r\n\r\nI haven't been able to find a reproducer for this.\r\n\r\nrdar://problem/59344203\r\n\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29815",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29815/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29815/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29815/events",
        "html_url": "https://github.com/apple/swift/pull/29815",
        "id": 564909817,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDU0Mjkx",
        "number": 29815,
        "title": "[DNM] Try uncommenting `VectorProtocol` operator definitions.",
        "user": {
            "login": "dan-zheng",
            "id": 5590046,
            "node_id": "MDQ6VXNlcjU1OTAwNDY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5590046?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dan-zheng",
            "html_url": "https://github.com/dan-zheng",
            "followers_url": "https://api.github.com/users/dan-zheng/followers",
            "following_url": "https://api.github.com/users/dan-zheng/following{/other_user}",
            "gists_url": "https://api.github.com/users/dan-zheng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dan-zheng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dan-zheng/subscriptions",
            "organizations_url": "https://api.github.com/users/dan-zheng/orgs",
            "repos_url": "https://api.github.com/users/dan-zheng/repos",
            "events_url": "https://api.github.com/users/dan-zheng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dan-zheng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 955546636,
                "node_id": "MDU6TGFiZWw5NTU1NDY2MzY=",
                "url": "https://api.github.com/repos/apple/swift/labels/tensorflow",
                "name": "tensorflow",
                "color": "EF6C00",
                "default": false,
                "description": "This is for \"tensorflow\" branch PRs."
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-13T19:44:12Z",
        "updated_at": "2020-02-13T19:44:38Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29815",
            "html_url": "https://github.com/apple/swift/pull/29815",
            "diff_url": "https://github.com/apple/swift/pull/29815.diff",
            "patch_url": "https://github.com/apple/swift/pull/29815.patch"
        },
        "body": "Try uncommenting `VectorProtocol` operators to see if they break the stdlib:\r\n- `VectorProtocol.+` (two variants)\r\n- `VectorProtocol.+=`\r\n- `VectorProtocol.-` (two variants)\r\n- `VectorProtocol.-=`\r\n- `VectorProtocol.*` (two variants)\r\n- `VectorProtocol.*=`\r\n\r\nIf they do break the stdlib, we should consider publicizing/removing [internal\r\noperator definitions from tensorflow/swift-apis](https://github.com/tensorflow/swift-apis/blob/f2acd6c4d1f14e7d0c1f9579dcc3631990e32602/Sources/TensorFlow/Operators/Math.swift#L223-L253), since it's surprising that the\r\noperators aren't available to library users."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29813",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29813/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29813/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29813/events",
        "html_url": "https://github.com/apple/swift/pull/29813",
        "id": 564874571,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDI1MjUx",
        "number": 29813,
        "title": "[GSB] Map invalid subject type to error type after resolving it",
        "user": {
            "login": "theblixguy",
            "id": 1307667,
            "node_id": "MDQ6VXNlcjEzMDc2Njc=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1307667?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/theblixguy",
            "html_url": "https://github.com/theblixguy",
            "followers_url": "https://api.github.com/users/theblixguy/followers",
            "following_url": "https://api.github.com/users/theblixguy/following{/other_user}",
            "gists_url": "https://api.github.com/users/theblixguy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/theblixguy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/theblixguy/subscriptions",
            "organizations_url": "https://api.github.com/users/theblixguy/orgs",
            "repos_url": "https://api.github.com/users/theblixguy/repos",
            "events_url": "https://api.github.com/users/theblixguy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/theblixguy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-13T18:36:09Z",
        "updated_at": "2020-02-13T20:41:25Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29813",
            "html_url": "https://github.com/apple/swift/pull/29813",
            "diff_url": "https://github.com/apple/swift/pull/29813.diff",
            "patch_url": "https://github.com/apple/swift/pull/29813.patch"
        },
        "body": "In https://github.com/apple/swift/pull/29491, we mapped an invalid subject type to an error type, but only mapping it if the subject type isn't a dependent member type is not enough - it's possible we have a dependent member type initially, but resolving it leads to some other type. So, we should delay the mapping instead.  Otherwise, we could crash in scenarios like:\r\n\r\n```swift\r\nprotocol P {\r\n  associatedtype Assoc\r\n}\r\n\r\nenum SomeEnum {}\r\n\r\nprotocol Q: P where Assoc == SomeEnum {\r\n  associatedtype Assoc: SomeEnum // crash\r\n}\r\n```\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29812",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29812/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29812/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29812/events",
        "html_url": "https://github.com/apple/swift/pull/29812",
        "id": 564870815,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDIyMzM2",
        "number": 29812,
        "title": "Eliminate copy_addr for in_guaranteed captures in no escape closures",
        "user": {
            "login": "meg-gupta",
            "id": 20177294,
            "node_id": "MDQ6VXNlcjIwMTc3Mjk0",
            "avatar_url": "https://avatars0.githubusercontent.com/u/20177294?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/meg-gupta",
            "html_url": "https://github.com/meg-gupta",
            "followers_url": "https://api.github.com/users/meg-gupta/followers",
            "following_url": "https://api.github.com/users/meg-gupta/following{/other_user}",
            "gists_url": "https://api.github.com/users/meg-gupta/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/meg-gupta/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/meg-gupta/subscriptions",
            "organizations_url": "https://api.github.com/users/meg-gupta/orgs",
            "repos_url": "https://api.github.com/users/meg-gupta/repos",
            "events_url": "https://api.github.com/users/meg-gupta/events{/privacy}",
            "received_events_url": "https://api.github.com/users/meg-gupta/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 8,
        "created_at": "2020-02-13T18:28:37Z",
        "updated_at": "2020-02-13T21:15:02Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29812",
            "html_url": "https://github.com/apple/swift/pull/29812",
            "diff_url": "https://github.com/apple/swift/pull/29812.diff",
            "patch_url": "https://github.com/apple/swift/pull/29812.patch"
        },
        "body": "Includes these changes : \r\n- Frontend change to use in_guaranteed instead of inout_aliasable for let captures in no escape closures\r\n- Fix in ClosureLifetimeFixup to not insert destroys for in_guaranteed args\r\n- Handle partial_apply and mark_dependence in TempRVO to optimize copy_addr \r\n- IRGen changes were also needed to support in_guaranteed args\r\n\r\nrdar://58459539"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29810",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29810/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29810/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29810/events",
        "html_url": "https://github.com/apple/swift/pull/29810",
        "id": 564843063,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTk5ODg0",
        "number": 29810,
        "title": "SPI support in Swift",
        "user": {
            "login": "xymus",
            "id": 208057,
            "node_id": "MDQ6VXNlcjIwODA1Nw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/208057?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xymus",
            "html_url": "https://github.com/xymus",
            "followers_url": "https://api.github.com/users/xymus/followers",
            "following_url": "https://api.github.com/users/xymus/following{/other_user}",
            "gists_url": "https://api.github.com/users/xymus/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xymus/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xymus/subscriptions",
            "organizations_url": "https://api.github.com/users/xymus/orgs",
            "repos_url": "https://api.github.com/users/xymus/repos",
            "events_url": "https://api.github.com/users/xymus/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xymus/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2020-02-13T17:34:58Z",
        "updated_at": "2020-02-13T21:44:04Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29810",
            "html_url": "https://github.com/apple/swift/pull/29810",
            "diff_url": "https://github.com/apple/swift/pull/29810.diff",
            "patch_url": "https://github.com/apple/swift/pull/29810.patch"
        },
        "body": "Add experimental support to define System Programming Interfaces (SPI) in Swift. An SPI is a kind of API targetted at specific clients and that is hidden by default. In practice, a Swift library developer could mark decls as SPI if they are reserved for a closely-related library or client, or if they are experimental and may be modified without warning in the next version of the library.\r\n\r\nDefinition and importation of SPIs is declared with the `@_spi` attribute. A public decl marked with `@_spi(SPIName)` is usable only from within the same module and by clients that imports the module with the compatible `@_spi(SPIName)` attribute.\r\n\r\nIn the following example, `MyLib` defines a function under the SPI named `Experimental`.\r\n\r\n~~~\r\n// MyLib\r\n@_spi(Experimental) public func newExperimentalService() {}\r\n~~~\r\n\r\nThe SPI function `newExperimentalService` is hidden from clients that imports the module normally.\r\n\r\n~~~\r\nimport MyLib\r\n\r\nnewExperimentalService() // Error: use of unresolved identifier\r\n~~~\r\n\r\nHowever, clients that imports `MyLib` and its SPI `Experimental` have access to all decls with the attribute `@_spi(Experimental)` declared in `MyLib`. This is a way for the library clients to opt-in using the SPI.\r\n\r\n~~~\r\n@_spi(Experimental) import MyLib\r\n\r\nnewExperimentalService() // Ok\r\n~~~\r\n\r\nThe developers of a binary framework can restrict access to its SPIs by distributing the new private Swift textual interface file (.private.swiftinterface) only to the authorized clients. This file contains both the public API and all SPIs, it is generated next to the public textual interface (.swiftinterface). The compiler prefers to load the private textual interface and falls back on the public one if the private is not found. Generating the private file is requested by the option `-emit-private-module-interface-path`.\r\n\r\n---\r\n\r\nThis is a first partial support for SPI in Swift. A few things still need work, including the diagnostics that is not always aware of the SPI restriction and reports SPI decls as being internal.\r\n\r\nWe might want to find a better syntax for SPI attributes that can hold a list of names. The current underlying implementation already supports a list of name per attribute but it\u2019s not reflected in the syntax. "
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29807",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29807/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29807/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29807/events",
        "html_url": "https://github.com/apple/swift/pull/29807",
        "id": 564790160,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTU2Mzc2",
        "number": 29807,
        "title": "build: shuffle `add_swift_target_library` (NFC)",
        "user": {
            "login": "compnerd",
            "id": 63311,
            "node_id": "MDQ6VXNlcjYzMzEx",
            "avatar_url": "https://avatars3.githubusercontent.com/u/63311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/compnerd",
            "html_url": "https://github.com/compnerd",
            "followers_url": "https://api.github.com/users/compnerd/followers",
            "following_url": "https://api.github.com/users/compnerd/following{/other_user}",
            "gists_url": "https://api.github.com/users/compnerd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/compnerd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/compnerd/subscriptions",
            "organizations_url": "https://api.github.com/users/compnerd/orgs",
            "repos_url": "https://api.github.com/users/compnerd/repos",
            "events_url": "https://api.github.com/users/compnerd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/compnerd/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2020-02-13T16:08:55Z",
        "updated_at": "2020-02-13T18:56:23Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29807",
            "html_url": "https://github.com/apple/swift/pull/29807",
            "diff_url": "https://github.com/apple/swift/pull/29807.diff",
            "patch_url": "https://github.com/apple/swift/pull/29807.patch"
        },
        "body": "This moves the `add_swift_target_library` into the stdlib level cmake\r\nmodule directory.  This is used strictly for building the standard\r\nlibrary bits.\r\n\r\n<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves SR-NNNN.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29804",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29804/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29804/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29804/events",
        "html_url": "https://github.com/apple/swift/pull/29804",
        "id": 564420908,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjU0MjY5",
        "number": 29804,
        "title": "build: add more paths for LLDB tests",
        "user": {
            "login": "compnerd",
            "id": 63311,
            "node_id": "MDQ6VXNlcjYzMzEx",
            "avatar_url": "https://avatars3.githubusercontent.com/u/63311?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/compnerd",
            "html_url": "https://github.com/compnerd",
            "followers_url": "https://api.github.com/users/compnerd/followers",
            "following_url": "https://api.github.com/users/compnerd/following{/other_user}",
            "gists_url": "https://api.github.com/users/compnerd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/compnerd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/compnerd/subscriptions",
            "organizations_url": "https://api.github.com/users/compnerd/orgs",
            "repos_url": "https://api.github.com/users/compnerd/repos",
            "events_url": "https://api.github.com/users/compnerd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/compnerd/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-13T03:46:34Z",
        "updated_at": "2020-02-13T03:46:43Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29804",
            "html_url": "https://github.com/apple/swift/pull/29804",
            "diff_url": "https://github.com/apple/swift/pull/29804.diff",
            "patch_url": "https://github.com/apple/swift/pull/29804.patch"
        },
        "body": "Alter the test paths for LLDB to enable restructuring the Foundation\r\nsources to be easier for new developers.\r\n\r\n<!-- What's in this pull request? -->\r\nReplace this paragraph with a description of your changes and rationale. Provide links to external references/discussions if appropriate.\r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves SR-NNNN.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29799",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29799/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29799/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29799/events",
        "html_url": "https://github.com/apple/swift/pull/29799",
        "id": 564339706,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc0NTg5NTU4",
        "number": 29799,
        "title": "Fixing build breaks for master-next against latest llvm.org.",
        "user": {
            "login": "plotfi",
            "id": 34139736,
            "node_id": "MDQ6VXNlcjM0MTM5NzM2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/34139736?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/plotfi",
            "html_url": "https://github.com/plotfi",
            "followers_url": "https://api.github.com/users/plotfi/followers",
            "following_url": "https://api.github.com/users/plotfi/following{/other_user}",
            "gists_url": "https://api.github.com/users/plotfi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/plotfi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/plotfi/subscriptions",
            "organizations_url": "https://api.github.com/users/plotfi/orgs",
            "repos_url": "https://api.github.com/users/plotfi/repos",
            "events_url": "https://api.github.com/users/plotfi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/plotfi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-12T23:21:04Z",
        "updated_at": "2020-02-13T21:26:07Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29799",
            "html_url": "https://github.com/apple/swift/pull/29799",
            "diff_url": "https://github.com/apple/swift/pull/29799.diff",
            "patch_url": "https://github.com/apple/swift/pull/29799.patch"
        },
        "body": "There were changes due to the StringRef to std::string conversion, changes in the Debug Info DIBuilder::createModule API, and a drop in the using for PointerUnion4 since PointerUnion is now a variadic template and will do in its place."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29780",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29780/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29780/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29780/events",
        "html_url": "https://github.com/apple/swift/pull/29780",
        "id": 563738786,
        "node_id": "MDExOlB1bGxSZXF1ZXN0Mzc0MDk1NzI0",
        "number": 29780,
        "title": "NFC for SR-12085 Clean up TypeCheckType so it never returns Type().",
        "user": {
            "login": "dfsweeney",
            "id": 93316,
            "node_id": "MDQ6VXNlcjkzMzE2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/93316?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dfsweeney",
            "html_url": "https://github.com/dfsweeney",
            "followers_url": "https://api.github.com/users/dfsweeney/followers",
            "following_url": "https://api.github.com/users/dfsweeney/following{/other_user}",
            "gists_url": "https://api.github.com/users/dfsweeney/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dfsweeney/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dfsweeney/subscriptions",
            "organizations_url": "https://api.github.com/users/dfsweeney/orgs",
            "repos_url": "https://api.github.com/users/dfsweeney/repos",
            "events_url": "https://api.github.com/users/dfsweeney/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dfsweeney/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-02-12T04:09:29Z",
        "updated_at": "2020-02-13T02:22:44Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29780",
            "html_url": "https://github.com/apple/swift/pull/29780",
            "diff_url": "https://github.com/apple/swift/pull/29780.diff",
            "patch_url": "https://github.com/apple/swift/pull/29780.patch"
        },
        "body": "Added ErrorType::get(Context) to TypeCheckType.cpp and clients.\r\nReplaced assertions checking for null pointers with type->hasError() checks.\r\nNote that getDynamicBridgedThroughObjCClass can still return null pointers so\r\nthe assert checks are still there for callers.\r\n\r\n<!-- What's in this pull request? -->\r\nNo functional change. This cleans up some instances of return Type() in TypeCheckType.cpp. There are a lot of other instances of return Type() but this gets the 15 of them in TypeCheckType.cpp plus a few others in direct clients to the functions in TypeCheckType.cpp that returned Type(). @CodaFi helped me with this. \r\n\r\nThis is my first one so I'm not sure I'm doing it right. Running all the validation tests gives me:\r\n\r\n    Expected Passes    : 6490\r\n    Expected Failures  : 5\r\n    Unsupported Tests  : 100\r\n    Unexpected Failures: 205\r\n\r\nboth before and after this change when I build with ninja. A lot of the validation test failures are in stdlib--I am not sure why.\r\n\r\nThe two validation test failures in Sema are:\r\n\r\n    Swift(macosx-x86_64) :: Sema/type_checker_perf/fast/rdar42672946.swift\r\n    Swift(macosx-x86_64) :: Sema/type_checker_perf/slow/rdar23327871.swift.gyb\r\n   \r\nI checked out swift-DEVELOPMENT-SNAPSHOT-2020-02-08-a and then put the commit directly on top of that. I hope that is OK--I tried a couple of things but that seemed to build clean. \r\n\r\n<!-- If this pull request resolves any bugs in the Swift bug tracker, provide a link: -->\r\nResolves SR-12085.\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29771",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29771/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29771/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29771/events",
        "html_url": "https://github.com/apple/swift/pull/29771",
        "id": 563597200,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzczOTcyMTMz",
        "number": 29771,
        "title": "[AutoDiff] Relax `@differentiable` requirement for protocol witnesses.",
        "user": {
            "login": "dan-zheng",
            "id": 5590046,
            "node_id": "MDQ6VXNlcjU1OTAwNDY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5590046?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dan-zheng",
            "html_url": "https://github.com/dan-zheng",
            "followers_url": "https://api.github.com/users/dan-zheng/followers",
            "following_url": "https://api.github.com/users/dan-zheng/following{/other_user}",
            "gists_url": "https://api.github.com/users/dan-zheng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dan-zheng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dan-zheng/subscriptions",
            "organizations_url": "https://api.github.com/users/dan-zheng/orgs",
            "repos_url": "https://api.github.com/users/dan-zheng/repos",
            "events_url": "https://api.github.com/users/dan-zheng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dan-zheng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 955546636,
                "node_id": "MDU6TGFiZWw5NTU1NDY2MzY=",
                "url": "https://api.github.com/repos/apple/swift/labels/tensorflow",
                "name": "tensorflow",
                "color": "EF6C00",
                "default": false,
                "description": "This is for \"tensorflow\" branch PRs."
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-02-11T23:23:24Z",
        "updated_at": "2020-02-12T13:58:48Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29771",
            "html_url": "https://github.com/apple/swift/pull/29771",
            "diff_url": "https://github.com/apple/swift/pull/29771.diff",
            "patch_url": "https://github.com/apple/swift/pull/29771.patch"
        },
        "body": "Previously, all witnesses of a `@differentiable` protocol requirement were\r\nrequired to have the same attribute (or one with superset parameter indices).\r\n\r\nHowever, this leads to many annotations on witnesses and is not ideal for\r\nusability. `@differentiable` attributes are really only significant on\r\npublic witnesses, so that they are clearly `@differentiable` at a glance (in\r\nsource code, interface files, and API documentation), without looking through\r\nprotocol conformance hierarchies.\r\n\r\nNow, only *public* witnesses of `@differentiable` protocol requirements are\r\nrequired to have the same attribute (or one with superset parameter indices).\r\nFor less-visible witnesses, an implicit `@differentiable` attribute is created\r\nwith the same configuration as the requirement's.\r\n\r\nResolves TF-1117.\r\n\r\n---\r\n\r\nThis usability improvement was discussed during the\r\n[2020-01-17 Swift for TensorFlow open design review](https://docs.google.com/document/d/1Fm56p5rV1t2Euh6WLtBFKGqI43ozC3EIjReyLk-LCLU/edit#bookmark=id.rrfb0uhvuzry).\r\nWe agreed that it's a good idea!\r\n\r\nTodo: upstream changes to `master`.\r\n\r\n---\r\n\r\nExample:\r\n```swift\r\npublic protocol Layer: Differentiable {\r\n  associatedtype Input: Differentiable\r\n  associatedtype Output: Differentiable\r\n  @differentiable(wrt: (self, input))\r\n  func callAsFunction(_ input: Input) -> Output\r\n}\r\n\r\n// Internal conforming type.\r\nstruct DummyInternalLayer: Layer {\r\n  func callAsFunction(_ input: Float) -> Float {\r\n    return input\r\n  }\r\n}\r\n```\r\n\r\nBefore (misleading diagnostic due to TF-1014):\r\n```console\r\nlayer.swift:9:8: error: type 'DummyInternalLayer' does not conform to protocol 'Layer'\r\nstruct DummyInternalLayer: Layer {\r\n       ^\r\nlayer.swift:2:18: note: protocol requires nested type 'Input'; do you want to add it?\r\n  associatedtype Input: Differentiable\r\n                 ^\r\nlayer.swift:3:18: note: protocol requires nested type 'Output'; do you want to add it?\r\n  associatedtype Output: Differentiable\r\n                 ^\r\n```\r\n\r\nAfter: no error.\r\n\r\nAn implicit `@differentiable` attribute is created for `DummyInternalLayer.callAsFunction`:\r\n```console\r\n$ swiftc -print-ast layer.swift\r\n...\r\n\r\ninternal struct DummyInternalLayer : Layer {\r\n  @differentiable(wrt: (self, input))\r\n  internal func callAsFunction(_ input: Float) -> Float\r\n  ...\r\n}\r\n```"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29766",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29766/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29766/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29766/events",
        "html_url": "https://github.com/apple/swift/pull/29766",
        "id": 563529220,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzczOTE4OTA2",
        "number": 29766,
        "title": "DNM: Add type layout based IRGen for value witnesses and replace outlined value functions by value witness calls",
        "user": {
            "login": "aschwaighofer",
            "id": 15268288,
            "node_id": "MDQ6VXNlcjE1MjY4Mjg4",
            "avatar_url": "https://avatars2.githubusercontent.com/u/15268288?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aschwaighofer",
            "html_url": "https://github.com/aschwaighofer",
            "followers_url": "https://api.github.com/users/aschwaighofer/followers",
            "following_url": "https://api.github.com/users/aschwaighofer/following{/other_user}",
            "gists_url": "https://api.github.com/users/aschwaighofer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aschwaighofer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aschwaighofer/subscriptions",
            "organizations_url": "https://api.github.com/users/aschwaighofer/orgs",
            "repos_url": "https://api.github.com/users/aschwaighofer/repos",
            "events_url": "https://api.github.com/users/aschwaighofer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aschwaighofer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 15,
        "created_at": "2020-02-11T22:22:05Z",
        "updated_at": "2020-02-13T21:38:21Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29766",
            "html_url": "https://github.com/apple/swift/pull/29766",
            "diff_url": "https://github.com/apple/swift/pull/29766.diff",
            "patch_url": "https://github.com/apple/swift/pull/29766.patch"
        },
        "body": "* Value witnesses for frozen generic types with sub fields will\r\ninstantiate generic metadata for those sub fields to compute field\r\noffsets. This is a source of slow down.\r\nThis patch instead computes type layouts that can be used to compute the\r\nfield offsets recursively.\r\nValue witnesses are implemented in terms of those type layouts and will\r\nno longer instantiate generic metadata (except for resilient types) for\r\nfields.\r\nThis will allow for replacing outlined value functions by the witness\r\nimplementation without to much overhead in a follow up patch.\r\nThis behavior is conditionalized on a flag in IRGenOptions that is\r\nturned off for now.\r\n\r\n* Use value witness instead of outlined value functions\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29765",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29765/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29765/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29765/events",
        "html_url": "https://github.com/apple/swift/pull/29765",
        "id": 563528797,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzczOTE4Njc4",
        "number": 29765,
        "title": "[AutoDiff upstream] Add `differentiability_witness_function` instruction.",
        "user": {
            "login": "dan-zheng",
            "id": 5590046,
            "node_id": "MDQ6VXNlcjU1OTAwNDY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5590046?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dan-zheng",
            "html_url": "https://github.com/dan-zheng",
            "followers_url": "https://api.github.com/users/dan-zheng/followers",
            "following_url": "https://api.github.com/users/dan-zheng/following{/other_user}",
            "gists_url": "https://api.github.com/users/dan-zheng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dan-zheng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dan-zheng/subscriptions",
            "organizations_url": "https://api.github.com/users/dan-zheng/orgs",
            "repos_url": "https://api.github.com/users/dan-zheng/repos",
            "events_url": "https://api.github.com/users/dan-zheng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dan-zheng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2020-02-11T22:21:45Z",
        "updated_at": "2020-02-13T06:26:07Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29765",
            "html_url": "https://github.com/apple/swift/pull/29765",
            "diff_url": "https://github.com/apple/swift/pull/29765.diff",
            "patch_url": "https://github.com/apple/swift/pull/29765.patch"
        },
        "body": "The `differentiability_witness_function` instruction looks up a\r\ndifferentiability witness function (JVP, VJP, or transpose) for a referenced\r\nfunction via SIL differentiability witnesses.\r\n\r\n```swift\r\n// Example differentiability witnesses.\r\nsil_differentiability_witness [parameters 0] [results 0] @foo : $@convention(thin) (Float, Float, Float) -> Float\r\n\r\nsil_differentiability_witness [parameters 0 1] [results 0] <T where T : Differentiable, T == T.TangentVector> @generic : $@convention(thin) <T> (@in_guaranteed T, Float) -> @out T\r\n\r\n// Example `differentiability_witness_function` instructions.\r\nsil @test : $@convention(thin) () -> () {\r\nbb0:\r\n  %foo_jvp_wrt_0 = differentiability_witness_function [jvp] [parameters 0] [results 0] @foo : $@convention(thin) (Float, Float, Float) -> Float\r\n  %generic_vjp_wrt_0_1 = differentiability_witness_function [vjp] [parameters 0 1] [results 0] <T where T: Differentiable, T == T.TangentVector> @generic : $@convention(thin) <T> (@in_guaranteed T, Float) -> @out T\r\n  return undef : $()\r\n}\r\n```\r\n\r\nAdd round-trip parsing/serialization and IRGen tests.\r\n\r\nNotes:\r\n- Differentiability witnesses for linear functions require more support.\r\n  `differentiability_witness_function [transpose]` instructions do not yet\r\n  have IRGen.\r\n- Nothing currently generates `differentiability_witness_function` instructions.\r\n  The differentiation transform does, but it hasn't been upstreamed yet.\r\n\r\nResolves TF-1141."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29752",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29752/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29752/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29752/events",
        "html_url": "https://github.com/apple/swift/pull/29752",
        "id": 562998904,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzczNDkxMDg1",
        "number": 29752,
        "title": "[docs] Add a 'Memory usage' section to DevelopmentTips.md",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-11T06:16:34Z",
        "updated_at": "2020-02-11T06:16:54Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29752",
            "html_url": "https://github.com/apple/swift/pull/29752",
            "diff_url": "https://github.com/apple/swift/pull/29752.diff",
            "patch_url": "https://github.com/apple/swift/pull/29752.patch"
        },
        "body": "This PR adds a 'Memory usage' section to docs/DevelopmentTips.md (as discussed in PR #29361)."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29751",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29751/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29751/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29751/events",
        "html_url": "https://github.com/apple/swift/pull/29751",
        "id": 562928519,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzczNDM2NjI1",
        "number": 29751,
        "title": "PrintAsObjc: emit auxiliary private and public headers associated with an internal header",
        "user": {
            "login": "nkcsgexi",
            "id": 2191945,
            "node_id": "MDQ6VXNlcjIxOTE5NDU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nkcsgexi",
            "html_url": "https://github.com/nkcsgexi",
            "followers_url": "https://api.github.com/users/nkcsgexi/followers",
            "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
            "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
            "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
            "repos_url": "https://api.github.com/users/nkcsgexi/repos",
            "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-11T01:37:55Z",
        "updated_at": "2020-02-12T00:24:33Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29751",
            "html_url": "https://github.com/apple/swift/pull/29751",
            "diff_url": "https://github.com/apple/swift/pull/29751.diff",
            "patch_url": "https://github.com/apple/swift/pull/29751.patch"
        },
        "body": "The compiler generates the objc header without always excluding internal\r\ntypes from Swift code. After installing the header, these internal\r\ntypes could lead to build failures. This patch breaks down\r\nthe printed objc header into three separate and mutually exclusive ones:\r\ninternal, private, and public headers. The build system should only install\r\nthe public and private header for external clients' use.\r\n\r\nrdar://59333073"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29745",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29745/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29745/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29745/events",
        "html_url": "https://github.com/apple/swift/pull/29745",
        "id": 562824833,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzczMzUwNzA5",
        "number": 29745,
        "title": "[Parser] Add support for multiple trailing closures syntax",
        "user": {
            "login": "xedin",
            "id": 21240,
            "node_id": "MDQ6VXNlcjIxMjQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/21240?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xedin",
            "html_url": "https://github.com/xedin",
            "followers_url": "https://api.github.com/users/xedin/followers",
            "following_url": "https://api.github.com/users/xedin/following{/other_user}",
            "gists_url": "https://api.github.com/users/xedin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xedin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xedin/subscriptions",
            "organizations_url": "https://api.github.com/users/xedin/orgs",
            "repos_url": "https://api.github.com/users/xedin/repos",
            "events_url": "https://api.github.com/users/xedin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xedin/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 295491817,
                "node_id": "MDU6TGFiZWwyOTU0OTE4MTc=",
                "url": "https://api.github.com/repos/apple/swift/labels/swift-evolution-pending-discussion",
                "name": "swift-evolution-pending-discussion",
                "color": "d4c5f9",
                "default": false,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-10T21:01:08Z",
        "updated_at": "2020-02-11T19:53:03Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29745",
            "html_url": "https://github.com/apple/swift/pull/29745",
            "diff_url": "https://github.com/apple/swift/pull/29745.diff",
            "patch_url": "https://github.com/apple/swift/pull/29745.patch"
        },
        "body": "Accept trailing closures in following form:\r\n\r\n```swift\r\nfoo {\r\n  <label-1>: { ... }\r\n  <label-2>: { ... }\r\n  ...\r\n  <label-N>: { ... }\r\n}\r\n```\r\n\r\nConsider each labeled block to be a regular argument to a call or subscript,\r\nso the result of parser looks like this:\r\n\r\n```swift\r\nfoo(<label-1>: { ... }, ..., <label-N>: { ... })\r\n```\r\n\r\nNote that in this example parens surrounding parameter list are implicit\r\nand for the cases when they are given by the user e.g.\r\n\r\n```swift\r\nfoo(bar) {\r\n  <label-1>: { ... }\r\n  ...\r\n}\r\n```\r\n\r\nlocation of `)` is changed to a location of `}` to make sure that call\r\n\"covers\" all of the transformed arguments and parser result would look\r\nlike this:\r\n\r\n```swift\r\nfoo(bar,\r\n  <label-1>: { ... }\r\n)\r\n```\r\n\r\nResolves: rdar://problem/59203764\r\n\r\n<!--\r\nBefore merging this pull request, you must run the Swift continuous integration tests.\r\nFor information about triggering CI builds via @swift-ci, see:\r\nhttps://github.com/apple/swift/blob/master/docs/ContinuousIntegration.md#swift-ci\r\n\r\nThank you for your contribution to Swift!\r\n-->\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29741",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29741/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29741/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29741/events",
        "html_url": "https://github.com/apple/swift/pull/29741",
        "id": 562726459,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzczMjcwNTA3",
        "number": 29741,
        "title": "Move PersistentParserState onto SourceFile",
        "user": {
            "login": "hamishknight",
            "id": 14794099,
            "node_id": "MDQ6VXNlcjE0Nzk0MDk5",
            "avatar_url": "https://avatars0.githubusercontent.com/u/14794099?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hamishknight",
            "html_url": "https://github.com/hamishknight",
            "followers_url": "https://api.github.com/users/hamishknight/followers",
            "following_url": "https://api.github.com/users/hamishknight/following{/other_user}",
            "gists_url": "https://api.github.com/users/hamishknight/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hamishknight/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hamishknight/subscriptions",
            "organizations_url": "https://api.github.com/users/hamishknight/orgs",
            "repos_url": "https://api.github.com/users/hamishknight/repos",
            "events_url": "https://api.github.com/users/hamishknight/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hamishknight/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2020-02-10T17:53:18Z",
        "updated_at": "2020-02-11T04:30:22Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29741",
            "html_url": "https://github.com/apple/swift/pull/29741",
            "diff_url": "https://github.com/apple/swift/pull/29741.diff",
            "patch_url": "https://github.com/apple/swift/pull/29741.patch"
        },
        "body": "Move the global PersistentParserState from the CompilerInstance to the source file that code completion is operating on, only hooking up the state when it's needed. This will help make it easier to requestify top-level source file parsing."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29738",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29738/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29738/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29738/events",
        "html_url": "https://github.com/apple/swift/pull/29738",
        "id": 562366360,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyOTczOTEy",
        "number": 29738,
        "title": "[ownership] update let properties opts to support ossa",
        "user": {
            "login": "zoecarver",
            "id": 13806068,
            "node_id": "MDQ6VXNlcjEzODA2MDY4",
            "avatar_url": "https://avatars1.githubusercontent.com/u/13806068?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/zoecarver",
            "html_url": "https://github.com/zoecarver",
            "followers_url": "https://api.github.com/users/zoecarver/followers",
            "following_url": "https://api.github.com/users/zoecarver/following{/other_user}",
            "gists_url": "https://api.github.com/users/zoecarver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/zoecarver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/zoecarver/subscriptions",
            "organizations_url": "https://api.github.com/users/zoecarver/orgs",
            "repos_url": "https://api.github.com/users/zoecarver/repos",
            "events_url": "https://api.github.com/users/zoecarver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/zoecarver/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-10T07:10:19Z",
        "updated_at": "2020-02-10T07:10:28Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29738",
            "html_url": "https://github.com/apple/swift/pull/29738",
            "diff_url": "https://github.com/apple/swift/pull/29738.diff",
            "patch_url": "https://github.com/apple/swift/pull/29738.patch"
        },
        "body": "This patch is a bit of an experiment for me. It updates \"let-properties-opt\" to support OSSA. I realize that this patch will require a lot of work from others (knowledge transfer, etc.). Given that, if you ask me to close this patch, I will happily do that, and I will not take it personally.\r\n\r\nWith that out of the way, here's the first of what will certainly be many more questions: is this a good pass to have updated? Given that passes before it require non-ossa sil, this pass may not receive ossa sil for a while (other than through sil-opt).\r\n\r\nIf you want to continue with this patch, I will write many more ossa sil tests. \r\n\r\ncc @atrick @gottesmm "
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29735",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29735/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29735/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29735/events",
        "html_url": "https://github.com/apple/swift/pull/29735",
        "id": 562313579,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyOTMwMjQ1",
        "number": 29735,
        "title": "[Pending-Evolution] Lift the 1-vararg-per-function restriction",
        "user": {
            "login": "owenv",
            "id": 1946221,
            "node_id": "MDQ6VXNlcjE5NDYyMjE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1946221?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/owenv",
            "html_url": "https://github.com/owenv",
            "followers_url": "https://api.github.com/users/owenv/followers",
            "following_url": "https://api.github.com/users/owenv/following{/other_user}",
            "gists_url": "https://api.github.com/users/owenv/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/owenv/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/owenv/subscriptions",
            "organizations_url": "https://api.github.com/users/owenv/orgs",
            "repos_url": "https://api.github.com/users/owenv/repos",
            "events_url": "https://api.github.com/users/owenv/events{/privacy}",
            "received_events_url": "https://api.github.com/users/owenv/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 295491817,
                "node_id": "MDU6TGFiZWwyOTU0OTE4MTc=",
                "url": "https://api.github.com/repos/apple/swift/labels/swift-evolution-pending-discussion",
                "name": "swift-evolution-pending-discussion",
                "color": "d4c5f9",
                "default": false,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2020-02-10T04:13:52Z",
        "updated_at": "2020-02-12T18:12:13Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29735",
            "html_url": "https://github.com/apple/swift/pull/29735",
            "diff_url": "https://github.com/apple/swift/pull/29735.diff",
            "patch_url": "https://github.com/apple/swift/pull/29735.patch"
        },
        "body": "The restriction that the argument following a variadic argument must have a label is still in place. This allows the following:\r\n\r\n```\r\nfunc twoVariadics(_ a: Int..., b: Int...) { }\r\nfunc splitUnlabeledVariadics(_ a: Int..., b: Int, _ c: String...) { }\r\n```\r\nBecause varargs get automatic default expressions of `[]`, the following is also allowed right now, and maybe shouldn't be:\r\n\r\n```\r\nfunc splitByDefaultArgVariadics(_ a: Int..., b: Int = 0, _ c: Int...) { }\r\nsplitByDefaultArgVariadics(1,2,3, b: 4, 5, 6, 7) // a is [1,2,3], b is 4, c is [5,6,7]\r\nsplitByDefaultArgVariadics(1,2,3) // a is [1,2,3], b is 0, c is []\r\n```\r\n\r\nThe alternative is to just require every vararg have a label if there's more than one, which won't be difficult to enforce if that ends up being preferable."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29732",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29732/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29732/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29732/events",
        "html_url": "https://github.com/apple/swift/pull/29732",
        "id": 562260956,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyODg5NTkx",
        "number": 29732,
        "title": "[ownership] Add an extra run of the early inliner to expose more code to semantic arc opts.",
        "user": {
            "login": "gottesmm",
            "id": 499423,
            "node_id": "MDQ6VXNlcjQ5OTQyMw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/499423?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gottesmm",
            "html_url": "https://github.com/gottesmm",
            "followers_url": "https://api.github.com/users/gottesmm/followers",
            "following_url": "https://api.github.com/users/gottesmm/following{/other_user}",
            "gists_url": "https://api.github.com/users/gottesmm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gottesmm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gottesmm/subscriptions",
            "organizations_url": "https://api.github.com/users/gottesmm/orgs",
            "repos_url": "https://api.github.com/users/gottesmm/repos",
            "events_url": "https://api.github.com/users/gottesmm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gottesmm/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2020-02-09T23:49:03Z",
        "updated_at": "2020-02-10T06:28:51Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29732",
            "html_url": "https://github.com/apple/swift/pull/29732",
            "diff_url": "https://github.com/apple/swift/pull/29732.diff",
            "patch_url": "https://github.com/apple/swift/pull/29732.patch"
        },
        "body": "Not expecting anything specific from this, but it should strengthen the optimization by allowing me to put some more stuff around load promotion/etc in between this and semantic arc opts.\r\n\r\nThat being said, who knows, maybe we get some wins? = p."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29729",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29729/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29729/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29729/events",
        "html_url": "https://github.com/apple/swift/pull/29729",
        "id": 562224280,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyODYyNzU4",
        "number": 29729,
        "title": "Dummy PR for creating toolchains",
        "user": {
            "login": "aciidb0mb3r",
            "id": 4136295,
            "node_id": "MDQ6VXNlcjQxMzYyOTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4136295?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aciidb0mb3r",
            "html_url": "https://github.com/aciidb0mb3r",
            "followers_url": "https://api.github.com/users/aciidb0mb3r/followers",
            "following_url": "https://api.github.com/users/aciidb0mb3r/following{/other_user}",
            "gists_url": "https://api.github.com/users/aciidb0mb3r/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aciidb0mb3r/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aciidb0mb3r/subscriptions",
            "organizations_url": "https://api.github.com/users/aciidb0mb3r/orgs",
            "repos_url": "https://api.github.com/users/aciidb0mb3r/repos",
            "events_url": "https://api.github.com/users/aciidb0mb3r/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aciidb0mb3r/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-02-09T19:14:15Z",
        "updated_at": "2020-02-10T06:29:12Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29729",
            "html_url": "https://github.com/apple/swift/pull/29729",
            "diff_url": "https://github.com/apple/swift/pull/29729.diff",
            "patch_url": "https://github.com/apple/swift/pull/29729.patch"
        },
        "body": ""
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29723",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29723/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29723/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29723/events",
        "html_url": "https://github.com/apple/swift/pull/29723",
        "id": 562073996,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyNzU1NTg0",
        "number": 29723,
        "title": "[build-script] Add support for building SwiftTSC",
        "user": {
            "login": "aciidb0mb3r",
            "id": 4136295,
            "node_id": "MDQ6VXNlcjQxMzYyOTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/4136295?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aciidb0mb3r",
            "html_url": "https://github.com/aciidb0mb3r",
            "followers_url": "https://api.github.com/users/aciidb0mb3r/followers",
            "following_url": "https://api.github.com/users/aciidb0mb3r/following{/other_user}",
            "gists_url": "https://api.github.com/users/aciidb0mb3r/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aciidb0mb3r/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aciidb0mb3r/subscriptions",
            "organizations_url": "https://api.github.com/users/aciidb0mb3r/orgs",
            "repos_url": "https://api.github.com/users/aciidb0mb3r/repos",
            "events_url": "https://api.github.com/users/aciidb0mb3r/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aciidb0mb3r/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2020-02-08T20:32:45Z",
        "updated_at": "2020-02-10T06:30:35Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29723",
            "html_url": "https://github.com/apple/swift/pull/29723",
            "diff_url": "https://github.com/apple/swift/pull/29723.diff",
            "patch_url": "https://github.com/apple/swift/pull/29723.patch"
        },
        "body": "This adds support for building SwiftTSC as a \"product\" which can be fed\r\ninto SwiftPM for bootstrapping. SwiftTSC's actual test will be run via\r\nSwiftPM.\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29691",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29691/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29691/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29691/events",
        "html_url": "https://github.com/apple/swift/pull/29691",
        "id": 561318431,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMTUyNDMw",
        "number": 29691,
        "title": "Re-land Clang types in SIL",
        "user": {
            "login": "varungandhi-apple",
            "id": 52841859,
            "node_id": "MDQ6VXNlcjUyODQxODU5",
            "avatar_url": "https://avatars2.githubusercontent.com/u/52841859?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/varungandhi-apple",
            "html_url": "https://github.com/varungandhi-apple",
            "followers_url": "https://api.github.com/users/varungandhi-apple/followers",
            "following_url": "https://api.github.com/users/varungandhi-apple/following{/other_user}",
            "gists_url": "https://api.github.com/users/varungandhi-apple/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/varungandhi-apple/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/varungandhi-apple/subscriptions",
            "organizations_url": "https://api.github.com/users/varungandhi-apple/orgs",
            "repos_url": "https://api.github.com/users/varungandhi-apple/repos",
            "events_url": "https://api.github.com/users/varungandhi-apple/events{/privacy}",
            "received_events_url": "https://api.github.com/users/varungandhi-apple/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2020-02-06T22:55:03Z",
        "updated_at": "2020-02-10T06:38:55Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29691",
            "html_url": "https://github.com/apple/swift/pull/29691",
            "diff_url": "https://github.com/apple/swift/pull/29691.diff",
            "patch_url": "https://github.com/apple/swift/pull/29691.patch"
        },
        "body": "Fixed merge conflicts etc.\r\n\r\nTODO:\r\n\r\n- [ ] Update some test cases in the last commit introduced in the serialization PR: https://github.com/apple/swift/pull/29670\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29690",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29690/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29690/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29690/events",
        "html_url": "https://github.com/apple/swift/pull/29690",
        "id": 561303026,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMTM5NjAz",
        "number": 29690,
        "title": "Driver: add a flag that compatibility header should only contain public symbols",
        "user": {
            "login": "nkcsgexi",
            "id": 2191945,
            "node_id": "MDQ6VXNlcjIxOTE5NDU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2191945?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nkcsgexi",
            "html_url": "https://github.com/nkcsgexi",
            "followers_url": "https://api.github.com/users/nkcsgexi/followers",
            "following_url": "https://api.github.com/users/nkcsgexi/following{/other_user}",
            "gists_url": "https://api.github.com/users/nkcsgexi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/nkcsgexi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/nkcsgexi/subscriptions",
            "organizations_url": "https://api.github.com/users/nkcsgexi/orgs",
            "repos_url": "https://api.github.com/users/nkcsgexi/repos",
            "events_url": "https://api.github.com/users/nkcsgexi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/nkcsgexi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-06T22:17:30Z",
        "updated_at": "2020-02-11T02:07:55Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29690",
            "html_url": "https://github.com/apple/swift/pull/29690",
            "diff_url": "https://github.com/apple/swift/pull/29690.diff",
            "patch_url": "https://github.com/apple/swift/pull/29690.patch"
        },
        "body": "The build system should specify this flag if the ObjC compatibility\r\nheader is a part of the public API, so the Swift compiler doesn't print\r\ninternal symbols in it.\r\n\r\nrdar://59166862"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29673",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29673/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29673/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29673/events",
        "html_url": "https://github.com/apple/swift/pull/29673",
        "id": 560946965,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcxODQ1MjA1",
        "number": 29673,
        "title": "Remove legacy TensorFlow graph program extraction code.",
        "user": {
            "login": "dan-zheng",
            "id": 5590046,
            "node_id": "MDQ6VXNlcjU1OTAwNDY=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5590046?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/dan-zheng",
            "html_url": "https://github.com/dan-zheng",
            "followers_url": "https://api.github.com/users/dan-zheng/followers",
            "following_url": "https://api.github.com/users/dan-zheng/following{/other_user}",
            "gists_url": "https://api.github.com/users/dan-zheng/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/dan-zheng/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/dan-zheng/subscriptions",
            "organizations_url": "https://api.github.com/users/dan-zheng/orgs",
            "repos_url": "https://api.github.com/users/dan-zheng/repos",
            "events_url": "https://api.github.com/users/dan-zheng/events{/privacy}",
            "received_events_url": "https://api.github.com/users/dan-zheng/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 955546636,
                "node_id": "MDU6TGFiZWw5NTU1NDY2MzY=",
                "url": "https://api.github.com/repos/apple/swift/labels/tensorflow",
                "name": "tensorflow",
                "color": "EF6C00",
                "default": false,
                "description": "This is for \"tensorflow\" branch PRs."
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-06T11:19:48Z",
        "updated_at": "2020-02-10T06:38:38Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29673",
            "html_url": "https://github.com/apple/swift/pull/29673",
            "diff_url": "https://github.com/apple/swift/pull/29673.diff",
            "patch_url": "https://github.com/apple/swift/pull/29673.patch"
        },
        "body": "Graph program extraction is no longer used.\r\nMost of the code was deleted months ago. This deletes more remaining code.\r\n\r\nFollow-up to https://github.com/apple/swift/pull/24418."
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29658",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29658/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29658/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29658/events",
        "html_url": "https://github.com/apple/swift/pull/29658",
        "id": 560568867,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcxNTM1Nzg2",
        "number": 29658,
        "title": "WIP: Overhaul swift_dynamicCast",
        "user": {
            "login": "tbkka",
            "id": 21696764,
            "node_id": "MDQ6VXNlcjIxNjk2NzY0",
            "avatar_url": "https://avatars3.githubusercontent.com/u/21696764?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tbkka",
            "html_url": "https://github.com/tbkka",
            "followers_url": "https://api.github.com/users/tbkka/followers",
            "following_url": "https://api.github.com/users/tbkka/following{/other_user}",
            "gists_url": "https://api.github.com/users/tbkka/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tbkka/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tbkka/subscriptions",
            "organizations_url": "https://api.github.com/users/tbkka/orgs",
            "repos_url": "https://api.github.com/users/tbkka/repos",
            "events_url": "https://api.github.com/users/tbkka/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tbkka/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 19,
        "created_at": "2020-02-05T19:05:08Z",
        "updated_at": "2020-02-13T17:24:05Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29658",
            "html_url": "https://github.com/apple/swift/pull/29658",
            "diff_url": "https://github.com/apple/swift/pull/29658.diff",
            "patch_url": "https://github.com/apple/swift/pull/29658.patch"
        },
        "body": "Background\r\n=========\r\n\r\n`swift_dynamicCast()` is the runtime support behind the `as?`, `as!`, and `is`\r\noperators.  It attempts to convert a source value with a given type into a\r\ndestination location with another specified type.\r\n\r\nThe previous code had evolved over several years into a tangle of different\r\nstrategies for different combinations of source and destination types, with a\r\ngrowing set of inconsistencies between them. The new implementation has a\r\nunified structure that handles common issues with common code to help ensure\r\nconsistent behavior.\r\n\r\nDesign\r\n=====\r\n\r\nThe new implementation has a main driver called `tryCast()` that recursively\r\nattempts to find a suitable conversion from source to destination.  For\r\nexample, if the source is an `Any` container, `tryCast` will extract and\r\nrecursively try to convert the contents of that container.  At each step,\r\nthe `tryCast` will call a function `tryCastToXyz` that understands specific\r\nrequirements for a single target type.\r\n\r\nSuppose, for example, you have an `Any` containing an `Optional<Int>` and\r\nyou want to cast that to a `FixedWidthInteger` existential:\r\n\r\n* `tryCast()` will ask `tryCastToOpaqueExistential` if it can convert the `Any`\r\n  directly.  This will fail because `Any` does not directly conform to any\r\n  protocols.\r\n\r\n* `tryCast()` will extract the `Optional<Int>` from the `Any` and try again.\r\n\r\n* `tryCast()` will then try to unwrap the optional.  If the optional is nil,\r\n  `tryCast` will try to initialize the existential with nil and fail.\r\n\r\n* Finally, `tryCast()` will ask `tryCastToOpaqueExistential` to convert an `Int`\r\n  to the desired `FixedWidthInteger` existential.  This will succeed and the\r\n  result is returned.\r\n\r\nIn addition to unwrapping boxed values, `tryCast()` is also responsible for\r\nother general conversion strategies:  using the dynamic type instead of\r\nthe static type; invoking Objective-C bridging machinery; packing values\r\ninto a `__SwiftValue` container.\r\n\r\nPerhaps most importantly, this PR adds a lot of new tests, including some\r\n\"expected failure\" tests for issues that aren't (yet) actually fixed.\r\n\r\nResolves SR-1999\r\nResolves SR-2289 (rdar://27116100)\r\nResolves SR-4552 (rdar://59174750)\r\nResolves SR-6126\r\nResolves SR-8964 (rdar://45217461)\r\nResolves rdar://58650899\r\n\r\nThis implementation also does a better job with existential metatypes\r\nand CoreFoundation types.\r\n\r\nNext Steps\r\n========\r\n\r\nThis PR only changes the runtime dynamic cast code.  The Swift compiler\r\naggressively optimizes casts in release builds, so these changes will\r\nnot impact many problems with casting in release builds.  I hope to\r\nwork on that very soon.  In the meantime, you can work around many\r\ncompiler problems by calling the following function, which forces\r\nthe cast to be handled by the runtime code:\r\n```\r\nfunc runtimeCast<T,U>(_ value: T, to: U.Type) -> U? {\r\n  return value as? U\r\n}\r\n\r\n// Might use runtime logic or not, depending on compiler optimizations\r\nlet b = a as? Foo\r\n\r\n// Always uses runtime cast logic\r\nlet c = runtimeCast(a, to: Foo.self)\r\n```\r\n\r\nI've not specifically looked at performance.  Hopefully, the\r\nnew design will make it easier to speed up cast performance in\r\na future PR.\r\n\r\nCaveats\r\n======\r\n\r\nMany casts now succeed that used to fail. Code that relied on certain\r\ncasts failing may be surprised. I found and changed one such place\r\nin the standard library.\r\n\r\nDifferent error messages. When a force-cast (`as!`) fails, the message\r\nmay be different, due to the different way in which the new code\r\ntracks and reports failures. I've also taken this opportunity to detect\r\nand issue a specialized error if the cast logic detects an unexpected\r\nnull pointer (this can happen when ill-behaved C or Obj-C code returns an\r\nunexpected null pointer).\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29654",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29654/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29654/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29654/events",
        "html_url": "https://github.com/apple/swift/pull/29654",
        "id": 560145810,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcxMTg3NDQy",
        "number": 29654,
        "title": "fix REPL crash involving pattern bindings to expressions with closures",
        "user": {
            "login": "marcrasi",
            "id": 5945760,
            "node_id": "MDQ6VXNlcjU5NDU3NjA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5945760?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marcrasi",
            "html_url": "https://github.com/marcrasi",
            "followers_url": "https://api.github.com/users/marcrasi/followers",
            "following_url": "https://api.github.com/users/marcrasi/following{/other_user}",
            "gists_url": "https://api.github.com/users/marcrasi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marcrasi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marcrasi/subscriptions",
            "organizations_url": "https://api.github.com/users/marcrasi/orgs",
            "repos_url": "https://api.github.com/users/marcrasi/repos",
            "events_url": "https://api.github.com/users/marcrasi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marcrasi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2020-02-05T05:16:43Z",
        "updated_at": "2020-02-10T06:38:06Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29654",
            "html_url": "https://github.com/apple/swift/pull/29654",
            "diff_url": "https://github.com/apple/swift/pull/29654.diff",
            "patch_url": "https://github.com/apple/swift/pull/29654.patch"
        },
        "body": "**Problem**\r\nWhen you have a pattern binding expression in the REPL that binds a tuple to an expression involving a closure (see tests in this PR for examples), you get this assertion failure:\r\n```\r\nswift-ide-test: /usr/local/google/home/marcrasi/swift-base-master/swift/lib/Sema/TypeCheckConstraints.cpp:1342: bool (anonymous namespace)::PreCheckExpression::walkToClosureExprPre(swift::ClosureExpr *): Assertion `(closure->getParent() == DC || closure->getParent()->isChildContextOf(DC)) && \"Decl context isn't correct\"' failed.\r\n```\r\n\r\n**Explanation**\r\nThe [REPL rewrites the pattern binding](https://github.com/apple/swift/blob/37655db07af36d46913ace2feea4b9f36ac090cc/lib/Sema/TypeCheckREPL.cpp#L390). The rewrite introduces a new PatternBindingInitializer DeclContext that contains the initializer expression, but the rewrite does not update the closures in the initializer expression to set their parents to the new DeclContext.\r\n\r\n**This PR's solution**\r\nUpdate the closures in the initializer expression to set their parents to the new DeclContext.\r\n"
    },
    {
        "url": "https://api.github.com/repos/apple/swift/issues/29650",
        "repository_url": "https://api.github.com/repos/apple/swift",
        "labels_url": "https://api.github.com/repos/apple/swift/issues/29650/labels{/name}",
        "comments_url": "https://api.github.com/repos/apple/swift/issues/29650/comments",
        "events_url": "https://api.github.com/repos/apple/swift/issues/29650/events",
        "html_url": "https://github.com/apple/swift/pull/29650",
        "id": 560080185,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcxMTM1NjYy",
        "number": 29650,
        "title": "[Remarks] Add a specialized RemarkStreamer for SIL remarks",
        "user": {
            "login": "francisvm",
            "id": 890283,
            "node_id": "MDQ6VXNlcjg5MDI4Mw==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/890283?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/francisvm",
            "html_url": "https://github.com/francisvm",
            "followers_url": "https://api.github.com/users/francisvm/followers",
            "following_url": "https://api.github.com/users/francisvm/following{/other_user}",
            "gists_url": "https://api.github.com/users/francisvm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/francisvm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/francisvm/subscriptions",
            "organizations_url": "https://api.github.com/users/francisvm/orgs",
            "repos_url": "https://api.github.com/users/francisvm/repos",
            "events_url": "https://api.github.com/users/francisvm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/francisvm/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-02-05T01:08:06Z",
        "updated_at": "2020-02-10T06:37:48Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/apple/swift/pulls/29650",
            "html_url": "https://github.com/apple/swift/pull/29650",
            "diff_url": "https://github.com/apple/swift/pull/29650.diff",
            "patch_url": "https://github.com/apple/swift/pull/29650.patch"
        },
        "body": "This allows the usage of the whole remark infrastructure developed in\r\nLLVM, which includes a new binary format, metadata in object files, etc.\r\n\r\nThis gets rid of the YAMLTraits-based remark serialization and does the\r\nplumbing for hooking to LLVM's main remark streamer.\r\n\r\nFor more about the idea behind LLVM's main remark streamer, see the\r\ndocs/Remarks.rst changes in https://reviews.llvm.org/D73676.\r\n\r\nThe flags are now:\r\n\r\n* -save-optimization-record: enable remarks, defaults to YAML\r\n* -save-optimization-record=<format>: enable remarks, use <format> for\r\nserialization\r\n* -save-optimization-record-passes <regex>: only serialize passes that\r\nmatch <regex>.\r\n\r\nThe YAMLTraits in swift had a different `flow` setting for the debug\r\nlocation, resulting in some test changes."
    }
]