[
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/39",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/39/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/39/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/39/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/39",
        "id": 546135051,
        "node_id": "MDU6SXNzdWU1NDYxMzUwNTE=",
        "number": 39,
        "title": "Please expose Shape and ShapeLike",
        "user": {
            "login": "NeilGirdhar",
            "id": 730137,
            "node_id": "MDQ6VXNlcjczMDEzNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/730137?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NeilGirdhar",
            "html_url": "https://github.com/NeilGirdhar",
            "followers_url": "https://api.github.com/users/NeilGirdhar/followers",
            "following_url": "https://api.github.com/users/NeilGirdhar/following{/other_user}",
            "gists_url": "https://api.github.com/users/NeilGirdhar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NeilGirdhar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NeilGirdhar/subscriptions",
            "organizations_url": "https://api.github.com/users/NeilGirdhar/orgs",
            "repos_url": "https://api.github.com/users/NeilGirdhar/repos",
            "events_url": "https://api.github.com/users/NeilGirdhar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NeilGirdhar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-01-07T07:52:42Z",
        "updated_at": "2020-01-07T07:52:42Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "They're simple, but it's useful to have them in client code."
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/37",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/37/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/37/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/37/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/37",
        "id": 527739289,
        "node_id": "MDU6SXNzdWU1Mjc3MzkyODk=",
        "number": 37,
        "title": "What to do with array_like variables",
        "user": {
            "login": "johanvergeer",
            "id": 13183702,
            "node_id": "MDQ6VXNlcjEzMTgzNzAy",
            "avatar_url": "https://avatars1.githubusercontent.com/u/13183702?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/johanvergeer",
            "html_url": "https://github.com/johanvergeer",
            "followers_url": "https://api.github.com/users/johanvergeer/followers",
            "following_url": "https://api.github.com/users/johanvergeer/following{/other_user}",
            "gists_url": "https://api.github.com/users/johanvergeer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/johanvergeer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/johanvergeer/subscriptions",
            "organizations_url": "https://api.github.com/users/johanvergeer/orgs",
            "repos_url": "https://api.github.com/users/johanvergeer/repos",
            "events_url": "https://api.github.com/users/johanvergeer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/johanvergeer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-24T18:47:20Z",
        "updated_at": "2019-11-24T19:27:27Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I'm currently working on `core.numeric` and I'm running into an interesting issue.\r\n\r\nA lot of methods have an `array_like` input parameter and an `ndarray` as the output parameter.\r\n\r\nFor now I created a `TypeVar` like the following:\r\n\r\n```python\r\n_ArrayLike = TypeVar(\"_ArrayLike\", str, int, float, bool, object, ByteString, Iterable, Container, ndarray)\r\n```\r\n\r\nAs an example I will use the `zeros_like` function\r\n\r\n```python\r\ndef zeros_like(\r\n        a: _ArrayLike,\r\n        dtype: Optional[dtype] = None,\r\n        order: str = 'K',\r\n        subok: bool = True,\r\n        shape: Optional[Union[int, Sequence[int]]] = None) -> ndarray[T]: ...\r\n```\r\n\r\nThis function returns an instance of `ndarray` containing the same type as `a`, or it can be overridden by `dtype`. \r\n\r\nThis brought me to the following conclusions (please correct me if I'm wrong)\r\n\r\n1. `a` can be either \r\n   - `_ArrayLike` when `a` is a scalar or object\r\n   - or `_ArrayLike[T]` when `a` is a collection\r\n1. The return value type can be \r\n   - `ndarray[_ArrayLike]` when `a` is a scalar or object and `dtype` is `None`\r\n   - `ndarray[T]` when `a` is `_ArrayLike[T]` and `dtype` is `None`\r\n   - `ndarray[dtype]` when `dtype` is not `None`\r\n\r\nI'm wondering what the type annotations of `a` and the return value should look like."
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/36",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/36/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/36/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/36/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/36",
        "id": 526749655,
        "node_id": "MDU6SXNzdWU1MjY3NDk2NTU=",
        "number": 36,
        "title": "Add zip_safe=False to setup.py",
        "user": {
            "login": "aldanor",
            "id": 2418513,
            "node_id": "MDQ6VXNlcjI0MTg1MTM=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/2418513?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aldanor",
            "html_url": "https://github.com/aldanor",
            "followers_url": "https://api.github.com/users/aldanor/followers",
            "following_url": "https://api.github.com/users/aldanor/following{/other_user}",
            "gists_url": "https://api.github.com/users/aldanor/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aldanor/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aldanor/subscriptions",
            "organizations_url": "https://api.github.com/users/aldanor/orgs",
            "repos_url": "https://api.github.com/users/aldanor/repos",
            "events_url": "https://api.github.com/users/aldanor/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aldanor/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-11-21T17:51:57Z",
        "updated_at": "2019-11-21T18:19:31Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "... otherwise it doesn't work because it will be packed by setuptools.\r\n\r\nIt's even mentioned specifically in mypy docs: https://mypy.readthedocs.io/en/latest/installed_packages.html#making-pep-561-compatible-packages"
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/34",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/34/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/34/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/34/events",
        "html_url": "https://github.com/numpy/numpy-stubs/pull/34",
        "id": 500628994,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzIzMDU2NzYx",
        "number": 34,
        "title": "Add some operations to ndarray",
        "user": {
            "login": "kbrose",
            "id": 4053170,
            "node_id": "MDQ6VXNlcjQwNTMxNzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4053170?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kbrose",
            "html_url": "https://github.com/kbrose",
            "followers_url": "https://api.github.com/users/kbrose/followers",
            "following_url": "https://api.github.com/users/kbrose/following{/other_user}",
            "gists_url": "https://api.github.com/users/kbrose/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kbrose/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kbrose/subscriptions",
            "organizations_url": "https://api.github.com/users/kbrose/orgs",
            "repos_url": "https://api.github.com/users/kbrose/repos",
            "events_url": "https://api.github.com/users/kbrose/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kbrose/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-10-01T02:52:33Z",
        "updated_at": "2019-10-22T02:44:25Z",
        "closed_at": null,
        "author_association": "NONE",
        "pull_request": {
            "url": "https://api.github.com/repos/numpy/numpy-stubs/pulls/34",
            "html_url": "https://github.com/numpy/numpy-stubs/pull/34",
            "diff_url": "https://github.com/numpy/numpy-stubs/pull/34.diff",
            "patch_url": "https://github.com/numpy/numpy-stubs/pull/34.patch"
        },
        "body": "I just went through the `ndarray` docs alphabetically and added some operations. I wanted to submit for review before I got too far -- is this an approach you would consider including, or are you looking to get all the operations typed in some other way (e.g. auto-generating per #15)?"
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/32",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/32/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/32/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/32/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/32",
        "id": 491001629,
        "node_id": "MDU6SXNzdWU0OTEwMDE2Mjk=",
        "number": 32,
        "title": "Consider using pytest-mypy-plugins",
        "user": {
            "login": "sobolevn",
            "id": 4660275,
            "node_id": "MDQ6VXNlcjQ2NjAyNzU=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/4660275?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sobolevn",
            "html_url": "https://github.com/sobolevn",
            "followers_url": "https://api.github.com/users/sobolevn/followers",
            "following_url": "https://api.github.com/users/sobolevn/following{/other_user}",
            "gists_url": "https://api.github.com/users/sobolevn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sobolevn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sobolevn/subscriptions",
            "organizations_url": "https://api.github.com/users/sobolevn/orgs",
            "repos_url": "https://api.github.com/users/sobolevn/repos",
            "events_url": "https://api.github.com/users/sobolevn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sobolevn/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-09-09T10:03:52Z",
        "updated_at": "2019-09-12T06:16:40Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Hi! Thanks for this awesome project!\r\n\r\nI am [TypedDjango](https://github.com/TypedDjango) team member, we maintain types for, well, django. And we do pretty much the same job.\r\n\r\nFor example, we also test our types the similar way as you do in [`tests/`](https://github.com/numpy/numpy-stubs/tree/master/tests). We even created a tool called [`pytest-mypy-plugins`](https://github.com/typeddjango/pytest-mypy-plugins) ([announcing post](https://sobolevn.me/2019/08/testing-mypy-types)) to help us with this task. Maybe it will be also helpful to you as well. \r\n\r\nThat's how the simplest test looks like:\r\n\r\n```yaml\r\n- case: compose_two_wrong_functions\r\n  main: |\r\n    from returns.functions import compose\r\n\r\n    def first(num: int) -> float:\r\n        return float(num)\r\n\r\n    def second(num: float) -> str:\r\n        return str(num)\r\n\r\n    reveal_type(compose(first, second)(1))  # N: builtins.str*\r\n```\r\n\r\nIn case you like - I can send a PR with the refactored tests. Or we can collaborate on this together. \r\n\r\nAsk any questions you have! \r\n\r\nP.S. This project was listed in [awesome-python-stubs](https://github.com/typeddjango/awesome-python-stubs) list."
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/27",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/27/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/27/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/27/events",
        "html_url": "https://github.com/numpy/numpy-stubs/pull/27",
        "id": 381207311,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxMjMwODA4",
        "number": 27,
        "title": " Add methods for calculation on ndarray ",
        "user": {
            "login": "sproshev",
            "id": 4990763,
            "node_id": "MDQ6VXNlcjQ5OTA3NjM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4990763?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sproshev",
            "html_url": "https://github.com/sproshev",
            "followers_url": "https://api.github.com/users/sproshev/followers",
            "following_url": "https://api.github.com/users/sproshev/following{/other_user}",
            "gists_url": "https://api.github.com/users/sproshev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sproshev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sproshev/subscriptions",
            "organizations_url": "https://api.github.com/users/sproshev/orgs",
            "repos_url": "https://api.github.com/users/sproshev/repos",
            "events_url": "https://api.github.com/users/sproshev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sproshev/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-11-15T15:17:37Z",
        "updated_at": "2018-11-21T07:45:59Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/numpy/numpy-stubs/pulls/27",
            "html_url": "https://github.com/numpy/numpy-stubs/pull/27",
            "diff_url": "https://github.com/numpy/numpy-stubs/pull/27.diff",
            "patch_url": "https://github.com/numpy/numpy-stubs/pull/27.patch"
        },
        "body": ""
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/26",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/26/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/26/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/26/events",
        "html_url": "https://github.com/numpy/numpy-stubs/pull/26",
        "id": 381127733,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxMTY3ODI2",
        "number": 26,
        "title": "Update ndarray's special methods",
        "user": {
            "login": "sproshev",
            "id": 4990763,
            "node_id": "MDQ6VXNlcjQ5OTA3NjM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4990763?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sproshev",
            "html_url": "https://github.com/sproshev",
            "followers_url": "https://api.github.com/users/sproshev/followers",
            "following_url": "https://api.github.com/users/sproshev/following{/other_user}",
            "gists_url": "https://api.github.com/users/sproshev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sproshev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sproshev/subscriptions",
            "organizations_url": "https://api.github.com/users/sproshev/orgs",
            "repos_url": "https://api.github.com/users/sproshev/repos",
            "events_url": "https://api.github.com/users/sproshev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sproshev/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-11-15T11:54:09Z",
        "updated_at": "2018-11-20T06:00:14Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/numpy/numpy-stubs/pulls/26",
            "html_url": "https://github.com/numpy/numpy-stubs/pull/26",
            "diff_url": "https://github.com/numpy/numpy-stubs/pull/26.diff",
            "patch_url": "https://github.com/numpy/numpy-stubs/pull/26.patch"
        },
        "body": ""
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/25",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/25/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/25/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/25/events",
        "html_url": "https://github.com/numpy/numpy-stubs/pull/25",
        "id": 381110702,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjMxMTU0MjQ1",
        "number": 25,
        "title": "Update arithmetic and comparison methods",
        "user": {
            "login": "sproshev",
            "id": 4990763,
            "node_id": "MDQ6VXNlcjQ5OTA3NjM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4990763?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sproshev",
            "html_url": "https://github.com/sproshev",
            "followers_url": "https://api.github.com/users/sproshev/followers",
            "following_url": "https://api.github.com/users/sproshev/following{/other_user}",
            "gists_url": "https://api.github.com/users/sproshev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sproshev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sproshev/subscriptions",
            "organizations_url": "https://api.github.com/users/sproshev/orgs",
            "repos_url": "https://api.github.com/users/sproshev/repos",
            "events_url": "https://api.github.com/users/sproshev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sproshev/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-11-15T11:06:30Z",
        "updated_at": "2018-11-15T11:57:52Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/numpy/numpy-stubs/pulls/25",
            "html_url": "https://github.com/numpy/numpy-stubs/pull/25",
            "diff_url": "https://github.com/numpy/numpy-stubs/pull/25.diff",
            "patch_url": "https://github.com/numpy/numpy-stubs/pull/25.patch"
        },
        "body": ""
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/24",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/24/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/24/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/24/events",
        "html_url": "https://github.com/numpy/numpy-stubs/pull/24",
        "id": 380204476,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MjMwNDU4NzYx",
        "number": 24,
        "title": "Add item selection and manipulation methods to ndarray",
        "user": {
            "login": "sproshev",
            "id": 4990763,
            "node_id": "MDQ6VXNlcjQ5OTA3NjM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4990763?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sproshev",
            "html_url": "https://github.com/sproshev",
            "followers_url": "https://api.github.com/users/sproshev/followers",
            "following_url": "https://api.github.com/users/sproshev/following{/other_user}",
            "gists_url": "https://api.github.com/users/sproshev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sproshev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sproshev/subscriptions",
            "organizations_url": "https://api.github.com/users/sproshev/orgs",
            "repos_url": "https://api.github.com/users/sproshev/repos",
            "events_url": "https://api.github.com/users/sproshev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sproshev/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-11-13T12:33:31Z",
        "updated_at": "2018-11-21T07:28:25Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/numpy/numpy-stubs/pulls/24",
            "html_url": "https://github.com/numpy/numpy-stubs/pull/24",
            "diff_url": "https://github.com/numpy/numpy-stubs/pull/24.diff",
            "patch_url": "https://github.com/numpy/numpy-stubs/pull/24.patch"
        },
        "body": "Please don't merge until I add tests :)"
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/17",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/17/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/17/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/17/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/17",
        "id": 312242438,
        "node_id": "MDU6SXNzdWUzMTIyNDI0Mzg=",
        "number": 17,
        "title": "Collaboration with XND",
        "user": {
            "login": "teoliphant",
            "id": 254880,
            "node_id": "MDQ6VXNlcjI1NDg4MA==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/254880?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/teoliphant",
            "html_url": "https://github.com/teoliphant",
            "followers_url": "https://api.github.com/users/teoliphant/followers",
            "following_url": "https://api.github.com/users/teoliphant/following{/other_user}",
            "gists_url": "https://api.github.com/users/teoliphant/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/teoliphant/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/teoliphant/subscriptions",
            "organizations_url": "https://api.github.com/users/teoliphant/orgs",
            "repos_url": "https://api.github.com/users/teoliphant/repos",
            "events_url": "https://api.github.com/users/teoliphant/events{/privacy}",
            "received_events_url": "https://api.github.com/users/teoliphant/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-07T20:57:12Z",
        "updated_at": "2018-04-07T20:57:59Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The same ideas being pursued here could also be applied to the more extensive ndtypes for xnd containers that are being currently developed at https://github.com/plures/xnd\r\n\r\nWe are currently getting a computation system built that would allow defining functions on (farily) arbitrary typed containers.  \r\n\r\nWe are also working with the Numba team to get support for xnd in Numba.\r\n\r\nI just want to ensure that the work done here is aware of our efforts in xnd.   The XND project is open and eager for any input from folks interested in typed containers with Python."
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/15",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/15/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/15/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/15/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/15",
        "id": 308373717,
        "node_id": "MDU6SXNzdWUzMDgzNzM3MTc=",
        "number": 15,
        "title": "Use a stub-generator",
        "user": {
            "login": "alanhdu",
            "id": 1914111,
            "node_id": "MDQ6VXNlcjE5MTQxMTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1914111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alanhdu",
            "html_url": "https://github.com/alanhdu",
            "followers_url": "https://api.github.com/users/alanhdu/followers",
            "following_url": "https://api.github.com/users/alanhdu/following{/other_user}",
            "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions",
            "organizations_url": "https://api.github.com/users/alanhdu/orgs",
            "repos_url": "https://api.github.com/users/alanhdu/repos",
            "events_url": "https://api.github.com/users/alanhdu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alanhdu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-03-25T18:38:51Z",
        "updated_at": "2018-03-29T22:55:59Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I think we should seriously consider having a build system that generates the actual NumPy stubs. @eric-wieser suggested that for platform-specific types (e.g. `np.intp`) we:\r\n\r\n> As part of setup.py, we could import numpy and generate the alias stubs based on the actual alias values\r\n\r\nwhich seems like a nice and clean solution (especially for types like `np.float96` which may or may not exist depending on the platform). Adding some kind of \"stub-generation\" step would also let us reduce a lot of boilerplate that we'd have to do otherwise:\r\n\r\n- All distribution generators in `numpy.random` should have the same type signatures as `numpy.random.RandomState` (so they need to be copy-pasted and kept in sync)\r\n- The interactions between arrays and scalars and broadcasting sometimes require a lot of repetitive `@overload` functions (see the distributions in #11 as an example).\r\n\r\nThis would also give us a chance to enforce some lints of our own, like:\r\n- The various `*Like` types should only ever be taken as function input types and never as return types.\r\n\r\nOf course, there are also downsides with having a stub-generation step:\r\n- Generating valid Python stubs can be tricky (due to significant whitespace) and there don't seem to be standard solutions to do this (AFAIK).\r\n- This adds more complexity to the project -- instead of being able to just read the stubs and make changes to fix bugs people will have to understand whatever generator framework we use and debug that too\r\n- If we run the stub generation when a user installs stubs, then whatever dependencies we use for framework generation will have to be pre-installed or vendored\r\n\r\nI think that the added complexity would be worth it, but I'm curious what everyone else's opinions are.\r\n\r\ncc @shoyer @eric-wieser"
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/13",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/13/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/13/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/13/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/13",
        "id": 302814050,
        "node_id": "MDU6SXNzdWUzMDI4MTQwNTA=",
        "number": 13,
        "title": "Exporting type aliases for DtypeLike, ShapeLike and ArrayLike",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-03-06T18:26:39Z",
        "updated_at": "2019-03-26T09:54:51Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "These would indicate anything NumPy can coerce into the respective type:\r\n- `DtypeLike` can be coerced into/with `np.dtype`\r\n- `ShapeLike` can be coerced into `Tuple[int, ...]`\r\n- `ArrayLike` can be coerced into `np.ndarray` with `np.array`\r\n\r\nSee https://github.com/numpy/numpy_stubs/pull/10 for (currently private) aliases `_DtypeLike` and `_ShapeLike`.\r\n\r\nIt would be nice to export these publicly for the benefit of downstream users.\r\n\r\nThe main complication is that this would likely also require adding these aliases to NumPy itself. Potentially, this could be unnecessary with `from __future__ import annotations` in Python 3.7 ([PEP 564](https://www.python.org/dev/peps/pep-0563/))."
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/12",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/12/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/12/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/12/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/12",
        "id": 302431090,
        "node_id": "MDU6SXNzdWUzMDI0MzEwOTA=",
        "number": 12,
        "title": "Balancing correctness vs. type sanity",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2018-03-05T19:32:11Z",
        "updated_at": "2018-03-05T23:54:03Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "https://github.com/numpy/numpy_stubs/pull/11 surfaced an important issue to decide: should our type annotations prioritize correctness or type sanity/friendliness.\r\n\r\nI wrote:\r\n\r\n> Yes, this sort of behavior is very unfortunate for us, and unfortunately is also quite prevalent in NumPy. My inclination is that our type-stubs should prioritize correctness more than catching all possible errors. Zero-dimensional arrays are somewhat usual to see in NumPy, but they do come up. Without typing support for array dimensionality, this would mean that many of these return values should be unsatisfying Any types.\r\n\r\n@alanhdu responded:\r\n\r\n> I'm willing to defer to your judgement here, but I'd personally lean the other way -- IME w/ MyPy is still limited enough that you almost never have \"seamless\" integration with any reasonably large codebase, and given that you have to adapt the coding style (to write \"type-friendly\" code) and do integration work anyways, I think it's reasonable to prioritize \"correctness\" (as long as the burden's not too much, like having to add some int and float casts for numpy scalars).\r\n\r\nHere's an illustrative example. NumPy ufuncs like `np.sin()` *usually* return a numpy.ndarray when passed a numpy.ndarray as input. However, there are two notable exceptions:\r\n- This isn't true for 0-dimensional arrays: ufuncs (and most other numpy functions) return numpy scalar types instead.\r\n- It also isn't true if any arguments are ndarray subclasses: these can overload `__array_ufunc__` (or other old override mechanisms) to return whatever they like.\r\n\r\nIn practice, both 0-dimensional arrays and ndarray subclasses (especially those that would violate this design) are rare compared to the dominant usecase, but these cases definitely do come up in large code-bases.\r\n\r\nNeither of these exceptions are currently expressible with our typing system, so we can choose between:\r\n1. `def sin(x: np.ndarray) -> Any` (correct, but useless for type checking)\r\n2. `def sin(x: np.ndarray) -> Union[np.generic, np.ndarray]` (not worrying about ndarray subclasses -- you shouldn't write a subclass that violates NumPy's typing rules) \r\n3. `def sin(x: np.ndarray) -> np.ndarray` (not worrying about subclasses or 0-dimensional arrays)\r\n\r\n(Note that this would be one of several overrides for ufuncs, which also should be defined for non-ndarrays.)"
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/11",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/11/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/11/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/11/events",
        "html_url": "https://github.com/numpy/numpy-stubs/pull/11",
        "id": 301246216,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MTcyMTIwNjc2",
        "number": 11,
        "title": "[WIP] Typehint np.random",
        "user": {
            "login": "alanhdu",
            "id": 1914111,
            "node_id": "MDQ6VXNlcjE5MTQxMTE=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1914111?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alanhdu",
            "html_url": "https://github.com/alanhdu",
            "followers_url": "https://api.github.com/users/alanhdu/followers",
            "following_url": "https://api.github.com/users/alanhdu/following{/other_user}",
            "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions",
            "organizations_url": "https://api.github.com/users/alanhdu/orgs",
            "repos_url": "https://api.github.com/users/alanhdu/repos",
            "events_url": "https://api.github.com/users/alanhdu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alanhdu/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 4,
        "created_at": "2018-03-01T01:28:17Z",
        "updated_at": "2018-07-06T23:52:11Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/numpy/numpy-stubs/pulls/11",
            "html_url": "https://github.com/numpy/numpy-stubs/pull/11",
            "diff_url": "https://github.com/numpy/numpy-stubs/pull/11.diff",
            "patch_url": "https://github.com/numpy/numpy-stubs/pull/11.patch"
        },
        "body": ""
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/7",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/7/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/7/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/7/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/7",
        "id": 281233011,
        "node_id": "MDU6SXNzdWUyODEyMzMwMTE=",
        "number": 7,
        "title": "Support for dtypes",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2017-12-12T02:11:58Z",
        "updated_at": "2018-04-10T18:21:00Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Per https://github.com/numpy/numpy/issues/7370#issuecomment-346126667, we could specify dtype as part of ndarray types (including type inference) by using NumPy's [scalar types](https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.scalars.html), e.g., `np.ndarray[Any, np.float64]` or `np.ndarray[np.float64, Any]` (where `Any` indicates the shape).\r\n\r\nIs this a good way to indicate dtypes? How would we handle dtypes that don't have a well specified scalar type? For example:\r\n- `datetime64` and `timedelta64` do not have precision as part of the type\r\n- [`np.void`](https://stackoverflow.com/questions/25247190/numpy-void-type-how-to-use-it) is used for all arbitrary structured dtypes, but doesn't indicate the field names or subtypes (side note: `np.struct` would be a much better name)\r\n- string dtypes have their size as part of the type\r\n\r\nOne simple answer is to not worry about more detailed type information for now, and worry about more precise specification for scalar types later, when support in the typing module becomes available (e.g., for integer types or custom struct-like data structures like `TypedDict`)."
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/6",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/6/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/6/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/6/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/6",
        "id": 281229427,
        "node_id": "MDU6SXNzdWUyODEyMjk0Mjc=",
        "number": 6,
        "title": "Order of generic types for ndarray",
        "user": {
            "login": "shoyer",
            "id": 1217238,
            "node_id": "MDQ6VXNlcjEyMTcyMzg=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1217238?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/shoyer",
            "html_url": "https://github.com/shoyer",
            "followers_url": "https://api.github.com/users/shoyer/followers",
            "following_url": "https://api.github.com/users/shoyer/following{/other_user}",
            "gists_url": "https://api.github.com/users/shoyer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/shoyer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/shoyer/subscriptions",
            "organizations_url": "https://api.github.com/users/shoyer/orgs",
            "repos_url": "https://api.github.com/users/shoyer/repos",
            "events_url": "https://api.github.com/users/shoyer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/shoyer/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 5,
        "created_at": "2017-12-12T01:50:02Z",
        "updated_at": "2018-01-22T21:38:14Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Per https://github.com/python/typing/issues/516, it seems likely that we will have a choice between two ways to write type hints:\r\n1. `ndarray[Dtype, Shape]`\r\n2. `ndarray[Shape, Dtype]`\r\n\r\nWe'll probably have two generic arguments, but will have the freedom to choose in which order they appear. Do we have any reason to prefer one order over the other?\r\n\r\nOne weak argument in favor of `[Shape, Dtype]` is that it matches `ndarray.__new__` (but that's so rarely used that it probably doesn't matter)."
    },
    {
        "url": "https://api.github.com/repos/numpy/numpy-stubs/issues/5",
        "repository_url": "https://api.github.com/repos/numpy/numpy-stubs",
        "labels_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/5/labels{/name}",
        "comments_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/5/comments",
        "events_url": "https://api.github.com/repos/numpy/numpy-stubs/issues/5/events",
        "html_url": "https://github.com/numpy/numpy-stubs/issues/5",
        "id": 279693543,
        "node_id": "MDU6SXNzdWUyNzk2OTM1NDM=",
        "number": 5,
        "title": "Support for shapes",
        "user": {
            "login": "mitar",
            "id": 585279,
            "node_id": "MDQ6VXNlcjU4NTI3OQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/585279?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mitar",
            "html_url": "https://github.com/mitar",
            "followers_url": "https://api.github.com/users/mitar/followers",
            "following_url": "https://api.github.com/users/mitar/following{/other_user}",
            "gists_url": "https://api.github.com/users/mitar/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mitar/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mitar/subscriptions",
            "organizations_url": "https://api.github.com/users/mitar/orgs",
            "repos_url": "https://api.github.com/users/mitar/repos",
            "events_url": "https://api.github.com/users/mitar/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mitar/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 9,
        "created_at": "2017-12-06T10:05:01Z",
        "updated_at": "2018-02-20T08:10:02Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "See [how contracts package](https://github.com/AndreaCensi/contracts) are trying to provide support for something similar to shapes. They are extending annotations in a different way than just standard typing and maybe something like that could be also done. So instead of providing specific extension (PEP) for typing to allow thing like shapes, it might be maybe more useful to determine a syntax for general constraints on types and use that, in addition to standard types through typing."
    }
]