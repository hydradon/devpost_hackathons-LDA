[
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/451",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/451/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/451/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/451/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/451",
        "id": 564117145,
        "node_id": "MDU6SXNzdWU1NjQxMTcxNDU=",
        "number": 451,
        "title": "Setting verbose=True when creating the local_worker leads to a later failure",
        "user": {
            "login": "luispd",
            "id": 4349254,
            "node_id": "MDQ6VXNlcjQzNDkyNTQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4349254?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/luispd",
            "html_url": "https://github.com/luispd",
            "followers_url": "https://api.github.com/users/luispd/followers",
            "following_url": "https://api.github.com/users/luispd/following{/other_user}",
            "gists_url": "https://api.github.com/users/luispd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/luispd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/luispd/subscriptions",
            "organizations_url": "https://api.github.com/users/luispd/orgs",
            "repos_url": "https://api.github.com/users/luispd/repos",
            "events_url": "https://api.github.com/users/luispd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/luispd/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-12T16:29:48Z",
        "updated_at": "2020-02-12T16:29:48Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "**Describe the bug**\r\nSetting `verbose=True` when creating the local_worker leads to a later failure when performing the calculation of max() (and perhaps other functions) over an additive sharing tensor.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Go to app/websocket/app/main/__init__.py and introduce the following change\r\n```\r\n # Global variables must be initialized here.\r\n hook = sy.TorchHook(th)\r\n-local_worker = sy.VirtualWorker(hook, auto_add=False)\r\n+local_worker = sy.VirtualWorker(hook, auto_add=False, verbose=True)\r\n hook.local_worker.is_client_worker = False\r\n\r\n html = Blueprint(r\"html\", __name__)\r\n```\r\n2. Start the servers:\r\npython websocket_app.py --port=3000 --id=alice\r\npython websocket_app.py --port=3001 --id=bob\r\npython websocket_app.py --port=3002 --id=crypto\r\n\r\n3. Run this script:\r\n```\r\nimport syft as sy\r\nimport torch\r\nfrom syft.workers.node_client import NodeClient\r\n\r\nhook = sy.TorchHook(torch)\r\n\r\nalice = NodeClient(hook, id=\"alice\", address=\"http://localhost:3000\")\r\nbob = NodeClient(hook, id=\"bob\", address=\"http://localhost:3001\")\r\ncrypto = NodeClient(hook, id=\"crypto\", address=\"http://localhost:3002\")\r\n\r\nmy_grid = sy.PrivateGridNetwork(alice,bob,crypto)\r\n\r\nx_shr = torch.tensor([1,2,3,4,5,6]).share(alice,bob,crypto_provider=crypto)\r\n\r\nres = x_shr.max()\r\n\r\nprint(res.get())\r\n```\r\n\r\n4. See error\r\nSee this error in alice:\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\venv\\lib\\site-packages\\gevent\\pywsgi.py\", line 976, in handle_one_response\r\n    self.run_application()\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\venv\\lib\\site-packages\\geventwebsocket\\handler.py\", line 75, in run_application\r\n    self.run_websocket()\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\venv\\lib\\site-packages\\geventwebsocket\\handler.py\", line 52, in run_websocket\r\n    list(self.application(self.environ, lambda s, h, e=None: []))\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\venv\\lib\\site-packages\\flask\\app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\venv\\lib\\site-packages\\flask_sockets.py\", line 45, in __call__\r\n    handler(environment, **values)\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\app\\websocket\\app\\main\\events\\__init__.py\", line 57, in socket_api\r\n    response = route_requests(message)\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\app\\websocket\\app\\main\\events\\__init__.py\", line 37, in route_requests\r\n    return forward_binary_message(message)\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\app\\websocket\\app\\main\\auth\\__init__.py\", line 60, in wrapped\r\n    return f(*args, **kwargs)\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\app\\websocket\\app\\main\\events\\syft_events.py\", line 27, in forward_binary_message\r\n    decoded_response = current_user.worker._recv_msg(message)\r\n  File \"c:\\users\\llpd\\pycharmprojects\\pygrid\\venv\\src\\syft\\syft\\workers\\virtual.py\", line 10, in _recv_msg\r\n    return self.recv_msg(message)\r\n  File \"c:\\users\\llpd\\pycharmprojects\\pygrid\\venv\\src\\syft\\syft\\workers\\base.py\", line 307, in recv_msg\r\n    print(f\"worker {self} received {type(msg).__name__} {msg.contents}\")\r\n  File \"C:\\Users\\llpd\\PycharmProjects\\PyGrid\\venv\\lib\\site-packages\\torch\\tensor.py\", line 409, in __format__\r\n    return self.item().__format__(format_spec)\r\n  File \"c:\\users\\llpd\\pycharmprojects\\pygrid\\venv\\src\\syft\\syft\\generic\\frameworks\\hook\\trace.py\", line 83, in trace_wrapper\r\n    response = func(*args, **kwargs)\r\n  File \"c:\\users\\llpd\\pycharmprojects\\pygrid\\venv\\src\\syft\\syft\\generic\\frameworks\\hook\\hook.py\", line 477, in overloaded_native_method\r\n    response = method(*new_args, **new_kwargs)\r\n  File \"c:\\users\\llpd\\pycharmprojects\\pygrid\\venv\\src\\syft\\syft\\frameworks\\torch\\hook\\hook.py\", line 509, in overloaded_attr\r\n    results[k] = v.__getattribute__(attr)(*dispatch(new_args, k), **new_kwargs)\r\n  File \"c:\\users\\llpd\\pycharmprojects\\pygrid\\venv\\src\\syft\\syft\\generic\\pointers\\pointer_tensor.py\", line 442, in item\r\n    'Error, Please consider calling \".get\" method instead of \".item\" method, '\r\nRuntimeError: Error, Please consider calling \".get\" method instead of \".item\" method, so you can be safely getting the item you need.\r\n2020-02-12T16:19:33Z {'REMOTE_ADDR': '::1', 'REMOTE_PORT': '63424', 'HTTP_HOST': 'localhost:3000', (hidden keys: 25)} failed with RuntimeError\r\n```\r\nAnd see this error in the console where the script was run:\r\n`Websocket connection closed (worker: alice)`\r\n\r\n**Expected behavior**\r\nThe calculation succeeds and tensor([6]) is displayed in the console.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Windows 10\r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
        "id": 560578787,
        "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
        "number": 445,
        "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 11,
        "created_at": "2020-02-05T19:25:00Z",
        "updated_at": "2020-02-13T12:28:25Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/442",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/442/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/442/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/442/events",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/442",
        "id": 559498183,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzcwNjU0ODk4",
        "number": 442,
        "title": "Update node requirements.txt",
        "user": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-04T05:33:49Z",
        "updated_at": "2020-02-09T23:27:17Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/442",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/442",
            "diff_url": "https://github.com/OpenMined/PyGrid/pull/442.diff",
            "patch_url": "https://github.com/OpenMined/PyGrid/pull/442.patch"
        },
        "body": "## Description\r\nFix dependency inconsistencies removing torch==1.3.0 from app requirements.txt.\r\n\r\n## Type of change\r\n\r\nPlease mark the options that are relevant.\r\n\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Test A\r\n- [ ] Test B\r\n\r\n## Checklist:\r\n\r\n- [X] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [X] Unit tests pass locally with my changes\r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/441",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/441/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/441/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/441/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/441",
        "id": 559109097,
        "node_id": "MDU6SXNzdWU1NTkxMDkwOTc=",
        "number": 441,
        "title": "Optional - Allow for periodic status updates of current FL cycles on PyGrid",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1356040644,
                "node_id": "MDU6TGFiZWwxMzU2MDQwNjQ0",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/blocked",
                "name": "blocked",
                "color": "c63b5e",
                "default": false,
                "description": ""
            },
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-03T14:11:03Z",
        "updated_at": "2020-02-03T14:11:20Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "A model developer may want to inspect the progress of the current federated learning cycle in progress, as well as potentially see how previous cycles have gone. We should allow for the creation of an `inspect_federated_training()` method (or whatever name is appropriate) to inspect the current or former progress of FL cycles in PyGrid."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/440",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/440/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/440/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/440/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/440",
        "id": 559103555,
        "node_id": "MDU6SXNzdWU1NTkxMDM1NTU=",
        "number": 440,
        "title": "Optional - Add a few predefined averaging plans (like \u201cFederated Average\u201d) to PyGrid",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1356040644,
                "node_id": "MDU6TGFiZWwxMzU2MDQwNjQ0",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/blocked",
                "name": "blocked",
                "color": "c63b5e",
                "default": false,
                "description": ""
            },
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-03T14:01:53Z",
        "updated_at": "2020-02-03T14:02:03Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "According to https://github.com/OpenMined/PyGrid/issues/439, we will have averaging plans that a model developer will need to upload in order to average the model.\r\n\r\nHowever, many of these averaging models are quite similar, and a few are commonly used by most developers. One such averaging algorithm would be a plan-based implementation of Google's \"Federated Averaging\" which was detailed in their two opening papers related to federated learning.\r\n\r\nAs per this ticket, we want to include a few \"pre-coded\" averaging algorithms that you can choose by name. The first one we'll implement will be `\"FEDERATED_AVERAGE\"`, followed by other common model averaging algorithms. When calling `test_federated_training()` or `host_federated_training()`, one could optionally specify a string with the name of the commonly-used algorithm in place of specifying a specific plan."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/439",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/439/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/439/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/439/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/439",
        "id": 559017133,
        "node_id": "MDU6SXNzdWU1NTkwMTcxMzM=",
        "number": 439,
        "title": "Add averaging plan and global model updating functionality to PyGrid",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1356040644,
                "node_id": "MDU6TGFiZWwxMzU2MDQwNjQ0",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/blocked",
                "name": "blocked",
                "color": "c63b5e",
                "default": false,
                "description": ""
            },
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-03T11:19:57Z",
        "updated_at": "2020-02-03T11:41:02Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This ticket will need to be beefed up quite a bit more in the near future. For now, let's think of it as the following:\r\n\r\nBy this point, we've got federated learning cycles implemented in PyGrid (https://github.com/OpenMined/PyGrid/issues/438). This issues builds on the work in that issue by allowing us to average models received by workers and then update the global model itself. This is probably going to be comprised of the following issues:\r\n\r\n- [ ] Upon receiving a model from a worker that IS NOT part of a protocol, average it using the averaging plan supplied by the model developer back into the global model\r\n- [ ] If the model is part of a protocol split with other workers, make sure you have each of the required shares from each worker group, and then average those shares into the final model.\r\n- [ ] Once the cycle has been completed, average the models received from the workers and create a new checkpoint"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/438",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/438/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/438/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/438/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/438",
        "id": 559011711,
        "node_id": "MDU6SXNzdWU1NTkwMTE3MTE=",
        "number": 438,
        "title": "Implement federated learning cycles in PyGrid",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1356040644,
                "node_id": "MDU6TGFiZWwxMzU2MDQwNjQ0",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/blocked",
                "name": "blocked",
                "color": "c63b5e",
                "default": false,
                "description": ""
            },
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-03T11:09:56Z",
        "updated_at": "2020-02-13T12:29:00Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "This ticket will need to be beefed up quite a bit more in the near future. For now, let's think of it as the following:\r\n\r\nBy this point, we've got plans and protocols hosted on PyGrid successfully (https://github.com/OpenMined/PyGrid/issues/413) and we've got a method to push these plans and protocols from PySyft to PyGrid (https://github.com/OpenMined/PyGrid/issues/435). Now we need to actually write the code that triggers a new federated learning cycle.\r\n\r\nThis process should roughly incorporate:\r\n- [ ] Allowing for workers to submit an inquiry for training on a cycle\r\n- [ ] Using the `server_config` parameters, appropriately choose a subsetted pool of workers\r\n- [ ] Allow those workers to download the current model, training plan, protocol, and client config required to run the plan on their device\r\n- [ ] Accept an updated model from a worker, or in the presence of a protocol, accept a share of the securely aggregated model from a worker.\r\n\r\nAt this point, that should roughly define the scope of work. We're going to separate the \"averaging\" and \"global model updating\" functionality into its own separate Github issue: https://github.com/OpenMined/PyGrid/issues/439"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/437",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/437/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/437/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/437/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/437",
        "id": 559003849,
        "node_id": "MDU6SXNzdWU1NTkwMDM4NDk=",
        "number": 437,
        "title": "Allow PyGrid to serve plan operations as either a list of individual commands (syft.js) or as TorchScript (Android and iOS)",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1356040644,
                "node_id": "MDU6TGFiZWwxMzU2MDQwNjQ0",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/blocked",
                "name": "blocked",
                "color": "c63b5e",
                "default": false,
                "description": ""
            },
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-03T10:55:32Z",
        "updated_at": "2020-02-03T10:56:09Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Note: This issue must be done first: https://github.com/OpenMined/PySyft/issues/2994**\r\n\r\nOnce PyGrid supports the hosting of plans and protocols, and once PySyft supports the ability to compile plans as either TorchScript or as a list of procedures and stateful tensors, we must have some way for PyGrid to send the correct type of plan to the correct worker.\r\n\r\nWhen a worker authenticates itself with PyGrid, it must inform PyGrid what type of plan it would like to receive: TorchScript or a list of operations. PyGrid must then retrieve the appropriate protocol and plan, and convert that plan into the appropriate format (if necessary) before returning it to the worker."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/436",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/436/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/436/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/436/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/436",
        "id": 558739004,
        "node_id": "MDU6SXNzdWU1NTg3MzkwMDQ=",
        "number": 436,
        "title": "Add \"get_model\" method to PyGrid",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1356040644,
                "node_id": "MDU6TGFiZWwxMzU2MDQwNjQ0",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/blocked",
                "name": "blocked",
                "color": "c63b5e",
                "default": false,
                "description": ""
            },
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-02T18:50:20Z",
        "updated_at": "2020-02-02T18:50:32Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Assuming we\u2019ve finished all the cycles in the federated learning process, the model will now be ready for inspection by the developer and may be used for inference, retrained, or whatever they desire. The developer may decide to pull a specific version of a model, or may optionally decide to even pull a specific checkpoint instead. The process of federated learning is now considered complete. This may look something like the following:\r\n\r\n```py\r\nimport grid as gr\r\n\r\npygrid = gr.WebsocketGridClient(\r\n  hook,\r\n  id=\"my-name\",\r\n  address=\"https://localhost:3000\"\r\n)\r\n\r\npygrid.connect()\r\n\r\ntrained_fl_model = pygrid.get_model(name=\"my-federated-model\", version=\"0.1.0\", checkpoint=\"latest\")\r\n```"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/435",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/435/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/435/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/435/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/435",
        "id": 558738155,
        "node_id": "MDU6SXNzdWU1NTg3MzgxNTU=",
        "number": 435,
        "title": "Add \"host_federated_training\" method to PyGrid",
        "user": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-02-02T18:43:19Z",
        "updated_at": "2020-02-13T12:27:25Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Note: Please consult [issue 2995 on PySyft](https://github.com/OpenMined/PySyft/issues/2995) for beginning on this one.**\r\n\r\nThis will allow for training cycles to begin on end-user devices. The developer needs to connect to an existing PyGrid gateway and send the model, training plan, averaging plan, optional protocol, and various configurations to be stored in PyGrid properly.\r\n\r\nHere's a look at what this might look like:\r\n\r\n```py\r\nimport grid as gr\r\n\r\npygrid = gr.WebsocketGridClient(\r\n  hook,\r\n  id=\"my-name\",\r\n  address=\"https://localhost:3000\"\r\n)\r\n\r\npygrid.connect()\r\n\r\npygrid.host_federated_training(\r\n  model=model,\r\n  training_plan=training_plan,\r\n  averaging_plan=averaging_plan,\r\n  protocol=secure_aggregation_protocol,\r\n  client_config=client_config,\r\n  server_config=server_config\r\n)\r\n```\r\n\r\nNote that this means that PyGrid will need to now be able to host:\r\n- Models\r\n- Plans\r\n- Protocols (refactor pending)\r\n- Various configurations (one for the client and another for the PyGrid server)"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/434",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/434/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/434/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/434/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/434",
        "id": 557459290,
        "node_id": "MDU6SXNzdWU1NTc0NTkyOTA=",
        "number": 434,
        "title": "PyGrid Memory Leak",
        "user": {
            "login": "iamtrask",
            "id": 4328594,
            "node_id": "MDQ6VXNlcjQzMjg1OTQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4328594?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iamtrask",
            "html_url": "https://github.com/iamtrask",
            "followers_url": "https://api.github.com/users/iamtrask/followers",
            "following_url": "https://api.github.com/users/iamtrask/following{/other_user}",
            "gists_url": "https://api.github.com/users/iamtrask/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iamtrask/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iamtrask/subscriptions",
            "organizations_url": "https://api.github.com/users/iamtrask/orgs",
            "repos_url": "https://api.github.com/users/iamtrask/repos",
            "events_url": "https://api.github.com/users/iamtrask/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iamtrask/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 817798107,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDc=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "IonesioJunior",
                "id": 26658472,
                "node_id": "MDQ6VXNlcjI2NjU4NDcy",
                "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/IonesioJunior",
                "html_url": "https://github.com/IonesioJunior",
                "followers_url": "https://api.github.com/users/IonesioJunior/followers",
                "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
                "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
                "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
                "repos_url": "https://api.github.com/users/IonesioJunior/repos",
                "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
                "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-01-30T12:24:16Z",
        "updated_at": "2020-01-30T12:26:01Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Describe the bug**\r\nAt present, garbage collection is disabled by default on PyGrid to facilitate the ease of uploading new datasets to remote nodes using .send().\r\n\r\nHowever, this functionality needs to be reversed because it means that garbage collections is disabled everywhere by default. This leads to memory leaks as observed by Adam Hall and in #433.  \r\n\r\n**To Reproduce**\r\n1. Launch PyGrid Node.\r\n2. x_ptr = th.zeros(1000,1000).send(pygrid_node)\r\n3. Run\r\n```\r\nfor i in range(1000):\r\n    x_ptr = x_ptr + 1\r\n```\r\n\r\n**Expected behavior**\r\nThis should lead to a PyGrid node which only has 1 tensor on it, but with the current configuration it would lead to the PyGrid node having 1001 tensors on it.\r\n\r\n**Ideal Solution**\r\n\r\nth.zeros([1,2,3,4]).publish(grid_node) should disable garbage collection by default, meaning that when the pointer to this information is deleted, the remote machine doesn't actually delete the tensor.\r\n\r\nth.zeros([1,2,3,4]).send(grid_node) should enable garbage collection by default, meaning that when the pointer to the remote information is deleeted, the remote machine DOES delete the tensor."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/433",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/433/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/433/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/433/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/433",
        "id": 556329345,
        "node_id": "MDU6SXNzdWU1NTYzMjkzNDU=",
        "number": 433,
        "title": "Redis crashing with exit code 137 (out of memory)",
        "user": {
            "login": "matthiaslau",
            "id": 574305,
            "node_id": "MDQ6VXNlcjU3NDMwNQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/574305?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/matthiaslau",
            "html_url": "https://github.com/matthiaslau",
            "followers_url": "https://api.github.com/users/matthiaslau/followers",
            "following_url": "https://api.github.com/users/matthiaslau/following{/other_user}",
            "gists_url": "https://api.github.com/users/matthiaslau/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/matthiaslau/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/matthiaslau/subscriptions",
            "organizations_url": "https://api.github.com/users/matthiaslau/orgs",
            "repos_url": "https://api.github.com/users/matthiaslau/repos",
            "events_url": "https://api.github.com/users/matthiaslau/events{/privacy}",
            "received_events_url": "https://api.github.com/users/matthiaslau/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-01-28T16:36:50Z",
        "updated_at": "2020-01-28T16:36:50Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Describe the bug**\r\nWhen I run the training in the grid mnist tutorial from the PySyft repo (https://github.com/OpenMined/PySyft/tree/master/examples/tutorials/grid/federated_learning/mnist) for more epochs the redis server is crashing with an out of memory error. \r\n\r\n** Preconditions ** \r\nAs proposed on slack I set `is_client_worker` to True by changing the code in `app/websocket/app/main/__init__.py:72` to use garbage collection. Build a new grid-node docker image afterwards.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Start the docker setup including redis with `docker-compose up -d`\r\n2. Open a jupyter notebook with the grid mnist example\r\n3. Distribute the data using Part 1 of the tutorial\r\n4. Set the number of epochs in Part 2 to a higher number, e.g. 100\r\n5. Start the training in Part 2\r\n\r\nIn my docker setup with 12GB memory redis crashes after ~14 epochs with exit code 137. When looking at the docker stats the memory usage is constantly increasing up to ~80% and then dropping directly before the machine crashes. The memory drop could mean that the GC started running?!\r\n\r\n**Expected behavior**\r\nThe garbage collection should prevent the memory consumption to increase that much.\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: OSX\r\n - PyGrid: dev\r\n - PySyft: 0.2.2a1 \r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/431",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/431/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/431/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/431/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/431",
        "id": 555202415,
        "node_id": "MDU6SXNzdWU1NTUyMDI0MTU=",
        "number": 431,
        "title": "Invalid JSON on searching Gateway",
        "user": {
            "login": "genekogan",
            "id": 1335251,
            "node_id": "MDQ6VXNlcjEzMzUyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1335251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/genekogan",
            "html_url": "https://github.com/genekogan",
            "followers_url": "https://api.github.com/users/genekogan/followers",
            "following_url": "https://api.github.com/users/genekogan/following{/other_user}",
            "gists_url": "https://api.github.com/users/genekogan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/genekogan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/genekogan/subscriptions",
            "organizations_url": "https://api.github.com/users/genekogan/orgs",
            "repos_url": "https://api.github.com/users/genekogan/repos",
            "events_url": "https://api.github.com/users/genekogan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/genekogan/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2020-01-26T09:23:54Z",
        "updated_at": "2020-01-28T16:18:03Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Running the `Federated_SMS_Spam_prediction [Part 2] - Train a Model` tutorial, I get the following error on `data = my_grid.search(\"#X\", \"#spam\", \"#dataset\")`:\r\n\r\n```\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-4-d51f7579f673> in <module>\r\n----> 1 data = my_grid.search(\"#X\", \"#spam\", \"#dataset\")\r\n      2 target = my_grid.search(\"#Y\", \"#spam\", \"#dataset\")\r\n\r\n~/Library/Python/3.7/lib/python/site-packages/grid/grid_network.py in search(self, *query)\r\n     39         # Connect with grid nodes that contains the dataset and get their pointers\r\n     40         tensor_set = []\r\n---> 41         for node_id, node_url in match_nodes:\r\n     42             worker = self.__connect_with_node(node_id, node_url)\r\n     43             tensor_set.append(worker.search(query))\r\n\r\nValueError: too many values to unpack (expected 2)\r\n```\r\n\r\nDigging a bit further, trying it out manually, I see that the problem is an invalid JSON error on the query, originating in `grid/grid_network.py`. \r\n\r\n```\r\nbody = json.dumps({\"query\": list([\"#X\", \"#spam\", \"#dataset\"])})\r\nprint(body)\r\n```\r\n\r\ngives `{\"query\": [\"#X\", \"#spam\", \"#dataset\"]}` which appears to me as normal json. Then:\r\n\r\n```\r\nresponse = requests.post(\"http://localhost:8080/search\", data=body)\r\nprint(response.content)\r\n```\r\n\r\nThe query goes through (response code is 200). But the response content is `b'{\"message\": \"Invalid JSON format.\"}'`.\r\n\r\nThe gateway and two workers appear to be running fine for me. Not sure if the error is on my side or a bug."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/419",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/419/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/419/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/419/events",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/419",
        "id": 537556640,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzUyODkwMjk1",
        "number": 419,
        "title": "[WIP] Docker build grid-gateway, grid-node",
        "user": {
            "login": "gantir",
            "id": 342713,
            "node_id": "MDQ6VXNlcjM0MjcxMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/342713?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gantir",
            "html_url": "https://github.com/gantir",
            "followers_url": "https://api.github.com/users/gantir/followers",
            "following_url": "https://api.github.com/users/gantir/following{/other_user}",
            "gists_url": "https://api.github.com/users/gantir/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gantir/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gantir/subscriptions",
            "organizations_url": "https://api.github.com/users/gantir/orgs",
            "repos_url": "https://api.github.com/users/gantir/repos",
            "events_url": "https://api.github.com/users/gantir/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gantir/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 7,
        "created_at": "2019-12-13T13:42:12Z",
        "updated_at": "2019-12-22T13:33:15Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/419",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/419",
            "diff_url": "https://github.com/OpenMined/PyGrid/pull/419.diff",
            "patch_url": "https://github.com/OpenMined/PyGrid/pull/419.patch"
        },
        "body": "## Description\r\n\r\nAutomated docker build for pysyft-grid-gateway, pysyft-grid-node to docker hub.\r\n\r\nFixes #417 \r\n\r\n## Type of change\r\nPlease mark options that are relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## How Has This Been Tested?\r\n\r\nThis PR builds and pushes to docker hub the docker image for gateway, node. \r\n\r\nThe pysyft-grid-gateway image is built and uplodaed to dockerhub. \r\nThe pysyft-grid-node image has an error while building.\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [ ] Unit tests pass locally with my changes\r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/418",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/418/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/418/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/418/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/418",
        "id": 536859689,
        "node_id": "MDU6SXNzdWU1MzY4NTk2ODk=",
        "number": 418,
        "title": "Grid Node Status is offline",
        "user": {
            "login": "Bingyy",
            "id": 7068217,
            "node_id": "MDQ6VXNlcjcwNjgyMTc=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/7068217?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Bingyy",
            "html_url": "https://github.com/Bingyy",
            "followers_url": "https://api.github.com/users/Bingyy/followers",
            "following_url": "https://api.github.com/users/Bingyy/following{/other_user}",
            "gists_url": "https://api.github.com/users/Bingyy/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Bingyy/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Bingyy/subscriptions",
            "organizations_url": "https://api.github.com/users/Bingyy/orgs",
            "repos_url": "https://api.github.com/users/Bingyy/repos",
            "events_url": "https://api.github.com/users/Bingyy/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Bingyy/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-12-12T09:35:56Z",
        "updated_at": "2020-01-28T16:09:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "I setup a node in macos, but the node status is offline, and when i send tensor to it, such as x tensor, but worker._objects shows `{}`, is it because of status offline? "
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/407",
        "id": 531983388,
        "node_id": "MDU6SXNzdWU1MzE5ODMzODg=",
        "number": 407,
        "title": "Create PyGrid ANSIBLE playbook ",
        "user": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 817798109,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDk=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "javanlacerda",
            "id": 23180089,
            "node_id": "MDQ6VXNlcjIzMTgwMDg5",
            "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/javanlacerda",
            "html_url": "https://github.com/javanlacerda",
            "followers_url": "https://api.github.com/users/javanlacerda/followers",
            "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
            "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
            "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
            "repos_url": "https://api.github.com/users/javanlacerda/repos",
            "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
            "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "javanlacerda",
                "id": 23180089,
                "node_id": "MDQ6VXNlcjIzMTgwMDg5",
                "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/javanlacerda",
                "html_url": "https://github.com/javanlacerda",
                "followers_url": "https://api.github.com/users/javanlacerda/followers",
                "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
                "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
                "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
                "repos_url": "https://api.github.com/users/javanlacerda/repos",
                "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
                "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 5,
        "created_at": "2019-12-03T13:25:57Z",
        "updated_at": "2020-02-13T19:38:19Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Is your feature request related to a problem? Please describe.**\r\nWe want to create an easy way to deploy our platform on cloud providers.\r\n\r\n\r\n**Describe the solution you'd like**\r\nCreate PyGrid **ANSIBLE playbook** to automatic deployment on cloud platforms ( AWS / GCP )"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/395",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/395/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/395/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/395/events",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/395",
        "id": 522553125,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzQwNzMyODAy",
        "number": 395,
        "title": "Update Rest API for websocket",
        "user": {
            "login": "gmuraru",
            "id": 7805588,
            "node_id": "MDQ6VXNlcjc4MDU1ODg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/7805588?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmuraru",
            "html_url": "https://github.com/gmuraru",
            "followers_url": "https://api.github.com/users/gmuraru/followers",
            "following_url": "https://api.github.com/users/gmuraru/following{/other_user}",
            "gists_url": "https://api.github.com/users/gmuraru/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gmuraru/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gmuraru/subscriptions",
            "organizations_url": "https://api.github.com/users/gmuraru/orgs",
            "repos_url": "https://api.github.com/users/gmuraru/repos",
            "events_url": "https://api.github.com/users/gmuraru/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gmuraru/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-14T00:33:34Z",
        "updated_at": "2019-12-16T11:57:24Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "pull_request": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/395",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/395",
            "diff_url": "https://github.com/OpenMined/PyGrid/pull/395.diff",
            "patch_url": "https://github.com/OpenMined/PyGrid/pull/395.patch"
        },
        "body": "## Description\r\n\r\nUpdate the REST Api file for the Websocket app\r\n\r\nFixes #393 \r\n\r\n## Type of change\r\n\r\n- [x] Documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] New Unit tests added - Not needed\r\n- [x] Unit tests pass locally with my changes\r\n\r\n## Tested manually\r\n1. Started websocket grid node using the following command\r\n```python websocket_app.py --start_local_db --id=bob --port=3000\r\npython websocket_app.py --start_local_db --id=anne --port=3001\r\npython websocket_app.py --start_local_db --id=james --port=3002\r\n```\r\n\r\n2. Upload 1 simple model (only a Linear layer) with 2 names\r\n```\r\nimport torch as th\r\nimport syft as sy\r\nimport grid as gr\r\nimport torch.nn.functional as F\r\n\r\nhook = sy.TorchHook(th)\r\n\r\n# Connect to the grid nodes\r\nbob = gr.WebsocketGridClient(hook, \"http://localhost:3000\", id=\"bob\")\r\nanne = gr.WebsocketGridClient(hook, \"http://localhost:3001\", id=\"anne\")\r\njames = gr.WebsocketGridClient(hook, \"http://localhost:3002\", id=\"james\")\r\n\r\n# Upload downloadable and not downloadable models to worker anne\r\nmodel = th.nn.Linear(1, 1)\r\ntraced_model = th.jit.trace(model, th.Tensor([1.0]))\r\n\r\nanne.serve_model(traced_model, \"trace_model5\", allow_download=False)\r\nanne.serve_model(traced_model, \"trace_model3\", allow_download=True)\r\n\r\n\r\n#### THIS PART DID NOT WORK\r\n# Define a new model - it needs to have the encrypt attribute - it's the one from the skin cancer tutorial\r\ndef make_model(\r\n    num_classes: int = 2, is_plan=False, model_id=\"skin-cancer-model-encrypted\"\r\n):\r\n    super_class = sy.Plan if is_plan else th.nn.Module\r\n\r\n    class Net(super_class):\r\n        \"\"\"Similar to LeNet5 but without pooling.\"\"\"\r\n\r\n        def __init__(self):\r\n            if is_plan:\r\n                super(Net, self).__init__(id=model_id)\r\n            else:\r\n                super(Net, self).__init__()\r\n            self.conv1 = th.nn.Conv2d(3, 6, 5, 1)\r\n            self.conv2 = th.nn.Conv2d(6, 16, 5, 1)\r\n            self.fc1 = th.nn.Linear(9216, 120)\r\n            self.fc2 = th.nn.Linear(120, 84)\r\n            self.fc3 = th.nn.Linear(84, num_classes)\r\n\r\n            if is_plan:\r\n                self.add_to_state([\"conv1\", \"conv2\", \"fc1\", \"fc2\", \"fc3\"])\r\n\r\n        def forward(self, x):\r\n            x = F.relu(self.conv1(x))\r\n            x = F.relu(self.conv2(x))\r\n            x = x.view(-1, 9216)\r\n            x = F.relu(self.fc1(x))\r\n            x = F.relu(self.fc2(x))\r\n            x = self.fc3(x)\r\n            return x\r\n\r\n    return Net()\r\n\r\n# Upload encrypted model to worker anne and bob using james as the crypto provider\r\nmodel.encrypt([bob, anne], crypto_provider=james)\r\nbob.serve_model(\"skin-cancer\", model, allow_download=True, allow_remote_inference=False)\r\n\r\n#####\r\n\r\n# Split dataset and tag them - used the Spam Notebook\r\n```\r\n\r\n[Anne Index after tag and model send](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_index.png)\r\n[Bob index after tag](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/bob_index.png)\r\n[Anne - Models](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/models_anne.png)\r\n[Bob - Models](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/models_bob.png)\r\n[Anne - Model Copy Allowed](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_is_model_copy_allowed.png)\r\n[Anne - Model Copy Not Allowed](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_is_model_copy_allowed_not_allowed.png)\r\n[Anne - Model Copy - Model Not Found](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_is_model_copy_allowed_not_found.png)\r\n[Anne - Get Model - Not Allowed](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_get_model_not_allowed.png)\r\n[Anne - Get Model - Not Found](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_get_model_not_found.png)\r\n[Anne - Get Model - Success](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_get_model_success.png)\r\n[Anne - Search Enc Model - Model Not Found](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_search_enc_model_not_found.png)\r\n[Anne - Search Enc Model - Payload not correct](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_search_enc_model_payload_err.png)\r\n[Anne - Search Dataset Tag - Success/Fail](http://swarm.cs.pub.ro/~gmuraru/OpenMined/Grid/anne_search_dataset_tag.png)"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/393",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/393/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/393/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/393/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/393",
        "id": 522063707,
        "node_id": "MDU6SXNzdWU1MjIwNjM3MDc=",
        "number": 393,
        "title": "Update the websocket API",
        "user": {
            "login": "gmuraru",
            "id": 7805588,
            "node_id": "MDQ6VXNlcjc4MDU1ODg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/7805588?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmuraru",
            "html_url": "https://github.com/gmuraru",
            "followers_url": "https://api.github.com/users/gmuraru/followers",
            "following_url": "https://api.github.com/users/gmuraru/following{/other_user}",
            "gists_url": "https://api.github.com/users/gmuraru/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gmuraru/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gmuraru/subscriptions",
            "organizations_url": "https://api.github.com/users/gmuraru/orgs",
            "repos_url": "https://api.github.com/users/gmuraru/repos",
            "events_url": "https://api.github.com/users/gmuraru/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gmuraru/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 1564066377,
                "node_id": "MDU6TGFiZWwxNTY0MDY2Mzc3",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/documentation",
                "name": "documentation",
                "color": "26c6f2",
                "default": true,
                "description": ""
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "gmuraru",
            "id": 7805588,
            "node_id": "MDQ6VXNlcjc4MDU1ODg=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/7805588?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gmuraru",
            "html_url": "https://github.com/gmuraru",
            "followers_url": "https://api.github.com/users/gmuraru/followers",
            "following_url": "https://api.github.com/users/gmuraru/following{/other_user}",
            "gists_url": "https://api.github.com/users/gmuraru/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gmuraru/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gmuraru/subscriptions",
            "organizations_url": "https://api.github.com/users/gmuraru/orgs",
            "repos_url": "https://api.github.com/users/gmuraru/repos",
            "events_url": "https://api.github.com/users/gmuraru/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gmuraru/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "gmuraru",
                "id": 7805588,
                "node_id": "MDQ6VXNlcjc4MDU1ODg=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/7805588?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/gmuraru",
                "html_url": "https://github.com/gmuraru",
                "followers_url": "https://api.github.com/users/gmuraru/followers",
                "following_url": "https://api.github.com/users/gmuraru/following{/other_user}",
                "gists_url": "https://api.github.com/users/gmuraru/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/gmuraru/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/gmuraru/subscriptions",
                "organizations_url": "https://api.github.com/users/gmuraru/orgs",
                "repos_url": "https://api.github.com/users/gmuraru/repos",
                "events_url": "https://api.github.com/users/gmuraru/events{/privacy}",
                "received_events_url": "https://api.github.com/users/gmuraru/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-13T09:18:23Z",
        "updated_at": "2019-11-20T18:31:48Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "**Describe the bug**\r\nThe websocket API is outdated.\r\n\r\n**Expected behavior**\r\nThe ```grid_node_websocket_api.rst``` should contain the correct functions."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/390",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/390/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/390/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/390/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/390",
        "id": 521274713,
        "node_id": "MDU6SXNzdWU1MjEyNzQ3MTM=",
        "number": 390,
        "title": "Encrypted Linear Regression using Grid Workers gets stuck",
        "user": {
            "login": "Benardi",
            "id": 9937551,
            "node_id": "MDQ6VXNlcjk5Mzc1NTE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/9937551?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Benardi",
            "html_url": "https://github.com/Benardi",
            "followers_url": "https://api.github.com/users/Benardi/followers",
            "following_url": "https://api.github.com/users/Benardi/following{/other_user}",
            "gists_url": "https://api.github.com/users/Benardi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Benardi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Benardi/subscriptions",
            "organizations_url": "https://api.github.com/users/Benardi/orgs",
            "repos_url": "https://api.github.com/users/Benardi/repos",
            "events_url": "https://api.github.com/users/Benardi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Benardi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 817798107,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDc=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-12T01:25:02Z",
        "updated_at": "2019-11-12T08:19:09Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Describe the bug**\r\nExecuting the notebook [Encrypted Linear Regression](https://github.com/OpenMined/PySyft/blob/master/examples/tutorials/advanced/Encrypted%20Linear%20Regression.ipynb) using Grid Workers instead leads to a deadlock ([Edited Notebook](https://github.com/OpenMined/PyGrid/blob/ec372e41e4fee4a3eb25f505ad57e7e24aaff6e5/examples/advanced/Local%20Encrypted%20Linear%20Regression.ipynb)). Cell executing for 2 hours with no result whatsoever.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Start gateway and workers\r\n* python gateway.py --port=5000 --start_local_db\r\n* python websocket_app.py --start_local_db --id=bob --port=3000 --gateway_url=http://localhost:5000\r\n* python websocket_app.py --start_local_db --id=theo --port=3001 --gateway_url=http://localhost:5000\r\n* python websocket_app.py --start_local_db --id=alice --port=3002 --gateway_url=http://localhost:5000\r\n* python websocket_app.py --start_local_db --id=andy --port=3003 --gateway_url=http://localhost:5000\r\n* python websocket_app.py --start_local_db --id=jon --port=3004 --gateway_url=http://localhost:5000\r\n* python websocket_app.py --start_local_db --id=crypto_prov --port=3005 --gateway_url=http://localhost:5000\r\n* python websocket_app.py --start_local_db --id=hbc_worker --port=3006 --gateway_url=http://localhost:5000\r\n2. Open `Local Encrypted Linear Regression` at `examples/advanced/` using Jupyter\r\n3. Click on _Kernel_\r\n   3.1. Click on _Restart & Run All_\r\n\r\n**Expected behavior**\r\nCell execution should have finished yielding a fitted model object \r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n![image](https://user-images.githubusercontent.com/9937551/68633478-d155ef00-04d0-11ea-8aad-d92c0cf3afbf.png)\r\n\r\n**Desktop (please complete the following information):**\r\n - OS: Linux, Debian\r\n - Version 9.11\r\n\r\n**Additional context**\r\n* #373 \r\n  \r\n* [Pull Request](https://github.com/OpenMined/PyGrid/pull/389)\r\n\r\n* [Edited Notebook](https://github.com/OpenMined/PyGrid/blob/ec372e41e4fee4a3eb25f505ad57e7e24aaff6e5/examples/advanced/Local%20Encrypted%20Linear%20Regression.ipynb)"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/389",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/389/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/389/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/389/events",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/389",
        "id": 521271371,
        "node_id": "MDExOlB1bGxSZXF1ZXN0MzM5NjgyMDQ1",
        "number": 389,
        "title": "[WIP] Add Local Encrypted Linear Regression notebook",
        "user": {
            "login": "Benardi",
            "id": 9937551,
            "node_id": "MDQ6VXNlcjk5Mzc1NTE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/9937551?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Benardi",
            "html_url": "https://github.com/Benardi",
            "followers_url": "https://api.github.com/users/Benardi/followers",
            "following_url": "https://api.github.com/users/Benardi/following{/other_user}",
            "gists_url": "https://api.github.com/users/Benardi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Benardi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Benardi/subscriptions",
            "organizations_url": "https://api.github.com/users/Benardi/orgs",
            "repos_url": "https://api.github.com/users/Benardi/repos",
            "events_url": "https://api.github.com/users/Benardi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Benardi/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-11-12T01:12:56Z",
        "updated_at": "2019-12-07T23:36:55Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "pull_request": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/389",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/389",
            "diff_url": "https://github.com/OpenMined/PyGrid/pull/389.diff",
            "patch_url": "https://github.com/OpenMined/PyGrid/pull/389.patch"
        },
        "body": "# Add Local Encrypted Linear Regression notebook using Grid Workers.\r\n\r\n## Description\r\n\r\nAdd [Encrypted Linear Regression](https://github.com/OpenMined/PySyft/blob/master/examples/tutorials/advanced/Encrypted%20Linear%20Regression.ipynb), and replace Virtual Workers for Grid Workers\r\n\r\nFixes #373 \r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## How Has This Been Tested?\r\n\r\nPlease describe the tests that you ran to verify your changes. Provide instructions so we can reproduce. Please also list any relevant details for your test configuration\r\n\r\n- [ ] Execute the same result related code as in the original notebook\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [ ] Unit tests pass locally with my changes\r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/379",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/379/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/379/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/379/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/379",
        "id": 519890228,
        "node_id": "MDU6SXNzdWU1MTk4OTAyMjg=",
        "number": 379,
        "title": "Calling fix_precision() on a remote Tensor crashes",
        "user": {
            "login": "codebecker",
            "id": 22890949,
            "node_id": "MDQ6VXNlcjIyODkwOTQ5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/22890949?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/codebecker",
            "html_url": "https://github.com/codebecker",
            "followers_url": "https://api.github.com/users/codebecker/followers",
            "following_url": "https://api.github.com/users/codebecker/following{/other_user}",
            "gists_url": "https://api.github.com/users/codebecker/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/codebecker/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/codebecker/subscriptions",
            "organizations_url": "https://api.github.com/users/codebecker/orgs",
            "repos_url": "https://api.github.com/users/codebecker/repos",
            "events_url": "https://api.github.com/users/codebecker/events{/privacy}",
            "received_events_url": "https://api.github.com/users/codebecker/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 817798107,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDc=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 1557665901,
                "node_id": "MDU6TGFiZWwxNTU3NjY1OTAx",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/high-priority",
                "name": "high-priority",
                "color": "fc935a",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 6,
        "created_at": "2019-11-08T08:55:24Z",
        "updated_at": "2020-01-09T15:08:13Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "**Describe the bug**\r\nWhile trying to secure aggregate two models calling fix_precision on a remote model crashed. I could reproduce the error by calling fix_precision on a remote tensor with the following code.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\nStart Gateway and Worker on your local machine each in a own cmd:\r\n`python gateway.py --start_local_db --port=5000`\r\n`python websocket_app.py --start_local_db --id=alice --port=3000 --gateway_url=http://localhost:5000`\r\n\r\nRun the following script trying to make a remote tensor fix precision\r\n```\r\nimport torch as th\r\nimport syft as sy\r\nimport grid as gr\r\n\r\nhook = sy.TorchHook(th)\r\ngateway = gr.GridNetwork(\"http://localhost:5000\")\r\n\r\nalice = gr.WebsocketGridClient(hook, address=\"ws://localhost:3000\")\r\n\r\ny = th.tensor([1.,2.,3.,4.]).send(alice).fix_precision()\r\n\r\n```\r\n\r\n**Logs and Error**\r\nScript Log:\r\n```\r\nWebsocket connection closed (worker: alice)\r\nCreated new websocket connection\r\nTraceback (most recent call last):\r\n  File \"[...]PyGrid/playground/tut1.py\", line 14, in <module>\r\n    y = th.tensor([1.,2.,3.,4.]).send(alice).fix_precision()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/frameworks/torch/tensors/interpreters/native.py\", line 653, in fix_prec\r\n    self.child = self.child.fix_prec(*args, **kwargs)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/generic/pointers/pointer_tensor.py\", line 334, in fix_prec\r\n    response = self.owner.send_command(self.location, command)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/base.py\", line 489, in send_command\r\n    ret_val = self.send_msg(Operation(message, return_ids), location=recipient)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/base.py\", line 258, in send_msg\r\n    bin_response = self._send_msg(bin_message, location)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/virtual.py\", line 7, in _send_msg\r\n    return location._recv_msg(message)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/websocket_client.py\", line 98, in _recv_msg\r\n    \"Websocket connection closed and creation of new connection failed.\"\r\nRuntimeError: Websocket connection closed and creation of new connection failed.\r\nException ignored in: <bound method ObjectPointer.__del__ of [PointerTensor | me:51780967838 -> alice:36494535748]>\r\nTraceback (most recent call last):\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/generic/pointers/object_pointer.py\", line 341, in __del__\r\n    self.owner.send_msg(ForceObjectDeleteMessage(self.id_at_location), self.location)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/base.py\", line 258, in send_msg\r\n    bin_response = self._send_msg(bin_message, location)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/virtual.py\", line 7, in _send_msg\r\n    return location._recv_msg(message)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/websocket_client.py\", line 86, in _recv_msg\r\n    response = self._forward_to_websocket_server_worker(message)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/grid/websocket_client.py\", line 208, in _forward_to_websocket_server_worker\r\n    response = self.ws.recv()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_core.py\", line 313, in recv\r\n    opcode, data = self.recv_data()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_core.py\", line 330, in recv_data\r\n    opcode, frame = self.recv_data_frame(control_frame)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_core.py\", line 343, in recv_data_frame\r\n    frame = self.recv_frame()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_core.py\", line 377, in recv_frame\r\n    return self.frame_buffer.recv_frame()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_abnf.py\", line 361, in recv_frame\r\n    self.recv_header()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_abnf.py\", line 309, in recv_header\r\n    header = self.recv_strict(2)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_abnf.py\", line 396, in recv_strict\r\n    bytes_ = self.recv(min(16384, shortage))\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_core.py\", line 452, in _recv\r\n    return recv(self.sock, bufsize)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/websocket/_socket.py\", line 115, in recv\r\n    \"Connection is already closed.\")\r\nwebsocket._exceptions.WebSocketConnectionClosedException: Connection is already closed.\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nWorker Alice Log:\r\n```\r\nWorker alice couldn't recognize worker me\r\nTraceback (most recent call last):\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/gevent/pywsgi.py\", line 976, in handle_one_response\r\n    self.run_application()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/geventwebsocket/handler.py\", line 75, in run_application\r\n    self.run_websocket()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/geventwebsocket/handler.py\", line 52, in run_websocket\r\n    list(self.application(self.environ, lambda s, h, e=None: []))\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/flask_sockets.py\", line 45, in __call__\r\n    handler(environment, **values)\r\n  File \"[...]PyGrid/app/websocket/app/main/events/__init__.py\", line 60, in socket_api\r\n    response = route_requests(message)\r\n  File \"[...]PyGrid/app/websocket/app/main/events/__init__.py\", line 40, in route_requests\r\n    return forward_binary_message(message)\r\n  File \"[...]PyGrid/app/websocket/app/main/auth/__init__.py\", line 60, in wrapped\r\n    return f(*args, **kwargs)\r\n  File \"[...]PyGrid/app/websocket/app/main/events/syft_events.py\", line 24, in forward_binary_message\r\n    decoded_response = current_user.worker._recv_msg(message)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/virtual.py\", line 10, in _recv_msg\r\n    return self.recv_msg(message)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/base.py\", line 292, in recv_msg\r\n    response = self._message_router[msg_type](contents)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/base.py\", line 412, in execute_command\r\n    response = getattr(_self, command_name)(*args, **kwargs)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/frameworks/torch/tensors/interpreters/native.py\", line 704, in fix_prec\r\n    fpt_tensor = fpt_tensor.wrap()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/generic/tensor.py\", line 49, in wrap\r\n    self.owner.register_obj(wrapper, obj_id=self.id)\r\nAttributeError: 'str' object has no attribute 'register_obj'\r\n2019-11-08T08:54:29Z {'REMOTE_ADDR': '::ffff:127.0.0.1', 'REMOTE_PORT': '36726', 'HTTP_HOST': 'localhost:3000', (hidden keys: 25)} failed with AttributeError\r\n\r\nWorker alice couldn't recognize worker me\r\nTraceback (most recent call last):\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/gevent/pywsgi.py\", line 976, in handle_one_response\r\n    self.run_application()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/geventwebsocket/handler.py\", line 75, in run_application\r\n    self.run_websocket()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/geventwebsocket/handler.py\", line 52, in run_websocket\r\n    list(self.application(self.environ, lambda s, h, e=None: []))\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/flask/app.py\", line 2463, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/flask_sockets.py\", line 45, in __call__\r\n    handler(environment, **values)\r\n  File \"[...]PyGrid/app/websocket/app/main/events/__init__.py\", line 60, in socket_api\r\n    response = route_requests(message)\r\n  File \"[...]PyGrid/app/websocket/app/main/events/__init__.py\", line 40, in route_requests\r\n    return forward_binary_message(message)\r\n  File \"[...]PyGrid/app/websocket/app/main/auth/__init__.py\", line 60, in wrapped\r\n    return f(*args, **kwargs)\r\n  File \"[...]PyGrid/app/websocket/app/main/events/syft_events.py\", line 24, in forward_binary_message\r\n    decoded_response = current_user.worker._recv_msg(message)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/virtual.py\", line 10, in _recv_msg\r\n    return self.recv_msg(message)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/base.py\", line 292, in recv_msg\r\n    response = self._message_router[msg_type](contents)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/workers/base.py\", line 412, in execute_command\r\n    response = getattr(_self, command_name)(*args, **kwargs)\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/frameworks/torch/tensors/interpreters/native.py\", line 704, in fix_prec\r\n    fpt_tensor = fpt_tensor.wrap()\r\n  File \"[...]pysyft/venv/lib/python3.6/site-packages/syft/generic/tensor.py\", line 49, in wrap\r\n    self.owner.register_obj(wrapper, obj_id=self.id)\r\nAttributeError: 'str' object has no attribute 'register_obj'\r\n2019-11-08T08:54:29Z {'REMOTE_ADDR': '::ffff:127.0.0.1', 'REMOTE_PORT': '36728', 'HTTP_HOST': 'localhost:3000', (hidden keys: 25)} failed with AttributeError\r\n\r\n```\r\n**Expected behavior**\r\nThe tensor tensor should be fixed precision and thus be shared among other workers. This is needed for secure aggregation with shared gradients.\r\n\r\n**Desktop:**\r\n - OS: Mint 17.1\r\n\r\nI'm not sure what else could be helpful but here is my grid and syft version:\r\n\r\nPackage              Version         \r\n-------------------- ----------------\r\ngrid                 0.1.0.0a1.dev402\r\nsyft                 0.2.0a2   \r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/373",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/373/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/373/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/373/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/373",
        "id": 516673574,
        "node_id": "MDU6SXNzdWU1MTY2NzM1NzQ=",
        "number": 373,
        "title": "[Notebook] Encrypted Linear Regression",
        "user": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "Benardi",
            "id": 9937551,
            "node_id": "MDQ6VXNlcjk5Mzc1NTE=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/9937551?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Benardi",
            "html_url": "https://github.com/Benardi",
            "followers_url": "https://api.github.com/users/Benardi/followers",
            "following_url": "https://api.github.com/users/Benardi/following{/other_user}",
            "gists_url": "https://api.github.com/users/Benardi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Benardi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Benardi/subscriptions",
            "organizations_url": "https://api.github.com/users/Benardi/orgs",
            "repos_url": "https://api.github.com/users/Benardi/repos",
            "events_url": "https://api.github.com/users/Benardi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Benardi/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "Benardi",
                "id": 9937551,
                "node_id": "MDQ6VXNlcjk5Mzc1NTE=",
                "avatar_url": "https://avatars0.githubusercontent.com/u/9937551?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Benardi",
                "html_url": "https://github.com/Benardi",
                "followers_url": "https://api.github.com/users/Benardi/followers",
                "following_url": "https://api.github.com/users/Benardi/following{/other_user}",
                "gists_url": "https://api.github.com/users/Benardi/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Benardi/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Benardi/subscriptions",
                "organizations_url": "https://api.github.com/users/Benardi/orgs",
                "repos_url": "https://api.github.com/users/Benardi/repos",
                "events_url": "https://api.github.com/users/Benardi/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Benardi/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 2,
        "created_at": "2019-11-02T18:00:53Z",
        "updated_at": "2019-11-05T03:30:11Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Reproduce [Encrypted Linear Regression](https://github.com/OpenMined/PySyft/blob/master/examples/tutorials/advanced/Encrypted%20Linear%20Regression.ipynb) notebook.\r\n\r\n\r\n**Acceptance criteria:**\r\n- Keep the author's name and add your name.\r\n- Perform Encrypted Linear Regression using PyGrid Nodes."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/372",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/372/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/372/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/372/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/372",
        "id": 516672681,
        "node_id": "MDU6SXNzdWU1MTY2NzI2ODE=",
        "number": 372,
        "title": "[Notebook] Federated Word Vectors",
        "user": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "allibell",
            "id": 25647843,
            "node_id": "MDQ6VXNlcjI1NjQ3ODQz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/25647843?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/allibell",
            "html_url": "https://github.com/allibell",
            "followers_url": "https://api.github.com/users/allibell/followers",
            "following_url": "https://api.github.com/users/allibell/following{/other_user}",
            "gists_url": "https://api.github.com/users/allibell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/allibell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/allibell/subscriptions",
            "organizations_url": "https://api.github.com/users/allibell/orgs",
            "repos_url": "https://api.github.com/users/allibell/repos",
            "events_url": "https://api.github.com/users/allibell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/allibell/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "allibell",
                "id": 25647843,
                "node_id": "MDQ6VXNlcjI1NjQ3ODQz",
                "avatar_url": "https://avatars2.githubusercontent.com/u/25647843?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/allibell",
                "html_url": "https://github.com/allibell",
                "followers_url": "https://api.github.com/users/allibell/followers",
                "following_url": "https://api.github.com/users/allibell/following{/other_user}",
                "gists_url": "https://api.github.com/users/allibell/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/allibell/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/allibell/subscriptions",
                "organizations_url": "https://api.github.com/users/allibell/orgs",
                "repos_url": "https://api.github.com/users/allibell/repos",
                "events_url": "https://api.github.com/users/allibell/events{/privacy}",
                "received_events_url": "https://api.github.com/users/allibell/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-11-02T17:57:33Z",
        "updated_at": "2020-02-02T18:37:57Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Reproduce [Federated Word Vectors](https://github.com/OpenMined/PySyft/blob/master/examples/tutorials/advanced/Federated%20Word%20Vectors.ipynb) using PyGrid Architecture.\r\n\r\n\r\n**Acceptance criteria:**\r\n- Keep the same structure used at [Federated Word Vectors](https://github.com/OpenMined/PySyft/blob/master/examples/tutorials/advanced/Federated%20Word%20Vectors.ipynb).\r\n- Keep the author's name and add your name.\r\n- Create a notebook to register dataset tensors with tags.\r\n- Create a different notebook using PyGrid network to search datasets by tags.\r\n- Perform Federated training using the found pointers."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/330",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/330/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/330/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/330/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/330",
        "id": 496302091,
        "node_id": "MDU6SXNzdWU0OTYzMDIwOTE=",
        "number": 330,
        "title": "Add logging to PyGrid",
        "user": {
            "login": "tallalj",
            "id": 3524425,
            "node_id": "MDQ6VXNlcjM1MjQ0MjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3524425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tallalj",
            "html_url": "https://github.com/tallalj",
            "followers_url": "https://api.github.com/users/tallalj/followers",
            "following_url": "https://api.github.com/users/tallalj/following{/other_user}",
            "gists_url": "https://api.github.com/users/tallalj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tallalj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tallalj/subscriptions",
            "organizations_url": "https://api.github.com/users/tallalj/orgs",
            "repos_url": "https://api.github.com/users/tallalj/repos",
            "events_url": "https://api.github.com/users/tallalj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tallalj/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 874099301,
                "node_id": "MDU6TGFiZWw4NzQwOTkzMDE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/discussion",
                "name": "discussion",
                "color": "b9ea75",
                "default": false,
                "description": ""
            },
            {
                "id": 817798109,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDk=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-09-20T11:35:21Z",
        "updated_at": "2019-10-29T15:12:24Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "Ideally should have following:\r\n\r\n- [ ] Save logs to db (ideally should have defined log types for easy filtering)\r\n\r\n- [ ] Verbose settings to set the log level printed on console\r\n\r\n- [ ] Log requests received via api\r\n\r\n- [ ] Log db transactions and success/ errors in them\r\n\r\n- [ ] Allow users to flush logs from db\r\n\r\n- [ ] Allow users to fetch logs"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/326",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/326/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/326/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/326/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/326",
        "id": 495361650,
        "node_id": "MDU6SXNzdWU0OTUzNjE2NTA=",
        "number": 326,
        "title": "Add readme to grid node app",
        "user": {
            "login": "tallalj",
            "id": 3524425,
            "node_id": "MDQ6VXNlcjM1MjQ0MjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/3524425?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tallalj",
            "html_url": "https://github.com/tallalj",
            "followers_url": "https://api.github.com/users/tallalj/followers",
            "following_url": "https://api.github.com/users/tallalj/following{/other_user}",
            "gists_url": "https://api.github.com/users/tallalj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tallalj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tallalj/subscriptions",
            "organizations_url": "https://api.github.com/users/tallalj/orgs",
            "repos_url": "https://api.github.com/users/tallalj/repos",
            "events_url": "https://api.github.com/users/tallalj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tallalj/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 1564066377,
                "node_id": "MDU6TGFiZWwxNTY0MDY2Mzc3",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/documentation",
                "name": "documentation",
                "color": "26c6f2",
                "default": true,
                "description": ""
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-09-18T17:34:53Z",
        "updated_at": "2019-10-29T15:12:11Z",
        "closed_at": null,
        "author_association": "CONTRIBUTOR",
        "body": "I think we should:\r\nAdd a readme, explaining the websocket app, its functions and how it fits in the bigger picture.\r\n\r\n- [ ] Explanation of the websocket app\r\n\r\n- [ ] document its api \r\n\r\n- [ ] Breakdown of how to install/deploy the app\r\n\r\n- [ ] Breakdown of how to connect local syft to a node. (Maybe link to a notebook)\r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/284",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/284/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/284/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/284/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/284",
        "id": 487813754,
        "node_id": "MDU6SXNzdWU0ODc4MTM3NTQ=",
        "number": 284,
        "title": "Grid search fails if multiple tensors are in the same node",
        "user": {
            "login": "mari-linhares",
            "id": 8157164,
            "node_id": "MDQ6VXNlcjgxNTcxNjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/8157164?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mari-linhares",
            "html_url": "https://github.com/mari-linhares",
            "followers_url": "https://api.github.com/users/mari-linhares/followers",
            "following_url": "https://api.github.com/users/mari-linhares/following{/other_user}",
            "gists_url": "https://api.github.com/users/mari-linhares/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mari-linhares/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mari-linhares/subscriptions",
            "organizations_url": "https://api.github.com/users/mari-linhares/orgs",
            "repos_url": "https://api.github.com/users/mari-linhares/repos",
            "events_url": "https://api.github.com/users/mari-linhares/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mari-linhares/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 817798107,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDc=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-08-31T21:37:23Z",
        "updated_at": "2019-10-29T15:13:07Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "If a single node holds 2 or more tensors with the same tag grid search returns only one pointer."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/266",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/266/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/266/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/266/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/266",
        "id": 476614489,
        "node_id": "MDU6SXNzdWU0NzY2MTQ0ODk=",
        "number": 266,
        "title": "Connection Pool Full",
        "user": {
            "login": "sfmajors373",
            "id": 14354106,
            "node_id": "MDQ6VXNlcjE0MzU0MTA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/14354106?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sfmajors373",
            "html_url": "https://github.com/sfmajors373",
            "followers_url": "https://api.github.com/users/sfmajors373/followers",
            "following_url": "https://api.github.com/users/sfmajors373/following{/other_user}",
            "gists_url": "https://api.github.com/users/sfmajors373/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/sfmajors373/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/sfmajors373/subscriptions",
            "organizations_url": "https://api.github.com/users/sfmajors373/orgs",
            "repos_url": "https://api.github.com/users/sfmajors373/repos",
            "events_url": "https://api.github.com/users/sfmajors373/events{/privacy}",
            "received_events_url": "https://api.github.com/users/sfmajors373/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 817798107,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDc=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/bug",
                "name": "bug",
                "color": "d73a4a",
                "default": true,
                "description": "Something isn't working"
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2019-08-05T00:53:42Z",
        "updated_at": "2019-10-29T15:13:32Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Hi,\r\nI am following the tutorial to get started with PySyft for Android: https://towardsdatascience.com/pysyft-android-b28da47a767e  \r\nI have the android app running, the server is running, the socket is started but when I run `bob.connect()` I get this error in the notebook:\r\n```\r\nW0804 11:37:27.632236 140307790296832 connectionpool.py:275] Connection pool is full, discarding connection: localhost\r\n```\r\nand this in the WSGI terminal:\r\n```\r\n(9705) accepted ('::1', 56898, 0, 0)\r\n::1 - - [04/Aug/2019 11:40:56] \"GET /socket.io/?transport=polling&EIO=3&t=1564933256.8231187 HTTP/1.1\" 200 345 0.000715\r\n::1 - - [04/Aug/2019 11:40:56] \"POST /socket.io/?transport=polling&EIO=3&sid=46cc952cc1f145c7a849a075947a2b69 HTTP/1.1\" 200 175 0.000170\r\n::1 - - [04/Aug/2019 11:40:56] \"POST /socket.io/?transport=polling&EIO=3&sid=46cc952cc1f145c7a849a075947a2b69 HTTP/1.1\" 200 175 0.000511\r\n(9705) accepted ('::1', 56900, 0, 0)\r\n::1 - - [04/Aug/2019 11:40:56] \"GET /socket.io/?transport=polling&EIO=3&sid=46cc952cc1f145c7a849a075947a2b69&t=1564933256.8271253 HTTP/1.1\" 200 191 0.000148\r\n```\r\n"
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/240",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/240/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/240/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/240/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/240",
        "id": 455795903,
        "node_id": "MDU6SXNzdWU0NTU3OTU5MDM=",
        "number": 240,
        "title": "POC: SMPC evaluation",
        "user": {
            "login": "mari-linhares",
            "id": 8157164,
            "node_id": "MDQ6VXNlcjgxNTcxNjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/8157164?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mari-linhares",
            "html_url": "https://github.com/mari-linhares",
            "followers_url": "https://api.github.com/users/mari-linhares/followers",
            "following_url": "https://api.github.com/users/mari-linhares/following{/other_user}",
            "gists_url": "https://api.github.com/users/mari-linhares/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mari-linhares/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mari-linhares/subscriptions",
            "organizations_url": "https://api.github.com/users/mari-linhares/orgs",
            "repos_url": "https://api.github.com/users/mari-linhares/repos",
            "events_url": "https://api.github.com/users/mari-linhares/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mari-linhares/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 1380708185,
                "node_id": "MDU6TGFiZWwxMzgwNzA4MTg1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/encryption",
                "name": "encryption",
                "color": "166999",
                "default": false,
                "description": ""
            },
            {
                "id": 827313811,
                "node_id": "MDU6TGFiZWw4MjczMTM4MTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/work-in-progress",
                "name": "work-in-progress",
                "color": "e7ef70",
                "default": false,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "mari-linhares",
            "id": 8157164,
            "node_id": "MDQ6VXNlcjgxNTcxNjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/8157164?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mari-linhares",
            "html_url": "https://github.com/mari-linhares",
            "followers_url": "https://api.github.com/users/mari-linhares/followers",
            "following_url": "https://api.github.com/users/mari-linhares/following{/other_user}",
            "gists_url": "https://api.github.com/users/mari-linhares/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mari-linhares/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mari-linhares/subscriptions",
            "organizations_url": "https://api.github.com/users/mari-linhares/orgs",
            "repos_url": "https://api.github.com/users/mari-linhares/repos",
            "events_url": "https://api.github.com/users/mari-linhares/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mari-linhares/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "mari-linhares",
                "id": 8157164,
                "node_id": "MDQ6VXNlcjgxNTcxNjQ=",
                "avatar_url": "https://avatars3.githubusercontent.com/u/8157164?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/mari-linhares",
                "html_url": "https://github.com/mari-linhares",
                "followers_url": "https://api.github.com/users/mari-linhares/followers",
                "following_url": "https://api.github.com/users/mari-linhares/following{/other_user}",
                "gists_url": "https://api.github.com/users/mari-linhares/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/mari-linhares/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/mari-linhares/subscriptions",
                "organizations_url": "https://api.github.com/users/mari-linhares/orgs",
                "repos_url": "https://api.github.com/users/mari-linhares/repos",
                "events_url": "https://api.github.com/users/mari-linhares/events{/privacy}",
                "received_events_url": "https://api.github.com/users/mari-linhares/received_events",
                "type": "User",
                "site_admin": false
            },
            {
                "login": "IonesioJunior",
                "id": 26658472,
                "node_id": "MDQ6VXNlcjI2NjU4NDcy",
                "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/IonesioJunior",
                "html_url": "https://github.com/IonesioJunior",
                "followers_url": "https://api.github.com/users/IonesioJunior/followers",
                "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
                "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
                "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
                "repos_url": "https://api.github.com/users/IonesioJunior/repos",
                "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
                "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 3,
        "created_at": "2019-06-13T15:05:39Z",
        "updated_at": "2019-10-29T15:13:47Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "### Demo of [SMPC evaluation](https://blog.openmined.org/encrypted-deep-learning-classification-with-pysyft/).\r\n\r\n**Blocked by: #204 #206 #205 #200 #207 #210 **\r\n\r\n---\r\n\r\nSame demo presented in [this blogpost](https://blog.openmined.org/encrypted-deep-learning-classification-with-pysyft/) but using grid workers:\r\n\r\n* We'll use a grid worker as a model host that wants to keep the model safe (users don't know what the model looks like).\r\n* We'll use several grid workers as possible users that want to get predictions from this model in a private way (the model host doesn't know what the user's data looks like)\r\n\r\n\r\nAcceptance criteria:\r\n\r\n* A jupyter notebook with detailed instructions of what each step is doing.\r\n* A live demo of a website running this application."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/229",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/229/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/229/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/229/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/229",
        "id": 449352703,
        "node_id": "MDU6SXNzdWU0NDkzNTI3MDM=",
        "number": 229,
        "title": "Optimizer support for encrypted federated training",
        "user": {
            "login": "mari-linhares",
            "id": 8157164,
            "node_id": "MDQ6VXNlcjgxNTcxNjQ=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/8157164?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mari-linhares",
            "html_url": "https://github.com/mari-linhares",
            "followers_url": "https://api.github.com/users/mari-linhares/followers",
            "following_url": "https://api.github.com/users/mari-linhares/following{/other_user}",
            "gists_url": "https://api.github.com/users/mari-linhares/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mari-linhares/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mari-linhares/subscriptions",
            "organizations_url": "https://api.github.com/users/mari-linhares/orgs",
            "repos_url": "https://api.github.com/users/mari-linhares/repos",
            "events_url": "https://api.github.com/users/mari-linhares/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mari-linhares/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1645294002,
                "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                "name": "PyGrid",
                "color": "d93f0b",
                "default": false,
                "description": ""
            },
            {
                "id": 817798109,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMDk=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/enhancement",
                "name": "enhancement",
                "color": "a2eeef",
                "default": true,
                "description": "New feature or request"
            },
            {
                "id": 817798111,
                "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                "name": "good first issue",
                "color": "7057ff",
                "default": true,
                "description": "Good for newcomers"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-05-28T16:00:23Z",
        "updated_at": "2019-10-29T15:14:17Z",
        "closed_at": null,
        "author_association": "COLLABORATOR",
        "body": "Part of Epic: #224\r\n--\r\n\r\n**Blocked by: #227**\r\n\r\nAcceptance criteria:\r\n- Add an example to #227 notebook showing how to use optimizers for backprop."
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/228",
        "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
        "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/228/labels{/name}",
        "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/228/comments",
        "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/228/events",
        "html_url": "https://github.com/OpenMined/PyGrid/issues/228",
        "id": 449351675,
        "node_id": "MDU6SXNzdWU0NDkzNTE2NzU=",
        "number": 228,
        "title": "Automatic Differential Privacy",
        "user": {
            "login": "iamtrask",
            "id": 4328594,
            "node_id": "MDQ6VXNlcjQzMjg1OTQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4328594?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iamtrask",
            "html_url": "https://github.com/iamtrask",
            "followers_url": "https://api.github.com/users/iamtrask/followers",
            "following_url": "https://api.github.com/users/iamtrask/following{/other_user}",
            "gists_url": "https://api.github.com/users/iamtrask/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iamtrask/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iamtrask/subscriptions",
            "organizations_url": "https://api.github.com/users/iamtrask/orgs",
            "repos_url": "https://api.github.com/users/iamtrask/repos",
            "events_url": "https://api.github.com/users/iamtrask/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iamtrask/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1353400255,
                "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                "name": "epic",
                "color": "3E4B9E",
                "default": false,
                "description": ""
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": {
            "login": "iamtrask",
            "id": 4328594,
            "node_id": "MDQ6VXNlcjQzMjg1OTQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4328594?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/iamtrask",
            "html_url": "https://github.com/iamtrask",
            "followers_url": "https://api.github.com/users/iamtrask/followers",
            "following_url": "https://api.github.com/users/iamtrask/following{/other_user}",
            "gists_url": "https://api.github.com/users/iamtrask/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/iamtrask/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/iamtrask/subscriptions",
            "organizations_url": "https://api.github.com/users/iamtrask/orgs",
            "repos_url": "https://api.github.com/users/iamtrask/repos",
            "events_url": "https://api.github.com/users/iamtrask/events{/privacy}",
            "received_events_url": "https://api.github.com/users/iamtrask/received_events",
            "type": "User",
            "site_admin": false
        },
        "assignees": [
            {
                "login": "iamtrask",
                "id": 4328594,
                "node_id": "MDQ6VXNlcjQzMjg1OTQ=",
                "avatar_url": "https://avatars2.githubusercontent.com/u/4328594?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/iamtrask",
                "html_url": "https://github.com/iamtrask",
                "followers_url": "https://api.github.com/users/iamtrask/followers",
                "following_url": "https://api.github.com/users/iamtrask/following{/other_user}",
                "gists_url": "https://api.github.com/users/iamtrask/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/iamtrask/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/iamtrask/subscriptions",
                "organizations_url": "https://api.github.com/users/iamtrask/orgs",
                "repos_url": "https://api.github.com/users/iamtrask/repos",
                "events_url": "https://api.github.com/users/iamtrask/events{/privacy}",
                "received_events_url": "https://api.github.com/users/iamtrask/received_events",
                "type": "User",
                "site_admin": false
            }
        ],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-05-28T15:58:35Z",
        "updated_at": "2019-05-28T16:14:38Z",
        "closed_at": null,
        "author_association": "MEMBER",
        "body": "Part of #223 Project\r\n--\r\n\r\n**Description:** In this epic, we want to add functionality to Grid and PySyft which allows for the automatic tracking of a privacy budget for entities in a dataset over time such that we can make formal guarantees around the amount of information leaked whenever a private asset is published (such as an AI model). It is preferred for this infrastructure to be as automated as possible, but applications (UIs) which allow for the vetting of digital assets for private information by humans are also allowed (and are likely essential for earlier adopters)."
    }
]