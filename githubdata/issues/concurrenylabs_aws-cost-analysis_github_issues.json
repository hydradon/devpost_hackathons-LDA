[
    {
        "url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/15",
        "repository_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis",
        "labels_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/15/labels{/name}",
        "comments_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/15/comments",
        "events_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/15/events",
        "html_url": "https://github.com/concurrencylabs/aws-cost-analysis/issues/15",
        "id": 376220214,
        "node_id": "MDU6SXNzdWUzNzYyMjAyMTQ=",
        "number": 15,
        "title": "Athena results are much different than Cost Explorer ?",
        "user": {
            "login": "robpark",
            "id": 105604,
            "node_id": "MDQ6VXNlcjEwNTYwNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/105604?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/robpark",
            "html_url": "https://github.com/robpark",
            "followers_url": "https://api.github.com/users/robpark/followers",
            "following_url": "https://api.github.com/users/robpark/following{/other_user}",
            "gists_url": "https://api.github.com/users/robpark/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/robpark/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/robpark/subscriptions",
            "organizations_url": "https://api.github.com/users/robpark/orgs",
            "repos_url": "https://api.github.com/users/robpark/repos",
            "events_url": "https://api.github.com/users/robpark/events{/privacy}",
            "received_events_url": "https://api.github.com/users/robpark/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-11-01T01:36:38Z",
        "updated_at": "2018-11-16T14:23:33Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "We have a very large CSV that's produced for the billing report from AWS, so it doesn't load in Excel for parsing there.\r\n\r\nI did get the report_utils script to execute successfully with no errors and data does appear in Athena tables, but when I run: \r\n\r\n```SELECT round(sum(cast(lineitem_unblendedcost AS double)),2) AS sum_unblendedcost\r\nFROM  hourly_20180901_20181001``` only returns a number that is ~ 20% of the actual expected amount shown by cost explorer.\r\n\r\nHave you seen anything like this?\r\nWould you have any suggestions as to where to look?"
    },
    {
        "url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/14",
        "repository_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis",
        "labels_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/14/labels{/name}",
        "comments_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/14/comments",
        "events_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/14/events",
        "html_url": "https://github.com/concurrencylabs/aws-cost-analysis/issues/14",
        "id": 373450465,
        "node_id": "MDU6SXNzdWUzNzM0NTA0NjU=",
        "number": 14,
        "title": "how to handle aws schema changes",
        "user": {
            "login": "xxxVxxx",
            "id": 4587135,
            "node_id": "MDQ6VXNlcjQ1ODcxMzU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/4587135?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/xxxVxxx",
            "html_url": "https://github.com/xxxVxxx",
            "followers_url": "https://api.github.com/users/xxxVxxx/followers",
            "following_url": "https://api.github.com/users/xxxVxxx/following{/other_user}",
            "gists_url": "https://api.github.com/users/xxxVxxx/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/xxxVxxx/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/xxxVxxx/subscriptions",
            "organizations_url": "https://api.github.com/users/xxxVxxx/orgs",
            "repos_url": "https://api.github.com/users/xxxVxxx/repos",
            "events_url": "https://api.github.com/users/xxxVxxx/events{/privacy}",
            "received_events_url": "https://api.github.com/users/xxxVxxx/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 3,
        "created_at": "2018-10-24T12:11:42Z",
        "updated_at": "2018-11-08T20:41:51Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "The problem with using Athena or quicksight is that it , it does not take into consideration the dynamic change in schema of the billing files , that AWS normally does. Due to this the reports starts breaking. \r\nIs there a way to handle this using glue or any other method for this tool. Would really be helpful."
    },
    {
        "url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/11",
        "repository_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis",
        "labels_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/11/labels{/name}",
        "comments_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/11/comments",
        "events_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/11/events",
        "html_url": "https://github.com/concurrencylabs/aws-cost-analysis/issues/11",
        "id": 339401985,
        "node_id": "MDU6SXNzdWUzMzk0MDE5ODU=",
        "number": 11,
        "title": "SyntaxError: invalid syntax",
        "user": {
            "login": "Xeroxxx",
            "id": 1109954,
            "node_id": "MDQ6VXNlcjExMDk5NTQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1109954?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Xeroxxx",
            "html_url": "https://github.com/Xeroxxx",
            "followers_url": "https://api.github.com/users/Xeroxxx/followers",
            "following_url": "https://api.github.com/users/Xeroxxx/following{/other_user}",
            "gists_url": "https://api.github.com/users/Xeroxxx/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Xeroxxx/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Xeroxxx/subscriptions",
            "organizations_url": "https://api.github.com/users/Xeroxxx/orgs",
            "repos_url": "https://api.github.com/users/Xeroxxx/repos",
            "events_url": "https://api.github.com/users/Xeroxxx/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Xeroxxx/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 2,
        "created_at": "2018-07-09T10:58:35Z",
        "updated_at": "2018-07-10T07:37:54Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Hello,\r\nI'm getting the following error with python 3.6.5. It doesn't matter if I'm running it with or w/o parameters.\r\n\r\nCan anyone help me with this?\r\n\r\n`Traceback (most recent call last):\r\n  File \"report_utils.py\", line 7, in <module>\r\n    import awscostusageprocessor.processor as cur\r\n  File \"/home/marcel/Desktop/AWS/aws-cost-analysis/awscostusageprocessor/processor.py\", line 109\r\n    print \"Number of records: [{}]\".format(record_count)\r\n                                  ^\r\nSyntaxError: invalid syntax\r\n`\r\n\r\nCheers"
    },
    {
        "url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/3",
        "repository_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis",
        "labels_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/3/labels{/name}",
        "comments_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/3/comments",
        "events_url": "https://api.github.com/repos/concurrencylabs/aws-cost-analysis/issues/3/events",
        "html_url": "https://github.com/concurrencylabs/aws-cost-analysis/issues/3",
        "id": 271332675,
        "node_id": "MDU6SXNzdWUyNzEzMzI2NzU=",
        "number": 3,
        "title": "Convert date columns to date type in generated Athena table",
        "user": {
            "login": "scfox",
            "id": 12850640,
            "node_id": "MDQ6VXNlcjEyODUwNjQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/12850640?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/scfox",
            "html_url": "https://github.com/scfox",
            "followers_url": "https://api.github.com/users/scfox/followers",
            "following_url": "https://api.github.com/users/scfox/following{/other_user}",
            "gists_url": "https://api.github.com/users/scfox/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/scfox/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/scfox/subscriptions",
            "organizations_url": "https://api.github.com/users/scfox/orgs",
            "repos_url": "https://api.github.com/users/scfox/repos",
            "events_url": "https://api.github.com/users/scfox/events{/privacy}",
            "received_events_url": "https://api.github.com/users/scfox/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 10,
        "created_at": "2017-11-06T01:06:16Z",
        "updated_at": "2019-01-22T14:18:22Z",
        "closed_at": null,
        "author_association": "NONE",
        "body": "Would allow for finer grained time queries.  Right now all the dates are put in as string data types, making constructing a query around ranges difficult.\r\n\r\nCool tool.  Thanks."
    }
]