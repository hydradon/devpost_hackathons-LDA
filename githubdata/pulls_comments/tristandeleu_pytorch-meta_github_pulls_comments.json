[
    {
        "url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/341198056",
        "pull_request_review_id": 309960200,
        "id": 341198056,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTE5ODA1Ng==",
        "diff_hunk": "@@ -1,6 +1,7 @@\n import warnings\n \n from torchmeta.datasets import Omniglot, MiniImagenet, TieredImagenet\n+from torchmeta.datasets.cifar100 import CIFARFS",
        "path": "torchmeta/datasets/helpers.py",
        "position": null,
        "original_position": 4,
        "commit_id": "2f96538848fa2bae46b07dd5f5ca80679c42ed49",
        "original_commit_id": "2906792f175c8b07b54bc0c8fec9a8857353c068",
        "user": {
            "login": "tristandeleu",
            "id": 2018752,
            "node_id": "MDQ6VXNlcjIwMTg3NTI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2018752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tristandeleu",
            "html_url": "https://github.com/tristandeleu",
            "followers_url": "https://api.github.com/users/tristandeleu/followers",
            "following_url": "https://api.github.com/users/tristandeleu/following{/other_user}",
            "gists_url": "https://api.github.com/users/tristandeleu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tristandeleu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tristandeleu/subscriptions",
            "organizations_url": "https://api.github.com/users/tristandeleu/orgs",
            "repos_url": "https://api.github.com/users/tristandeleu/repos",
            "events_url": "https://api.github.com/users/tristandeleu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tristandeleu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can import `CIFARFS` directly from `torchmeta.datasets` for consistency with the other datasets",
        "created_at": "2019-10-31T15:15:40Z",
        "updated_at": "2019-10-31T20:31:23Z",
        "html_url": "https://github.com/tristandeleu/pytorch-meta/pull/11#discussion_r341198056",
        "pull_request_url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/11",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/341198056"
            },
            "html": {
                "href": "https://github.com/tristandeleu/pytorch-meta/pull/11#discussion_r341198056"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/11"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/341198379",
        "pull_request_review_id": 309960200,
        "id": 341198379,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTE5ODM3OQ==",
        "diff_hunk": "@@ -167,3 +168,57 @@ def tieredimagenet(folder, shots, ways, shuffle=True, test_shots=None,\n     dataset.seed(seed)\n \n     return dataset\n+\n+def cifar_fs(folder, shots, ways, shuffle=True, test_shots=None,\n+             seed=None, **kwargs):\n+    \"\"\"Helper function to create a meta-dataset for the CIFAR-FS dataset.\n+\n+    Parameters\n+    ----------\n+    folder : string\n+        Root directory where the dataset folder `cifar100` exists.\n+\n+    shots : int\n+        Number of (training) examples per class in each task. This corresponds \n+        to `k` in `k-shot` classification.\n+\n+    ways : int\n+        Number of classes per task. This corresponds to `N` in `N-way` \n+        classification.\n+\n+    shuffle : bool (default: `True`)\n+        Shuffle the examples when creating the tasks.\n+\n+    test_shots : int, optional\n+        Number of test examples per class in each task. If `None`, then the \n+        number of test examples is equal to the number of training examples per \n+        class.\n+\n+    seed : int, optional\n+        Random seed to be used in the meta-dataset.\n+\n+    kwargs\n+        Additional arguments passed to the `CIFARFS` class.\n+\n+    See also\n+    --------\n+    `datasets.cifar100.CIFARFS` : Meta-dataset for the CIFAR-FS dataset.\n+    \"\"\"\n+    if 'num_classes_per_task' in kwargs:\n+        warnings.warn('Both arguments `ways` and `num_classes_per_task` were '\n+            'set in the helper function for the number of classes per task. '\n+            'Ignoring the argument `ways`.', stacklevel=2)\n+        ways = kwargs['num_classes_per_task']\n+    if 'transform' not in kwargs:\n+        kwargs['transform'] = Compose([ToTensor()])",
        "path": "torchmeta/datasets/helpers.py",
        "position": null,
        "original_position": 54,
        "commit_id": "2f96538848fa2bae46b07dd5f5ca80679c42ed49",
        "original_commit_id": "2906792f175c8b07b54bc0c8fec9a8857353c068",
        "user": {
            "login": "tristandeleu",
            "id": 2018752,
            "node_id": "MDQ6VXNlcjIwMTg3NTI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2018752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tristandeleu",
            "html_url": "https://github.com/tristandeleu",
            "followers_url": "https://api.github.com/users/tristandeleu/followers",
            "following_url": "https://api.github.com/users/tristandeleu/following{/other_user}",
            "gists_url": "https://api.github.com/users/tristandeleu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tristandeleu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tristandeleu/subscriptions",
            "organizations_url": "https://api.github.com/users/tristandeleu/orgs",
            "repos_url": "https://api.github.com/users/tristandeleu/repos",
            "events_url": "https://api.github.com/users/tristandeleu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tristandeleu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`ToTensor()` alone is enough here, no need to wrap it in `Compose`",
        "created_at": "2019-10-31T15:16:15Z",
        "updated_at": "2019-10-31T20:31:23Z",
        "html_url": "https://github.com/tristandeleu/pytorch-meta/pull/11#discussion_r341198379",
        "pull_request_url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/11",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/341198379"
            },
            "html": {
                "href": "https://github.com/tristandeleu/pytorch-meta/pull/11#discussion_r341198379"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/11"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/373714926",
        "pull_request_review_id": 351816114,
        "id": 373714926,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzcxNDkyNg==",
        "diff_hunk": "@@ -279,3 +279,59 @@ def cub(folder, shots, ways, shuffle=True, test_shots=None,\n     dataset.seed(seed)\n \n     return dataset\n+\n+def doublemnist(folder, shots, ways, shuffle=True, test_shots=None,\n+                seed=None, **kwargs):\n+    \"\"\"Helper function to create a meta-dataset for the Double MNIST dataset.\n+\n+    Parameters\n+    ----------\n+    folder : string\n+        Root directory where the dataset folder `doublemnist` exists.\n+\n+    shots : int\n+        Number of (training) examples per class in each task. This corresponds \n+        to `k` in `k-shot` classification.\n+\n+    ways : int\n+        Number of classes per task. This corresponds to `N` in `N-way` \n+        classification.\n+\n+    shuffle : bool (default: `True`)\n+        Shuffle the examples when creating the tasks.\n+\n+    test_shots : int, optional\n+        Number of test examples per class in each task. If `None`, then the \n+        number of test examples is equal to the number of training examples per \n+        class.\n+\n+    seed : int, optional\n+        Random seed to be used in the meta-dataset.\n+\n+    kwargs\n+        Additional arguments passed to the `DoubleMNIST` class.\n+\n+    See also\n+    --------\n+    `datasets.doublemnist.DoubleMNIST` : Meta-dataset for the Double MNIST dataset.\n+    \"\"\"\n+    if 'num_classes_per_task' is kwargs:\n+        warnings.warn('Both arguments `ways` and `num_classes_per_task` were '\n+            'set in the helper function for the number of classes per task. '\n+            'Ignoring the argument `ways`.', stacklevel=2)\n+        ways = kwargs['num_classes_per_task']\n+    if 'transform' not in kwargs:\n+        kwargs['transform'] = Compose([ToTensor()])\n+    if 'target_transform' not in kwargs:\n+        kwargs['target_transform'] = Categorical(ways)\n+    if 'class_augmentations' not in kwargs:\n+        kwargs['class_augmentations'] = [Rotation([90, 180, 270])]",
        "path": "torchmeta/datasets/helpers.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "1e0fb69ca1977b8e3b9855032abf6ca02dc279b5",
        "original_commit_id": "1e0fb69ca1977b8e3b9855032abf6ca02dc279b5",
        "user": {
            "login": "tristandeleu",
            "id": 2018752,
            "node_id": "MDQ6VXNlcjIwMTg3NTI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2018752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tristandeleu",
            "html_url": "https://github.com/tristandeleu",
            "followers_url": "https://api.github.com/users/tristandeleu/followers",
            "following_url": "https://api.github.com/users/tristandeleu/following{/other_user}",
            "gists_url": "https://api.github.com/users/tristandeleu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tristandeleu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tristandeleu/subscriptions",
            "organizations_url": "https://api.github.com/users/tristandeleu/orgs",
            "repos_url": "https://api.github.com/users/tristandeleu/repos",
            "events_url": "https://api.github.com/users/tristandeleu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tristandeleu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do you think that adding rotated variants of the images is a good default you had in mind for Double-MNIST @shaohua0116 (similar to how that's done for Omniglot)?",
        "created_at": "2020-01-31T22:33:22Z",
        "updated_at": "2020-01-31T22:33:23Z",
        "html_url": "https://github.com/tristandeleu/pytorch-meta/pull/21#discussion_r373714926",
        "pull_request_url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/21",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/373714926"
            },
            "html": {
                "href": "https://github.com/tristandeleu/pytorch-meta/pull/21#discussion_r373714926"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/21"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/377146100",
        "pull_request_review_id": 356045677,
        "id": 377146100,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0NjEwMA==",
        "diff_hunk": "@@ -279,3 +279,59 @@ def cub(folder, shots, ways, shuffle=True, test_shots=None,\n     dataset.seed(seed)\n \n     return dataset\n+\n+def doublemnist(folder, shots, ways, shuffle=True, test_shots=None,\n+                seed=None, **kwargs):\n+    \"\"\"Helper function to create a meta-dataset for the Double MNIST dataset.\n+\n+    Parameters\n+    ----------\n+    folder : string\n+        Root directory where the dataset folder `doublemnist` exists.\n+\n+    shots : int\n+        Number of (training) examples per class in each task. This corresponds \n+        to `k` in `k-shot` classification.\n+\n+    ways : int\n+        Number of classes per task. This corresponds to `N` in `N-way` \n+        classification.\n+\n+    shuffle : bool (default: `True`)\n+        Shuffle the examples when creating the tasks.\n+\n+    test_shots : int, optional\n+        Number of test examples per class in each task. If `None`, then the \n+        number of test examples is equal to the number of training examples per \n+        class.\n+\n+    seed : int, optional\n+        Random seed to be used in the meta-dataset.\n+\n+    kwargs\n+        Additional arguments passed to the `DoubleMNIST` class.\n+\n+    See also\n+    --------\n+    `datasets.doublemnist.DoubleMNIST` : Meta-dataset for the Double MNIST dataset.\n+    \"\"\"\n+    if 'num_classes_per_task' is kwargs:\n+        warnings.warn('Both arguments `ways` and `num_classes_per_task` were '\n+            'set in the helper function for the number of classes per task. '\n+            'Ignoring the argument `ways`.', stacklevel=2)\n+        ways = kwargs['num_classes_per_task']\n+    if 'transform' not in kwargs:\n+        kwargs['transform'] = Compose([ToTensor()])\n+    if 'target_transform' not in kwargs:\n+        kwargs['target_transform'] = Categorical(ways)\n+    if 'class_augmentations' not in kwargs:\n+        kwargs['class_augmentations'] = [Rotation([90, 180, 270])]",
        "path": "torchmeta/datasets/helpers.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "1e0fb69ca1977b8e3b9855032abf6ca02dc279b5",
        "original_commit_id": "1e0fb69ca1977b8e3b9855032abf6ca02dc279b5",
        "user": {
            "login": "tesfaldet",
            "id": 5014902,
            "node_id": "MDQ6VXNlcjUwMTQ5MDI=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5014902?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tesfaldet",
            "html_url": "https://github.com/tesfaldet",
            "followers_url": "https://api.github.com/users/tesfaldet/followers",
            "following_url": "https://api.github.com/users/tesfaldet/following{/other_user}",
            "gists_url": "https://api.github.com/users/tesfaldet/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tesfaldet/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tesfaldet/subscriptions",
            "organizations_url": "https://api.github.com/users/tesfaldet/orgs",
            "repos_url": "https://api.github.com/users/tesfaldet/repos",
            "events_url": "https://api.github.com/users/tesfaldet/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tesfaldet/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmmm, come to think of it, I'm not sure what the best default would be! Perhaps I should leave it empty?",
        "created_at": "2020-02-10T15:48:35Z",
        "updated_at": "2020-02-10T15:48:35Z",
        "html_url": "https://github.com/tristandeleu/pytorch-meta/pull/21#discussion_r377146100",
        "pull_request_url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/21",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/377146100"
            },
            "html": {
                "href": "https://github.com/tristandeleu/pytorch-meta/pull/21#discussion_r377146100"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/21"
            }
        },
        "in_reply_to_id": 373714926
    },
    {
        "url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/377228711",
        "pull_request_review_id": 356150777,
        "id": 377228711,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyODcxMQ==",
        "diff_hunk": "@@ -279,3 +279,59 @@ def cub(folder, shots, ways, shuffle=True, test_shots=None,\n     dataset.seed(seed)\n \n     return dataset\n+\n+def doublemnist(folder, shots, ways, shuffle=True, test_shots=None,\n+                seed=None, **kwargs):\n+    \"\"\"Helper function to create a meta-dataset for the Double MNIST dataset.\n+\n+    Parameters\n+    ----------\n+    folder : string\n+        Root directory where the dataset folder `doublemnist` exists.\n+\n+    shots : int\n+        Number of (training) examples per class in each task. This corresponds \n+        to `k` in `k-shot` classification.\n+\n+    ways : int\n+        Number of classes per task. This corresponds to `N` in `N-way` \n+        classification.\n+\n+    shuffle : bool (default: `True`)\n+        Shuffle the examples when creating the tasks.\n+\n+    test_shots : int, optional\n+        Number of test examples per class in each task. If `None`, then the \n+        number of test examples is equal to the number of training examples per \n+        class.\n+\n+    seed : int, optional\n+        Random seed to be used in the meta-dataset.\n+\n+    kwargs\n+        Additional arguments passed to the `DoubleMNIST` class.\n+\n+    See also\n+    --------\n+    `datasets.doublemnist.DoubleMNIST` : Meta-dataset for the Double MNIST dataset.\n+    \"\"\"\n+    if 'num_classes_per_task' is kwargs:\n+        warnings.warn('Both arguments `ways` and `num_classes_per_task` were '\n+            'set in the helper function for the number of classes per task. '\n+            'Ignoring the argument `ways`.', stacklevel=2)\n+        ways = kwargs['num_classes_per_task']\n+    if 'transform' not in kwargs:\n+        kwargs['transform'] = Compose([ToTensor()])\n+    if 'target_transform' not in kwargs:\n+        kwargs['target_transform'] = Categorical(ways)\n+    if 'class_augmentations' not in kwargs:\n+        kwargs['class_augmentations'] = [Rotation([90, 180, 270])]",
        "path": "torchmeta/datasets/helpers.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "1e0fb69ca1977b8e3b9855032abf6ca02dc279b5",
        "original_commit_id": "1e0fb69ca1977b8e3b9855032abf6ca02dc279b5",
        "user": {
            "login": "tristandeleu",
            "id": 2018752,
            "node_id": "MDQ6VXNlcjIwMTg3NTI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2018752?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tristandeleu",
            "html_url": "https://github.com/tristandeleu",
            "followers_url": "https://api.github.com/users/tristandeleu/followers",
            "following_url": "https://api.github.com/users/tristandeleu/following{/other_user}",
            "gists_url": "https://api.github.com/users/tristandeleu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tristandeleu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tristandeleu/subscriptions",
            "organizations_url": "https://api.github.com/users/tristandeleu/orgs",
            "repos_url": "https://api.github.com/users/tristandeleu/repos",
            "events_url": "https://api.github.com/users/tristandeleu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tristandeleu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I modified it and left it empty for now (`class_augmentations=None`), waiting for Shao-Hua's input.",
        "created_at": "2020-02-10T18:09:14Z",
        "updated_at": "2020-02-10T18:09:14Z",
        "html_url": "https://github.com/tristandeleu/pytorch-meta/pull/21#discussion_r377228711",
        "pull_request_url": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/21",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/comments/377228711"
            },
            "html": {
                "href": "https://github.com/tristandeleu/pytorch-meta/pull/21#discussion_r377228711"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/tristandeleu/pytorch-meta/pulls/21"
            }
        },
        "in_reply_to_id": 373714926
    }
]