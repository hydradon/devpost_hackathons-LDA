[
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259571268",
        "pull_request_review_id": 207101699,
        "id": 259571268,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU3MTI2OA==",
        "diff_hunk": "@@ -0,0 +1,209 @@\n+from abstractStrategy import GridStrategy",
        "path": "src/grid_strategy/strategies.py",
        "position": null,
        "original_position": 1,
        "commit_id": "78b965c8d9d7158f238521863569281c9a7cf719",
        "original_commit_id": "a302b10e3630b9c01fc9080f0c5588544affe502",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This needs to be a relative import. `from .abstractStrategy import GridStrategy`",
        "created_at": "2019-02-23T08:30:37Z",
        "updated_at": "2019-02-23T14:38:15Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/10#discussion_r259571268",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/10",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259571268"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/10#discussion_r259571268"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259571328",
        "pull_request_review_id": 207101763,
        "id": 259571328,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU3MTMyOA==",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\"\"\"Proof of concept code for MEP 30: Automatic subplot management.\"\"\"\n+import os\n+\n+import itertools as it\n+\n+from abc import ABCMeta, abstractmethod\n+\n+import numpy as np\n+from matplotlib import pyplot as plt\n+from matplotlib import gridspec\n+\n+\n+\n+class GridStrategy(metaclass=ABCMeta):\n+    \"\"\"\n+    Static class used to compute grid arrangements given the number of subplots\n+    you want to show. By default, it goes for a symmetrical arrangement that is\n+    nearly square (nearly equal in both dimensions).\n+    \"\"\"\n+    def __init__(self, alignment='center'):\n+        self.alignment=alignment\n+\n+    def get_grid(self, n):\n+        \"\"\"  \n+        Return a list of axes designed according to the strategy.\n+        Grid arrangements are tuples with the same length as the number of rows,\n+        and each element specifies the number of colums in the row.\n+        Ex (2, 3, 2) leads to the shape\n+             x x \n+            x x x\n+             x x\n+        where each x would be a subplot.\n+        \"\"\"\n+\n+        grid_arrangement = self.get_grid_arrangement(n)\n+        return self.get_gridspec(grid_arrangement)\n+\n+    @classmethod\n+    @abstractmethod\n+    def get_grid_arrangement(cls, n):\n+        pass\n+\n+\n+    def get_gridspec(self, grid_arrangement):\n+        nrows = len(grid_arrangement)\n+        ncols = max(grid_arrangement)\n+\n+        if len(set(grid_arrangement)) > 1:\n+            col_width = 2\n+        else:\n+            col_width = 1\n+\n+        gs = gridspec.GridSpec(nrows, ncols * col_width)\n+\n+        ax_specs = []\n+        for r, row_cols in enumerate(grid_arrangement):\n+            # This is the number of missing columns in this row. If some rows\n+            # are a different width than others, the column width is 2 so every\n+            # column skipped at the beginning is also a missing slot at the end.\n+            if self.alignment == \"center\":\n+                # Skip one for each missing column - centered\n+                skip = ncols - row_cols\n+            elif self.alignment == \"right\":\n+                # Skip two slots for every missing plot - right justified.\n+                skip = (ncols - row_cols) * 2\n+            else:\n+                # This is left-justified (or possibly full justification)\n+                # so no need to skip anything\n+                skip = 0\n+\n+            for col in range(row_cols):\n+                s = skip + col * col_width\n+                e = s + col_width\n+\n+                ax_specs.append(gs[r, s:e])\n+\n+        return ax_specs\n+\n+\n+def test_grid_arrangement(n, strategy, figsize=(14, 4)):",
        "path": "src/grid_strategy/abstractStrategy.py",
        "position": null,
        "original_position": 80,
        "commit_id": "78b965c8d9d7158f238521863569281c9a7cf719",
        "original_commit_id": "a302b10e3630b9c01fc9080f0c5588544affe502",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This part isn't part of the library, it was just a test function.",
        "created_at": "2019-02-23T08:32:59Z",
        "updated_at": "2019-02-23T14:38:15Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/10#discussion_r259571328",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/10",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259571328"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/10#discussion_r259571328"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259571370",
        "pull_request_review_id": 207101812,
        "id": 259571370,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU3MTM3MA==",
        "diff_hunk": "@@ -0,0 +1,95 @@\n+\"\"\"Proof of concept code for MEP 30: Automatic subplot management.\"\"\"\n+import os\n+\n+import itertools as it\n+\n+from abc import ABCMeta, abstractmethod\n+\n+import numpy as np",
        "path": "src/grid_strategy/abstractStrategy.py",
        "position": null,
        "original_position": 8,
        "commit_id": "78b965c8d9d7158f238521863569281c9a7cf719",
        "original_commit_id": "a302b10e3630b9c01fc9080f0c5588544affe502",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can remove this import, it is never used.",
        "created_at": "2019-02-23T08:34:32Z",
        "updated_at": "2019-02-23T14:38:15Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/10#discussion_r259571370",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/10",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259571370"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/10#discussion_r259571370"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259582323",
        "pull_request_review_id": 207113335,
        "id": 259582323,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU4MjMyMw==",
        "diff_hunk": "@@ -0,0 +1,201 @@\n+                                 Apache License\n+                           Version 2.0, January 2004\n+                        http://www.apache.org/licenses/\n+\n+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n+\n+   1. Definitions.\n+\n+      \"License\" shall mean the terms and conditions for use, reproduction,\n+      and distribution as defined by Sections 1 through 9 of this document.\n+\n+      \"Licensor\" shall mean the copyright owner or entity authorized by\n+      the copyright owner that is granting the License.\n+\n+      \"Legal Entity\" shall mean the union of the acting entity and all\n+      other entities that control, are controlled by, or are under common\n+      control with that entity. For the purposes of this definition,\n+      \"control\" means (i) the power, direct or indirect, to cause the\n+      direction or management of such entity, whether by contract or\n+      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n+      outstanding shares, or (iii) beneficial ownership of such entity.\n+\n+      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n+      exercising permissions granted by this License.\n+\n+      \"Source\" form shall mean the preferred form for making modifications,\n+      including but not limited to software source code, documentation\n+      source, and configuration files.\n+\n+      \"Object\" form shall mean any form resulting from mechanical\n+      transformation or translation of a Source form, including but\n+      not limited to compiled object code, generated documentation,\n+      and conversions to other media types.\n+\n+      \"Work\" shall mean the work of authorship, whether in Source or\n+      Object form, made available under the License, as indicated by a\n+      copyright notice that is included in or attached to the work\n+      (an example is provided in the Appendix below).\n+\n+      \"Derivative Works\" shall mean any work, whether in Source or Object\n+      form, that is based on (or derived from) the Work and for which the\n+      editorial revisions, annotations, elaborations, or other modifications\n+      represent, as a whole, an original work of authorship. For the purposes\n+      of this License, Derivative Works shall not include works that remain\n+      separable from, or merely link (or bind by name) to the interfaces of,\n+      the Work and Derivative Works thereof.\n+\n+      \"Contribution\" shall mean any work of authorship, including\n+      the original version of the Work and any modifications or additions\n+      to that Work or Derivative Works thereof, that is intentionally\n+      submitted to Licensor for inclusion in the Work by the copyright owner\n+      or by an individual or Legal Entity authorized to submit on behalf of\n+      the copyright owner. For the purposes of this definition, \"submitted\"\n+      means any form of electronic, verbal, or written communication sent\n+      to the Licensor or its representatives, including but not limited to\n+      communication on electronic mailing lists, source code control systems,\n+      and issue tracking systems that are managed by, or on behalf of, the\n+      Licensor for the purpose of discussing and improving the Work, but\n+      excluding communication that is conspicuously marked or otherwise\n+      designated in writing by the copyright owner as \"Not a Contribution.\"\n+\n+      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n+      on behalf of whom a Contribution has been received by Licensor and\n+      subsequently incorporated within the Work.\n+\n+   2. Grant of Copyright License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      copyright license to reproduce, prepare Derivative Works of,\n+      publicly display, publicly perform, sublicense, and distribute the\n+      Work and such Derivative Works in Source or Object form.\n+\n+   3. Grant of Patent License. Subject to the terms and conditions of\n+      this License, each Contributor hereby grants to You a perpetual,\n+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n+      (except as stated in this section) patent license to make, have made,\n+      use, offer to sell, sell, import, and otherwise transfer the Work,\n+      where such license applies only to those patent claims licensable\n+      by such Contributor that are necessarily infringed by their\n+      Contribution(s) alone or by combination of their Contribution(s)\n+      with the Work to which such Contribution(s) was submitted. If You\n+      institute patent litigation against any entity (including a\n+      cross-claim or counterclaim in a lawsuit) alleging that the Work\n+      or a Contribution incorporated within the Work constitutes direct\n+      or contributory patent infringement, then any patent licenses\n+      granted to You under this License for that Work shall terminate\n+      as of the date such litigation is filed.\n+\n+   4. Redistribution. You may reproduce and distribute copies of the\n+      Work or Derivative Works thereof in any medium, with or without\n+      modifications, and in Source or Object form, provided that You\n+      meet the following conditions:\n+\n+      (a) You must give any other recipients of the Work or\n+          Derivative Works a copy of this License; and\n+\n+      (b) You must cause any modified files to carry prominent notices\n+          stating that You changed the files; and\n+\n+      (c) You must retain, in the Source form of any Derivative Works\n+          that You distribute, all copyright, patent, trademark, and\n+          attribution notices from the Source form of the Work,\n+          excluding those notices that do not pertain to any part of\n+          the Derivative Works; and\n+\n+      (d) If the Work includes a \"NOTICE\" text file as part of its\n+          distribution, then any Derivative Works that You distribute must\n+          include a readable copy of the attribution notices contained\n+          within such NOTICE file, excluding those notices that do not\n+          pertain to any part of the Derivative Works, in at least one\n+          of the following places: within a NOTICE text file distributed\n+          as part of the Derivative Works; within the Source form or\n+          documentation, if provided along with the Derivative Works; or,\n+          within a display generated by the Derivative Works, if and\n+          wherever such third-party notices normally appear. The contents\n+          of the NOTICE file are for informational purposes only and\n+          do not modify the License. You may add Your own attribution\n+          notices within Derivative Works that You distribute, alongside\n+          or as an addendum to the NOTICE text from the Work, provided\n+          that such additional attribution notices cannot be construed\n+          as modifying the License.\n+\n+      You may add Your own copyright statement to Your modifications and\n+      may provide additional or different license terms and conditions\n+      for use, reproduction, or distribution of Your modifications, or\n+      for any such Derivative Works as a whole, provided Your use,\n+      reproduction, and distribution of the Work otherwise complies with\n+      the conditions stated in this License.\n+\n+   5. Submission of Contributions. Unless You explicitly state otherwise,\n+      any Contribution intentionally submitted for inclusion in the Work\n+      by You to the Licensor shall be under the terms and conditions of\n+      this License, without any additional terms or conditions.\n+      Notwithstanding the above, nothing herein shall supersede or modify\n+      the terms of any separate license agreement you may have executed\n+      with Licensor regarding such Contributions.\n+\n+   6. Trademarks. This License does not grant permission to use the trade\n+      names, trademarks, service marks, or product names of the Licensor,\n+      except as required for reasonable and customary use in describing the\n+      origin of the Work and reproducing the content of the NOTICE file.\n+\n+   7. Disclaimer of Warranty. Unless required by applicable law or\n+      agreed to in writing, Licensor provides the Work (and each\n+      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+      implied, including, without limitation, any warranties or conditions\n+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n+      PARTICULAR PURPOSE. You are solely responsible for determining the\n+      appropriateness of using or redistributing the Work and assume any\n+      risks associated with Your exercise of permissions under this License.\n+\n+   8. Limitation of Liability. In no event and under no legal theory,\n+      whether in tort (including negligence), contract, or otherwise,\n+      unless required by applicable law (such as deliberate and grossly\n+      negligent acts) or agreed to in writing, shall any Contributor be\n+      liable to You for damages, including any direct, indirect, special,\n+      incidental, or consequential damages of any character arising as a\n+      result of this License or out of the use or inability to use the\n+      Work (including but not limited to damages for loss of goodwill,\n+      work stoppage, computer failure or malfunction, or any and all\n+      other commercial damages or losses), even if such Contributor\n+      has been advised of the possibility of such damages.\n+\n+   9. Accepting Warranty or Additional Liability. While redistributing\n+      the Work or Derivative Works thereof, You may choose to offer,\n+      and charge a fee for, acceptance of support, warranty, indemnity,\n+      or other liability obligations and/or rights consistent with this\n+      License. However, in accepting such obligations, You may act only\n+      on Your own behalf and on Your sole responsibility, not on behalf\n+      of any other Contributor, and only if You agree to indemnify,\n+      defend, and hold each Contributor harmless for any liability\n+      incurred by, or claims asserted against, such Contributor by reason\n+      of your accepting any such warranty or additional liability.\n+\n+   END OF TERMS AND CONDITIONS\n+\n+   APPENDIX: How to apply the Apache License to your work.\n+\n+      To apply the Apache License to your work, attach the following\n+      boilerplate notice, with the fields enclosed by brackets \"[]\"\n+      replaced with your own identifying information. (Don't include\n+      the brackets!)  The text should be enclosed in the appropriate\n+      comment syntax for the file format. We also recommend that a\n+      file or class name and description of purpose be included on the\n+      same \"printed page\" as the copyright notice for easier\n+      identification within third-party archives.\n+\n+   Copyright [yyyy] [name of copyright owner]",
        "path": "LICENSE",
        "position": 189,
        "original_position": 189,
        "commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "original_commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "```suggestion\r\n   Copyright 2019 Grid Strategy Authors\r\n```",
        "created_at": "2019-02-23T15:25:04Z",
        "updated_at": "2019-02-23T15:26:27Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259582323",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259582323"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259582323"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259582371",
        "pull_request_review_id": 207113335,
        "id": 259582371,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU4MjM3MQ==",
        "diff_hunk": "@@ -0,0 +1,71 @@\n+# grid-strategy\n+\n+Grid-strategy is a python package that enables the user\n+organize _matplotlib_ plots using different **grid strategies**.\n+\n+Abstract\n+--------\n+\n+This package would add a mechanism for creating a grid of\n+subplots based on the number of axes to be plotted and\n+a strategy for how they should be arranged, with some\n+sensible strategy as the default.\n+\n+Detailed Description\n+---------------------\n+\n+It is often the case that you have some number of \n+plots to display (and this number may be unknown \n+ahead of time), and want some sensible arrangement \n+of the plots so that they are all roughly equally \n+aligned. However, the `subplots` and `gridspec` \n+methods for creating subplots require both an `x` \n+and a `y` dimension for creation and population of \n+a grid. This package would allow users to specify a \n+strategy for the creation of a grid, and then specify \n+how many axes they want to plot, and they would\n+get back a collection of axes arranged according \n+to their strategy.\n+\n+A proof of concept was implemented for the 'squarish' \n+strategy, which arranges plots in alternating rows \n+of `x` and `x-1` objects. Some examples featuring this\n+technique:\n+\n+<img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement06.png\" width=\"300\" alt=\"n=6\"> <img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement07.png\" width=\"300\" alt=\"n=7\">\n+\n+<img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement08.png\" width=\"300\" alt=\"n=8\"> <img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement17.png\" width=\"300\" alt=\"n=17\">\n+\n+This makes use of a `GridStrategy` object, which populates a `GridSpec`. In general, this concept can likely be implemented as a layer of abstraction *above* `gridspec.GridSpec`.\n+\n+Some basic strategies that will be included in the first release:\n+\n+- `\"Squarish\"` (name subject to change) - As implemented in the demo code above - currently this is centered, but the base `SquarishStrategy` object could have options like `justification` which could include:\n+    - `'center'` (default), 'left'`, `'right'` - empty spaces either center the plots or leave them ragged-left or ragged-right\n+    - `'fill-space'` and `fill-grow'` (names subject to change) - These would fill every column as \"fully-justified\", with `fill-space` increasing the interstitial space and `fill-grow` modifying the width of the plots themselves to fill the row.\n+- `\"Rectangular\"` - Similar to `\"Squarish\"`, this would find the largest pair of factors of the number of plots and use that to populate a rectangular grid - so `6` would return a 3x2 grid, `7` would return a 7x1 grid, and `10` would return a 5x2 grid.\n+\n+Since many of these grid strategies would likely have at least *some* asymmetries, a mechanism for transposing any grid structure should be implemented in the base `GridStrategy` object.\n+\n+### Higher dimensions\n+\n+Currently the package is limited to 2-dimensional \n+grid arrangements, but a \"nice-to-have\" might be \n+a higher-order API for `GridStrategy` that also allows \n+for the proliferation of additional *figures* (e.g. \n+\"if I have more than 10 axes to plot, split them \n+up as evenly as possible among `n / 10` different \n+figures\"). This would be no harder to implement \n+in terms of the creation of such strategies, but \n+may be harder to work with since it would \n+necessarily spawn axes across multiple figures.\n+\n+Implementation",
        "path": "README.md",
        "position": 63,
        "original_position": 63,
        "commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "original_commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can drop this whole section.",
        "created_at": "2019-02-23T15:26:14Z",
        "updated_at": "2019-02-23T15:26:27Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259582371",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259582371"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259582371"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259583075",
        "pull_request_review_id": 207114178,
        "id": 259583075,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU4MzA3NQ==",
        "diff_hunk": "@@ -0,0 +1,71 @@\n+# grid-strategy\n+\n+Grid-strategy is a python package that enables the user\n+organize _matplotlib_ plots using different **grid strategies**.\n+\n+Abstract\n+--------\n+\n+This package would add a mechanism for creating a grid of\n+subplots based on the number of axes to be plotted and\n+a strategy for how they should be arranged, with some\n+sensible strategy as the default.\n+\n+Detailed Description\n+---------------------\n+\n+It is often the case that you have some number of \n+plots to display (and this number may be unknown \n+ahead of time), and want some sensible arrangement \n+of the plots so that they are all roughly equally \n+aligned. However, the `subplots` and `gridspec` \n+methods for creating subplots require both an `x` \n+and a `y` dimension for creation and population of \n+a grid. This package would allow users to specify a \n+strategy for the creation of a grid, and then specify \n+how many axes they want to plot, and they would\n+get back a collection of axes arranged according \n+to their strategy.\n+\n+A proof of concept was implemented for the 'squarish' \n+strategy, which arranges plots in alternating rows \n+of `x` and `x-1` objects. Some examples featuring this\n+technique:\n+\n+<img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement06.png\" width=\"300\" alt=\"n=6\"> <img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement07.png\" width=\"300\" alt=\"n=7\">\n+\n+<img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement08.png\" width=\"300\" alt=\"n=8\"> <img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement17.png\" width=\"300\" alt=\"n=17\">\n+\n+This makes use of a `GridStrategy` object, which populates a `GridSpec`. In general, this concept can likely be implemented as a layer of abstraction *above* `gridspec.GridSpec`.\n+\n+Some basic strategies that will be included in the first release:\n+\n+- `\"Squarish\"` (name subject to change) - As implemented in the demo code above - currently this is centered, but the base `SquarishStrategy` object could have options like `justification` which could include:\n+    - `'center'` (default), 'left'`, `'right'` - empty spaces either center the plots or leave them ragged-left or ragged-right\n+    - `'fill-space'` and `fill-grow'` (names subject to change) - These would fill every column as \"fully-justified\", with `fill-space` increasing the interstitial space and `fill-grow` modifying the width of the plots themselves to fill the row.\n+- `\"Rectangular\"` - Similar to `\"Squarish\"`, this would find the largest pair of factors of the number of plots and use that to populate a rectangular grid - so `6` would return a 3x2 grid, `7` would return a 7x1 grid, and `10` would return a 5x2 grid.\n+\n+Since many of these grid strategies would likely have at least *some* asymmetries, a mechanism for transposing any grid structure should be implemented in the base `GridStrategy` object.\n+\n+### Higher dimensions\n+\n+Currently the package is limited to 2-dimensional \n+grid arrangements, but a \"nice-to-have\" might be \n+a higher-order API for `GridStrategy` that also allows \n+for the proliferation of additional *figures* (e.g. \n+\"if I have more than 10 axes to plot, split them \n+up as evenly as possible among `n / 10` different \n+figures\"). This would be no harder to implement \n+in terms of the creation of such strategies, but \n+may be harder to work with since it would \n+necessarily spawn axes across multiple figures.\n+\n+Implementation",
        "path": "README.md",
        "position": 63,
        "original_position": 63,
        "commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "original_commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "user": {
            "login": "konoikon",
            "id": 22823085,
            "node_id": "MDQ6VXNlcjIyODIzMDg1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/22823085?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/konoikon",
            "html_url": "https://github.com/konoikon",
            "followers_url": "https://api.github.com/users/konoikon/followers",
            "following_url": "https://api.github.com/users/konoikon/following{/other_user}",
            "gists_url": "https://api.github.com/users/konoikon/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/konoikon/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/konoikon/subscriptions",
            "organizations_url": "https://api.github.com/users/konoikon/orgs",
            "repos_url": "https://api.github.com/users/konoikon/repos",
            "events_url": "https://api.github.com/users/konoikon/events{/privacy}",
            "received_events_url": "https://api.github.com/users/konoikon/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should we drop the `higher dimensions` section as well?",
        "created_at": "2019-02-23T15:51:15Z",
        "updated_at": "2019-02-23T15:51:15Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259583075",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259583075"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259583075"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11"
            }
        },
        "in_reply_to_id": 259582371
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259583157",
        "pull_request_review_id": 207114289,
        "id": 259583157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU4MzE1Nw==",
        "diff_hunk": "@@ -0,0 +1,71 @@\n+# grid-strategy\n+\n+Grid-strategy is a python package that enables the user\n+organize _matplotlib_ plots using different **grid strategies**.\n+\n+Abstract\n+--------\n+\n+This package would add a mechanism for creating a grid of\n+subplots based on the number of axes to be plotted and\n+a strategy for how they should be arranged, with some\n+sensible strategy as the default.\n+\n+Detailed Description\n+---------------------\n+\n+It is often the case that you have some number of \n+plots to display (and this number may be unknown \n+ahead of time), and want some sensible arrangement \n+of the plots so that they are all roughly equally \n+aligned. However, the `subplots` and `gridspec` \n+methods for creating subplots require both an `x` \n+and a `y` dimension for creation and population of \n+a grid. This package would allow users to specify a \n+strategy for the creation of a grid, and then specify \n+how many axes they want to plot, and they would\n+get back a collection of axes arranged according \n+to their strategy.\n+\n+A proof of concept was implemented for the 'squarish' \n+strategy, which arranges plots in alternating rows \n+of `x` and `x-1` objects. Some examples featuring this\n+technique:\n+\n+<img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement06.png\" width=\"300\" alt=\"n=6\"> <img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement07.png\" width=\"300\" alt=\"n=7\">\n+\n+<img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement08.png\" width=\"300\" alt=\"n=8\"> <img src=\"https://gist.github.com/pganssle/afde3d9ae1e9f1d9349cff4a00ddead0/raw/b82d5c2fa3ab34579cfdd4e28be058230fdde199/grid_arrangement17.png\" width=\"300\" alt=\"n=17\">\n+\n+This makes use of a `GridStrategy` object, which populates a `GridSpec`. In general, this concept can likely be implemented as a layer of abstraction *above* `gridspec.GridSpec`.\n+\n+Some basic strategies that will be included in the first release:\n+\n+- `\"Squarish\"` (name subject to change) - As implemented in the demo code above - currently this is centered, but the base `SquarishStrategy` object could have options like `justification` which could include:\n+    - `'center'` (default), 'left'`, `'right'` - empty spaces either center the plots or leave them ragged-left or ragged-right\n+    - `'fill-space'` and `fill-grow'` (names subject to change) - These would fill every column as \"fully-justified\", with `fill-space` increasing the interstitial space and `fill-grow` modifying the width of the plots themselves to fill the row.\n+- `\"Rectangular\"` - Similar to `\"Squarish\"`, this would find the largest pair of factors of the number of plots and use that to populate a rectangular grid - so `6` would return a 3x2 grid, `7` would return a 7x1 grid, and `10` would return a 5x2 grid.\n+\n+Since many of these grid strategies would likely have at least *some* asymmetries, a mechanism for transposing any grid structure should be implemented in the base `GridStrategy` object.\n+\n+### Higher dimensions\n+\n+Currently the package is limited to 2-dimensional \n+grid arrangements, but a \"nice-to-have\" might be \n+a higher-order API for `GridStrategy` that also allows \n+for the proliferation of additional *figures* (e.g. \n+\"if I have more than 10 axes to plot, split them \n+up as evenly as possible among `n / 10` different \n+figures\"). This would be no harder to implement \n+in terms of the creation of such strategies, but \n+may be harder to work with since it would \n+necessarily spawn axes across multiple figures.\n+\n+Implementation",
        "path": "README.md",
        "position": 63,
        "original_position": 63,
        "commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "original_commit_id": "9109292a069ff09a5cd516b2955971fd631b816f",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No I think the \"higher dimensions\" part is fine, we may want to refactor this README a bit, but this is a good start.",
        "created_at": "2019-02-23T15:55:04Z",
        "updated_at": "2019-02-23T15:55:05Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259583157",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259583157"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/11#discussion_r259583157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/11"
            }
        },
        "in_reply_to_id": 259582371
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259583910",
        "pull_request_review_id": 207115101,
        "id": 259583910,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU4MzkxMA==",
        "diff_hunk": "@@ -0,0 +1,7 @@\n+This file contains a list with all the contributors to the *grid strategy* project.\n+\n+Contributors\n+------------\n+\n+- Paul Ganssle <paul@ganssle.io>\n+- Konstantinos Oikonomou <kons.oikonomou@gmail.com>",
        "path": "AUTHORS.md",
        "position": 7,
        "original_position": 7,
        "commit_id": "ae5e0af333cecc9d92ff6afb5723fcd7372dc356",
        "original_commit_id": "d9e97916655b604471ba07160dc8a23c580574ab",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Gurnek How should we list you in the AUTHORS file? What, if any, e-mail do you want?",
        "created_at": "2019-02-23T16:21:50Z",
        "updated_at": "2019-02-23T17:09:24Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/17#discussion_r259583910",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/17",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259583910"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/17#discussion_r259583910"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/17"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259584037",
        "pull_request_review_id": 207115260,
        "id": 259584037,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU4NDAzNw==",
        "diff_hunk": "@@ -0,0 +1,7 @@\n+This file contains a list with all the contributors to the *grid strategy* project.\n+\n+Contributors\n+------------\n+\n+- Paul Ganssle <paul@ganssle.io>\n+- Konstantinos Oikonomou <kons.oikonomou@gmail.com>",
        "path": "AUTHORS.md",
        "position": 7,
        "original_position": 7,
        "commit_id": "ae5e0af333cecc9d92ff6afb5723fcd7372dc356",
        "original_commit_id": "d9e97916655b604471ba07160dc8a23c580574ab",
        "user": {
            "login": "Gurnek",
            "id": 28551755,
            "node_id": "MDQ6VXNlcjI4NTUxNzU1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/28551755?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Gurnek",
            "html_url": "https://github.com/Gurnek",
            "followers_url": "https://api.github.com/users/Gurnek/followers",
            "following_url": "https://api.github.com/users/Gurnek/following{/other_user}",
            "gists_url": "https://api.github.com/users/Gurnek/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Gurnek/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Gurnek/subscriptions",
            "organizations_url": "https://api.github.com/users/Gurnek/orgs",
            "repos_url": "https://api.github.com/users/Gurnek/repos",
            "events_url": "https://api.github.com/users/Gurnek/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Gurnek/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@pganssle you can just write the following\r\nGurnek Singh Mokha <gurnekmokha96@gmail.com>",
        "created_at": "2019-02-23T16:26:57Z",
        "updated_at": "2019-02-23T17:09:24Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/17#discussion_r259584037",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/17",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259584037"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/17#discussion_r259584037"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/17"
            }
        },
        "in_reply_to_id": 259583910
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259584108",
        "pull_request_review_id": 207115350,
        "id": 259584108,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU4NDEwOA==",
        "diff_hunk": "@@ -0,0 +1,7 @@\n+This file contains a list with all the contributors to the *grid strategy* project.\n+\n+Contributors\n+------------\n+\n+- Paul Ganssle <paul@ganssle.io>\n+- Konstantinos Oikonomou <kons.oikonomou@gmail.com>",
        "path": "AUTHORS.md",
        "position": 7,
        "original_position": 7,
        "commit_id": "ae5e0af333cecc9d92ff6afb5723fcd7372dc356",
        "original_commit_id": "d9e97916655b604471ba07160dc8a23c580574ab",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@konoikon Can you update the AUTHORS file in this PR accordingly?",
        "created_at": "2019-02-23T16:29:18Z",
        "updated_at": "2019-02-23T17:09:24Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/17#discussion_r259584108",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/17",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259584108"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/17#discussion_r259584108"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/17"
            }
        },
        "in_reply_to_id": 259583910
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259603683",
        "pull_request_review_id": 207135745,
        "id": 259603683,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYwMzY4Mw==",
        "diff_hunk": "@@ -0,0 +1,11 @@\n+coverage:\n+  status:\n+    patch: false\n+    changes: false\n+    project:\n+      default:\n+        target: '50'\n+\n+comment: false\n+codecov:\n+  token: f57afce5-949d-4c97-9198-a9d9ba300f50",
        "path": "codecov.yml",
        "position": 11,
        "original_position": 11,
        "commit_id": "0ef757c9fa6df34113faa4dcbc2b6aa1888dc20f",
        "original_commit_id": "0ef757c9fa6df34113faa4dcbc2b6aa1888dc20f",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't know if it's safe to publish this?",
        "created_at": "2019-02-24T05:01:29Z",
        "updated_at": "2019-02-24T05:01:29Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/32#discussion_r259603683",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/32",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259603683"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/32#discussion_r259603683"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/32"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259624831",
        "pull_request_review_id": 207156075,
        "id": 259624831,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYyNDgzMQ==",
        "diff_hunk": "@@ -63,3 +62,12 @@ figures\"). This would be no harder to implement\n in terms of the creation of such strategies, but\n may be harder to work with since it would\n necessarily spawn axes across multiple figures.\n+\n+### Installation Instructions\n+Simply run:\n+`pip install grid-strategy`\n+\n+Then, in your project, do:\n+`from grid_strategy import strategies`\n+\n+The strategies class has all usable strategies.",
        "path": "README.md",
        "position": null,
        "original_position": 56,
        "commit_id": "3a2d8d29d7a0e7dec1933047baf530b9fe19adae",
        "original_commit_id": "411c43f4e2d721cf683e7bcf384c792f0853222c",
        "user": {
            "login": "pganssle",
            "id": 1377457,
            "node_id": "MDQ6VXNlcjEzNzc0NTc=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1377457?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/pganssle",
            "html_url": "https://github.com/pganssle",
            "followers_url": "https://api.github.com/users/pganssle/followers",
            "following_url": "https://api.github.com/users/pganssle/following{/other_user}",
            "gists_url": "https://api.github.com/users/pganssle/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/pganssle/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/pganssle/subscriptions",
            "organizations_url": "https://api.github.com/users/pganssle/orgs",
            "repos_url": "https://api.github.com/users/pganssle/repos",
            "events_url": "https://api.github.com/users/pganssle/events{/privacy}",
            "received_events_url": "https://api.github.com/users/pganssle/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "```suggestion\r\nThe strategies module has all usable strategies.\r\n```",
        "created_at": "2019-02-24T15:02:13Z",
        "updated_at": "2019-02-24T15:21:41Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/45#discussion_r259624831",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/45",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/259624831"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/45#discussion_r259624831"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/264767492",
        "pull_request_review_id": 213502415,
        "id": 264767492,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDc2NzQ5Mg==",
        "diff_hunk": "@@ -28,32 +28,34 @@ def get_grid(self, n):\n             x x x\n              x x\n         where each x would be a subplot.\n+\n+        If `figure` is None, creates a new figure.\n         \"\"\"\n \n         grid_arrangement = self.get_grid_arrangement(n)\n-        return self.get_gridspec(grid_arrangement)\n+        return self.get_gridspec(grid_arrangement, figure)",
        "path": "src/grid_strategy/_abc.py",
        "position": 19,
        "original_position": 19,
        "commit_id": "63e9f616c0a290c02ee339e8bf9e52e1395412e6",
        "original_commit_id": "2e6bec318981cedd6ff5244e1dfd6faf5e7fe885",
        "user": {
            "login": "tacaswell",
            "id": 199813,
            "node_id": "MDQ6VXNlcjE5OTgxMw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tacaswell",
            "html_url": "https://github.com/tacaswell",
            "followers_url": "https://api.github.com/users/tacaswell/followers",
            "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
            "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
            "organizations_url": "https://api.github.com/users/tacaswell/orgs",
            "repos_url": "https://api.github.com/users/tacaswell/repos",
            "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tacaswell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Pull the figure creation logic up to here so it only needs to be done once?",
        "created_at": "2019-03-12T16:28:25Z",
        "updated_at": "2019-03-20T09:12:36Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/55#discussion_r264767492",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/55",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/264767492"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/55#discussion_r264767492"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/55"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/264818193",
        "pull_request_review_id": 213566674,
        "id": 264818193,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDgxODE5Mw==",
        "diff_hunk": "@@ -28,32 +28,34 @@ def get_grid(self, n):\n             x x x\n              x x\n         where each x would be a subplot.\n+\n+        If `figure` is None, creates a new figure.\n         \"\"\"\n \n         grid_arrangement = self.get_grid_arrangement(n)\n-        return self.get_gridspec(grid_arrangement)\n+        return self.get_gridspec(grid_arrangement, figure)",
        "path": "src/grid_strategy/_abc.py",
        "position": 19,
        "original_position": 19,
        "commit_id": "63e9f616c0a290c02ee339e8bf9e52e1395412e6",
        "original_commit_id": "2e6bec318981cedd6ff5244e1dfd6faf5e7fe885",
        "user": {
            "login": "PeterMinin",
            "id": 2499965,
            "node_id": "MDQ6VXNlcjI0OTk5NjU=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/2499965?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PeterMinin",
            "html_url": "https://github.com/PeterMinin",
            "followers_url": "https://api.github.com/users/PeterMinin/followers",
            "following_url": "https://api.github.com/users/PeterMinin/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterMinin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/PeterMinin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterMinin/subscriptions",
            "organizations_url": "https://api.github.com/users/PeterMinin/orgs",
            "repos_url": "https://api.github.com/users/PeterMinin/repos",
            "events_url": "https://api.github.com/users/PeterMinin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/PeterMinin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agreed on pulling it up, but I would say `get_gridspec` is a better place, since it's a \"public\" method too.",
        "created_at": "2019-03-12T18:14:33Z",
        "updated_at": "2019-03-20T09:12:36Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/55#discussion_r264818193",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/55",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/264818193"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/55#discussion_r264818193"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/55"
            }
        },
        "in_reply_to_id": 264767492
    },
    {
        "url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/264928492",
        "pull_request_review_id": 213704035,
        "id": 264928492,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI2NDkyODQ5Mg==",
        "diff_hunk": "@@ -28,32 +28,34 @@ def get_grid(self, n):\n             x x x\n              x x\n         where each x would be a subplot.\n+\n+        If `figure` is None, creates a new figure.\n         \"\"\"\n \n         grid_arrangement = self.get_grid_arrangement(n)\n-        return self.get_gridspec(grid_arrangement)\n+        return self.get_gridspec(grid_arrangement, figure)",
        "path": "src/grid_strategy/_abc.py",
        "position": 19,
        "original_position": 19,
        "commit_id": "63e9f616c0a290c02ee339e8bf9e52e1395412e6",
        "original_commit_id": "2e6bec318981cedd6ff5244e1dfd6faf5e7fe885",
        "user": {
            "login": "tacaswell",
            "id": 199813,
            "node_id": "MDQ6VXNlcjE5OTgxMw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/199813?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/tacaswell",
            "html_url": "https://github.com/tacaswell",
            "followers_url": "https://api.github.com/users/tacaswell/followers",
            "following_url": "https://api.github.com/users/tacaswell/following{/other_user}",
            "gists_url": "https://api.github.com/users/tacaswell/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/tacaswell/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/tacaswell/subscriptions",
            "organizations_url": "https://api.github.com/users/tacaswell/orgs",
            "repos_url": "https://api.github.com/users/tacaswell/repos",
            "events_url": "https://api.github.com/users/tacaswell/events{/privacy}",
            "received_events_url": "https://api.github.com/users/tacaswell/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yup. that makes sense to me.",
        "created_at": "2019-03-12T23:48:33Z",
        "updated_at": "2019-03-20T09:12:36Z",
        "html_url": "https://github.com/matplotlib/grid-strategy/pull/55#discussion_r264928492",
        "pull_request_url": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/55",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/comments/264928492"
            },
            "html": {
                "href": "https://github.com/matplotlib/grid-strategy/pull/55#discussion_r264928492"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/matplotlib/grid-strategy/pulls/55"
            }
        },
        "in_reply_to_id": 264767492
    }
]