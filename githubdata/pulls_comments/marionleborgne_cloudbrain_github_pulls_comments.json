[
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/38061404",
        "pull_request_review_id": null,
        "id": 38061404,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNDA0",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import json\n+import sys, os\n+import os.path\n+import stat\n+\n+from cloudbrain.publishers.PublisherInterface import Publisher\n+\n+from threading import Lock\n+\n+\n+class PipePublisher(Publisher):\n+  \"\"\"\n+  Publisher implementation for RabbitMQ via the Pika client",
        "path": "cloudbrain/publishers/PipePublisher.py",
        "position": null,
        "original_position": 13,
        "commit_id": "6ea19b4120e47e65ea2f1ba307460579ebe88803",
        "original_commit_id": "879b3d3e1c48990b85ca6d60f4203f86de993846",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "doc string to update. not a rabbitMQ publisher anymore\n",
        "created_at": "2015-08-27T04:35:34Z",
        "updated_at": "2015-08-27T05:23:33Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/45#discussion_r38061404",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/45",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/38061404"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/45#discussion_r38061404"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/45"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/39507531",
        "pull_request_review_id": null,
        "id": 39507531,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3NTMx",
        "diff_hunk": "@@ -0,0 +1,203 @@\n+# -*- coding: utf-8 -*-\n+\n+from cloudbrain.settings import RABBITMQ_ADDRESS\n+\n+import pika\n+import json\n+import logging\n+\n+from sockjs.tornado.conn import SockJSConnection\n+from sockjs.tornado import SockJSRouter\n+from tornado.ioloop import PeriodicCallback, IOLoop\n+from tornado.web import RequestHandler, Application\n+\n+from cloudbrain.subscribers.SubscriberInterface import Subscriber\n+\n+SERVER_PORT = 31415\n+logging.getLogger().setLevel(logging.INFO)\n+\n+\n+\n+class RtStreamConnection(SockJSConnection):\n+    \"\"\"RtStreamConnection connection implementation\"\"\"\n+    # Class level variable\n+    clients = set()\n+\n+    def __init__(self, session):\n+        super(self.__class__, self).__init__(session)\n+        self.subscribers = {}\n+\n+\n+    def send_probe_factory(self, metric_name):\n+\n+        def send_probe(body):\n+            logging.debug(\"GOT: \" + body)\n+            buffer_content = json.loads(body)\n+\n+            for record in buffer_content:\n+                record[\"metric\"] = metric_name\n+                self.send(json.dumps(record))\n+\n+        return send_probe\n+\n+\n+    def on_open(self, info):\n+        logging.info(\"Got a new connection...\")\n+        self.clients.add(self)\n+        # self.timeout = PeriodicCallback(self.send_heartbeat, 1000)\n+        # self.timeout.start()\n+\n+    # This will receive instructions from the client to change the\n+    # stream. After the connection is established we expect to receive a JSON\n+    # with deviceName, deviceId, metric; then we subscribe to RabbitMQ and\n+    # start streaming the data.\n+    #\n+    # NOTE: it's not possible to open multiple connections from the same client.\n+    #       so in case we need to stream different devices/metrics/etc. at the\n+    #       same time, we need to use a solution that is like the multiplexing\n+    #       in the sockjs-tornado examples folder.\n+    def on_message(self, message):\n+        logging.info(\"Got a new message: \" + message)\n+\n+        stream_configuration = json.loads(message)\n+        device_name = stream_configuration['deviceName']\n+        device_id = stream_configuration['deviceId']\n+        metric = stream_configuration['metric']\n+\n+        if metric not in self.subscribers:\n+            self.subscribers[metric] = TornadoSubscriber(callback=self.send_probe_factory(metric),\n+                                       device_name=device_name,\n+                                       device_id=device_id,\n+                                       rabbitmq_address=RABBITMQ_ADDRESS,\n+                                       metric_name=metric)\n+\n+\n+            self.subscribers[metric].connect()\n+\n+\n+\n+    def on_close(self):\n+        if self.subscriber is not None:",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": null,
        "original_position": 80,
        "commit_id": "141e85adf8e0ede22e11c1da593160100df415d5",
        "original_commit_id": "e205d50c107d49ba2d484528372446cd596d549c",
        "user": {
            "login": "alessiodm",
            "id": 3470251,
            "node_id": "MDQ6VXNlcjM0NzAyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/3470251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alessiodm",
            "html_url": "https://github.com/alessiodm",
            "followers_url": "https://api.github.com/users/alessiodm/followers",
            "following_url": "https://api.github.com/users/alessiodm/following{/other_user}",
            "gists_url": "https://api.github.com/users/alessiodm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alessiodm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alessiodm/subscriptions",
            "organizations_url": "https://api.github.com/users/alessiodm/orgs",
            "repos_url": "https://api.github.com/users/alessiodm/repos",
            "events_url": "https://api.github.com/users/alessiodm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alessiodm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is the `on_close` event of the web-socket connection itself, so we should probably loop and close all the `subscribers` since they can be more than one now. Moreover, we need to pay attention catching exception in case the close fails, to avoid to just close some of them and keeping other open but lingering around.\n",
        "created_at": "2015-09-15T13:14:27Z",
        "updated_at": "2015-09-16T05:29:31Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/59#discussion_r39507531",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/59",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/39507531"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/59#discussion_r39507531"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/59"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/39508833",
        "pull_request_review_id": null,
        "id": 39508833,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4ODMz",
        "diff_hunk": "@@ -0,0 +1,203 @@\n+# -*- coding: utf-8 -*-\n+\n+from cloudbrain.settings import RABBITMQ_ADDRESS\n+\n+import pika\n+import json\n+import logging\n+\n+from sockjs.tornado.conn import SockJSConnection\n+from sockjs.tornado import SockJSRouter\n+from tornado.ioloop import PeriodicCallback, IOLoop\n+from tornado.web import RequestHandler, Application\n+\n+from cloudbrain.subscribers.SubscriberInterface import Subscriber\n+\n+SERVER_PORT = 31415\n+logging.getLogger().setLevel(logging.INFO)\n+\n+\n+\n+class RtStreamConnection(SockJSConnection):\n+    \"\"\"RtStreamConnection connection implementation\"\"\"\n+    # Class level variable\n+    clients = set()\n+\n+    def __init__(self, session):\n+        super(self.__class__, self).__init__(session)\n+        self.subscribers = {}\n+\n+\n+    def send_probe_factory(self, metric_name):\n+\n+        def send_probe(body):\n+            logging.debug(\"GOT: \" + body)\n+            buffer_content = json.loads(body)\n+\n+            for record in buffer_content:\n+                record[\"metric\"] = metric_name\n+                self.send(json.dumps(record))\n+\n+        return send_probe\n+\n+\n+    def on_open(self, info):\n+        logging.info(\"Got a new connection...\")\n+        self.clients.add(self)\n+        # self.timeout = PeriodicCallback(self.send_heartbeat, 1000)\n+        # self.timeout.start()\n+\n+    # This will receive instructions from the client to change the\n+    # stream. After the connection is established we expect to receive a JSON\n+    # with deviceName, deviceId, metric; then we subscribe to RabbitMQ and\n+    # start streaming the data.\n+    #\n+    # NOTE: it's not possible to open multiple connections from the same client.\n+    #       so in case we need to stream different devices/metrics/etc. at the\n+    #       same time, we need to use a solution that is like the multiplexing\n+    #       in the sockjs-tornado examples folder.\n+    def on_message(self, message):\n+        logging.info(\"Got a new message: \" + message)\n+\n+        stream_configuration = json.loads(message)",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 62,
        "original_position": 62,
        "commit_id": "141e85adf8e0ede22e11c1da593160100df415d5",
        "original_commit_id": "e205d50c107d49ba2d484528372446cd596d549c",
        "user": {
            "login": "alessiodm",
            "id": 3470251,
            "node_id": "MDQ6VXNlcjM0NzAyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/3470251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alessiodm",
            "html_url": "https://github.com/alessiodm",
            "followers_url": "https://api.github.com/users/alessiodm/followers",
            "following_url": "https://api.github.com/users/alessiodm/following{/other_user}",
            "gists_url": "https://api.github.com/users/alessiodm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alessiodm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alessiodm/subscriptions",
            "organizations_url": "https://api.github.com/users/alessiodm/orgs",
            "repos_url": "https://api.github.com/users/alessiodm/repos",
            "events_url": "https://api.github.com/users/alessiodm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alessiodm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Here we could actually get different type of messages:\n- The `stream_configuration` that is the one that is now configured\n- The `close_stream` message, that allows us to close a specific subscriber\n  We can discriminate them using a key (let's say `type`) on the map\n",
        "created_at": "2015-09-15T13:26:10Z",
        "updated_at": "2015-09-16T05:29:31Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/59#discussion_r39508833",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/59",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/39508833"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/59#discussion_r39508833"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/59"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/48099497",
        "pull_request_review_id": null,
        "id": 48099497,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NDk3",
        "diff_hunk": "@@ -16,7 +17,19 @@\n SERVER_PORT = 31415\n logging.getLogger().setLevel(logging.INFO)\n \n+def get_args_parser():\n+    parser = argparse.ArgumentParser()\n \n+    parser.add_argument('-c', '--cloudbrain', default=RABBITMQ_ADDRESS,\n+                        help=\"The address of the RabbitMQ instance you are sending data to.\\n\"",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": null,
        "original_position": 16,
        "commit_id": "20224bb0a6316338da9d66ae27e0b700fd5126df",
        "original_commit_id": "d0b6434df8f4e11afc515f6f45066279dc752b01",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": " A note for the future: in our codebase, we try to limit the number of characters per line to 80 characters per line. The reason for that is that we follow the PEP-8 guidelines. See https://www.python.org/dev/peps/pep-0008/#maximum-line-length\n\nObviously, you are not going to count the number of chats in each line manually every time :smile: So the best is to setup you editor to be PEP-8 compliant (here's a post about pycharm http://blog.jetbrains.com/pycharm/2013/02/long-awaited-pep-8-checks-on-the-fly-improved-doctest-support-and-more-in-pycharm-2-7/). Lookup what your preferred code editor has in term of linting plugins. \n",
        "created_at": "2015-12-20T04:03:14Z",
        "updated_at": "2015-12-20T04:48:25Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/84#discussion_r48099497",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/84",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/48099497"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/84#discussion_r48099497"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/84"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352088",
        "pull_request_review_id": null,
        "id": 51352088,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDg4",
        "diff_hunk": "@@ -41,17 +43,19 @@ class RtStreamConnection(SockJSConnection):\n \n     def __init__(self, session):\n         super(self.__class__, self).__init__(session)\n-        self.subscribers = {}\n+        self.subscribers = recursivedict()\n \n \n-    def send_probe_factory(self, metric_name):\n+    def send_probe_factory(self, device_id, device_name, metric):",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 25,
        "original_position": 25,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do you mind adding a doc string? See example I sent you. Documenting all methods would be helpful.\n",
        "created_at": "2016-01-30T22:37:44Z",
        "updated_at": "2016-01-30T22:37:44Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352088",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352088"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352088"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352068",
        "pull_request_review_id": null,
        "id": 51352068,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMDY4",
        "diff_hunk": "@@ -14,6 +15,7 @@\n \n SERVER_PORT = 31415\n logging.getLogger().setLevel(logging.INFO)\n+recursivedict = lambda: defaultdict(recursivedict)",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 12,
        "original_position": 12,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please leave 2 blank lines between static methods, import block, and variables.\n\nSo:\n\n```\nfrom tornado.web import RequestHandler, Application\n\n\n_SERVER_PORT = 31415\n_LOGGER = logging.getLogger().setLevel(logging.INFO)\n\nrecursivedict = lambda: defaultdict(recursivedict)\n\ndef get_arg_parser():\n```\n",
        "created_at": "2016-01-30T22:36:06Z",
        "updated_at": "2016-01-30T22:47:54Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352068",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352068"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352068"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352226",
        "pull_request_review_id": null,
        "id": 51352226,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMjI2",
        "diff_hunk": "@@ -41,17 +43,19 @@ class RtStreamConnection(SockJSConnection):\n \n     def __init__(self, session):\n         super(self.__class__, self).__init__(session)\n-        self.subscribers = {}\n+        self.subscribers = recursivedict()\n \n \n-    def send_probe_factory(self, metric_name):\n+    def send_probe_factory(self, device_id, device_name, metric):\n \n         def send_probe(body):",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 27,
        "original_position": 27,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Consider making some of your methods private with the `_` prefix. This comments is valid for other methods in this file.\n",
        "created_at": "2016-01-30T22:49:56Z",
        "updated_at": "2016-01-30T22:49:56Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352226",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352226"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352226"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352214",
        "pull_request_review_id": null,
        "id": 51352214,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMjE0",
        "diff_hunk": "@@ -7,6 +7,7 @@\n import logging",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 1,
        "original_position": 1,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A note about imports for future reference: https://www.python.org/dev/peps/pep-0008/#imports\n\n`cloubdrain` import should be last and separated by a blank line form tornado imports.\n",
        "created_at": "2016-01-30T22:48:59Z",
        "updated_at": "2016-01-30T22:50:54Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352214",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352214"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352214"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352262",
        "pull_request_review_id": null,
        "id": 51352262,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMjYy",
        "diff_hunk": "@@ -41,17 +43,19 @@ class RtStreamConnection(SockJSConnection):\n ",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 17,
        "original_position": 17,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The comment `# Class level variable` is useless and can be removed.\n",
        "created_at": "2016-01-30T22:52:40Z",
        "updated_at": "2016-01-30T22:52:40Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352262",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352262"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352262"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352281",
        "pull_request_review_id": null,
        "id": 51352281,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMjgx",
        "diff_hunk": "@@ -86,29 +90,36 @@ def handle_channel_subscription(self, stream_configuration):\n         device_id = stream_configuration['deviceId']",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 40,
        "original_position": 40,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The big comment block should be a docstring of `on_message`:\n\n```\n     # This will receive instructions from the client to change the\n     # stream. After the connection is established we expect to receive a JSON\n     # with deviceName, deviceId, metric; then we subscribe to RabbitMQ and\n     # start streaming the data.\n     #\n     # NOTE: it's not possible to open multiple connections from the same client.\n     #       so in case we need to stream different devices/metrics/etc. at the\n     #       same time, we need to use a solution that is like the multiplexing\n     #       in the sockjs-tornado examples folder.\n```\n\nAlso, the commented lines \n\n```\n# self.timeout = PeriodicCallback(self.send_heartbeat, 1000)\n# self.timeout.start()\n```\n\ncan be removed.\n",
        "created_at": "2016-01-30T22:54:00Z",
        "updated_at": "2016-01-30T22:54:40Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352281",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352281"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352281"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352329",
        "pull_request_review_id": null,
        "id": 51352329,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMzI5",
        "diff_hunk": "@@ -118,6 +129,10 @@ def on_close(self):\n     def send_heartbeat(self):\n         self.broadcast(self.clients, 'message')\n \n+    def metric_exists(self, device_id, device_name, metric):",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 93,
        "original_position": 93,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's debatable, but I think it would be nicer if this method was static. You can pass it self.subscribers. Take it out of the class and put it at the top the file along with `recursivedict`.\n\n```\ndef metric_exists(subscriber, device_id, device_name, metric):\n   # do stuff\n   # return True / False\n```\n",
        "created_at": "2016-01-30T22:57:59Z",
        "updated_at": "2016-01-30T22:57:59Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352329",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352329"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352329"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352341",
        "pull_request_review_id": null,
        "id": 51352341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyMzQx",
        "diff_hunk": "@@ -118,6 +129,10 @@ def on_close(self):\n     def send_heartbeat(self):\n         self.broadcast(self.clients, 'message')\n \n+    def metric_exists(self, device_id, device_name, metric):\n+        return (self.subscribers.has_key(device_id)\n+                and self.subscribers[device_id].has_key(device_name)\n+                and self.subscribers[device_id][device_name].has_key(metric))\n \n class MockHandler(RequestHandler):",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 98,
        "original_position": 98,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is using this? I am not sure what it tests. But the mock prefix suggests that it is a good thing to take out and start writing some proper unit tests :smile: \n",
        "created_at": "2016-01-30T22:59:10Z",
        "updated_at": "2016-01-30T23:00:35Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352341",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352341"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352507",
        "pull_request_review_id": null,
        "id": 51352507,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyNTA3",
        "diff_hunk": "@@ -118,6 +129,10 @@ def on_close(self):\n     def send_heartbeat(self):\n         self.broadcast(self.clients, 'message')\n \n+    def metric_exists(self, device_id, device_name, metric):\n+        return (self.subscribers.has_key(device_id)\n+                and self.subscribers[device_id].has_key(device_name)\n+                and self.subscribers[device_id][device_name].has_key(metric))\n \n class MockHandler(RequestHandler):\n     \"\"\"Just a mock page to test it out...\"\"\"",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 99,
        "original_position": 99,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "marionleborgne",
            "id": 2488251,
            "node_id": "MDQ6VXNlcjI0ODgyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/2488251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/marionleborgne",
            "html_url": "https://github.com/marionleborgne",
            "followers_url": "https://api.github.com/users/marionleborgne/followers",
            "following_url": "https://api.github.com/users/marionleborgne/following{/other_user}",
            "gists_url": "https://api.github.com/users/marionleborgne/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/marionleborgne/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/marionleborgne/subscriptions",
            "organizations_url": "https://api.github.com/users/marionleborgne/orgs",
            "repos_url": "https://api.github.com/users/marionleborgne/repos",
            "events_url": "https://api.github.com/users/marionleborgne/events{/privacy}",
            "received_events_url": "https://api.github.com/users/marionleborgne/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A couple of things about the rest of this file:\n- Move the `See: http:// ...` to a doc sting and explain some more what this class does.\n\n```\n class TornadoSubscriber(object):\n     \"\"\" See: https://pika.readthedocs.org/en/0.9.14/examples/tornado_consumer.html \"\"\" \n```\n- There is a problem in how the params are initialized here. The rabbitMQ address is harcorded: `self.host = RABBITMQ_ADDRESS` Should be: \n\n```\n     def __init__(self, callback, device_name, device_id, rabbitmq_address, metric_name)\n         self.callback = callback\n         self.device_name = device_name\n         self.device_id = device_id\n         self.host = rabbitmq_address\n         self.metric_name = metric_name\n\n         self.connection = None\n         self.channel = None\n         self.queue_name = None\n```\n- Re-indent correct:\n\n```\n     def connect(self):\n         credentials = pika.PlainCredentials('cloudbrain', 'cloudbrain')\n         self.connection = pika.adapters.tornado_connection.TornadoConnection(\n             pika.ConnectionParameters(\n                 host=self.host, credentials=credentials),\n             self.on_connected,\n             stop_ioloop_on_close=False,\n             custom_ioloop=IOLoop.instance())\n\n```\n- Remove useless comments:\n\n```\n # self.setup_exchange(self.EXCHANGE)\n # self.channel.confirm_delivery(self.on_delivery_confirmation)\n```\n- Look at the whole file and use the `_LOGGER` defined at the beginning of the file (see on of my first comments) to log instead of `logging.info`:\n\n```\n_LOGGER.info(\"******** Backpressure detected for %s\" % self.get_key())\n```\n- Replace all `print` statements by: \n\n```\n_LOGGER.info( \"Real-time data server running at http://localhost: {}\".format( SERVER_PORT))\n```\n",
        "created_at": "2016-01-30T23:17:44Z",
        "updated_at": "2016-01-30T23:19:58Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352507",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51352507"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51352507"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51979503",
        "pull_request_review_id": null,
        "id": 51979503,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc5NTAz",
        "diff_hunk": "@@ -14,6 +15,7 @@\n \n SERVER_PORT = 31415\n logging.getLogger().setLevel(logging.INFO)\n+recursivedict = lambda: defaultdict(recursivedict)",
        "path": "cloudbrain/rt_server/rt_server.py",
        "position": 12,
        "original_position": 12,
        "commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "original_commit_id": "696e501e45465278ec3262bf0a5efce0156a2401",
        "user": {
            "login": "alessiodm",
            "id": 3470251,
            "node_id": "MDQ6VXNlcjM0NzAyNTE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/3470251?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/alessiodm",
            "html_url": "https://github.com/alessiodm",
            "followers_url": "https://api.github.com/users/alessiodm/followers",
            "following_url": "https://api.github.com/users/alessiodm/following{/other_user}",
            "gists_url": "https://api.github.com/users/alessiodm/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/alessiodm/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/alessiodm/subscriptions",
            "organizations_url": "https://api.github.com/users/alessiodm/orgs",
            "repos_url": "https://api.github.com/users/alessiodm/repos",
            "events_url": "https://api.github.com/users/alessiodm/events{/privacy}",
            "received_events_url": "https://api.github.com/users/alessiodm/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@flysonic10 I love the `recursivedict`: it's so functional! :smile: I have only just one concern about the fact that I'd rather :boom: in case of an unexpected lookup, instead of implicitly creating another dictionary for the missing key.\nI was checking the `metric_exists` method and we actually perform some `has_key` checks; so my feeling is that it might be better to be explicit from now about when checking the keys of the `subscriber`s. That is also in perspective of adding future checks and communication between the RTServer and the API/OAuth layer to allow specific `device_id`s for users, specific metrics, etc.\n",
        "created_at": "2016-02-05T05:33:28Z",
        "updated_at": "2016-02-05T05:33:28Z",
        "html_url": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51979503",
        "pull_request_url": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/comments/51979503"
            },
            "html": {
                "href": "https://github.com/marionleborgne/cloudbrain/pull/87#discussion_r51979503"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/marionleborgne/cloudbrain/pulls/87"
            }
        }
    }
]