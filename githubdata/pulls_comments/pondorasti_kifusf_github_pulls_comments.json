[
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241134751",
        "pull_request_review_id": 184330877,
        "id": 241134751,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTEzNDc1MQ==",
        "diff_hunk": "@@ -118,6 +116,7 @@ class KFCOpenDonations: KFCTableViewWithRoundedCells {\n         case UIStoryboardSegue.kfShowDetailedDonation:\n \n             //TODO: fix this crap\n+            //Victor: Hayir",
        "path": "KifuSF/KFCOpenDonations.swift",
        "position": 18,
        "original_position": 18,
        "commit_id": "2bf8ba98c2edffe6d0ea7280ad9e07592ecb145e",
        "original_commit_id": "2bf8ba98c2edffe6d0ea7280ad9e07592ecb145e",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Pondorasti is this a comment?",
        "created_at": "2018-12-12T18:34:29Z",
        "updated_at": "2018-12-12T20:37:43Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/7#discussion_r241134751",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/7",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241134751"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/7#discussion_r241134751"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/7"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241803350",
        "pull_request_review_id": 185172393,
        "id": 241803350,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTgwMzM1MA==",
        "diff_hunk": "@@ -63,14 +63,14 @@ extension KFCPendingDonations: KFPPendingDonationCellDelegate {\n         let selectedDonation = self.donations[indexPath.row]\n         sender.descriptorView.cancelStickyButton.contentView.isEnabled = false\n         \n-        RequestService.cancelRequest(for: selectedDonation) { (isSuccessfull) in\n+        RequestService.cancelRequest(for: selectedDonation) { [unowned self] (isSuccessfull) in",
        "path": "KifuSF/KFCPendingDonations.swift",
        "position": 5,
        "original_position": 5,
        "commit_id": "43ce1b90182a0e17de00ea18efdc227931591c53",
        "original_commit_id": "43ce1b90182a0e17de00ea18efdc227931591c53",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Pondorasti you can also use `[weak self]`. But, here, there are no retain cycle, or memory link in this case",
        "created_at": "2018-12-14T16:00:52Z",
        "updated_at": "2018-12-14T16:02:15Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/8#discussion_r241803350",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/8",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241803350"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/8#discussion_r241803350"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/8"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241987031",
        "pull_request_review_id": 185394731,
        "id": 241987031,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTk4NzAzMQ==",
        "diff_hunk": "@@ -151,14 +151,40 @@ class KFCDelivery: KFCModularTableView {\n         } else if delivery.status.isAwaitingDelivery {\n             \n             //TODO: get location of selected charity of donation\n-            return nil\n+            location = CLLocationCoordinate2D(\n+                latitude: delivery.latitude,\n+                longitude: delivery.longitude\n+            )\n         } else {\n             return nil\n         }\n         \n         return KFMDestinationMap(coordinate: location)\n     }\n     \n+    override func didSelect(_ cellType: KFCModularTableView.CellTypes, at indexPath: IndexPath) {\n+        switch cellType {\n+        case .destinationMap:\n+            guard let delivery = self.delivery else {\n+                return assertionFailure(\"No delivery given while map was tappable\")\n+            }\n+            \n+            if delivery.status.isAwaitingPickup {\n+                ",
        "path": "KifuSF/KFCDelivery.swift",
        "position": 33,
        "original_position": 33,
        "commit_id": "6ba04e1684304e42ffc9e09443bb3c33275dd9ca",
        "original_commit_id": "6ba04e1684304e42ffc9e09443bb3c33275dd9ca",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nit: extra whitespace",
        "created_at": "2018-12-16T16:33:36Z",
        "updated_at": "2018-12-16T16:33:36Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/10#discussion_r241987031",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/10",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241987031"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/10#discussion_r241987031"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241987038",
        "pull_request_review_id": 185394737,
        "id": 241987038,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTk4NzAzOA==",
        "diff_hunk": "@@ -151,14 +151,40 @@ class KFCDelivery: KFCModularTableView {\n         } else if delivery.status.isAwaitingDelivery {\n             \n             //TODO: get location of selected charity of donation\n-            return nil\n+            location = CLLocationCoordinate2D(\n+                latitude: delivery.latitude,\n+                longitude: delivery.longitude\n+            )\n         } else {\n             return nil\n         }\n         \n         return KFMDestinationMap(coordinate: location)\n     }\n     \n+    override func didSelect(_ cellType: KFCModularTableView.CellTypes, at indexPath: IndexPath) {\n+        switch cellType {\n+        case .destinationMap:\n+            guard let delivery = self.delivery else {\n+                return assertionFailure(\"No delivery given while map was tappable\")\n+            }\n+            \n+            if delivery.status.isAwaitingPickup {\n+                \n+                //pickup Location\n+                MapHelper(long: delivery.longitude, lat: delivery.latitude)\n+                    .open()\n+            } else if delivery.status.isAwaitingDelivery {\n+                ",
        "path": "KifuSF/KFCDelivery.swift",
        "position": 38,
        "original_position": 38,
        "commit_id": "6ba04e1684304e42ffc9e09443bb3c33275dd9ca",
        "original_commit_id": "6ba04e1684304e42ffc9e09443bb3c33275dd9ca",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nit: extra whitespace",
        "created_at": "2018-12-16T16:33:44Z",
        "updated_at": "2018-12-16T16:33:44Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/10#discussion_r241987038",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/10",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241987038"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/10#discussion_r241987038"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241993045",
        "pull_request_review_id": 185400686,
        "id": 241993045,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTk5MzA0NQ==",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+//\n+//  Notification.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 16/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import Foundation\n+import UIKit\n+\n+extension Notification {\n+    func getKeyboardHeight() -> CGFloat? {\n+        return (self.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue.height",
        "path": "KifuSF/Notification.swift",
        "position": 14,
        "original_position": 14,
        "commit_id": "7e541b50f05ca98f246828365ee215379f8838ab",
        "original_commit_id": "1803f8a15e34d5319bcc59fa383b2682eee00411",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nice",
        "created_at": "2018-12-16T19:37:41Z",
        "updated_at": "2018-12-16T20:46:57Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/11#discussion_r241993045",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/11",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241993045"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/11#discussion_r241993045"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/11"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241993138",
        "pull_request_review_id": 185400686,
        "id": 241993138,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTk5MzEzOA==",
        "diff_hunk": "@@ -98,16 +106,15 @@ class KFCRegisterForm: UIViewController {\n         //unwrap all values and make sure the string is not empty\n         guard let image = profileImageView.image,\n             let _ = userSelectedAProfileImage,\n-            let fullName = fullNameTextFieldContainer.textField.text, fullName.count != 0,\n-            let username = usernameTextFieldContainer.textField.text, username.count != 0,\n-            let contactNumber = phoneNumberTextFieldContainer.textField.text, contactNumber.count != 0,\n-            let email = emailTextFieldContainer.textField.text, email.count != 0,\n-            let password = passwordTextFieldContainer.textField.text, password.count != 0 else {\n+            let fullName = fullNameInputView.textFieldContainer.textField.text, !fullName.isEmpty,\n+            let username = usernameInputView.textFieldContainer.textField.text, !username.isEmpty,\n+            let contactNumber = phoneNumberInputView.textFieldContainer.textField.text, !contactNumber.isEmpty,\n+            let email = emailInputView.textFieldContainer.textField.text, !email.isEmpty,\n+            let password = passwordInputView.textFieldContainer.textField.text, !password.isEmpty else {",
        "path": "KifuSF/RegisterFormViewController.swift",
        "position": 136,
        "original_position": 129,
        "commit_id": "7e541b50f05ca98f246828365ee215379f8838ab",
        "original_commit_id": "1803f8a15e34d5319bcc59fa383b2682eee00411",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What do you think of this as an exension?\r\n\r\n```swift\r\nextension String {\r\n    \r\n    var isNotEmpty: Bool {\r\n        return !self.isEmpty\r\n    }\r\n    \r\n    /**\r\n     checks if self is empty. If so, return the given default string.\r\n     \r\n     - parameter defaultString: return this if self is empty or nil\r\n     \r\n     - returns: either return self if not an empty string or return the given default value\r\n     */\r\n    func ifEmpty(use defaultString: String) -> String {\r\n        if self.isEmpty {\r\n            return defaultString\r\n        } else {\r\n            return self\r\n        }\r\n    }\r\n}\r\n\r\nextension Optional where Wrapped == String {\r\n    \r\n    /**\r\n     unwraps and checks if the string is empty. If so, return the given default string.\r\n     \r\n     This is similar to using the nil-colicent but also checks `.isEmpty`\r\n     \r\n     - parameter defaultString: return this if self is empty or nil\r\n     \r\n     - returns: either return self if not nil and not an empty string or return the given default value\r\n     */\r\n    func ifEmptyOrNil(use defaultString: String) -> String {\r\n        if let unwrappedSelf = self, unwrappedSelf.isEmpty == false {\r\n            return unwrappedSelf\r\n        } else {\r\n            return defaultString\r\n        }\r\n    }\r\n}\r\n```",
        "created_at": "2018-12-16T19:40:31Z",
        "updated_at": "2018-12-16T20:46:57Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/11#discussion_r241993138",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/11",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241993138"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/11#discussion_r241993138"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/11"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242361069",
        "pull_request_review_id": 185852918,
        "id": 242361069,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM2MTA2OQ==",
        "diff_hunk": "@@ -151,14 +151,40 @@ class KFCDelivery: KFCModularTableView {\n         } else if delivery.status.isAwaitingDelivery {\n             \n             //TODO: get location of selected charity of donation\n-            return nil\n+            location = CLLocationCoordinate2D(\n+                latitude: delivery.latitude,\n+                longitude: delivery.longitude\n+            )\n         } else {\n             return nil\n         }\n         \n         return KFMDestinationMap(coordinate: location)\n     }\n     \n+    override func didSelect(_ cellType: KFCModularTableView.CellTypes, at indexPath: IndexPath) {\n+        switch cellType {\n+        case .destinationMap:\n+            guard let delivery = self.delivery else {\n+                return assertionFailure(\"No delivery given while map was tappable\")\n+            }\n+            \n+            if delivery.status.isAwaitingPickup {\n+                ",
        "path": "KifuSF/KFCDelivery.swift",
        "position": 33,
        "original_position": 33,
        "commit_id": "6ba04e1684304e42ffc9e09443bb3c33275dd9ca",
        "original_commit_id": "6ba04e1684304e42ffc9e09443bb3c33275dd9ca",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a style for me: I leave a leading line for every comment i write so I can find them better.",
        "created_at": "2018-12-17T23:51:36Z",
        "updated_at": "2018-12-17T23:51:36Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/10#discussion_r242361069",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242361069"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/10#discussion_r242361069"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/10"
            }
        },
        "in_reply_to_id": 241987031
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242362956",
        "pull_request_review_id": 185855120,
        "id": 242362956,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM2Mjk1Ng==",
        "diff_hunk": "@@ -9,6 +9,9 @@\n import Foundation\n \n protocol UIConfigurable {\n+    /**\n+     Poof\n+     */",
        "path": "KifuSF/Protocols.swift",
        "position": 6,
        "original_position": 6,
        "commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "original_commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wha this??",
        "created_at": "2018-12-18T00:01:19Z",
        "updated_at": "2018-12-18T00:01:19Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242362956",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242362956"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242362956"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242363397",
        "pull_request_review_id": 185855567,
        "id": 242363397,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM2MzM5Nw==",
        "diff_hunk": "@@ -137,7 +123,7 @@ class KFButton: UIButton, UIConfigurable {\n         case .pressed:\n             buttonAnimator = nil\n         default:\n-            let animator = UIViewPropertyAnimator(duration: KFButton.animationDuration, curve: .linear, animations: { [unowned self] in\n+            let animator = UIViewPropertyAnimator(duration: UIAnimatedButton.animationDuration, curve: .linear, animations: { [unowned self] in",
        "path": "KifuSF/UIAnimatedButton.swift",
        "position": 74,
        "original_position": 74,
        "commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "original_commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@Pondorasti be careful when you use `unowned` in your capture lists. In an animation block, `self` could be removed from memory before the animation ends",
        "created_at": "2018-12-18T00:03:17Z",
        "updated_at": "2018-12-18T00:03:18Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242363397",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242363397"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242363397"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242365200",
        "pull_request_review_id": 185857577,
        "id": 242365200,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM2NTIwMA==",
        "diff_hunk": "@@ -48,38 +49,39 @@ class KFVSticky<T: UIView>: UIView, UIConfigurable {\n         addSubview(contentView)\n         configureLayout()\n     }\n-    \n-    func configureLayout() {\n-        contentView.translatesAutoresizingMaskIntoConstraints = false\n-        \n-        layoutConstraints = [\n-        contentView.autoPinEdge(toSuperviewEdge: .top,\n-                                withInset: (stickySide == .top) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .top) ? .greaterThanOrEqual : .equal),\n-        contentView.autoPinEdge(toSuperviewEdge: .leading,\n-                                withInset: (stickySide == .leading) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .leading) ? .greaterThanOrEqual : .equal),\n-        contentView.autoPinEdge(toSuperviewEdge: .trailing,\n-                                withInset: (stickySide == .trailing) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .trailing) ? .greaterThanOrEqual : .equal),\n-        contentView.autoPinEdge(toSuperviewEdge: .bottom,\n-                                withInset: (stickySide == .bottom) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .bottom) ? .greaterThanOrEqual : .equal)\n-        ]\n+\n+    required init?(coder aDecoder: NSCoder) {\n+        fatalError(\"init(coder:) has not been implemented\")\n     }\n     \n-    \n+    //MARK: I have no idea who wrote this code \ud83e\udd37\u200d\u2642\ufe0f... definitly not me \ud83e\udd25\n+    //FIXED: removed the ugly function, no need for somebody else to see it",
        "path": "KifuSF/UIStickyView.swift",
        "position": 50,
        "original_position": 50,
        "commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "original_commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is this comment current? or outdated",
        "created_at": "2018-12-18T00:12:21Z",
        "updated_at": "2018-12-18T00:12:21Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242365200",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242365200"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242365200"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242583231",
        "pull_request_review_id": 186127695,
        "id": 242583231,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjU4MzIzMQ==",
        "diff_hunk": "@@ -9,6 +9,9 @@\n import Foundation\n \n protocol UIConfigurable {\n+    /**\n+     Poof\n+     */",
        "path": "KifuSF/Protocols.swift",
        "position": 6,
        "original_position": 6,
        "commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "original_commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed!",
        "created_at": "2018-12-18T15:30:33Z",
        "updated_at": "2018-12-18T15:30:34Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242583231",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242583231"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242583231"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13"
            }
        },
        "in_reply_to_id": 242362956
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242583822",
        "pull_request_review_id": 186128400,
        "id": 242583822,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjU4MzgyMg==",
        "diff_hunk": "@@ -48,38 +49,39 @@ class KFVSticky<T: UIView>: UIView, UIConfigurable {\n         addSubview(contentView)\n         configureLayout()\n     }\n-    \n-    func configureLayout() {\n-        contentView.translatesAutoresizingMaskIntoConstraints = false\n-        \n-        layoutConstraints = [\n-        contentView.autoPinEdge(toSuperviewEdge: .top,\n-                                withInset: (stickySide == .top) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .top) ? .greaterThanOrEqual : .equal),\n-        contentView.autoPinEdge(toSuperviewEdge: .leading,\n-                                withInset: (stickySide == .leading) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .leading) ? .greaterThanOrEqual : .equal),\n-        contentView.autoPinEdge(toSuperviewEdge: .trailing,\n-                                withInset: (stickySide == .trailing) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .trailing) ? .greaterThanOrEqual : .equal),\n-        contentView.autoPinEdge(toSuperviewEdge: .bottom,\n-                                withInset: (stickySide == .bottom) ? offset : 0,\n-                                relation: (stickySide?.opositeSide() == .bottom) ? .greaterThanOrEqual : .equal)\n-        ]\n+\n+    required init?(coder aDecoder: NSCoder) {\n+        fatalError(\"init(coder:) has not been implemented\")\n     }\n     \n-    \n+    //MARK: I have no idea who wrote this code \ud83e\udd37\u200d\u2642\ufe0f... definitly not me \ud83e\udd25\n+    //FIXED: removed the ugly function, no need for somebody else to see it",
        "path": "KifuSF/UIStickyView.swift",
        "position": 50,
        "original_position": 50,
        "commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "original_commit_id": "a2b946c6bcc568bcbf79462271d0658cc869908d",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Outdated, let's just leave it there, it's part of our history :]",
        "created_at": "2018-12-18T15:31:47Z",
        "updated_at": "2018-12-18T15:31:47Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242583822",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242583822"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/13#discussion_r242583822"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/13"
            }
        },
        "in_reply_to_id": 242365200
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241988723",
        "pull_request_review_id": 185396383,
        "id": 241988723,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTk4ODcyMw==",
        "diff_hunk": "@@ -37,6 +37,15 @@ class KFVDestinationMap: UIView, UIConfigurable {\n     func configureStyling() {\n         mapView.layer.cornerRadius = CALayer.kfCornerRadius\n     }\n+    ",
        "path": "KifuSF/KFVDestinationMap.swift",
        "position": 5,
        "original_position": 4,
        "commit_id": "f132d548b691f3743c6c92f210083a798d39d18a",
        "original_commit_id": "afecc77117bf5b63e2ec1da589e19f15d0dc3f29",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this?",
        "created_at": "2018-12-16T17:27:05Z",
        "updated_at": "2018-12-19T20:37:23Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r241988723",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241988723"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r241988723"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241988731",
        "pull_request_review_id": 185396389,
        "id": 241988731,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTk4ODczMQ==",
        "diff_hunk": "@@ -175,9 +175,11 @@ extension KFCModularTableView: UITableViewDataSource {\n                 let castedItem = item as? KFMDestinationMap else {\n                     fatalError(KFErrorMessage.unknownCell)\n             }\n-\n-\n+            ",
        "path": "KifuSF/KFCModularTableView.swift",
        "position": null,
        "original_position": 6,
        "commit_id": "f132d548b691f3743c6c92f210083a798d39d18a",
        "original_commit_id": "afecc77117bf5b63e2ec1da589e19f15d0dc3f29",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this?",
        "created_at": "2018-12-16T17:27:16Z",
        "updated_at": "2018-12-19T20:37:23Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r241988731",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241988731"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r241988731"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241988850",
        "pull_request_review_id": 185396511,
        "id": 241988850,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTk4ODg1MA==",
        "diff_hunk": "@@ -191,11 +191,11 @@ extension KFCCreateDonation {\n         donationImageView.addGestureRecognizer(tapGesture)\n \n \n-        let tintableImage = UIImage.kfPlusImage.withRenderingMode(.alwaysTemplate)\n+        let tintableImage =  UIImage.kfPlusImage.withRenderingMode(.alwaysTemplate)\n         donationImageView.image = tintableImage\n         donationImageView.tintColor = .kfPrimary\n         \n-        donationInfoButton.setTitle(\"  Donating?\", with: .subheader1)",
        "path": "KifuSF/KFCCreateDonation.swift",
        "position": 9,
        "original_position": 9,
        "commit_id": "f132d548b691f3743c6c92f210083a798d39d18a",
        "original_commit_id": "afecc77117bf5b63e2ec1da589e19f15d0dc3f29",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@woodward4422 Revert this spacing change to have leading spacing :)",
        "created_at": "2018-12-16T17:30:43Z",
        "updated_at": "2018-12-19T20:37:23Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r241988850",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/241988850"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r241988850"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242358550",
        "pull_request_review_id": 185849901,
        "id": 242358550,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM1ODU1MA==",
        "diff_hunk": "@@ -37,7 +37,17 @@ class KFVDestinationMap: UIView, UIConfigurable {\n     func configureStyling() {\n         mapView.layer.cornerRadius = CALayer.kfCornerRadius\n     }\n-\n+    \n+    func reloadData(for data: CLLocationCoordinate2D) {\n+        guard CLLocationCoordinate2DIsValid(data) else {\n+            return assertionFailure(KFErrorMessage.inputValidationFailed(\"Corrdinate is invalid\"))\n+        }",
        "path": "KifuSF/KFVDestinationMap.swift",
        "position": 9,
        "original_position": 9,
        "commit_id": "f132d548b691f3743c6c92f210083a798d39d18a",
        "original_commit_id": "61c0a08c9be4934e0599fe9c6d3485f862f3cc70",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@woodward4422 i've added some error handling in case the coordinate is invalid.",
        "created_at": "2018-12-17T23:38:41Z",
        "updated_at": "2018-12-19T20:37:23Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r242358550",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242358550"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r242358550"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242358648",
        "pull_request_review_id": 185850002,
        "id": 242358648,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MjM1ODY0OA==",
        "diff_hunk": "@@ -37,7 +37,17 @@ class KFVDestinationMap: UIView, UIConfigurable {\n     func configureStyling() {\n         mapView.layer.cornerRadius = CALayer.kfCornerRadius\n     }\n-\n+    \n+    func reloadData(for data: CLLocationCoordinate2D) {\n+        guard CLLocationCoordinate2DIsValid(data) else {\n+            return assertionFailure(KFErrorMessage.inputValidationFailed(\"Corrdinate is invalid\"))\n+        }\n+\n+        let annotation = MKPointAnnotation()\n+        annotation.coordinate = data\n+        mapView.addAnnotation(annotation)\n+        mapView.showAnnotations(mapView.annotations, animated: false)",
        "path": "KifuSF/KFVDestinationMap.swift",
        "position": 14,
        "original_position": 14,
        "commit_id": "f132d548b691f3743c6c92f210083a798d39d18a",
        "original_commit_id": "61c0a08c9be4934e0599fe9c6d3485f862f3cc70",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I also removed the animation since it was not going to be seen in the table view",
        "created_at": "2018-12-17T23:39:06Z",
        "updated_at": "2018-12-19T20:37:23Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r242358648",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/242358648"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/12#discussion_r242358648"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747087",
        "pull_request_review_id": 187603729,
        "id": 243747087,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzc0NzA4Nw==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 15,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "```suggestion\r\n    private lazy var imageHelper = PhotoHelper()\r\n```",
        "created_at": "2018-12-22T21:48:38Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747087",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747087"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747087"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747092",
        "pull_request_review_id": 187603739,
        "id": 243747092,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzc0NzA5Mg==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 15,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thus, keeping the initialization of `CreateDonationViewController` smaller",
        "created_at": "2018-12-22T21:49:02Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747092",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747092"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747092"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243747087
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747207",
        "pull_request_review_id": 187603890,
        "id": 243747207,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzc0NzIwNw==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 53,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I have this helper that can handles the observing of the keyboard events and uses delegates to notify when the keyboard comes and goes, if you're interested to add it to the project here it is:\r\n\r\n```swift\r\nimport Foundation\r\nimport UIKit.UIWindow\r\n\r\nprotocol KeyboardStackDelegate: class {\r\n    func keyboard(_ keyboard: KeyboardStack, didChangeTo newHeight: CGFloat)\r\n}\r\n\r\nclass KeyboardStack: NSObject {\r\n    \r\n    weak var delegate: KeyboardStackDelegate?\r\n    \r\n    private var keyboardHieght: CGFloat = 0\r\n    \r\n    override init() {\r\n        super.init()\r\n        \r\n        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillChange(notification:)), name: NSNotification.Name.UIKeyboardWillShow, object: nil)\r\n        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillChange(notification:)), name: NSNotification.Name.UIKeyboardWillHide, object: nil)\r\n        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillChange(notification:)), name: NSNotification.Name.UIKeyboardWillChangeFrame, object: nil)\r\n    }\r\n    \r\n    deinit {\r\n        NotificationCenter.default.removeObserver(self, name: NSNotification.Name.UIKeyboardWillShow, object: nil)\r\n        NotificationCenter.default.removeObserver(self, name: NSNotification.Name.UIKeyboardWillHide, object: nil)\r\n        NotificationCenter.default.removeObserver(self, name: NSNotification.Name.UIKeyboardWillChangeFrame, object: nil)\r\n    }\r\n    \r\n    @objc private func keyboardWillChange(notification: Notification) {\r\n        guard let keyboardRect = (notification.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue else {\r\n            return\r\n        }\r\n        \r\n        if notification.name == Notification.Name.UIKeyboardWillShow ||\r\n            notification.name == Notification.Name.UIKeyboardWillChangeFrame {\r\n            self.delegate?.keyboard(self, didChangeTo: keyboardRect.height + 64)\r\n        } else {\r\n            self.delegate?.keyboard(self, didChangeTo: 0)\r\n        }\r\n    }\r\n}\r\n```",
        "created_at": "2018-12-22T21:57:08Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747207",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747207"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747207"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747286",
        "pull_request_review_id": 187603963,
        "id": 243747286,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzc0NzI4Ng==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 111,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "```suggestion\r\n                return showErrorMessage(\"Please select a pick-up location\")\r\n```\r\n\r\nSince the user can open the location picker then click back without selecting a location",
        "created_at": "2018-12-22T22:01:55Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747286",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747286"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747286"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747324",
        "pull_request_review_id": 187604009,
        "id": 243747324,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzc0NzMyNA==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")\n+            }\n+\n+            self.pickupLocation = location\n+        }\n+\n+        self.navigationController?.pushViewController(locationPicker, animated: true)\n+    }\n+\n+    private func showErrorMessage(_ errorMessage: String) {\n+        errorLabel.isHidden = false\n+        errorLabel.text = errorMessage\n+\n+        UIView.animate(withDuration: UIView.microInteractionDuration, animations: { [unowned self] in\n+            self.view.layoutIfNeeded()\n+        }, completion: { [unowned self] (_) in\n+            self.contentScrollView.scrollToBottom()\n+        })\n+\n+        pickUpAddressButton.resetState()\n+    }\n+}\n+\n+//MARK: - UITextFieldDelegate\n+extension CreateDonationViewController: UITextFieldDelegate {\n+    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n+        descriptionInputView.contentView.becomeFirstResponder()\n+\n+        return true\n+    }\n+}\n+\n+//MARK: - UITextViewDelegate\n+extension CreateDonationViewController: UITextViewDelegate {\n+    func textViewDidBeginEditing(_ textView: UITextView) {\n+        if textView.textColor == .kfPlaceholderText {\n+            textView.textColor = .black\n+            textView.text = nil\n+        }\n+    }\n+\n+    func textViewDidEndEditing(_ textView: UITextView) {\n+        if textView.text.isEmpty {\n+            textView.textColor = .kfPlaceholderText\n+            textView.text = CreateDonationViewController.descriptionPlaceholder\n+        }\n+    }",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": 146,
        "original_position": 157,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This placeholder text for the `UITextView` could be abstracted away from the ViewController and into a subclass of `UITextView`. **Butt**, since it's working now, i'd leave it as it is now \ud83d\udc4d ",
        "created_at": "2018-12-22T22:04:20Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747324",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243747324"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243747324"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243748348",
        "pull_request_review_id": 187604841,
        "id": 243748348,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzc0ODM0OA==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")\n+            }\n+\n+            self.pickupLocation = location\n+        }\n+\n+        self.navigationController?.pushViewController(locationPicker, animated: true)\n+    }\n+\n+    private func showErrorMessage(_ errorMessage: String) {\n+        errorLabel.isHidden = false\n+        errorLabel.text = errorMessage\n+\n+        UIView.animate(withDuration: UIView.microInteractionDuration, animations: { [unowned self] in\n+            self.view.layoutIfNeeded()\n+        }, completion: { [unowned self] (_) in\n+            self.contentScrollView.scrollToBottom()\n+        })\n+\n+        pickUpAddressButton.resetState()\n+    }\n+}\n+\n+//MARK: - UITextFieldDelegate\n+extension CreateDonationViewController: UITextFieldDelegate {\n+    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n+        descriptionInputView.contentView.becomeFirstResponder()\n+\n+        return true\n+    }\n+}\n+\n+//MARK: - UITextViewDelegate\n+extension CreateDonationViewController: UITextViewDelegate {\n+    func textViewDidBeginEditing(_ textView: UITextView) {\n+        if textView.textColor == .kfPlaceholderText {\n+            textView.textColor = .black\n+            textView.text = nil\n+        }\n+    }\n+\n+    func textViewDidEndEditing(_ textView: UITextView) {\n+        if textView.text.isEmpty {\n+            textView.textColor = .kfPlaceholderText\n+            textView.text = CreateDonationViewController.descriptionPlaceholder\n+        }\n+    }\n+\n+    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {\n+        if (text == \"\\n\") {\n+            textView.resignFirstResponder()\n+            pickUpAddressButtonTapped()\n+        }",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": 152,
        "original_position": 163,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I believe this prevents the user from adding multiple lines in the notes section. Do we want that behavior? If not, we could add a `.inputAccessoryView` to the `UITextView` so we can display a done button.",
        "created_at": "2018-12-22T22:53:19Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243748348",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243748348"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243748348"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243842337",
        "pull_request_review_id": 187713667,
        "id": 243842337,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzg0MjMzNw==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 15,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good Point!",
        "created_at": "2018-12-24T16:07:03Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243842337",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243842337"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243842337"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243747087
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243842441",
        "pull_request_review_id": 187713803,
        "id": 243842441,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzg0MjQ0MQ==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")\n+            }\n+\n+            self.pickupLocation = location\n+        }\n+\n+        self.navigationController?.pushViewController(locationPicker, animated: true)\n+    }\n+\n+    private func showErrorMessage(_ errorMessage: String) {\n+        errorLabel.isHidden = false\n+        errorLabel.text = errorMessage\n+\n+        UIView.animate(withDuration: UIView.microInteractionDuration, animations: { [unowned self] in\n+            self.view.layoutIfNeeded()\n+        }, completion: { [unowned self] (_) in\n+            self.contentScrollView.scrollToBottom()\n+        })\n+\n+        pickUpAddressButton.resetState()\n+    }\n+}\n+\n+//MARK: - UITextFieldDelegate\n+extension CreateDonationViewController: UITextFieldDelegate {\n+    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n+        descriptionInputView.contentView.becomeFirstResponder()\n+\n+        return true\n+    }\n+}\n+\n+//MARK: - UITextViewDelegate\n+extension CreateDonationViewController: UITextViewDelegate {\n+    func textViewDidBeginEditing(_ textView: UITextView) {\n+        if textView.textColor == .kfPlaceholderText {\n+            textView.textColor = .black\n+            textView.text = nil\n+        }\n+    }\n+\n+    func textViewDidEndEditing(_ textView: UITextView) {\n+        if textView.text.isEmpty {\n+            textView.textColor = .kfPlaceholderText\n+            textView.text = CreateDonationViewController.descriptionPlaceholder\n+        }\n+    }",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": 146,
        "original_position": 157,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Let's leave this for a future PR",
        "created_at": "2018-12-24T16:08:20Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243842441",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243842441"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243842441"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243747324
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243842534",
        "pull_request_review_id": 187713917,
        "id": 243842534,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzg0MjUzNA==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")\n+            }\n+\n+            self.pickupLocation = location\n+        }\n+\n+        self.navigationController?.pushViewController(locationPicker, animated: true)\n+    }\n+\n+    private func showErrorMessage(_ errorMessage: String) {\n+        errorLabel.isHidden = false\n+        errorLabel.text = errorMessage\n+\n+        UIView.animate(withDuration: UIView.microInteractionDuration, animations: { [unowned self] in\n+            self.view.layoutIfNeeded()\n+        }, completion: { [unowned self] (_) in\n+            self.contentScrollView.scrollToBottom()\n+        })\n+\n+        pickUpAddressButton.resetState()\n+    }\n+}\n+\n+//MARK: - UITextFieldDelegate\n+extension CreateDonationViewController: UITextFieldDelegate {\n+    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n+        descriptionInputView.contentView.becomeFirstResponder()\n+\n+        return true\n+    }\n+}\n+\n+//MARK: - UITextViewDelegate\n+extension CreateDonationViewController: UITextViewDelegate {\n+    func textViewDidBeginEditing(_ textView: UITextView) {\n+        if textView.textColor == .kfPlaceholderText {\n+            textView.textColor = .black\n+            textView.text = nil\n+        }\n+    }\n+\n+    func textViewDidEndEditing(_ textView: UITextView) {\n+        if textView.text.isEmpty {\n+            textView.textColor = .kfPlaceholderText\n+            textView.text = CreateDonationViewController.descriptionPlaceholder\n+        }\n+    }\n+\n+    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {\n+        if (text == \"\\n\") {\n+            textView.resignFirstResponder()\n+            pickUpAddressButtonTapped()\n+        }",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": 152,
        "original_position": 163,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I have already set the returnKeyType to done and as you said this prevents the user from adding a new line to description.",
        "created_at": "2018-12-24T16:09:36Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243842534",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243842534"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243842534"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243748348
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243846775",
        "pull_request_review_id": 187718554,
        "id": 243846775,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0Mzg0Njc3NQ==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 111,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Actually this completion handler doesn't get called if you don't select a location, it's more of a serious bug thingy",
        "created_at": "2018-12-24T17:01:36Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243846775",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243846775"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243846775"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243747286
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243917782",
        "pull_request_review_id": 187800941,
        "id": 243917782,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzkxNzc4Mg==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 53,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "Pondorasti",
            "id": 32957606,
            "node_id": "MDQ6VXNlcjMyOTU3NjA2",
            "avatar_url": "https://avatars3.githubusercontent.com/u/32957606?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Pondorasti",
            "html_url": "https://github.com/Pondorasti",
            "followers_url": "https://api.github.com/users/Pondorasti/followers",
            "following_url": "https://api.github.com/users/Pondorasti/following{/other_user}",
            "gists_url": "https://api.github.com/users/Pondorasti/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Pondorasti/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Pondorasti/subscriptions",
            "organizations_url": "https://api.github.com/users/Pondorasti/orgs",
            "repos_url": "https://api.github.com/users/Pondorasti/repos",
            "events_url": "https://api.github.com/users/Pondorasti/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Pondorasti/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Integrated something similar to this :]",
        "created_at": "2018-12-25T16:20:18Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243917782",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/243917782"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r243917782"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243747207
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/244046131",
        "pull_request_review_id": 187957390,
        "id": 244046131,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDA0NjEzMQ==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": null,
        "original_position": 111,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I see, thanks for letting me know about the behavior of LocationPicker :)",
        "created_at": "2018-12-26T20:34:55Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r244046131",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/244046131"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r244046131"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243747286
    },
    {
        "url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/244046206",
        "pull_request_review_id": 187957474,
        "id": 244046206,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDA0NjIwNg==",
        "diff_hunk": "@@ -0,0 +1,246 @@\n+//\n+//  CreateDonationViewController.swift\n+//  KifuSF\n+//\n+//  Created by Alexandru Turcanu on 17/12/2018.\n+//  Copyright \u00a9 2018 Alexandru Turcanu. All rights reserved.\n+//\n+\n+import UIKit\n+import LocationPicker\n+\n+class CreateDonationViewController: UIScrollableViewController {\n+    //MARK: - Variables\n+    private static let descriptionPlaceholder = \"Additional Info about pick up address, hour, item, etc.\"\n+    private let imageHelper = PhotoHelper()\n+    private var userSelectedAProfileImage: Bool? = nil\n+\n+    private var pickupLocation: Location?\n+\n+    private let descriptorView = UIDescriptorView(defaultImageViewSize: .medium)\n+    private let titleInputView = UIGroupView<UITextFieldContainer>(title: \"Title\",\n+                                                                   contentView: UITextFieldContainer(returnKeyType: .next,\n+                                                                                                     placeholder: \"Keep it simple\"))\n+    private let descriptionInputView = UIGroupView<UITextView>(title: \"Description\",\n+                                                               contentView: UITextView(forAutoLayout: ()))\n+    private let pickUpAddressButton = UIAnimatedButton(backgroundColor: .kfInformative,\n+                                                       andTitle: \"Choose pick-up address\")\n+    private let errorLabel = UILabel(font: UIFont.preferredFont(forTextStyle: .footnote), textColor: .kfDestructive)\n+\n+    //MARK: - Lifecycle\n+    override func viewDidLoad() {\n+        super.viewDidLoad()\n+\n+        configureData()\n+        configureStyling()\n+        configureLayout()\n+        configureGestures()\n+        configureDelegates()\n+\n+        imageHelper.completionHandler = { [unowned self] (image) in\n+            self.descriptorView.imageView.image = image\n+            self.userSelectedAProfileImage = true\n+        }\n+    }\n+\n+    override func viewWillAppear(_ animated: Bool) {\n+        super.viewWillAppear(animated)\n+\n+        NotificationCenter.default.addObserver(self,selector: #selector(keyboardWillShow(_:)),\n+                                               name: .UIKeyboardWillShow, object: nil)\n+\n+        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)),\n+                                               name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func viewWillDisappear(_ animated: Bool) {\n+        super.viewWillDisappear(animated)\n+\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillShow, object: nil)\n+        NotificationCenter.default.removeObserver(self, name: .UIKeyboardWillHide, object: nil)\n+    }\n+\n+    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    //MARK: - Methods\n+    @objc func keyboardWillShow(_ notification: Notification) {\n+        guard let keyboardHeight = notification.getKeyboardHeight() else {\n+            return assertionFailure(\"Could not retrieve keyboard height\")\n+        }\n+\n+        contentScrollView.updateBottomPadding(keyboardHeight + 20)\n+    }\n+\n+    //TODO: this method gets called twice find out why\n+    @objc private  func keyboardWillHide(_ notification: Notification) {\n+        contentScrollView.updateBottomPadding(pickUpAddressButton.frame.height + 24)\n+    }\n+\n+    @objc private func dismissVC() {\n+        dismiss(animated: true)\n+    }\n+\n+    @objc private func dismissKeyboard() {\n+        view.endEditing(true)\n+    }\n+\n+    @objc private func imageViewTapped() {\n+        imageHelper.presentActionSheet(from: self)\n+    }\n+\n+    @objc private func pickUpAddressButtonTapped() {\n+        guard let _ = userSelectedAProfileImage,\n+            let image = descriptorView.imageView.image,\n+            let title = titleInputView.contentView.textField.text, !title.isEmpty,\n+            let description = descriptionInputView.contentView.text, description != CreateDonationViewController.descriptionPlaceholder else {\n+                return showErrorMessage(\"Please complete all the fields\")\n+        }\n+\n+        let locationPicker = LocationPickerViewController()\n+\n+        locationPicker.showCurrentLocationInitially = true\n+        locationPicker.searchBarPlaceholder = \"Choose Pickup location\"\n+        locationPicker.mapType = .standard\n+\n+        locationPicker.showCurrentLocationButton = true\n+\n+        locationPicker.completion = { location in\n+            guard let location = location else {\n+                return print(\"no location selected\")\n+            }\n+\n+            self.pickupLocation = location\n+        }\n+\n+        self.navigationController?.pushViewController(locationPicker, animated: true)\n+    }\n+\n+    private func showErrorMessage(_ errorMessage: String) {\n+        errorLabel.isHidden = false\n+        errorLabel.text = errorMessage\n+\n+        UIView.animate(withDuration: UIView.microInteractionDuration, animations: { [unowned self] in\n+            self.view.layoutIfNeeded()\n+        }, completion: { [unowned self] (_) in\n+            self.contentScrollView.scrollToBottom()\n+        })\n+\n+        pickUpAddressButton.resetState()\n+    }\n+}\n+\n+//MARK: - UITextFieldDelegate\n+extension CreateDonationViewController: UITextFieldDelegate {\n+    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n+        descriptionInputView.contentView.becomeFirstResponder()\n+\n+        return true\n+    }\n+}\n+\n+//MARK: - UITextViewDelegate\n+extension CreateDonationViewController: UITextViewDelegate {\n+    func textViewDidBeginEditing(_ textView: UITextView) {\n+        if textView.textColor == .kfPlaceholderText {\n+            textView.textColor = .black\n+            textView.text = nil\n+        }\n+    }\n+\n+    func textViewDidEndEditing(_ textView: UITextView) {\n+        if textView.text.isEmpty {\n+            textView.textColor = .kfPlaceholderText\n+            textView.text = CreateDonationViewController.descriptionPlaceholder\n+        }\n+    }",
        "path": "KifuSF/CreateDonationViewController.swift",
        "position": 146,
        "original_position": 157,
        "commit_id": "3860c4813310f9cc573e0817d256b91217c47743",
        "original_commit_id": "d34ce4771976d032383f04d9dcd7a3454b5d6fa3",
        "user": {
            "login": "LinnierGames",
            "id": 1758210,
            "node_id": "MDQ6VXNlcjE3NTgyMTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/1758210?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/LinnierGames",
            "html_url": "https://github.com/LinnierGames",
            "followers_url": "https://api.github.com/users/LinnierGames/followers",
            "following_url": "https://api.github.com/users/LinnierGames/following{/other_user}",
            "gists_url": "https://api.github.com/users/LinnierGames/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/LinnierGames/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/LinnierGames/subscriptions",
            "organizations_url": "https://api.github.com/users/LinnierGames/orgs",
            "repos_url": "https://api.github.com/users/LinnierGames/repos",
            "events_url": "https://api.github.com/users/LinnierGames/events{/privacy}",
            "received_events_url": "https://api.github.com/users/LinnierGames/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I agree",
        "created_at": "2018-12-26T20:35:44Z",
        "updated_at": "2018-12-26T21:59:41Z",
        "html_url": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r244046206",
        "pull_request_url": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/comments/244046206"
            },
            "html": {
                "href": "https://github.com/Kifuapp/KifuSF/pull/20#discussion_r244046206"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Kifuapp/KifuSF/pulls/20"
            }
        },
        "in_reply_to_id": 243747324
    }
]