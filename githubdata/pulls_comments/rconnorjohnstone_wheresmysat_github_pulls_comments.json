[
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597185",
        "pull_request_review_id": 207129142,
        "id": 259597185,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzE4NQ==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements",
        "path": "RRE_measurements.py",
        "position": 2,
        "original_position": 1,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "add shebang `#!/usr/bin/env python`",
        "created_at": "2019-02-23T23:31:56Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597185",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597185"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597185"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597258",
        "pull_request_review_id": 207129142,
        "id": 259597258,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzI1OA==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value",
        "path": "RRE_measurements.py",
        "position": null,
        "original_position": 33,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "do we need to duplicate range_meas and value? Can just access self.value once you've used super()\r\n",
        "created_at": "2019-02-23T23:34:28Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597258",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597258"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597258"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597281",
        "pull_request_review_id": 207129142,
        "id": 259597281,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzI4MQ==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value\n+        super(RangeMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):",
        "path": "RRE_measurements.py",
        "position": 39,
        "original_position": 37,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "should also return STN id. Might help with debugging\r\n",
        "created_at": "2019-02-23T23:35:15Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597281",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597281"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597281"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597289",
        "pull_request_review_id": 207129142,
        "id": 259597289,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzI4OQ==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value\n+        super(RangeMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range is {} km\".format(self.range_meas)\n+        \n+class RangeRateMeas(Meas):\n+    ''' Range Rate Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range Rate measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.rangerate = value",
        "path": "RRE_measurements.py",
        "position": null,
        "original_position": 51,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same as above\r\n",
        "created_at": "2019-02-23T23:35:30Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597289",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597289"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597289"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597295",
        "pull_request_review_id": 207129142,
        "id": 259597295,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzI5NQ==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value\n+        super(RangeMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range is {} km\".format(self.range_meas)\n+        \n+class RangeRateMeas(Meas):\n+    ''' Range Rate Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range Rate measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.rangerate = value\n+        super(RangeRateMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):",
        "path": "RRE_measurements.py",
        "position": 63,
        "original_position": 55,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "idem\r\n",
        "created_at": "2019-02-23T23:35:40Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597295",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597295"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597295"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597350",
        "pull_request_review_id": 207129142,
        "id": 259597350,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzM1MA==",
        "diff_hunk": "@@ -0,0 +1,34 @@\n+''' Definition of the measurement class for the CU Hackathon Project: WheresMySat\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+from numpy import linalg as LA\n+\n+class Meas():",
        "path": "measurements.py",
        "position": null,
        "original_position": 14,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ABC and @abstract method for the following: \r\n`residual` \r\n`calculate` (or dynamics or something)",
        "created_at": "2019-02-23T23:37:42Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597350",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597350"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597350"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597371",
        "pull_request_review_id": 207129142,
        "id": 259597371,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzM3MQ==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value\n+        super(RangeMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range is {} km\".format(self.range_meas)\n+        \n+class RangeRateMeas(Meas):\n+    ''' Range Rate Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range Rate measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.rangerate = value\n+        super(RangeRateMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range Rate is {} km/s\".format(self.rangerate)\n+        \n+class ElevMeas(Meas):\n+    ''' Elevation Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Elevation measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.elev = value\n+        super(ElevMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Elevation is {} degrees\".format(self.elev)\n+        \n+class station:\n+    ''' Station object\n+    Represents a groundstation. Inputs are latitude and longitude of the station, but the convert\n+    method converts to earth centered inertial  coordinates.\n+    \n+    Arguments:\n+        latitude: (float64) latitude of the ground station (in degrees)\n+        longitude: (float64) longitude of the ground station (in degrees)\n+        time: (float64) Modified Julian Date\n+        altitude (optional): (float64) altitude of ground station (in feet)\n+    '''\n+    def __init__(self,latitude,longitude,time,*args):\n+        self.latitude = latitude\n+        self.longitude = longitude\n+        self.time = time\n+        if len(args) == 1: self.height = WMS.r_Ea + args[0]*0.0003048\n+        else: self.height = WMS.r_Ea\n+        \n+    def get_ECI(self):\n+        date = time.Time(self.time, format='mjd')\n+        pos, vel = astro.EarthLocation.from_geodetic(self.longitude, self.latitude, self.height).get_gcrs_posvel(date)",
        "path": "RRE_measurements.py",
        "position": 128,
        "original_position": 96,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a good function. I should have used it on my hwk lol\r\n",
        "created_at": "2019-02-23T23:38:36Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597371",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597371"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597371"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597403",
        "pull_request_review_id": 207129142,
        "id": 259597403,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzQwMw==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value\n+        super(RangeMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range is {} km\".format(self.range_meas)\n+        \n+class RangeRateMeas(Meas):\n+    ''' Range Rate Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range Rate measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.rangerate = value\n+        super(RangeRateMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range Rate is {} km/s\".format(self.rangerate)\n+        \n+class ElevMeas(Meas):\n+    ''' Elevation Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Elevation measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.elev = value\n+        super(ElevMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Elevation is {} degrees\".format(self.elev)\n+        \n+class station:\n+    ''' Station object\n+    Represents a groundstation. Inputs are latitude and longitude of the station, but the convert\n+    method converts to earth centered inertial  coordinates.\n+    \n+    Arguments:\n+        latitude: (float64) latitude of the ground station (in degrees)\n+        longitude: (float64) longitude of the ground station (in degrees)\n+        time: (float64) Modified Julian Date\n+        altitude (optional): (float64) altitude of ground station (in feet)\n+    '''\n+    def __init__(self,latitude,longitude,time,*args):\n+        self.latitude = latitude\n+        self.longitude = longitude\n+        self.time = time\n+        if len(args) == 1: self.height = WMS.r_Ea + args[0]*0.0003048\n+        else: self.height = WMS.r_Ea\n+        \n+    def get_ECI(self):\n+        date = time.Time(self.time, format='mjd')",
        "path": "RRE_measurements.py",
        "position": null,
        "original_position": 95,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This should accept a time as an input or we're going to have some trouble. It will cause us to need to instantiate a new station at each time. \r\n",
        "created_at": "2019-02-23T23:39:56Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597403",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597403"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597403"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597422",
        "pull_request_review_id": 207129142,
        "id": 259597422,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzQyMg==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value\n+        super(RangeMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range is {} km\".format(self.range_meas)\n+        \n+class RangeRateMeas(Meas):\n+    ''' Range Rate Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range Rate measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.rangerate = value\n+        super(RangeRateMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range Rate is {} km/s\".format(self.rangerate)\n+        \n+class ElevMeas(Meas):\n+    ''' Elevation Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Elevation measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.elev = value\n+        super(ElevMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Elevation is {} degrees\".format(self.elev)\n+        \n+class station:\n+    ''' Station object\n+    Represents a groundstation. Inputs are latitude and longitude of the station, but the convert\n+    method converts to earth centered inertial  coordinates.\n+    \n+    Arguments:\n+        latitude: (float64) latitude of the ground station (in degrees)\n+        longitude: (float64) longitude of the ground station (in degrees)\n+        time: (float64) Modified Julian Date\n+        altitude (optional): (float64) altitude of ground station (in feet)\n+    '''\n+    def __init__(self,latitude,longitude,time,*args):\n+        self.latitude = latitude\n+        self.longitude = longitude\n+        self.time = time\n+        if len(args) == 1: self.height = WMS.r_Ea + args[0]*0.0003048",
        "path": "RRE_measurements.py",
        "position": null,
        "original_position": 91,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "just set `height=None` in the function definition. This is clearer than args. ",
        "created_at": "2019-02-23T23:40:51Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597422",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597422"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597422"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597426",
        "pull_request_review_id": 207129142,
        "id": 259597426,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTU5NzQyNg==",
        "diff_hunk": "@@ -0,0 +1,101 @@\n+''' Definition of the measurement class specific to range, range rate, and elevation measurements\n+\n+Parent class meas records a measurement to be fed into the Kalman Filter\n+\n+All children classes of meas contain any extraneous data and the system dynamics\n+\n+station class is used for range, rangerate measurements taken from AWS groundstation, defines\n+a station (latitude and longitude)\n+\n+Author:Connor Johnstone\n+'''\n+\n+#Import Libraries\n+import numpy as np\n+import WheresMySat as WMS\n+from measurements import Meas\n+import astropy.coordinates as astro\n+from astropy import units as u\n+from astropy import time\n+\n+\n+class RangeMeas(Meas):\n+    ''' Range Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.range_meas = value\n+        super(RangeMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range is {} km\".format(self.range_meas)\n+        \n+class RangeRateMeas(Meas):\n+    ''' Range Rate Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Range Rate measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.rangerate = value\n+        super(RangeRateMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Range Rate is {} km/s\".format(self.rangerate)\n+        \n+class ElevMeas(Meas):\n+    ''' Elevation Measurement\n+    \n+    Includes information common to all measurements plus addition info (station_id) specific to\n+    Elevation measurements\n+    \n+    Arguments:\n+        - station_id: (station) Station object from Amazon groundstation (may be expanded in the\n+        future) which includes latitude, longitude of station\n+    '''\n+    def __init__(self,value,time,mission_id,station_id):\n+        self.elev = value\n+        super(ElevMeas,self).__init__(value,time,mission_id)\n+        self.station_id = station_id\n+        \n+    def __repr__(self):\n+        return \"Elevation is {} degrees\".format(self.elev)\n+        \n+class station:\n+    ''' Station object\n+    Represents a groundstation. Inputs are latitude and longitude of the station, but the convert\n+    method converts to earth centered inertial  coordinates.\n+    \n+    Arguments:\n+        latitude: (float64) latitude of the ground station (in degrees)\n+        longitude: (float64) longitude of the ground station (in degrees)\n+        time: (float64) Modified Julian Date\n+        altitude (optional): (float64) altitude of ground station (in feet)\n+    '''\n+    def __init__(self,latitude,longitude,time,*args):\n+        self.latitude = latitude\n+        self.longitude = longitude\n+        self.time = time\n+        if len(args) == 1: self.height = WMS.r_Ea + args[0]*0.0003048",
        "path": "RRE_measurements.py",
        "position": null,
        "original_position": 91,
        "commit_id": "84398113ddf8ec6078f776a917a6ac9618283fc6",
        "original_commit_id": "9abcbdf1160b3e0221d41dd2fb23154d73423058",
        "user": {
            "login": "mellemahp",
            "id": 32889994,
            "node_id": "MDQ6VXNlcjMyODg5OTk0",
            "avatar_url": "https://avatars1.githubusercontent.com/u/32889994?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/mellemahp",
            "html_url": "https://github.com/mellemahp",
            "followers_url": "https://api.github.com/users/mellemahp/followers",
            "following_url": "https://api.github.com/users/mellemahp/following{/other_user}",
            "gists_url": "https://api.github.com/users/mellemahp/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/mellemahp/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/mellemahp/subscriptions",
            "organizations_url": "https://api.github.com/users/mellemahp/orgs",
            "repos_url": "https://api.github.com/users/mellemahp/repos",
            "events_url": "https://api.github.com/users/mellemahp/events{/privacy}",
            "received_events_url": "https://api.github.com/users/mellemahp/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "or height_flag or something",
        "created_at": "2019-02-23T23:41:07Z",
        "updated_at": "2019-02-24T04:20:58Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597426",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259597426"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/1#discussion_r259597426"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/1"
            }
        },
        "in_reply_to_id": 259597422
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259606888",
        "pull_request_review_id": 207139069,
        "id": 259606888,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYwNjg4OA==",
        "diff_hunk": "@@ -0,0 +1,166 @@\n+import numpy as np\n+from scipy.integrate import solve_ivp\n+import matplotlib.pyplot as plt\n+from abc import ABCMeta, abstractmethod\n+from propagator import *\n+import ad\n+from ad import jacobian\n+from FakeMeasurements import genMSM\n+\n+Re = 6378.1363 #km\n+mu = 3.986004415e5 #km^3/s^2\n+J2 = 0.0010826269 #unitless\n+J3 = 0   #we are not modeling J3",
        "path": "CKF.py",
        "position": null,
        "original_position": 13,
        "commit_id": "5b11f99b2fe6edb47bcdf7d084563caa404464db",
        "original_commit_id": "0a762c5d8aecaed01f04fa5c373f38b55299ad15",
        "user": {
            "login": "rconnorjohnstone",
            "id": 45497336,
            "node_id": "MDQ6VXNlcjQ1NDk3MzM2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/45497336?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rconnorjohnstone",
            "html_url": "https://github.com/rconnorjohnstone",
            "followers_url": "https://api.github.com/users/rconnorjohnstone/followers",
            "following_url": "https://api.github.com/users/rconnorjohnstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/rconnorjohnstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rconnorjohnstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rconnorjohnstone/subscriptions",
            "organizations_url": "https://api.github.com/users/rconnorjohnstone/orgs",
            "repos_url": "https://api.github.com/users/rconnorjohnstone/repos",
            "events_url": "https://api.github.com/users/rconnorjohnstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rconnorjohnstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "All of these values are in wms.__init__. We should probably call them from there",
        "created_at": "2019-02-24T07:26:31Z",
        "updated_at": "2019-02-24T09:24:11Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/2#discussion_r259606888",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/2",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259606888"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/2#discussion_r259606888"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/2"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259607077",
        "pull_request_review_id": 207139069,
        "id": 259607077,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYwNzA3Nw==",
        "diff_hunk": "@@ -0,0 +1,166 @@\n+import numpy as np\n+from scipy.integrate import solve_ivp\n+import matplotlib.pyplot as plt\n+from abc import ABCMeta, abstractmethod\n+from propagator import *\n+import ad\n+from ad import jacobian\n+from FakeMeasurements import genMSM\n+\n+Re = 6378.1363 #km\n+mu = 3.986004415e5 #km^3/s^2\n+J2 = 0.0010826269 #unitless\n+J3 = 0   #we are not modeling J3\n+\n+class KF(object):\n+    \"\"\"Parent Filter Class :)\"\"\"\n+    __metaclass__ = ABCMeta\n+\n+    def __init__(self, state0_ref, P0, dx_p, t_prev, force_model):\n+        self.state0_ref = state0_ref\n+        self.states_ref = [state0_ref]\n+        self.P0 = P0\n+        self.t_prev = t_prev\n+        self.force_model = force_model\n+        self.len_state = len(state0_ref)\n+        \n+    @abstractmethod\n+    def run(self):\n+        \"\"\"conglomerate of calls to functions to follow (e.g. _timeupdate)\"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def _timeupdate(self):\n+        \"\"\"propagate state and covariance forward\"\"\"\n+        pass\n+        \n+    @abstractmethod\n+    def _measupdate(self):\n+        \"\"\"compute posteriori covariance and state correction\"\"\"\n+        pass\n+    \n+    def _kalman_gain(self, P_m, R, H_tilde):\n+        \"\"\"compute Kalman Gain\"\"\"\n+        K = P_m @ H_tilde.T @ np.linalg.inv(H_tilde @ P_m @ H_tilde.T + R)\n+        \n+        return H_tilde, K",
        "path": "CKF.py",
        "position": null,
        "original_position": 46,
        "commit_id": "5b11f99b2fe6edb47bcdf7d084563caa404464db",
        "original_commit_id": "0a762c5d8aecaed01f04fa5c373f38b55299ad15",
        "user": {
            "login": "rconnorjohnstone",
            "id": 45497336,
            "node_id": "MDQ6VXNlcjQ1NDk3MzM2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/45497336?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rconnorjohnstone",
            "html_url": "https://github.com/rconnorjohnstone",
            "followers_url": "https://api.github.com/users/rconnorjohnstone/followers",
            "following_url": "https://api.github.com/users/rconnorjohnstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/rconnorjohnstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rconnorjohnstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rconnorjohnstone/subscriptions",
            "organizations_url": "https://api.github.com/users/rconnorjohnstone/orgs",
            "repos_url": "https://api.github.com/users/rconnorjohnstone/repos",
            "events_url": "https://api.github.com/users/rconnorjohnstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rconnorjohnstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "H_tilde doesn't need to be outputted",
        "created_at": "2019-02-24T07:32:59Z",
        "updated_at": "2019-02-24T09:24:11Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/2#discussion_r259607077",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/2",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259607077"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/2#discussion_r259607077"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/2"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259607327",
        "pull_request_review_id": 207139069,
        "id": 259607327,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1OTYwNzMyNw==",
        "diff_hunk": "@@ -0,0 +1,166 @@\n+import numpy as np\n+from scipy.integrate import solve_ivp\n+import matplotlib.pyplot as plt\n+from abc import ABCMeta, abstractmethod\n+from propagator import *\n+import ad\n+from ad import jacobian\n+from FakeMeasurements import genMSM\n+\n+Re = 6378.1363 #km\n+mu = 3.986004415e5 #km^3/s^2\n+J2 = 0.0010826269 #unitless\n+J3 = 0   #we are not modeling J3\n+\n+class KF(object):\n+    \"\"\"Parent Filter Class :)\"\"\"\n+    __metaclass__ = ABCMeta\n+\n+    def __init__(self, state0_ref, P0, dx_p, t_prev, force_model):\n+        self.state0_ref = state0_ref\n+        self.states_ref = [state0_ref]\n+        self.P0 = P0\n+        self.t_prev = t_prev\n+        self.force_model = force_model\n+        self.len_state = len(state0_ref)\n+        \n+    @abstractmethod\n+    def run(self):\n+        \"\"\"conglomerate of calls to functions to follow (e.g. _timeupdate)\"\"\"\n+        pass\n+    \n+    @abstractmethod\n+    def _timeupdate(self):\n+        \"\"\"propagate state and covariance forward\"\"\"\n+        pass\n+        \n+    @abstractmethod\n+    def _measupdate(self):\n+        \"\"\"compute posteriori covariance and state correction\"\"\"\n+        pass\n+    \n+    def _kalman_gain(self, P_m, R, H_tilde):\n+        \"\"\"compute Kalman Gain\"\"\"\n+        K = P_m @ H_tilde.T @ np.linalg.inv(H_tilde @ P_m @ H_tilde.T + R)\n+        \n+        return H_tilde, K\n+\n+    def _compute_stm_and_state(self, time):\n+        \"\"\"integrate EOM and A equation to solve for STM and state\"\"\"\n+        phi = np.eye(self.len_state)\n+        state_w_phi = np.concatenate((self.states_ref[-1][:,0], phi.flatten()))\n+        state_w_phi = solve_ivp(self.state_w_phi_ode, [self.t_prev, time], \\\n+                                state_w_phi, t_eval = [time], max_step = 5).y",
        "path": "CKF.py",
        "position": null,
        "original_position": 53,
        "commit_id": "5b11f99b2fe6edb47bcdf7d084563caa404464db",
        "original_commit_id": "0a762c5d8aecaed01f04fa5c373f38b55299ad15",
        "user": {
            "login": "rconnorjohnstone",
            "id": 45497336,
            "node_id": "MDQ6VXNlcjQ1NDk3MzM2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/45497336?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rconnorjohnstone",
            "html_url": "https://github.com/rconnorjohnstone",
            "followers_url": "https://api.github.com/users/rconnorjohnstone/followers",
            "following_url": "https://api.github.com/users/rconnorjohnstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/rconnorjohnstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rconnorjohnstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rconnorjohnstone/subscriptions",
            "organizations_url": "https://api.github.com/users/rconnorjohnstone/orgs",
            "repos_url": "https://api.github.com/users/rconnorjohnstone/repos",
            "events_url": "https://api.github.com/users/rconnorjohnstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rconnorjohnstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "remove max_step",
        "created_at": "2019-02-24T07:39:18Z",
        "updated_at": "2019-02-24T09:24:11Z",
        "html_url": "https://github.com/rconnorjohnstone/WheresMySat/pull/2#discussion_r259607327",
        "pull_request_url": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/2",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/comments/259607327"
            },
            "html": {
                "href": "https://github.com/rconnorjohnstone/WheresMySat/pull/2#discussion_r259607327"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/rconnorjohnstone/WheresMySat/pulls/2"
            }
        }
    }
]