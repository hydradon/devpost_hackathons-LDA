[
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323089918",
        "pull_request_review_id": 286593810,
        "id": 323089918,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMzA4OTkxOA==",
        "diff_hunk": "@@ -222,6 +222,60 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n+def test_main(input_files, samplerate, niter, alpha, softmask, residual_model, model,\n+              targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):",
        "path": "test.py",
        "position": null,
        "original_position": 15,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "795317690e2930aabe551680e17a6d427d2b6858",
        "user": {
            "login": "faroit",
            "id": 72940,
            "node_id": "MDQ6VXNlcjcyOTQw",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/faroit",
            "html_url": "https://github.com/faroit",
            "followers_url": "https://api.github.com/users/faroit/followers",
            "following_url": "https://api.github.com/users/faroit/following{/other_user}",
            "gists_url": "https://api.github.com/users/faroit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/faroit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faroit/subscriptions",
            "organizations_url": "https://api.github.com/users/faroit/orgs",
            "repos_url": "https://api.github.com/users/faroit/repos",
            "events_url": "https://api.github.com/users/faroit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/faroit/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "* `targets` should be a list for consistency\r\n* since now this is becomes another interface to the separate function, the defaults arguments should be set for all parameters so that they match the argparse defaults\r\n* I would prefer not-hanging identation to match the rest of the code",
        "created_at": "2019-09-11T07:13:07Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323089918",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323089918"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323089918"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323090287",
        "pull_request_review_id": 286593810,
        "id": 323090287,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMzA5MDI4Nw==",
        "diff_hunk": "@@ -268,52 +322,5 @@ def inference_args(parser, remaining_args):\n     args, _ = parser.parse_known_args()\n     args = inference_args(parser, args)\n \n-    use_cuda = not args.no_cuda and torch.cuda.is_available()\n-    device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n-\n-    for input_file in args.input:\n-        # handling an input audio path\n-        audio, rate = sf.read(input_file, always_2d=True)\n-\n-        if audio.shape[1] > 2:\n-            warnings.warn(\n-                'Channel count > 2! '\n-                'Only the first two channels will be processed!')\n-            audio = audio[:, :2]\n-\n-        if rate != args.samplerate:\n-            # resample to model samplerate if needed\n-            audio = resampy.resample(audio, rate, args.samplerate, axis=0)\n-\n-        if audio.shape[1] == 1:\n-            # if we have mono, let's duplicate it\n-            # as the input of OpenUnmix is always stereo\n-            audio = np.repeat(audio, 2, axis=1)\n-\n-        estimates = separate(\n-            audio,\n-            targets=args.targets,\n-            model_name=args.model,\n-            niter=args.niter,\n-            alpha=args.alpha,\n-            softmask=args.softmask,\n-            residual_model=args.residual_model,\n-            device=device\n-        )\n-        if not args.outdir:\n-            model_path = Path(args.model)\n-            if not model_path.exists():\n-                outdir = Path(Path(input_file).stem + '_' + args.model)\n-            else:\n-                outdir = Path(Path(input_file).stem + '_' + model_path.stem)\n-        else:\n-            outdir = Path(args.outdir)\n-        outdir.mkdir(exist_ok=True, parents=True)\n-\n-        # write out estimates\n-        for target, estimate in estimates.items():\n-            sf.write(\n-                outdir / Path(target).with_suffix('.wav'),\n-                estimate,\n-                args.samplerate\n-            )\n+    test_main(args.input, args.samplerate, args.niter, args.alpha, args.softmask, args.residual_model, args.model,\n+              args.targets, args.outdir, args.no_cuda)",
        "path": "test.py",
        "position": null,
        "original_position": 125,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "795317690e2930aabe551680e17a6d427d2b6858",
        "user": {
            "login": "faroit",
            "id": 72940,
            "node_id": "MDQ6VXNlcjcyOTQw",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/faroit",
            "html_url": "https://github.com/faroit",
            "followers_url": "https://api.github.com/users/faroit/followers",
            "following_url": "https://api.github.com/users/faroit/following{/other_user}",
            "gists_url": "https://api.github.com/users/faroit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/faroit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faroit/subscriptions",
            "organizations_url": "https://api.github.com/users/faroit/orgs",
            "repos_url": "https://api.github.com/users/faroit/repos",
            "events_url": "https://api.github.com/users/faroit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/faroit/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "use named arguments for readability reasons",
        "created_at": "2019-09-11T07:14:11Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323090287",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323090287"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323090287"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323387336",
        "pull_request_review_id": 286980220,
        "id": 323387336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMzM4NzMzNg==",
        "diff_hunk": "@@ -222,6 +222,60 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n+def test_main(input_files, samplerate, niter, alpha, softmask, residual_model, model,\n+              targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):",
        "path": "test.py",
        "position": null,
        "original_position": 15,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "795317690e2930aabe551680e17a6d427d2b6858",
        "user": {
            "login": "aadibajpai",
            "id": 27063113,
            "node_id": "MDQ6VXNlcjI3MDYzMTEz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27063113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aadibajpai",
            "html_url": "https://github.com/aadibajpai",
            "followers_url": "https://api.github.com/users/aadibajpai/followers",
            "following_url": "https://api.github.com/users/aadibajpai/following{/other_user}",
            "gists_url": "https://api.github.com/users/aadibajpai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aadibajpai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aadibajpai/subscriptions",
            "organizations_url": "https://api.github.com/users/aadibajpai/orgs",
            "repos_url": "https://api.github.com/users/aadibajpai/repos",
            "events_url": "https://api.github.com/users/aadibajpai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aadibajpai/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> * `targets` should be a list for consistency\r\n\r\nI made it a tuple so it's immutable since mutable parameters actually give an error and should not be used. https://docs.python-guide.org/writing/gotchas/#mutable-default-arguments\r\n> * since now this is becomes another interface to the separate function, the defaults arguments should be set for all parameters so that they match the argparse defaults\r\n\r\nOkay, done. I hadn't done it earlier since it was redundant because the separate function already had default parameters for the ones I had left out:\r\n`def separate(audio, targets, model_name='umxhq', niter=1, softmask=False, alpha=1.0, residual_model=False, device='cpu'):`\r\n> * I would prefer not-hanging identation to match the rest of the code\r\n\r\nI'm not sure what you mean, I followed the PEP8 guidelines of limiting a line to 120 chars, do you want me to do it line by line? (I think that might make it too long)",
        "created_at": "2019-09-11T18:15:29Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323387336",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323387336"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323387336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        },
        "in_reply_to_id": 323089918
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323387566",
        "pull_request_review_id": 286980528,
        "id": 323387566,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMzM4NzU2Ng==",
        "diff_hunk": "@@ -268,52 +322,5 @@ def inference_args(parser, remaining_args):\n     args, _ = parser.parse_known_args()\n     args = inference_args(parser, args)\n \n-    use_cuda = not args.no_cuda and torch.cuda.is_available()\n-    device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n-\n-    for input_file in args.input:\n-        # handling an input audio path\n-        audio, rate = sf.read(input_file, always_2d=True)\n-\n-        if audio.shape[1] > 2:\n-            warnings.warn(\n-                'Channel count > 2! '\n-                'Only the first two channels will be processed!')\n-            audio = audio[:, :2]\n-\n-        if rate != args.samplerate:\n-            # resample to model samplerate if needed\n-            audio = resampy.resample(audio, rate, args.samplerate, axis=0)\n-\n-        if audio.shape[1] == 1:\n-            # if we have mono, let's duplicate it\n-            # as the input of OpenUnmix is always stereo\n-            audio = np.repeat(audio, 2, axis=1)\n-\n-        estimates = separate(\n-            audio,\n-            targets=args.targets,\n-            model_name=args.model,\n-            niter=args.niter,\n-            alpha=args.alpha,\n-            softmask=args.softmask,\n-            residual_model=args.residual_model,\n-            device=device\n-        )\n-        if not args.outdir:\n-            model_path = Path(args.model)\n-            if not model_path.exists():\n-                outdir = Path(Path(input_file).stem + '_' + args.model)\n-            else:\n-                outdir = Path(Path(input_file).stem + '_' + model_path.stem)\n-        else:\n-            outdir = Path(args.outdir)\n-        outdir.mkdir(exist_ok=True, parents=True)\n-\n-        # write out estimates\n-        for target, estimate in estimates.items():\n-            sf.write(\n-                outdir / Path(target).with_suffix('.wav'),\n-                estimate,\n-                args.samplerate\n-            )\n+    test_main(args.input, args.samplerate, args.niter, args.alpha, args.softmask, args.residual_model, args.model,\n+              args.targets, args.outdir, args.no_cuda)",
        "path": "test.py",
        "position": null,
        "original_position": 125,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "795317690e2930aabe551680e17a6d427d2b6858",
        "user": {
            "login": "aadibajpai",
            "id": 27063113,
            "node_id": "MDQ6VXNlcjI3MDYzMTEz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27063113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aadibajpai",
            "html_url": "https://github.com/aadibajpai",
            "followers_url": "https://api.github.com/users/aadibajpai/followers",
            "following_url": "https://api.github.com/users/aadibajpai/following{/other_user}",
            "gists_url": "https://api.github.com/users/aadibajpai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aadibajpai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aadibajpai/subscriptions",
            "organizations_url": "https://api.github.com/users/aadibajpai/orgs",
            "repos_url": "https://api.github.com/users/aadibajpai/repos",
            "events_url": "https://api.github.com/users/aadibajpai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aadibajpai/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done, hadn't done it before since the argument name was exactly the same except the `args.` part",
        "created_at": "2019-09-11T18:16:00Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323387566",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323387566"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323387566"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        },
        "in_reply_to_id": 323090287
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323387872",
        "pull_request_review_id": 286980885,
        "id": 323387872,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMzM4Nzg3Mg==",
        "diff_hunk": "@@ -222,6 +222,60 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n+def test_main(input_files, samplerate, niter, alpha, softmask, residual_model, model,\n+              targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):",
        "path": "test.py",
        "position": null,
        "original_position": 15,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "795317690e2930aabe551680e17a6d427d2b6858",
        "user": {
            "login": "aadibajpai",
            "id": 27063113,
            "node_id": "MDQ6VXNlcjI3MDYzMTEz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27063113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aadibajpai",
            "html_url": "https://github.com/aadibajpai",
            "followers_url": "https://api.github.com/users/aadibajpai/followers",
            "following_url": "https://api.github.com/users/aadibajpai/following{/other_user}",
            "gists_url": "https://api.github.com/users/aadibajpai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aadibajpai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aadibajpai/subscriptions",
            "organizations_url": "https://api.github.com/users/aadibajpai/orgs",
            "repos_url": "https://api.github.com/users/aadibajpai/repos",
            "events_url": "https://api.github.com/users/aadibajpai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aadibajpai/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also congratulations on getting it published!",
        "created_at": "2019-09-11T18:16:38Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323387872",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/323387872"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r323387872"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        },
        "in_reply_to_id": 323089918
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/329931128",
        "pull_request_review_id": 295436383,
        "id": 329931128,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTkzMTEyOA==",
        "diff_hunk": "@@ -322,5 +322,6 @@ def test_main(input_files, samplerate, niter, alpha, softmask, residual_model, m\n     args, _ = parser.parse_known_args()\n     args = inference_args(parser, args)\n \n-    test_main(args.input, args.samplerate, args.niter, args.alpha, args.softmask, args.residual_model, args.model,\n-              args.targets, args.outdir, args.no_cuda)\n+    test_main(input_files=args.input, samplerate=args.samplerate, niter=args.niter, alpha=args.alpha,\n+              softmask=args.softmask, residual_model=args.residual_model, model=args.model, targets=args.targets,\n+              outdir=args.outdir, no_cuda=args.no_cuda)",
        "path": "test.py",
        "position": null,
        "original_position": 19,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "0231e2432371e0283485488a372475a56a7626fd",
        "user": {
            "login": "faroit",
            "id": 72940,
            "node_id": "MDQ6VXNlcjcyOTQw",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/faroit",
            "html_url": "https://github.com/faroit",
            "followers_url": "https://api.github.com/users/faroit/followers",
            "following_url": "https://api.github.com/users/faroit/following{/other_user}",
            "gists_url": "https://api.github.com/users/faroit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/faroit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faroit/subscriptions",
            "organizations_url": "https://api.github.com/users/faroit/orgs",
            "repos_url": "https://api.github.com/users/faroit/repos",
            "events_url": "https://api.github.com/users/faroit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/faroit/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This looks good now, thanks. \r\n\r\nRegarding the indentation, your code pass PEP8 but for consistency reasons, I would prefer \r\n\r\n```\r\ntest_main(\r\n    input_files=args.input, samplerate=args.samplerate, niter=args.niter, alpha=args.alpha,\r\n    softmask=args.softmask, residual_model=args.residual_model, model=args.model, targets=args.targets,\r\n    outdir=args.outdir, no_cuda=args.no_cuda\r\n)\r\n```\r\n\r\n(my take on this is that this way, its easier to rename `test_main` without changing the indentation)",
        "created_at": "2019-10-01T08:19:51Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r329931128",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/329931128"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r329931128"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/329931349",
        "pull_request_review_id": 295436383,
        "id": 329931349,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyOTkzMTM0OQ==",
        "diff_hunk": "@@ -222,8 +222,8 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n-def test_main(input_files, samplerate, niter, alpha, softmask, residual_model, model,\n-              targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):\n+def test_main(input_files=None, samplerate=44100, niter=1, alpha=1.0, softmask=False, residual_model=False,\n+              model='umxhq', targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):",
        "path": "test.py",
        "position": null,
        "original_position": 7,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "0231e2432371e0283485488a372475a56a7626fd",
        "user": {
            "login": "faroit",
            "id": 72940,
            "node_id": "MDQ6VXNlcjcyOTQw",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/faroit",
            "html_url": "https://github.com/faroit",
            "followers_url": "https://api.github.com/users/faroit/followers",
            "following_url": "https://api.github.com/users/faroit/following{/other_user}",
            "gists_url": "https://api.github.com/users/faroit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/faroit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faroit/subscriptions",
            "organizations_url": "https://api.github.com/users/faroit/orgs",
            "repos_url": "https://api.github.com/users/faroit/repos",
            "events_url": "https://api.github.com/users/faroit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/faroit/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Please add `start_stop` from #10. Thanks",
        "created_at": "2019-10-01T08:20:23Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r329931349",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/329931349"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r329931349"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/331675345",
        "pull_request_review_id": 297704204,
        "id": 331675345,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMTY3NTM0NQ==",
        "diff_hunk": "@@ -222,8 +222,8 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n-def test_main(input_files, samplerate, niter, alpha, softmask, residual_model, model,\n-              targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):\n+def test_main(input_files=None, samplerate=44100, niter=1, alpha=1.0, softmask=False, residual_model=False,\n+              model='umxhq', targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):",
        "path": "test.py",
        "position": null,
        "original_position": 7,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "0231e2432371e0283485488a372475a56a7626fd",
        "user": {
            "login": "aadibajpai",
            "id": 27063113,
            "node_id": "MDQ6VXNlcjI3MDYzMTEz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27063113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aadibajpai",
            "html_url": "https://github.com/aadibajpai",
            "followers_url": "https://api.github.com/users/aadibajpai/followers",
            "following_url": "https://api.github.com/users/aadibajpai/following{/other_user}",
            "gists_url": "https://api.github.com/users/aadibajpai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aadibajpai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aadibajpai/subscriptions",
            "organizations_url": "https://api.github.com/users/aadibajpai/orgs",
            "repos_url": "https://api.github.com/users/aadibajpai/repos",
            "events_url": "https://api.github.com/users/aadibajpai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aadibajpai/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "okay",
        "created_at": "2019-10-04T20:34:26Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r331675345",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/331675345"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r331675345"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        },
        "in_reply_to_id": 329931349
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/332258813",
        "pull_request_review_id": 298438888,
        "id": 332258813,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjI1ODgxMw==",
        "diff_hunk": "@@ -222,8 +222,8 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n-def test_main(input_files, samplerate, niter, alpha, softmask, residual_model, model,\n-              targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):\n+def test_main(input_files=None, samplerate=44100, niter=1, alpha=1.0, softmask=False, residual_model=False,\n+              model='umxhq', targets=('vocals', 'drums', 'bass', 'other'), outdir=None, no_cuda=False):",
        "path": "test.py",
        "position": null,
        "original_position": 7,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "0231e2432371e0283485488a372475a56a7626fd",
        "user": {
            "login": "aadibajpai",
            "id": 27063113,
            "node_id": "MDQ6VXNlcjI3MDYzMTEz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27063113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aadibajpai",
            "html_url": "https://github.com/aadibajpai",
            "followers_url": "https://api.github.com/users/aadibajpai/followers",
            "following_url": "https://api.github.com/users/aadibajpai/following{/other_user}",
            "gists_url": "https://api.github.com/users/aadibajpai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aadibajpai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aadibajpai/subscriptions",
            "organizations_url": "https://api.github.com/users/aadibajpai/orgs",
            "repos_url": "https://api.github.com/users/aadibajpai/repos",
            "events_url": "https://api.github.com/users/aadibajpai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aadibajpai/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@faroit please check now, should be good.",
        "created_at": "2019-10-07T22:06:40Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r332258813",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/332258813"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r332258813"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        },
        "in_reply_to_id": 329931349
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/333130770",
        "pull_request_review_id": 299565277,
        "id": 333130770,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzEzMDc3MA==",
        "diff_hunk": "@@ -7,8 +7,7 @@\n from pathlib import Path\n import scipy.signal\n import resampy\n-import model\n-import utils\n+from autosynch.umx import model, utils",
        "path": "test.py",
        "position": null,
        "original_position": 6,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "beb482c4b8eba0ef4f53f06e420bc238439e4634",
        "user": {
            "login": "faroit",
            "id": 72940,
            "node_id": "MDQ6VXNlcjcyOTQw",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/faroit",
            "html_url": "https://github.com/faroit",
            "followers_url": "https://api.github.com/users/faroit/followers",
            "following_url": "https://api.github.com/users/faroit/following{/other_user}",
            "gists_url": "https://api.github.com/users/faroit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/faroit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faroit/subscriptions",
            "organizations_url": "https://api.github.com/users/faroit/orgs",
            "repos_url": "https://api.github.com/users/faroit/repos",
            "events_url": "https://api.github.com/users/faroit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/faroit/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't know what `autosynch` is",
        "created_at": "2019-10-09T17:11:11Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r333130770",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/333130770"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r333130770"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/333199950",
        "pull_request_review_id": 299654380,
        "id": 333199950,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzE5OTk1MA==",
        "diff_hunk": "@@ -7,8 +7,7 @@\n from pathlib import Path\n import scipy.signal\n import resampy\n-import model\n-import utils\n+from autosynch.umx import model, utils",
        "path": "test.py",
        "position": null,
        "original_position": 6,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "beb482c4b8eba0ef4f53f06e420bc238439e4634",
        "user": {
            "login": "aadibajpai",
            "id": 27063113,
            "node_id": "MDQ6VXNlcjI3MDYzMTEz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27063113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aadibajpai",
            "html_url": "https://github.com/aadibajpai",
            "followers_url": "https://api.github.com/users/aadibajpai/followers",
            "following_url": "https://api.github.com/users/aadibajpai/following{/other_user}",
            "gists_url": "https://api.github.com/users/aadibajpai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aadibajpai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aadibajpai/subscriptions",
            "organizations_url": "https://api.github.com/users/aadibajpai/orgs",
            "repos_url": "https://api.github.com/users/aadibajpai/repos",
            "events_url": "https://api.github.com/users/aadibajpai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aadibajpai/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh crap I copied some extra bits. Sorry.",
        "created_at": "2019-10-09T19:47:00Z",
        "updated_at": "2019-10-09T19:47:50Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r333199950",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/333199950"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r333199950"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        },
        "in_reply_to_id": 333130770
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/337870214",
        "pull_request_review_id": 305659383,
        "id": 337870214,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzg3MDIxNA==",
        "diff_hunk": "@@ -222,6 +222,76 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n+def test_main(input_files=None, samplerate=44100, niter=1, alpha=1.0, softmask=False, residual_model=False,\n+              model='umxhq', targets=('vocals', 'drums', 'bass', 'other'), outdir=None, start=0.0, duration=-1.0,\n+              no_cuda=False):\n+\n+    use_cuda = not no_cuda and torch.cuda.is_available()\n+    device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n+\n+    for input_file in input_files:\n+        # handling an input audio path\n+        info = sf.info(input_file)\n+        start = int(start * info.samplerate)\n+        # check if dur is none\n+        if duration > 0:\n+            # stop in soundfile is calc in samples, not seconds\n+            stop = start + int(duration * info.samplerate)\n+        else:\n+            # set to None for reading complete file\n+            stop = None\n+\n+        audio, rate = sf.read(\n+            input_file,\n+            always_2d=True,\n+            start=start,\n+            stop=stop\n+        )\n+\n+        if audio.shape[1] > 2:\n+            warnings.warn(\n+                'Channel count > 2! '\n+                'Only the first two channels will be processed!')\n+            audio = audio[:, :2]\n+\n+        if rate != samplerate:\n+            # resample to model samplerate if needed\n+            audio = resampy.resample(audio, rate, samplerate, axis=0)\n+\n+        if audio.shape[1] == 1:\n+            # if we have mono, let's duplicate it\n+            # as the input of OpenUnmix is always stereo\n+            audio = np.repeat(audio, 2, axis=1)\n+\n+        estimates = separate(\n+            audio,\n+            targets=targets,\n+            model_name=model,\n+            niter=niter,\n+            alpha=alpha,\n+            softmask=softmask,\n+            residual_model=residual_model,\n+            device=device\n+        )\n+        if not outdir:\n+            model_path = Path(model)\n+            if not model_path.exists():\n+                out_dir = Path(Path(input_file).stem + '_' + model)",
        "path": "test.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "user": {
            "login": "faroit",
            "id": 72940,
            "node_id": "MDQ6VXNlcjcyOTQw",
            "avatar_url": "https://avatars3.githubusercontent.com/u/72940?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/faroit",
            "html_url": "https://github.com/faroit",
            "followers_url": "https://api.github.com/users/faroit/followers",
            "following_url": "https://api.github.com/users/faroit/following{/other_user}",
            "gists_url": "https://api.github.com/users/faroit/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/faroit/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/faroit/subscriptions",
            "organizations_url": "https://api.github.com/users/faroit/orgs",
            "repos_url": "https://api.github.com/users/faroit/repos",
            "events_url": "https://api.github.com/users/faroit/events{/privacy}",
            "received_events_url": "https://api.github.com/users/faroit/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oops, I didn't see this. It should have been `outdir` not `out_dir`. Didn't you copy/paste the code block?",
        "created_at": "2019-10-23T06:36:14Z",
        "updated_at": "2019-10-23T06:36:14Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r337870214",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/337870214"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r337870214"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/338058016",
        "pull_request_review_id": 305903843,
        "id": 338058016,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODA1ODAxNg==",
        "diff_hunk": "@@ -222,6 +222,76 @@ def inference_args(parser, remaining_args):\n     return inf_parser.parse_args()\n \n \n+def test_main(input_files=None, samplerate=44100, niter=1, alpha=1.0, softmask=False, residual_model=False,\n+              model='umxhq', targets=('vocals', 'drums', 'bass', 'other'), outdir=None, start=0.0, duration=-1.0,\n+              no_cuda=False):\n+\n+    use_cuda = not no_cuda and torch.cuda.is_available()\n+    device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n+\n+    for input_file in input_files:\n+        # handling an input audio path\n+        info = sf.info(input_file)\n+        start = int(start * info.samplerate)\n+        # check if dur is none\n+        if duration > 0:\n+            # stop in soundfile is calc in samples, not seconds\n+            stop = start + int(duration * info.samplerate)\n+        else:\n+            # set to None for reading complete file\n+            stop = None\n+\n+        audio, rate = sf.read(\n+            input_file,\n+            always_2d=True,\n+            start=start,\n+            stop=stop\n+        )\n+\n+        if audio.shape[1] > 2:\n+            warnings.warn(\n+                'Channel count > 2! '\n+                'Only the first two channels will be processed!')\n+            audio = audio[:, :2]\n+\n+        if rate != samplerate:\n+            # resample to model samplerate if needed\n+            audio = resampy.resample(audio, rate, samplerate, axis=0)\n+\n+        if audio.shape[1] == 1:\n+            # if we have mono, let's duplicate it\n+            # as the input of OpenUnmix is always stereo\n+            audio = np.repeat(audio, 2, axis=1)\n+\n+        estimates = separate(\n+            audio,\n+            targets=targets,\n+            model_name=model,\n+            niter=niter,\n+            alpha=alpha,\n+            softmask=softmask,\n+            residual_model=residual_model,\n+            device=device\n+        )\n+        if not outdir:\n+            model_path = Path(model)\n+            if not model_path.exists():\n+                out_dir = Path(Path(input_file).stem + '_' + model)",
        "path": "test.py",
        "position": 58,
        "original_position": 58,
        "commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "original_commit_id": "f4cea9fe00eba4e7aeca9613ad9d1dc3548cd0a6",
        "user": {
            "login": "aadibajpai",
            "id": 27063113,
            "node_id": "MDQ6VXNlcjI3MDYzMTEz",
            "avatar_url": "https://avatars0.githubusercontent.com/u/27063113?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aadibajpai",
            "html_url": "https://github.com/aadibajpai",
            "followers_url": "https://api.github.com/users/aadibajpai/followers",
            "following_url": "https://api.github.com/users/aadibajpai/following{/other_user}",
            "gists_url": "https://api.github.com/users/aadibajpai/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aadibajpai/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aadibajpai/subscriptions",
            "organizations_url": "https://api.github.com/users/aadibajpai/orgs",
            "repos_url": "https://api.github.com/users/aadibajpai/repos",
            "events_url": "https://api.github.com/users/aadibajpai/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aadibajpai/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think I had to do it because PyCharm gave an error with the inner outdir shadowing the outdir from the outer scope. If it works with `outdir` at both places then no harm done!",
        "created_at": "2019-10-23T13:47:53Z",
        "updated_at": "2019-10-23T13:47:54Z",
        "html_url": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r338058016",
        "pull_request_url": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/comments/338058016"
            },
            "html": {
                "href": "https://github.com/sigsep/open-unmix-pytorch/pull/12#discussion_r338058016"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/sigsep/open-unmix-pytorch/pulls/12"
            }
        },
        "in_reply_to_id": 337870214
    }
]