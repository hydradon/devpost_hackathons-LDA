[
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103261",
        "pull_request_review_id": 328541668,
        "id": 355103261,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzI2MQ==",
        "diff_hunk": "@@ -20,6 +23,11 @@\n       return value;\n   }\n \n+  /**\n+   * getConnection using default username and password",
        "path": "src/main/java/services/GetConnection.java",
        "position": null,
        "original_position": 15,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this comment might be unnecessary. The method name kinda explains itself.",
        "created_at": "2019-12-07T06:12:03Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103261",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103261"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103261"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103307",
        "pull_request_review_id": 328541668,
        "id": 355103307,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzMwNw==",
        "diff_hunk": "@@ -33,6 +41,10 @@ public static Connection getConnection() throws SQLException {\n     return dataSource.getConnection();\n   }\n \n+  /**\n+   * Closing the connection",
        "path": "src/main/java/services/GetConnection.java",
        "position": null,
        "original_position": 27,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same here",
        "created_at": "2019-12-07T06:12:41Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103307",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103307"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103307"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103315",
        "pull_request_review_id": 328541668,
        "id": 355103315,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzMxNQ==",
        "diff_hunk": "@@ -14,7 +14,18 @@\n import database.generated.Tables;\n import java.sql.Timestamp;\n \n+/**\n+ * This class insert courses into the Postgresql database based on\n+ * the data scraped from Albert Mobile\n+ */\n public class InsertCourses {\n+  /**\n+   * Inserting courses into the database",
        "path": "src/main/java/services/InsertCourses.java",
        "position": null,
        "original_position": 10,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same here",
        "created_at": "2019-12-07T06:12:51Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103315",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103315"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103315"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103320",
        "pull_request_review_id": 328541668,
        "id": 355103320,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzMyMA==",
        "diff_hunk": "@@ -40,6 +51,14 @@ public static void insertCourses(Logger logger, Term term,\n     }\n   }\n \n+  /**\n+   * Inserting sections into the database",
        "path": "src/main/java/services/InsertCourses.java",
        "position": null,
        "original_position": 24,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same here",
        "created_at": "2019-12-07T06:12:58Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103320",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103320"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103320"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103325",
        "pull_request_review_id": 328541668,
        "id": 355103325,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzMyNQ==",
        "diff_hunk": "@@ -64,6 +83,15 @@ public static void insertSections(Logger logger, DSLContext context,\n     }\n   }\n \n+  /**\n+   * Inserting recitations into the database",
        "path": "src/main/java/services/InsertCourses.java",
        "position": null,
        "original_position": 39,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same here",
        "created_at": "2019-12-07T06:13:05Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103325",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103325"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103325"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103328",
        "pull_request_review_id": 328541668,
        "id": 355103328,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzMyOA==",
        "diff_hunk": "@@ -93,6 +121,14 @@ public static void insertRecitations(Logger logger, DSLContext context,\n     }\n   }\n \n+  /**\n+   * Inserting meetings into the database",
        "path": "src/main/java/services/InsertCourses.java",
        "position": null,
        "original_position": 55,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same here",
        "created_at": "2019-12-07T06:13:13Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103328",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103328"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103328"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103335",
        "pull_request_review_id": 328541668,
        "id": 355103335,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzMzNQ==",
        "diff_hunk": "@@ -6,6 +6,9 @@\n import java.io.File;\n import java.io.IOException;\n \n+/**\n+ * Mapping the object to JSON",
        "path": "src/main/java/services/JsonMapper.java",
        "position": null,
        "original_position": 5,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same here",
        "created_at": "2019-12-07T06:13:21Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103335",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103335"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103335"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103358",
        "pull_request_review_id": 328541668,
        "id": 355103358,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEwMzM1OA==",
        "diff_hunk": "@@ -45,6 +45,9 @@ data class Course(\n     }\n }\n \n+/**\n+ * Section Object",
        "path": "src/main/kotlin/models/api.kt",
        "position": null,
        "original_position": 5,
        "commit_id": "5aa029f008f6b9c5e5f3d52205a70decf6cf8653",
        "original_commit_id": "70955da0c332a361a8fb01f1bd78be7e0d8f3351",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "same here",
        "created_at": "2019-12-07T06:13:41Z",
        "updated_at": "2019-12-07T15:43:52Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103358",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/355103358"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/9#discussion_r355103358"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/9"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363059274",
        "pull_request_review_id": 338373280,
        "id": 363059274,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1OTI3NA==",
        "diff_hunk": "@@ -0,0 +1,4 @@\n+#!/bin/bash\n+\n+java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap \\",
        "path": "docker-entry.sh",
        "position": 3,
        "original_position": 3,
        "commit_id": "bdaa41a839205911b4e8c2ccee448a18478cbe8f",
        "original_commit_id": "f366159606eb99ad9e15fa6dffce1c074f34b065",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What are you trying to fix by putting this in a separate file instead of just writing it in the dockerfile?",
        "created_at": "2020-01-04T22:56:19Z",
        "updated_at": "2020-01-05T23:08:28Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363059274",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363059274"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363059274"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363096789",
        "pull_request_review_id": 338373280,
        "id": 363096789,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5Njc4OQ==",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+version: '3.3'\n+\n+services:\n+\n+  reverse-proxy:\n+    # The official v2.1 Traefik docker image\n+    image: traefik:v2.1\n+    restart: always\n+    # Enables the web UI and tells Traefik to listen to docker\n+    command:\n+#      - \"--log.level=DEBUG\"\n+      - \"--api.insecure=true\"\n+      - \"--providers.docker=true\"\n+      # You need to actively say traefik.enable=true\n+      - \"--providers.docker.exposedbydefault=false\"\n+      - \"--entrypoints.websecure.address=:443\"\n+      - \"--certificatesresolvers.mytlschallenge.acme.tlschallenge=true\"\n+      - \"--certificatesresolvers.mytlschallenge.acme.email=nick@nicholasyang.com\"\n+      - \"--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json\"\n+    ports:\n+      - \"80:80\"\n+      - \"443:443\"\n+      # The Web UI (enabled by --api.insecure=true)\n+      - \"8080:8080\"\n+    volumes:\n+      # So that Traefik can listen to the Docker events\n+      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n+      - \"./letsencrypt:/letsencrypt\"\n+    labels:\n+      # Redirects all traffic to HTTPS\n+      - \"traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)\"\n+      - \"traefik.http.routers.redirs.entrypoints=web\"\n+      - \"traefik.http.routers.redirs.middlewares=redirect-to-https\"\n+\n+  db:\n+    image: postgres\n+    restart: always\n+    environment:\n+      POSTGRES_PASSWORD:\n+      POSTGRES_DB: schedge\n+      POSTGRES_USER: schedge\n+\n+  app:\n+    build: .\n+    environment:\n+      JDBC_URL: jdbc:postgresql://db:5432/schedge\n+    ports:\n+      - \"8001:80\"\n+    labels:\n+      - \"traefik.enable=true\"\n+      - \"traefik.http.routers.app.rule=Host(`albertsucks.com`)\"",
        "path": "docker-compose.yml",
        "position": null,
        "original_position": 51,
        "commit_id": "bdaa41a839205911b4e8c2ccee448a18478cbe8f",
        "original_commit_id": "f366159606eb99ad9e15fa6dffce1c074f34b065",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I feel like having it hosted at `albersucks.com` is a bit rude. Not really my style and definitely not BUGS's style. Can we stick to the current domain or switch to a schedge-specific one?",
        "created_at": "2020-01-05T14:29:47Z",
        "updated_at": "2020-01-05T23:08:28Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363096789",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363096789"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363096789"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363119658",
        "pull_request_review_id": 338423519,
        "id": 363119658,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExOTY1OA==",
        "diff_hunk": "@@ -0,0 +1,4 @@\n+#!/bin/bash\n+\n+java -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap \\",
        "path": "docker-entry.sh",
        "position": 3,
        "original_position": 3,
        "commit_id": "bdaa41a839205911b4e8c2ccee448a18478cbe8f",
        "original_commit_id": "f366159606eb99ad9e15fa6dffce1c074f34b065",
        "user": {
            "login": "NicholasLYang",
            "id": 7357863,
            "node_id": "MDQ6VXNlcjczNTc4NjM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/7357863?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NicholasLYang",
            "html_url": "https://github.com/NicholasLYang",
            "followers_url": "https://api.github.com/users/NicholasLYang/followers",
            "following_url": "https://api.github.com/users/NicholasLYang/following{/other_user}",
            "gists_url": "https://api.github.com/users/NicholasLYang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NicholasLYang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NicholasLYang/subscriptions",
            "organizations_url": "https://api.github.com/users/NicholasLYang/orgs",
            "repos_url": "https://api.github.com/users/NicholasLYang/repos",
            "events_url": "https://api.github.com/users/NicholasLYang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NicholasLYang/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Tbh it\u2019s mostly cause executing a script with a lot of arguments is a little messy in docker cause you need to pass a list of arguments with quotes.\r\n\r\nLike: `[\u201cls\u201d, \u201c-l\u201d, \u201cfoo\u201d]`",
        "created_at": "2020-01-05T21:54:35Z",
        "updated_at": "2020-01-05T23:08:28Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363119658",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363119658"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363119658"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22"
            }
        },
        "in_reply_to_id": 363059274
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363126505",
        "pull_request_review_id": 338430183,
        "id": 363126505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNjUwNQ==",
        "diff_hunk": "@@ -0,0 +1,55 @@\n+version: '3.3'\n+\n+services:\n+\n+  reverse-proxy:\n+    # The official v2.1 Traefik docker image\n+    image: traefik:v2.1\n+    restart: always\n+    # Enables the web UI and tells Traefik to listen to docker\n+    command:\n+#      - \"--log.level=DEBUG\"\n+      - \"--api.insecure=true\"\n+      - \"--providers.docker=true\"\n+      # You need to actively say traefik.enable=true\n+      - \"--providers.docker.exposedbydefault=false\"\n+      - \"--entrypoints.websecure.address=:443\"\n+      - \"--certificatesresolvers.mytlschallenge.acme.tlschallenge=true\"\n+      - \"--certificatesresolvers.mytlschallenge.acme.email=nick@nicholasyang.com\"\n+      - \"--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json\"\n+    ports:\n+      - \"80:80\"\n+      - \"443:443\"\n+      # The Web UI (enabled by --api.insecure=true)\n+      - \"8080:8080\"\n+    volumes:\n+      # So that Traefik can listen to the Docker events\n+      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n+      - \"./letsencrypt:/letsencrypt\"\n+    labels:\n+      # Redirects all traffic to HTTPS\n+      - \"traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)\"\n+      - \"traefik.http.routers.redirs.entrypoints=web\"\n+      - \"traefik.http.routers.redirs.middlewares=redirect-to-https\"\n+\n+  db:\n+    image: postgres\n+    restart: always\n+    environment:\n+      POSTGRES_PASSWORD:\n+      POSTGRES_DB: schedge\n+      POSTGRES_USER: schedge\n+\n+  app:\n+    build: .\n+    environment:\n+      JDBC_URL: jdbc:postgresql://db:5432/schedge\n+    ports:\n+      - \"8001:80\"\n+    labels:\n+      - \"traefik.enable=true\"\n+      - \"traefik.http.routers.app.rule=Host(`albertsucks.com`)\"",
        "path": "docker-compose.yml",
        "position": null,
        "original_position": 51,
        "commit_id": "bdaa41a839205911b4e8c2ccee448a18478cbe8f",
        "original_commit_id": "f366159606eb99ad9e15fa6dffce1c074f34b065",
        "user": {
            "login": "NicholasLYang",
            "id": 7357863,
            "node_id": "MDQ6VXNlcjczNTc4NjM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/7357863?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NicholasLYang",
            "html_url": "https://github.com/NicholasLYang",
            "followers_url": "https://api.github.com/users/NicholasLYang/followers",
            "following_url": "https://api.github.com/users/NicholasLYang/following{/other_user}",
            "gists_url": "https://api.github.com/users/NicholasLYang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NicholasLYang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NicholasLYang/subscriptions",
            "organizations_url": "https://api.github.com/users/NicholasLYang/orgs",
            "repos_url": "https://api.github.com/users/NicholasLYang/repos",
            "events_url": "https://api.github.com/users/NicholasLYang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NicholasLYang/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Smh, NYU Albert does suck. Not you buddy :D. Switched to schedge.torchnyu.com",
        "created_at": "2020-01-05T23:54:23Z",
        "updated_at": "2020-01-05T23:54:24Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363126505",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363126505"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/22#discussion_r363126505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/22"
            }
        },
        "in_reply_to_id": 363096789
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097033",
        "pull_request_review_id": 338403954,
        "id": 363097033,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5NzAzMw==",
        "diff_hunk": "@@ -34,6 +38,10 @@ public Section(int registrationNumber, String sectionCode, String instructor,\n     this.recitations = recitations;\n   }\n \n+  public int getWaitlistTotal() { return waitlistTotal; }",
        "path": "src/main/java/scraping/models/Section.java",
        "position": null,
        "original_position": 26,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we make this an `Integer` instead of an `int` ? That way we can use the null value to signify that there's no waitlist.",
        "created_at": "2020-01-05T14:34:06Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097033",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097033"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097033"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097190",
        "pull_request_review_id": 338403954,
        "id": 363097190,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5NzE5MA==",
        "diff_hunk": "@@ -30,27 +34,52 @@\n   private static DateTimeFormatter timeParser =\n       DateTimeFormat.forPattern(\"MM/dd/yyyy h:mma\");\n \n-  public static @NotNull Object parse(@NotNull String rawData)\n+  public static @NotNull\n+  SectionAttribute parse(@NotNull String rawData)\n       throws IOException {\n     logger.info(\"parsing raw catalog data...\");\n     Document doc = Jsoup.parse(rawData);\n+    doc.select(\"a\").unwrap();\n+    doc.select(\"i\").unwrap();",
        "path": "src/main/java/services/ParseSection.java",
        "position": 35,
        "original_position": 31,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What's the intention behind lines 42 and 43?",
        "created_at": "2020-01-05T14:37:02Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097190",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097190"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097190"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097405",
        "pull_request_review_id": 338403954,
        "id": 363097405,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5NzQwNQ==",
        "diff_hunk": "@@ -7,25 +7,89 @@ import com.github.ajalt.clikt.parameters.types.int\n import models.SubjectCode\n import models.Term\n import mu.KotlinLogging\n-import services.JsonMapper\n-import services.scrapeFromCatalog\n-import services.scrapeAllFromCatalog\n+import scraping.models.Course\n+import services.*\n import utils.writeToFileOrStdout\n \n // TODO Change this to package-level protected if that becomes a thing\n /**\n- * CLI for querying NYU Albert. Has two subcommands, `catalog` and `section`.\n+ * CLI for querying NYU Albert. Has three subcommands, `catalog` and `section` and 'sections'.\n  * @author Albert Liu\n  */\n internal class Scrape : CliktCommand(name = \"scrape\") {\n \n     init {\n-        this.subcommands(Catalog())\n+        this.subcommands(Catalog(), Section(), Sections())\n     }\n \n     override fun run() = Unit\n \n     /**\n+     * CLI for performing search queries for catalog's section of NYU Albert based registration number.\n+     */\n+    private class Section() : CliktCommand(name = \"section\") {\n+        private val logger = KotlinLogging.logger(\"scrape.section\")\n+        private val term: Term by option(\"--term\").convert {\n+            Term.fromId(Integer.parseInt(it))\n+        }.required()\n+        private val registrationNumber: Int by option(\n+                \"--registrationNumber\",\n+                help = \"The registration number that you'd use to register for the course.\"\n+        ).int().required()\n+        private val file: String? by option(\"--file\")\n+        private val batchSize: Int? by option(\"--batchSize\").int()\n+        private val prettyPrint by option(\"--pretty\").flag(default = false)\n+\n+        override fun run() {\n+            val startTime = System.nanoTime()\n+            file.writeToFileOrStdout(\n+                    JsonMapper.toJson(\n+                            scrapeFromSection(logger, term, registrationNumber), prettyPrint)\n+            )\n+\n+            val endTime = System.nanoTime()\n+            val duration = (endTime - startTime) / 1000000000.0 //divide by 1000000 to get milliseconds.\n+            logger.info { \"$duration seconds\" }\n+\n+        }\n+    }\n+\n+    /**\n+     * CLI for performing search queries for catalog's sections of NYU Albert based on school and subject.\n+     */\n+    private class Sections() : CliktCommand(name = \"sections\") {\n+        private val logger = KotlinLogging.logger(\"scrape.catalog\")\n+        private val term: Term by option(\"--term\").convert {\n+            Term.fromId(Integer.parseInt(it))\n+        }.required()\n+        private val school: String? by option(\"--school\")\n+        private val subject: String? by option(\"--subject\")\n+        private val file: String? by option(\"--file\")\n+        private val batchSize: Int? by option(\"--batchSize\").int()",
        "path": "src/main/kotlin/cli/Scrape.kt",
        "position": 66,
        "original_position": 67,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not sure batch size is being used right now; that's probably totally fine, because we'll probably want to include it in the future, but just a heads up that it's not being used rn.",
        "created_at": "2020-01-05T14:40:56Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097405",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097405"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097405"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097512",
        "pull_request_review_id": 338403954,
        "id": 363097512,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5NzUxMg==",
        "diff_hunk": "@@ -7,25 +7,89 @@ import com.github.ajalt.clikt.parameters.types.int\n import models.SubjectCode\n import models.Term\n import mu.KotlinLogging\n-import services.JsonMapper\n-import services.scrapeFromCatalog\n-import services.scrapeAllFromCatalog\n+import scraping.models.Course\n+import services.*\n import utils.writeToFileOrStdout\n \n // TODO Change this to package-level protected if that becomes a thing\n /**\n- * CLI for querying NYU Albert. Has two subcommands, `catalog` and `section`.\n+ * CLI for querying NYU Albert. Has three subcommands, `catalog` and `section` and 'sections'.\n  * @author Albert Liu\n  */\n internal class Scrape : CliktCommand(name = \"scrape\") {\n \n     init {\n-        this.subcommands(Catalog())\n+        this.subcommands(Catalog(), Section(), Sections())\n     }\n \n     override fun run() = Unit\n \n     /**\n+     * CLI for performing search queries for catalog's section of NYU Albert based registration number.\n+     */\n+    private class Section() : CliktCommand(name = \"section\") {\n+        private val logger = KotlinLogging.logger(\"scrape.section\")\n+        private val term: Term by option(\"--term\").convert {\n+            Term.fromId(Integer.parseInt(it))\n+        }.required()\n+        private val registrationNumber: Int by option(\n+                \"--registrationNumber\",\n+                help = \"The registration number that you'd use to register for the course.\"\n+        ).int().required()\n+        private val file: String? by option(\"--file\")\n+        private val batchSize: Int? by option(\"--batchSize\").int()",
        "path": "src/main/kotlin/cli/Scrape.kt",
        "position": null,
        "original_position": 39,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think batch size should be an argument if we're only scraping a single section.",
        "created_at": "2020-01-05T14:42:59Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097512",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363097512"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363097512"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363116528",
        "pull_request_review_id": 338420872,
        "id": 363116528,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExNjUyOA==",
        "diff_hunk": "@@ -34,6 +38,10 @@ public Section(int registrationNumber, String sectionCode, String instructor,\n     this.recitations = recitations;\n   }\n \n+  public int getWaitlistTotal() { return waitlistTotal; }",
        "path": "src/main/java/scraping/models/Section.java",
        "position": null,
        "original_position": 26,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "Kn99HN",
            "id": 44149581,
            "node_id": "MDQ6VXNlcjQ0MTQ5NTgx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/44149581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Kn99HN",
            "html_url": "https://github.com/Kn99HN",
            "followers_url": "https://api.github.com/users/Kn99HN/followers",
            "following_url": "https://api.github.com/users/Kn99HN/following{/other_user}",
            "gists_url": "https://api.github.com/users/Kn99HN/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Kn99HN/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Kn99HN/subscriptions",
            "organizations_url": "https://api.github.com/users/Kn99HN/orgs",
            "repos_url": "https://api.github.com/users/Kn99HN/repos",
            "events_url": "https://api.github.com/users/Kn99HN/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Kn99HN/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sure can",
        "created_at": "2020-01-05T20:59:08Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363116528",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363116528"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363116528"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        },
        "in_reply_to_id": 363097033
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363116559",
        "pull_request_review_id": 338420906,
        "id": 363116559,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExNjU1OQ==",
        "diff_hunk": "@@ -30,27 +34,52 @@\n   private static DateTimeFormatter timeParser =\n       DateTimeFormat.forPattern(\"MM/dd/yyyy h:mma\");\n \n-  public static @NotNull Object parse(@NotNull String rawData)\n+  public static @NotNull\n+  SectionAttribute parse(@NotNull String rawData)\n       throws IOException {\n     logger.info(\"parsing raw catalog data...\");\n     Document doc = Jsoup.parse(rawData);\n+    doc.select(\"a\").unwrap();\n+    doc.select(\"i\").unwrap();",
        "path": "src/main/java/services/ParseSection.java",
        "position": 35,
        "original_position": 31,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "Kn99HN",
            "id": 44149581,
            "node_id": "MDQ6VXNlcjQ0MTQ5NTgx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/44149581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Kn99HN",
            "html_url": "https://github.com/Kn99HN",
            "followers_url": "https://api.github.com/users/Kn99HN/followers",
            "following_url": "https://api.github.com/users/Kn99HN/following{/other_user}",
            "gists_url": "https://api.github.com/users/Kn99HN/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Kn99HN/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Kn99HN/subscriptions",
            "organizations_url": "https://api.github.com/users/Kn99HN/orgs",
            "repos_url": "https://api.github.com/users/Kn99HN/repos",
            "events_url": "https://api.github.com/users/Kn99HN/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Kn99HN/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "So the section HTML has this section for location of the class, but it wraps in an a tag and i tag. Line 42 and 43 remove these two tags but keep the inner HTML. By doing so, we can get the location of the class",
        "created_at": "2020-01-05T20:59:59Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363116559",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363116559"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363116559"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        },
        "in_reply_to_id": 363097190
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363116641",
        "pull_request_review_id": 338420969,
        "id": 363116641,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzExNjY0MQ==",
        "diff_hunk": "@@ -7,25 +7,89 @@ import com.github.ajalt.clikt.parameters.types.int\n import models.SubjectCode\n import models.Term\n import mu.KotlinLogging\n-import services.JsonMapper\n-import services.scrapeFromCatalog\n-import services.scrapeAllFromCatalog\n+import scraping.models.Course\n+import services.*\n import utils.writeToFileOrStdout\n \n // TODO Change this to package-level protected if that becomes a thing\n /**\n- * CLI for querying NYU Albert. Has two subcommands, `catalog` and `section`.\n+ * CLI for querying NYU Albert. Has three subcommands, `catalog` and `section` and 'sections'.\n  * @author Albert Liu\n  */\n internal class Scrape : CliktCommand(name = \"scrape\") {\n \n     init {\n-        this.subcommands(Catalog())\n+        this.subcommands(Catalog(), Section(), Sections())\n     }\n \n     override fun run() = Unit\n \n     /**\n+     * CLI for performing search queries for catalog's section of NYU Albert based registration number.\n+     */\n+    private class Section() : CliktCommand(name = \"section\") {\n+        private val logger = KotlinLogging.logger(\"scrape.section\")\n+        private val term: Term by option(\"--term\").convert {\n+            Term.fromId(Integer.parseInt(it))\n+        }.required()\n+        private val registrationNumber: Int by option(\n+                \"--registrationNumber\",\n+                help = \"The registration number that you'd use to register for the course.\"\n+        ).int().required()\n+        private val file: String? by option(\"--file\")\n+        private val batchSize: Int? by option(\"--batchSize\").int()\n+        private val prettyPrint by option(\"--pretty\").flag(default = false)\n+\n+        override fun run() {\n+            val startTime = System.nanoTime()\n+            file.writeToFileOrStdout(\n+                    JsonMapper.toJson(\n+                            scrapeFromSection(logger, term, registrationNumber), prettyPrint)\n+            )\n+\n+            val endTime = System.nanoTime()\n+            val duration = (endTime - startTime) / 1000000000.0 //divide by 1000000 to get milliseconds.\n+            logger.info { \"$duration seconds\" }\n+\n+        }\n+    }\n+\n+    /**\n+     * CLI for performing search queries for catalog's sections of NYU Albert based on school and subject.\n+     */\n+    private class Sections() : CliktCommand(name = \"sections\") {\n+        private val logger = KotlinLogging.logger(\"scrape.catalog\")\n+        private val term: Term by option(\"--term\").convert {\n+            Term.fromId(Integer.parseInt(it))\n+        }.required()\n+        private val school: String? by option(\"--school\")\n+        private val subject: String? by option(\"--subject\")\n+        private val file: String? by option(\"--file\")\n+        private val batchSize: Int? by option(\"--batchSize\").int()",
        "path": "src/main/kotlin/cli/Scrape.kt",
        "position": 66,
        "original_position": 67,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "Kn99HN",
            "id": 44149581,
            "node_id": "MDQ6VXNlcjQ0MTQ5NTgx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/44149581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Kn99HN",
            "html_url": "https://github.com/Kn99HN",
            "followers_url": "https://api.github.com/users/Kn99HN/followers",
            "following_url": "https://api.github.com/users/Kn99HN/following{/other_user}",
            "gists_url": "https://api.github.com/users/Kn99HN/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Kn99HN/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Kn99HN/subscriptions",
            "organizations_url": "https://api.github.com/users/Kn99HN/orgs",
            "repos_url": "https://api.github.com/users/Kn99HN/repos",
            "events_url": "https://api.github.com/users/Kn99HN/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Kn99HN/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I keep it there to keep it consistent with the code you wrote. But since I don't really understand how it works, for now, I haven't used it for anything. I'm keeping there for the future, will prob make a note",
        "created_at": "2020-01-05T21:01:03Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363116641",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363116641"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363116641"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        },
        "in_reply_to_id": 363097405
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363681148",
        "pull_request_review_id": 339148209,
        "id": 363681148,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY4MTE0OA==",
        "diff_hunk": "@@ -7,25 +7,89 @@ import com.github.ajalt.clikt.parameters.types.int\n import models.SubjectCode\n import models.Term\n import mu.KotlinLogging\n-import services.JsonMapper\n-import services.scrapeFromCatalog\n-import services.scrapeAllFromCatalog\n+import scraping.models.Course\n+import services.*\n import utils.writeToFileOrStdout\n \n // TODO Change this to package-level protected if that becomes a thing\n /**\n- * CLI for querying NYU Albert. Has two subcommands, `catalog` and `section`.\n+ * CLI for querying NYU Albert. Has three subcommands, `catalog` and `section` and 'sections'.\n  * @author Albert Liu\n  */\n internal class Scrape : CliktCommand(name = \"scrape\") {\n \n     init {\n-        this.subcommands(Catalog())\n+        this.subcommands(Catalog(), Section(), Sections())\n     }\n \n     override fun run() = Unit\n \n     /**\n+     * CLI for performing search queries for catalog's section of NYU Albert based registration number.\n+     */\n+    private class Section() : CliktCommand(name = \"section\") {\n+        private val logger = KotlinLogging.logger(\"scrape.section\")\n+        private val term: Term by option(\"--term\").convert {\n+            Term.fromId(Integer.parseInt(it))\n+        }.required()\n+        private val registrationNumber: Int by option(\n+                \"--registrationNumber\",\n+                help = \"The registration number that you'd use to register for the course.\"\n+        ).int().required()\n+        private val file: String? by option(\"--file\")\n+        private val batchSize: Int? by option(\"--batchSize\").int()\n+        private val prettyPrint by option(\"--pretty\").flag(default = false)\n+\n+        override fun run() {\n+            val startTime = System.nanoTime()\n+            file.writeToFileOrStdout(\n+                    JsonMapper.toJson(\n+                            scrapeFromSection(logger, term, registrationNumber), prettyPrint)\n+            )\n+\n+            val endTime = System.nanoTime()\n+            val duration = (endTime - startTime) / 1000000000.0 //divide by 1000000 to get milliseconds.\n+            logger.info { \"$duration seconds\" }\n+\n+        }\n+    }\n+\n+    /**\n+     * CLI for performing search queries for catalog's sections of NYU Albert based on school and subject.\n+     */\n+    private class Sections() : CliktCommand(name = \"sections\") {\n+        private val logger = KotlinLogging.logger(\"scrape.catalog\")\n+        private val term: Term by option(\"--term\").convert {\n+            Term.fromId(Integer.parseInt(it))\n+        }.required()\n+        private val school: String? by option(\"--school\")\n+        private val subject: String? by option(\"--subject\")\n+        private val file: String? by option(\"--file\")\n+        private val batchSize: Int? by option(\"--batchSize\").int()",
        "path": "src/main/kotlin/cli/Scrape.kt",
        "position": 66,
        "original_position": 67,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, that's fine. The batchSize flag is for perf and not for anything else, so no worries we can keep it and fix later when we migrate the CLI to java.",
        "created_at": "2020-01-07T10:21:43Z",
        "updated_at": "2020-01-07T14:12:56Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363681148",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/363681148"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r363681148"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        },
        "in_reply_to_id": 363097405
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/367589637",
        "pull_request_review_id": 344137309,
        "id": 367589637,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4OTYzNw==",
        "diff_hunk": "@@ -30,27 +34,52 @@\n   private static DateTimeFormatter timeParser =\n       DateTimeFormat.forPattern(\"MM/dd/yyyy h:mma\");\n \n-  public static @NotNull Object parse(@NotNull String rawData)\n+  public static @NotNull\n+  SectionAttribute parse(@NotNull String rawData)\n       throws IOException {\n     logger.info(\"parsing raw catalog data...\");\n     Document doc = Jsoup.parse(rawData);\n+    doc.select(\"a\").unwrap();\n+    doc.select(\"i\").unwrap();",
        "path": "src/main/java/services/ParseSection.java",
        "position": 35,
        "original_position": 31,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do these lines modify the document in place or create new objects? Additionally, I think the selectors on the next few lines ignore the wrapping tags.",
        "created_at": "2020-01-16T18:51:13Z",
        "updated_at": "2020-01-16T18:51:14Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r367589637",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/367589637"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r367589637"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        },
        "in_reply_to_id": 363097190
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/367681720",
        "pull_request_review_id": 344257472,
        "id": 367681720,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY4MTcyMA==",
        "diff_hunk": "@@ -30,27 +34,52 @@\n   private static DateTimeFormatter timeParser =\n       DateTimeFormat.forPattern(\"MM/dd/yyyy h:mma\");\n \n-  public static @NotNull Object parse(@NotNull String rawData)\n+  public static @NotNull\n+  SectionAttribute parse(@NotNull String rawData)\n       throws IOException {\n     logger.info(\"parsing raw catalog data...\");\n     Document doc = Jsoup.parse(rawData);\n+    doc.select(\"a\").unwrap();\n+    doc.select(\"i\").unwrap();",
        "path": "src/main/java/services/ParseSection.java",
        "position": 35,
        "original_position": 31,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "Kn99HN",
            "id": 44149581,
            "node_id": "MDQ6VXNlcjQ0MTQ5NTgx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/44149581?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Kn99HN",
            "html_url": "https://github.com/Kn99HN",
            "followers_url": "https://api.github.com/users/Kn99HN/followers",
            "following_url": "https://api.github.com/users/Kn99HN/following{/other_user}",
            "gists_url": "https://api.github.com/users/Kn99HN/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Kn99HN/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Kn99HN/subscriptions",
            "organizations_url": "https://api.github.com/users/Kn99HN/orgs",
            "repos_url": "https://api.github.com/users/Kn99HN/repos",
            "events_url": "https://api.github.com/users/Kn99HN/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Kn99HN/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "When I run it without unwrapping the tag, it didn't catch the location of the class. The selectors on the next few lines don't actually ignore the wrapping tags because of the way that the HTML is structured. The room/location building is wrapped inside an 'a' tag. The selectors will select div class = \"section-content clearfix\" but this div will be inside the 'a' tag, so it will not be able to find it. \r\n\r\nBased on the [documentation](https://jsoup.org/apidocs/org/jsoup/select/Elements.html#unwrap--), it removes the matched elements from the DOM and moves the children elements up into the parents. I believe it modifies in place and does not create new objects.  ",
        "created_at": "2020-01-16T22:24:23Z",
        "updated_at": "2020-01-16T22:24:24Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r367681720",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/367681720"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r367681720"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        },
        "in_reply_to_id": 363097190
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/367722480",
        "pull_request_review_id": 344308272,
        "id": 367722480,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcyMjQ4MA==",
        "diff_hunk": "@@ -30,27 +34,52 @@\n   private static DateTimeFormatter timeParser =\n       DateTimeFormat.forPattern(\"MM/dd/yyyy h:mma\");\n \n-  public static @NotNull Object parse(@NotNull String rawData)\n+  public static @NotNull\n+  SectionAttribute parse(@NotNull String rawData)\n       throws IOException {\n     logger.info(\"parsing raw catalog data...\");\n     Document doc = Jsoup.parse(rawData);\n+    doc.select(\"a\").unwrap();\n+    doc.select(\"i\").unwrap();",
        "path": "src/main/java/services/ParseSection.java",
        "position": 35,
        "original_position": 31,
        "commit_id": "849cde837c23c4932345e2b9c8c66d1bd532c777",
        "original_commit_id": "1acf5447bb6b3895d540d76b2026a3f262886f76",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "ahh gotcha that's good to know.",
        "created_at": "2020-01-17T00:49:53Z",
        "updated_at": "2020-01-17T00:49:53Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r367722480",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/367722480"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/23#discussion_r367722480"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/23"
            }
        },
        "in_reply_to_id": 363097190
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/369159530",
        "pull_request_review_id": 346083969,
        "id": 369159530,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1OTUzMA==",
        "diff_hunk": "@@ -0,0 +1,83 @@\n+package services;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.select.Elements;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ParseSchoolSubjects {\n+    private static Logger logger =\n+            LoggerFactory.getLogger(\"services.ParseSection\");\n+\n+    public static @NotNull String parseSchoolSubject(String rawData) {\n+        logger.info(\"parsing raw school data...\");\n+        Document doc = Jsoup.parse(rawData);\n+        Elements scripts = doc.select(\"script\");\n+        String output = \"\";\n+        for(Element script : scripts) {\n+            String scriptHTML = script.html();\n+            if(scriptHTML.contains(\"classSearch\")) {\n+                output = scriptHTML.substring(\n+                        scriptHTML.indexOf('{') + 1, scriptHTML.lastIndexOf('}'));\n+                output = output.substring(\n+                        output.indexOf('{'), output.lastIndexOf('}') + 1\n+                );\n+            }\n+        }\n+        return output;\n+    }\n+\n+    public static Map<String, String> parseSchool(String rawData) {\n+        String HTML = parseSchoolSubject(rawData);\n+        List<String> schools = new ArrayList<>();\n+        List<String> descriptions = new ArrayList<>();\n+        Map<String, String> map = new HashMap<>();\n+        String output = HTML.substring(HTML.lastIndexOf(\"acad_groups\"), HTML.indexOf(\"nyuSchoolsUrl\"));\n+        output = output.substring(output.indexOf(\"[\") + 1, output.lastIndexOf(\"]\"));\n+        String[] outputs = output.split(\",\");\n+        for(String value : outputs) {\n+            if(value.contains(\"acad_group\")) {",
        "path": "src/main/java/services/ParseSchoolSubjects.java",
        "position": 48,
        "original_position": 48,
        "commit_id": "9dec089a4af7f2856e6bdf705ede9dec3cf90389",
        "original_commit_id": "9dec089a4af7f2856e6bdf705ede9dec3cf90389",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We could probably improve perf by combining this forloop with the one on line 55. It's not that important though, I can accept without a fix.",
        "created_at": "2020-01-21T18:09:34Z",
        "updated_at": "2020-01-21T18:18:36Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/26#discussion_r369159530",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/26",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/369159530"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/26#discussion_r369159530"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/369160705",
        "pull_request_review_id": 346083969,
        "id": 369160705,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MDcwNQ==",
        "diff_hunk": "@@ -67,10 +67,10 @@ SectionAttribute parse(@NotNull String rawData)\n       maxUnits = Float.parseFloat(units.split(\" \")[0]);\n     }\n     courseName += secData.containsKey(\"Topic\") ? \" \" + secData.get(\"Topic\") : \"\";\n-    return new SectionAttribute(courseName, Integer.parseInt(secData.get(\"Class Number\")),\n-            SectionStatus.parseStatus(secData.get(\"Status\")), secData.get(\"Location\"), secData.get(\"Description\"),\n-            secData.get(\"Instruction Mode\"), secData.get(\"Instructor(s)\"),\n-            minUnits, maxUnits, secData.get(\"Grading\"),\n-            secData.containsKey(\"Notes\") ? secData.get(\"Notes\") : \"See Description. None otherwise\", secData.get(\"Room\"));\n-  }\n+      return new SectionAttribute(courseName, Integer.parseInt(secData.get(\"Class Number\")),",
        "path": "src/main/java/services/ParseSection.java",
        "position": 10,
        "original_position": 10,
        "commit_id": "9dec089a4af7f2856e6bdf705ede9dec3cf90389",
        "original_commit_id": "9dec089a4af7f2856e6bdf705ede9dec3cf90389",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a style problem, probs should fix. Not big deal though, I'm working on style refactors right now, so I can just fix this there.",
        "created_at": "2020-01-21T18:12:04Z",
        "updated_at": "2020-01-21T18:18:37Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/26#discussion_r369160705",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/26",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/369160705"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/26#discussion_r369160705"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/369161285",
        "pull_request_review_id": 346083969,
        "id": 369161285,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MTI4NQ==",
        "diff_hunk": "@@ -64,4 +65,22 @@ internal class Parse : CliktCommand(name = \"parse\") {\n             outputFile.writeToFileOrStdout(JsonMapper.toJson(output, prettyPrint))\n         }\n     }\n+\n+    private class School : CliktCommand(name = \"school\") {",
        "path": "src/main/kotlin/cli/Parse.kt",
        "position": 22,
        "original_position": 22,
        "commit_id": "9dec089a4af7f2856e6bdf705ede9dec3cf90389",
        "original_commit_id": "9dec089a4af7f2856e6bdf705ede9dec3cf90389",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think we might want to break this into two separate commands. One for schools, and another for subjects. And then maybe one for both? Because I realize that they both use the same input data.",
        "created_at": "2020-01-21T18:13:23Z",
        "updated_at": "2020-01-21T18:18:37Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/26#discussion_r369161285",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/26",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/369161285"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/26#discussion_r369161285"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/365592719",
        "pull_request_review_id": 341583699,
        "id": 365592719,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU5MjcxOQ==",
        "diff_hunk": "@@ -0,0 +1,236 @@\n+package cli;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.swagger.v3.core.util.Json;\n+import models.SubjectCode;\n+import models.Term;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import picocli.CommandLine;\n+import scraping.QuerySubject;\n+import scraping.ScrapeCatalog;\n+import scraping.ScrapeSection;\n+import services.JsonMapper;\n+import services.ParseSchoolSubjects;\n+import services.Utils;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+\n+@CommandLine.Command(name = \"scrape\")\n+public class scrape {\n+    public static class Section implements Runnable {\n+        private Logger logger = LoggerFactory.getLogger(\"scrape.section\");\n+\n+        @CommandLine.Option(names = \"--term\", required = true)\n+        private String term;\n+\n+        @CommandLine.Option(names = \"--registrationNumber\", required = true)\n+        private String registrationNumber;\n+\n+        @CommandLine.Option(names = \"--outputFile\")\n+        private String outputFile;\n+\n+        @CommandLine.Option(names = \"--pretty\")\n+        private String pretty;\n+\n+        public void run() {\n+            long start = System.nanoTime();\n+            try {\n+                Utils.writeToFileOrStdOut(\n+                        JsonMapper.toJson(\n+                                ScrapeSection.scrapeFromSection(Term.fromId(Integer.parseInt(term))\n+                                        , Integer.parseInt(registrationNumber))\n+                        ),outputFile);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            } catch (ExecutionException e) {\n+                e.printStackTrace();\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            long end = System.nanoTime();\n+            double duration = (end - start) /  1000000000.0;\n+            logger.info(duration + \"seconds\");\n+        }\n+    }\n+\n+    public static class Sections implements Runnable {\n+        private Logger logger = LoggerFactory.getLogger(\"scrape.sections\");\n+\n+        @CommandLine.Option(names = \"--term\", required = true)\n+        private String term;\n+\n+        @CommandLine.Option(names = \"--school\")\n+        private String school;\n+\n+        @CommandLine.Option(names = \"--subject\")\n+        private String subject;\n+\n+        @CommandLine.Option(names = \"--outputFile\")\n+        private String outputFile;\n+\n+        @CommandLine.Option(names = \"--batchSize\")\n+        private String batchSize;\n+\n+        @CommandLine.Option(names = \"--pretty\")\n+        private String pretty;\n+\n+        public void run() {\n+            long start = System.nanoTime();\n+            String school = this.school;\n+            String subject = this.subject;\n+            Term term = Term.fromId(Integer.parseInt(this.term));\n+            if(school != null && subject != null) {",
        "path": "src/main/java/cli/scrape.java",
        "position": null,
        "original_position": 83,
        "commit_id": "1c3924147dc2049d872cfce648f3e33190dcc841",
        "original_commit_id": "64f8c795d92f85a7224b2e144f9e0f8356a42612",
        "user": {
            "login": "NicholasLYang",
            "id": 7357863,
            "node_id": "MDQ6VXNlcjczNTc4NjM=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/7357863?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/NicholasLYang",
            "html_url": "https://github.com/NicholasLYang",
            "followers_url": "https://api.github.com/users/NicholasLYang/followers",
            "following_url": "https://api.github.com/users/NicholasLYang/following{/other_user}",
            "gists_url": "https://api.github.com/users/NicholasLYang/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/NicholasLYang/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/NicholasLYang/subscriptions",
            "organizations_url": "https://api.github.com/users/NicholasLYang/orgs",
            "repos_url": "https://api.github.com/users/NicholasLYang/repos",
            "events_url": "https://api.github.com/users/NicholasLYang/events{/privacy}",
            "received_events_url": "https://api.github.com/users/NicholasLYang/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe we could run the code through an autoformatter\r\nhttps://github.com/google/google-java-format?",
        "created_at": "2020-01-12T15:58:46Z",
        "updated_at": "2020-01-21T22:42:21Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/27#discussion_r365592719",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/27",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/365592719"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/27#discussion_r365592719"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/27"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/370763996",
        "pull_request_review_id": 348123777,
        "id": 370763996,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2Mzk5Ng==",
        "diff_hunk": "@@ -18,23 +18,40 @@\n    @Todo: Add annotation for parameter. Fix the method to parse\n    @Help: Add annotations, comments to code\n */\n-@CommandLine.Command(name = \"parse\")\n+@CommandLine.Command(\n+        name = \"query\", synopsisSubcommandLabel = \"(catalog | section | school)\",",
        "path": "src/main/java/cli/parse.java",
        "position": null,
        "original_position": 6,
        "commit_id": "6cb01fc077432e0758d7cfc921d70de6c827e96b",
        "original_commit_id": "d05db4ea4a2da0bcee4a6f4d03547b497655a461",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this should be parse, not query.",
        "created_at": "2020-01-24T17:56:19Z",
        "updated_at": "2020-01-24T20:23:10Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/30#discussion_r370763996",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/30",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/370763996"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/30#discussion_r370763996"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/30"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/370766143",
        "pull_request_review_id": 348123777,
        "id": 370766143,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NjE0Mw==",
        "diff_hunk": "@@ -13,28 +15,61 @@\n    @Todo: Add annotation for parameter. Fix the method to parse\n    @Help: Add annotations, comments to code\n */\n-@CommandLine.Command(name = \"scrape\")\n-public class scrape {\n+@CommandLine.Command(\n+        name = \"scrape\", synopsisSubcommandLabel = \"(catalog | section | sections | school)\",",
        "path": "src/main/java/cli/scrape.java",
        "position": null,
        "original_position": 16,
        "commit_id": "6cb01fc077432e0758d7cfc921d70de6c827e96b",
        "original_commit_id": "d05db4ea4a2da0bcee4a6f4d03547b497655a461",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do you think it makes sense to have both `section` and `sections` ? We might want to just get rid of `section` and make `sections` able to do singular sections without batching. Like if I do `schedge scrape sections --term 1204 --registrationNumber 120442` it should have the same behavior as `schedge scrape sections --term 1204 --registrationNumber 120442` has right now. What do you think?",
        "created_at": "2020-01-24T18:01:41Z",
        "updated_at": "2020-01-24T20:23:10Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/30#discussion_r370766143",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/30",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/370766143"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/30#discussion_r370766143"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/30"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/370767003",
        "pull_request_review_id": 348123777,
        "id": 370767003,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzAwMw==",
        "diff_hunk": "@@ -105,61 +160,83 @@ public void run() {\n     }\n   }\n \n+\n+  @CommandLine.Command(\n+          name = \"catalog\",\n+          sortOptions = false,\n+          headerHeading = \"Usage:%n%n\",\n+          synopsisHeading = \"%n\",\n+          descriptionHeading = \"%nDescription:%n%n\",\n+          parameterListHeading = \"%nParameters:%n\",\n+          optionListHeading = \"%nOptions:%n\",\n+          header = \"Scrape catalog\",\n+          description = \"Scrape catalog based on term, subject codes, or school for one or multiple subjects/schools\")\n   public static class Catalog implements Runnable {\n     private Logger logger = LoggerFactory.getLogger(\"scrape.catalog\");\n \n-    @CommandLine.Option(names = \"--term\", required = true) private String term;\n-\n-    @CommandLine.Option(names = \"--school\") private String school;\n-\n-    @CommandLine.Option(names = \"--subject\") private String subject;\n-\n-    @CommandLine.Option(names = \"--outputFile\") private String outputFile;\n-\n-    @CommandLine.Option(names = \"--batchSize\") private Integer batchSize;\n-\n-    @CommandLine.Option(names = \"--pretty\") private String pretty;\n+    @CommandLine.Option(names = \"--term\", description = \"term to query from\") private Integer term;\n+    @CommandLine.Option(names = \"--semester\", description = \"semester: ja, sp, su, or fa\") private String semester;\n+    @CommandLine.Option(names = \"--year\", description = \"year to scrape from\") private Integer year;\n+    @CommandLine.Option(names = \"--school\", description = \"school code: UA, UT, UY, etc\") private String school;\n+    @CommandLine.Option(names = \"--subject\", description = \"subject code: CSCI(Computer Science), MA(Math), etc\")\n+    private String subject;\n+    @CommandLine.Option(names = \"--batch-size\", description = \"batch size if query more than one catalog\") private Integer batchSize;\n+    @CommandLine.Option(names = \"--output-file\", description = \"output file to write to\") private String outputFile;\n+    @CommandLine.Option(names = \"--pretty\", defaultValue = \"false\" ) private String pretty;\n \n     public void run() {\n       long start = System.nanoTime();\n-      String school = this.school;\n-      String subject = this.subject;\n-      Term term = Term.fromId(Integer.parseInt(this.term));\n+      Term term;\n+      if (this.term == null && this.semester == null && this.year == null) {\n+        throw new IllegalArgumentException(\n+            \"Must provide at least one. Either --term OR --semester AND --year\");\n+      } else if (this.term == null) {\n+        if(this.semester == null || this.year == null) {\n+          throw new IllegalArgumentException(\n+                  \"Must provide both --semester AND --year\"\n+          );\n+        }\n+        term = new Term(Semester.fromCode(this.semester), year);\n+      } else {\n+        term = Term.fromId(this.term);\n+      }\n       if (school == null) {\n         if (subject != null) {\n           throw new IllegalArgumentException(\n               \"--subject doesn't make sense if school is null\");\n         }\n-        try {\n-          UtilsKt.writeToFileOrStdout(\n-              JsonMapper.toJson(Scrape_catalogKt.scrapeFromCatalog(\n-                                    term, SubjectCode.allSubjects(), batchSize),\n-                                Boolean.parseBoolean(pretty)),\n-              outputFile);\n-        } catch (IOException e) {\n-          e.printStackTrace();\n-        }\n+        Scrape_catalogKt\n+            .scrapeFromCatalog(term, SubjectCode.allSubjects(), batchSize)\n+            .iterator()\n+            .forEachRemaining(value -> {\n+              try {\n+                System.out.println(\n+                    JsonMapper.toJson(value, Boolean.parseBoolean(pretty)));\n+              } catch (JsonProcessingException e) {\n+                logger.warn(e.getMessage());\n+              }\n+            });\n       } else if (subject == null) {\n-        try {\n-          UtilsKt.writeToFileOrStdout(\n-              JsonMapper.toJson(Scrape_catalogKt.scrapeAllFromCatalog(\n-                                    term, school, batchSize),\n-                                Boolean.parseBoolean(pretty)),\n-              outputFile);\n-        } catch (IOException e) {\n-          logger.warn(e.getMessage());\n-        }\n+        Scrape_catalogKt.scrapeAllFromCatalog(term, school, batchSize)\n+            .iterator()\n+            .forEachRemaining(value -> {\n+              try {\n+                System.out.println(\n+                    JsonMapper.toJson(value, Boolean.parseBoolean(pretty)));\n+              } catch (JsonProcessingException e) {\n+                e.printStackTrace();\n+              }\n+            });\n       } else {\n         if (batchSize != null) {\n           throw new IllegalArgumentException(\n               \"Batch size doesn't make sense when only doing on query\");\n         }\n         try {\n-          UtilsKt.writeToFileOrStdout(\n+          System.out.println(",
        "path": "src/main/java/cli/scrape.java",
        "position": null,
        "original_position": 282,
        "commit_id": "6cb01fc077432e0758d7cfc921d70de6c827e96b",
        "original_commit_id": "d05db4ea4a2da0bcee4a6f4d03547b497655a461",
        "user": {
            "login": "A1Liu",
            "id": 3584830,
            "node_id": "MDQ6VXNlcjM1ODQ4MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3584830?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/A1Liu",
            "html_url": "https://github.com/A1Liu",
            "followers_url": "https://api.github.com/users/A1Liu/followers",
            "following_url": "https://api.github.com/users/A1Liu/following{/other_user}",
            "gists_url": "https://api.github.com/users/A1Liu/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/A1Liu/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/A1Liu/subscriptions",
            "organizations_url": "https://api.github.com/users/A1Liu/orgs",
            "repos_url": "https://api.github.com/users/A1Liu/repos",
            "events_url": "https://api.github.com/users/A1Liu/events{/privacy}",
            "received_events_url": "https://api.github.com/users/A1Liu/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could you change this back to `writeToFileOrStdout` ? We want to be able to output to file if necessary",
        "created_at": "2020-01-24T18:03:45Z",
        "updated_at": "2020-01-24T20:23:10Z",
        "html_url": "https://github.com/BUGS-NYU/schedge/pull/30#discussion_r370767003",
        "pull_request_url": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/30",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/comments/370767003"
            },
            "html": {
                "href": "https://github.com/BUGS-NYU/schedge/pull/30#discussion_r370767003"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BUGS-NYU/schedge/pulls/30"
            }
        }
    }
]