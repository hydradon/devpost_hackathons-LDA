[
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/324400303",
        "pull_request_review_id": 288292446,
        "id": 324400303,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQwMDMwMw==",
        "diff_hunk": "@@ -0,0 +1,100 @@\n+/* eslint-disable no-unused-vars */\n+/* eslint-disable radix */\n+/* eslint-disable react/prop-types */\n+import React, { Component } from 'react';\n+import { Dimensions, Image, StyleSheet, Text, TouchableOpacity, View} from 'react-native';\n+import { AnimatedCircularProgress } from 'react-native-circular-progress';\n+import BN from 'bn.js';\n+\n+export default class VoteBreakdown extends Component {\n+  constructor() {\n+    super();\n+  }\n+  calculatePercentage(totalReputation, reputation){\n+    let percentage = 0;\n+    totalReputation = new BN(totalReputation);\n+    reputation = new BN(reputation);\n+    if (totalReputation.gtn(0)) {\n+      const percentageBn = reputation.muln(10000).div(totalReputation);\n+      if (percentageBn.bitLength() > 53) {\n+        // eslint-disable-next-line no-console\n+        console.log(\"percentage is too large to be computed as a number\");",
        "path": "src/Apps/DAOstack/Components/VoteBreakdown.js",
        "position": null,
        "original_position": 21,
        "commit_id": "350a873c6978164963363ca7f69bf728c2f714a5",
        "original_commit_id": "3fcc9b1c2a1b4893350dfd84f889e497164eeee2",
        "user": {
            "login": "markspereira",
            "id": 17998913,
            "node_id": "MDQ6VXNlcjE3OTk4OTEz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17998913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markspereira",
            "html_url": "https://github.com/markspereira",
            "followers_url": "https://api.github.com/users/markspereira/followers",
            "following_url": "https://api.github.com/users/markspereira/following{/other_user}",
            "gists_url": "https://api.github.com/users/markspereira/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markspereira/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markspereira/subscriptions",
            "organizations_url": "https://api.github.com/users/markspereira/orgs",
            "repos_url": "https://api.github.com/users/markspereira/repos",
            "events_url": "https://api.github.com/users/markspereira/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markspereira/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If you could remove this console.log from the PR when you get a chance",
        "created_at": "2019-09-13T23:48:57Z",
        "updated_at": "2019-09-14T02:36:01Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/24#discussion_r324400303",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/24",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/324400303"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/24#discussion_r324400303"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/24"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/341138287",
        "pull_request_review_id": 309881166,
        "id": 341138287,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTEzODI4Nw==",
        "diff_hunk": "@@ -67,7 +67,7 @@ export default class WizardScreen extends React.Component {\n \n   async componentDidMount() {\n     try {\n-      const {id, affinity, ascending, ascensionOpponent, currentDuel, maxPower, molded, nonce, power, ready} = this.props.navigation.state.params.wizard;",
        "path": "src/Apps/CheezeWizards/Screens/WizardScreen.js",
        "position": 4,
        "original_position": 4,
        "commit_id": "6081ea150153b428c1d8e779a4d9fc4707c1d8e2",
        "original_commit_id": "6081ea150153b428c1d8e779a4d9fc4707c1d8e2",
        "user": {
            "login": "jamesmorgan",
            "id": 110869,
            "node_id": "MDQ6VXNlcjExMDg2OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/110869?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesmorgan",
            "html_url": "https://github.com/jamesmorgan",
            "followers_url": "https://api.github.com/users/jamesmorgan/followers",
            "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
            "repos_url": "https://api.github.com/users/jamesmorgan/repos",
            "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This logic confused me @markspereira - I have followed the pattern to get it working but I think if this is to remove the additional values which are indexed based, we go do this in the service class and save the inline code here, meaning a wizard is always of a given structure. ",
        "created_at": "2019-10-31T13:36:13Z",
        "updated_at": "2019-10-31T13:36:13Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/34#discussion_r341138287",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/34",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/341138287"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/34#discussion_r341138287"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/34"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/341819586",
        "pull_request_review_id": 310780998,
        "id": 341819586,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTgxOTU4Ng==",
        "diff_hunk": "@@ -67,7 +67,7 @@ export default class WizardScreen extends React.Component {\n \n   async componentDidMount() {\n     try {\n-      const {id, affinity, ascending, ascensionOpponent, currentDuel, maxPower, molded, nonce, power, ready} = this.props.navigation.state.params.wizard;",
        "path": "src/Apps/CheezeWizards/Screens/WizardScreen.js",
        "position": 4,
        "original_position": 4,
        "commit_id": "6081ea150153b428c1d8e779a4d9fc4707c1d8e2",
        "original_commit_id": "6081ea150153b428c1d8e779a4d9fc4707c1d8e2",
        "user": {
            "login": "markspereira",
            "id": 17998913,
            "node_id": "MDQ6VXNlcjE3OTk4OTEz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17998913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markspereira",
            "html_url": "https://github.com/markspereira",
            "followers_url": "https://api.github.com/users/markspereira/followers",
            "following_url": "https://api.github.com/users/markspereira/following{/other_user}",
            "gists_url": "https://api.github.com/users/markspereira/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markspereira/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markspereira/subscriptions",
            "organizations_url": "https://api.github.com/users/markspereira/orgs",
            "repos_url": "https://api.github.com/users/markspereira/repos",
            "events_url": "https://api.github.com/users/markspereira/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markspereira/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep that's exactly what I tried to do. Let's move it into the service class that would be a lot better",
        "created_at": "2019-11-02T17:41:57Z",
        "updated_at": "2019-11-02T17:41:57Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/34#discussion_r341819586",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/34",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/341819586"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/34#discussion_r341819586"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/34"
            }
        },
        "in_reply_to_id": 341138287
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/342607941",
        "pull_request_review_id": 311791711,
        "id": 342607941,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjYwNzk0MQ==",
        "diff_hunk": "@@ -0,0 +1,135 @@\n+import db from '../../../AliceSDK/Socket/index';\n+\n+export default new class FirebaseService {\n+\n+    async allUsers() {",
        "path": "src/Apps/CheezeWizards/Services/FirebaseService.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "6dd56da3e8b3aa665fad4694149299796ef83be3",
        "original_commit_id": "1a679df8f0798e0f0ec79bf809686d4caa630bfb",
        "user": {
            "login": "jamesmorgan",
            "id": 110869,
            "node_id": "MDQ6VXNlcjExMDg2OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/110869?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesmorgan",
            "html_url": "https://github.com/jamesmorgan",
            "followers_url": "https://api.github.com/users/jamesmorgan/followers",
            "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
            "repos_url": "https://api.github.com/users/jamesmorgan/repos",
            "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Drop this if not used?",
        "created_at": "2019-11-05T14:56:06Z",
        "updated_at": "2019-11-05T15:15:30Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/36#discussion_r342607941",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/36",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/342607941"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/36#discussion_r342607941"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/36"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/342608513",
        "pull_request_review_id": 311792463,
        "id": 342608513,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjYwODUxMw==",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+/**\n+ * @format\n+ */\n+\n+import _ from 'lodash';\n+import firebaseService from \"../src/Apps/CheezeWizards/Services/FirebaseService\";\n+\n+import wizards from './data/wizards.data';\n+const owner1 = '0xA1b02d8c67b0FDCF4E379855868DeB470E169cfB';\n+const owner2 = '0xA1b02d8c67b0FDCF4E379855868DeB470E169401';\n+\n+test(\"allUsers should return all registered users\", async () => {\n+\n+    const users = await firebaseService.allUsers();\n+\n+    console.log('USERS >>>', users);\n+\n+    expect(users.length).toBeGreaterThan(0);\n+});\n+\n+async function getUpsertedWizards(network, upsertedWizardIds) {\n+    const allWizards = await firebaseService.allWizards(network);\n+    return _.sortBy(\n+        allWizards.filter(wizard => _.includes(upsertedWizardIds, wizard.id)),\n+        wizard => wizard.id\n+    );\n+}\n+\n+test('Can upsert online wizards with idempotentency', async () => {\n+    const network = 'rinkeby';\n+\n+    // Upsert the test data\n+    const wizardsToUpsert = _.sortBy(wizards, wizard => wizard.id);",
        "path": "__tests__/FirebaseService-test.js",
        "position": 33,
        "original_position": 33,
        "commit_id": "6dd56da3e8b3aa665fad4694149299796ef83be3",
        "original_commit_id": "1a679df8f0798e0f0ec79bf809686d4caa630bfb",
        "user": {
            "login": "andygray",
            "id": 1502550,
            "node_id": "MDQ6VXNlcjE1MDI1NTA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1502550?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andygray",
            "html_url": "https://github.com/andygray",
            "followers_url": "https://api.github.com/users/andygray/followers",
            "following_url": "https://api.github.com/users/andygray/following{/other_user}",
            "gists_url": "https://api.github.com/users/andygray/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andygray/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andygray/subscriptions",
            "organizations_url": "https://api.github.com/users/andygray/orgs",
            "repos_url": "https://api.github.com/users/andygray/repos",
            "events_url": "https://api.github.com/users/andygray/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andygray/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@vince0656 I think you can just use `_.sortBy(wizards, 'id')` for shorthand",
        "created_at": "2019-11-05T14:57:05Z",
        "updated_at": "2019-11-05T15:15:30Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/36#discussion_r342608513",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/36",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/342608513"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/36#discussion_r342608513"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/36"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/342611258",
        "pull_request_review_id": 311796032,
        "id": 342611258,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjYxMTI1OA==",
        "diff_hunk": "@@ -0,0 +1,77 @@\n+/**\n+ * @format\n+ */\n+\n+import _ from 'lodash';\n+import firebaseService from \"../src/Apps/CheezeWizards/Services/FirebaseService\";\n+\n+import wizards from './data/wizards.data';\n+const owner1 = '0xA1b02d8c67b0FDCF4E379855868DeB470E169cfB';\n+const owner2 = '0xA1b02d8c67b0FDCF4E379855868DeB470E169401';\n+\n+test(\"allUsers should return all registered users\", async () => {\n+\n+    const users = await firebaseService.allUsers();\n+\n+    console.log('USERS >>>', users);\n+\n+    expect(users.length).toBeGreaterThan(0);\n+});\n+\n+async function getUpsertedWizards(network, upsertedWizardIds) {\n+    const allWizards = await firebaseService.allWizards(network);\n+    return _.sortBy(\n+        allWizards.filter(wizard => _.includes(upsertedWizardIds, wizard.id)),\n+        wizard => wizard.id\n+    );\n+}\n+\n+test('Can upsert online wizards with idempotentency', async () => {\n+    const network = 'rinkeby';\n+\n+    // Upsert the test data\n+    const wizardsToUpsert = _.sortBy(wizards, wizard => wizard.id);\n+    await firebaseService.upsertWizards(network, wizardsToUpsert);\n+\n+    const upsertedWizardIds = wizardsToUpsert.map(wizard => wizard.id);\n+\n+    // Check the wizards have been upserted\n+    let upsertedWizards = await getUpsertedWizards(network, upsertedWizardIds);\n+    expect(upsertedWizards).toStrictEqual(wizardsToUpsert);\n+    expect(upsertedWizards.length).toBe(wizardsToUpsert.length);\n+\n+    // Check upsert is an idempotent operation\n+    await firebaseService.upsertWizards(network, wizardsToUpsert);\n+    upsertedWizards = await getUpsertedWizards(network, upsertedWizardIds);\n+    expect(upsertedWizards).toStrictEqual(wizardsToUpsert);\n+    expect(upsertedWizards.length).toBe(wizardsToUpsert.length);\n+});\n+\n+test(\"Can update wizard's online status\", async () =>  {\n+    // Ensure the firestore has test data\n+    const network = 'rinkeby';\n+    await firebaseService.upsertWizards(network, wizards);\n+\n+    // Pick a wizard and assert it's currently online\n+    const wizard = Object.assign({}, wizards[0]);\n+    expect(wizard.online).toBe(true);\n+\n+    const currentOnlineWizards = await firebaseService.getOnlineWizards(network);\n+    expect(currentOnlineWizards.filter(onlineWizard => onlineWizard.id === wizard.id).length).toBe(1);\n+\n+    // Update the wizard\n+    wizard.online = false;\n+    const wizardsToUpsert = [\n+        {\n+            id: wizard.id,\n+            online: wizard.online\n+        }\n+    ];\n+    await firebaseService.upsertWizards(network, wizardsToUpsert);\n+\n+    // Check the updated wizard is not returned as part of the online wizards\n+    const newOnlineWizards = await firebaseService.getOnlineWizards(network);\n+    expect(currentOnlineWizards.length - newOnlineWizards.length).toBe(1);",
        "path": "__tests__/FirebaseService-test.js",
        "position": 74,
        "original_position": 74,
        "commit_id": "6dd56da3e8b3aa665fad4694149299796ef83be3",
        "original_commit_id": "1a679df8f0798e0f0ec79bf809686d4caa630bfb",
        "user": {
            "login": "andygray",
            "id": 1502550,
            "node_id": "MDQ6VXNlcjE1MDI1NTA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1502550?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andygray",
            "html_url": "https://github.com/andygray",
            "followers_url": "https://api.github.com/users/andygray/followers",
            "following_url": "https://api.github.com/users/andygray/following{/other_user}",
            "gists_url": "https://api.github.com/users/andygray/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andygray/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andygray/subscriptions",
            "organizations_url": "https://api.github.com/users/andygray/orgs",
            "repos_url": "https://api.github.com/users/andygray/repos",
            "events_url": "https://api.github.com/users/andygray/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andygray/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "maybe add comment to explain - should be 1 less - took my a min to wrap my head around it",
        "created_at": "2019-11-05T15:01:41Z",
        "updated_at": "2019-11-05T15:15:30Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/36#discussion_r342611258",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/36",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/342611258"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/36#discussion_r342611258"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/36"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344165",
        "pull_request_review_id": 318282703,
        "id": 347344165,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzM0NDE2NQ==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    async getOnlineWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('online', '==', true)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": null,
        "original_position": 50,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "jamesmorgan",
            "id": 110869,
            "node_id": "MDQ6VXNlcjExMDg2OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/110869?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesmorgan",
            "html_url": "https://github.com/jamesmorgan",
            "followers_url": "https://api.github.com/users/jamesmorgan/followers",
            "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
            "repos_url": "https://api.github.com/users/jamesmorgan/repos",
            "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are these todos still valid?",
        "created_at": "2019-11-18T12:06:20Z",
        "updated_at": "2019-11-19T11:17:38Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344165",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344165"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344165"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344194",
        "pull_request_review_id": 318282743,
        "id": 347344194,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzM0NDE5NA==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": null,
        "original_position": 27,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "jamesmorgan",
            "id": 110869,
            "node_id": "MDQ6VXNlcjExMDg2OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/110869?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesmorgan",
            "html_url": "https://github.com/jamesmorgan",
            "followers_url": "https://api.github.com/users/jamesmorgan/followers",
            "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
            "repos_url": "https://api.github.com/users/jamesmorgan/repos",
            "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are these todos still valid?",
        "created_at": "2019-11-18T12:06:23Z",
        "updated_at": "2019-11-19T11:17:38Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344194",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344194"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344194"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344860",
        "pull_request_review_id": 318283590,
        "id": 347344860,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzM0NDg2MA==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    async getOnlineWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('online', '==', true)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    // Todo: should return an empty array if owner is not defined or not a valid address + associated test\n+    async getWizardsByOwner(network, owner) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('owner', '==', owner)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    async getChallengesByWizard(network, wizardId) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .doc(wizardId)\n+            .collection('duel')\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const challenges = [];\n+                snapshots.docs.forEach(doc => {\n+                    challenges.push({challengeId: doc.id, ...doc.data()});\n+                });\n+                return challenges;\n+            });\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should handle wizards being undefined / not an array as the map will fail + associated test\n+    // Todo: should guard against wizard.id being undefined + associated test\n+    async upsertWizards(network, wizards) {\n+\n+        checkValidNetwork(network);\n+\n+        return Promise.all(wizards.map((wizard) => {\n+            // /wizards/network/{networkID}/{wizardID}/\n+            return db\n+                .collection('wizards')\n+                .doc('network')\n+                .collection(network)\n+                .doc(wizard.id)\n+                .set(wizard, {\n+                    merge: true\n+                });\n+        }));\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should check params passed in valid + associated test\n+    // Todo: do we need to do ownership check that we're challenging someone else's wizard?\n+    async sendChallenge(network, {challengeId, challengingWizardId, otherWizardId}) {\n+\n+        checkValidNetwork(network);\n+\n+        // challenger data\n+        const challengerData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            otherWizardId,\n+            challengeAccepted: false,\n+            challenger: true,\n+        };\n+\n+        // challengee data\n+        const challengeeData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            challengingWizardId,\n+            commitmentHash: '',\n+            challengeAccepted: false,\n+            challenger: false,\n+        };\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengerDataRef = networkRef.doc(challengingWizardId).collection('duel').doc(challengeId);\n+        const challengeeDataRef = networkRef.doc(otherWizardId).collection('duel').doc(challengeId);\n+\n+        await db.runTransaction(t => {\n+            t.set(challengerDataRef, challengerData);\n+            t.set(challengeeDataRef, challengeeData);\n+            return Promise.resolve('done');\n+        });\n+    }\n+\n+    async acceptChallenge(network, {wizardId, challengeId, commitmentHash, currentDuel}) {\n+\n+        checkValidNetwork(network);\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengeRef = networkRef\n+            .doc(wizardId)\n+            .collection('duel')\n+            .doc(challengeId);\n+\n+        await db.runTransaction(t => {",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": 180,
        "original_position": 162,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "jamesmorgan",
            "id": 110869,
            "node_id": "MDQ6VXNlcjExMDg2OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/110869?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesmorgan",
            "html_url": "https://github.com/jamesmorgan",
            "followers_url": "https://api.github.com/users/jamesmorgan/followers",
            "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
            "repos_url": "https://api.github.com/users/jamesmorgan/repos",
            "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Nice work of transactionality boundaries \ud83d\udc4d ",
        "created_at": "2019-11-18T12:08:10Z",
        "updated_at": "2019-11-19T11:17:38Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344860",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344860"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344860"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344997",
        "pull_request_review_id": 318283781,
        "id": 347344997,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzM0NDk5Nw==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    async getOnlineWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('online', '==', true)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    // Todo: should return an empty array if owner is not defined or not a valid address + associated test\n+    async getWizardsByOwner(network, owner) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('owner', '==', owner)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    async getChallengesByWizard(network, wizardId) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .doc(wizardId)\n+            .collection('duel')\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const challenges = [];\n+                snapshots.docs.forEach(doc => {\n+                    challenges.push({challengeId: doc.id, ...doc.data()});\n+                });\n+                return challenges;\n+            });\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should handle wizards being undefined / not an array as the map will fail + associated test\n+    // Todo: should guard against wizard.id being undefined + associated test\n+    async upsertWizards(network, wizards) {\n+\n+        checkValidNetwork(network);\n+\n+        return Promise.all(wizards.map((wizard) => {\n+            // /wizards/network/{networkID}/{wizardID}/\n+            return db\n+                .collection('wizards')\n+                .doc('network')\n+                .collection(network)\n+                .doc(wizard.id)\n+                .set(wizard, {\n+                    merge: true\n+                });\n+        }));\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should check params passed in valid + associated test\n+    // Todo: do we need to do ownership check that we're challenging someone else's wizard?\n+    async sendChallenge(network, {challengeId, challengingWizardId, otherWizardId}) {\n+\n+        checkValidNetwork(network);\n+\n+        // challenger data\n+        const challengerData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            otherWizardId,\n+            challengeAccepted: false,\n+            challenger: true,\n+        };\n+\n+        // challengee data\n+        const challengeeData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            challengingWizardId,\n+            commitmentHash: '',\n+            challengeAccepted: false,\n+            challenger: false,\n+        };\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengerDataRef = networkRef.doc(challengingWizardId).collection('duel').doc(challengeId);\n+        const challengeeDataRef = networkRef.doc(otherWizardId).collection('duel').doc(challengeId);\n+\n+        await db.runTransaction(t => {\n+            t.set(challengerDataRef, challengerData);\n+            t.set(challengeeDataRef, challengeeData);\n+            return Promise.resolve('done');\n+        });\n+    }\n+\n+    async acceptChallenge(network, {wizardId, challengeId, commitmentHash, currentDuel}) {\n+\n+        checkValidNetwork(network);\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengeRef = networkRef\n+            .doc(wizardId)\n+            .collection('duel')\n+            .doc(challengeId);\n+\n+        await db.runTransaction(t => {\n+           return t.get(challengeRef).then(doc => {\n+               const challenge = doc.data();\n+               const challengerRef = networkRef.doc(challenge.challengingWizardId).collection('duel').doc(challengeId);\n+               return t.get(challengerRef).then(() => {\n+                   t.update(challengeRef, {\n+                       challengeAccepted: true,\n+                       commitmentHash,\n+                       currentDuel\n+                   });\n+\n+                   t.update(challengerRef, {challengeAccepted: true});\n+               });\n+           });\n+        });\n+    }\n+\n+    async allOutstandingChallenges(network, owner) {\n+        // TODO I need this in the stage\n+    }\n+\n+    async registerFirebaseMessagingTokenForEthAddress() {\n+\n+    }\n+\n+    // async registerWizardForDueling(network, {owner, wizard}) {",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": 201,
        "original_position": 187,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "jamesmorgan",
            "id": 110869,
            "node_id": "MDQ6VXNlcjExMDg2OQ==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/110869?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jamesmorgan",
            "html_url": "https://github.com/jamesmorgan",
            "followers_url": "https://api.github.com/users/jamesmorgan/followers",
            "following_url": "https://api.github.com/users/jamesmorgan/following{/other_user}",
            "gists_url": "https://api.github.com/users/jamesmorgan/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jamesmorgan/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jamesmorgan/subscriptions",
            "organizations_url": "https://api.github.com/users/jamesmorgan/orgs",
            "repos_url": "https://api.github.com/users/jamesmorgan/repos",
            "events_url": "https://api.github.com/users/jamesmorgan/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jamesmorgan/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ditch old code which is no longer needed",
        "created_at": "2019-11-18T12:08:34Z",
        "updated_at": "2019-11-19T11:17:39Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344997",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347344997"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347344997"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347390562",
        "pull_request_review_id": 318343185,
        "id": 347390562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzM5MDU2Mg==",
        "diff_hunk": "@@ -96,3 +123,39 @@ test.only(\"Can take all of an owner's wizards offline\", async () => {\n     expect(allWizardsOffline).toBe(true);\n });\n \n+test.only(\"Can issue a challenge successfully\", async () => {",
        "path": "__tests__/Apps/CheezeWizards/FirebaseService-test.js",
        "position": null,
        "original_position": 99,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "b4099ad50e9fc42b3895b171dfb8694a5a536a8e",
        "user": {
            "login": "andygray",
            "id": 1502550,
            "node_id": "MDQ6VXNlcjE1MDI1NTA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1502550?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/andygray",
            "html_url": "https://github.com/andygray",
            "followers_url": "https://api.github.com/users/andygray/followers",
            "following_url": "https://api.github.com/users/andygray/following{/other_user}",
            "gists_url": "https://api.github.com/users/andygray/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/andygray/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/andygray/subscriptions",
            "organizations_url": "https://api.github.com/users/andygray/orgs",
            "repos_url": "https://api.github.com/users/andygray/repos",
            "events_url": "https://api.github.com/users/andygray/events{/privacy}",
            "received_events_url": "https://api.github.com/users/andygray/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "drop `only`",
        "created_at": "2019-11-18T13:51:39Z",
        "updated_at": "2019-11-19T11:17:39Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347390562",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347390562"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347390562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347401000",
        "pull_request_review_id": 318356896,
        "id": 347401000,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzQwMTAwMA==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    async getOnlineWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('online', '==', true)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    // Todo: should return an empty array if owner is not defined or not a valid address + associated test\n+    async getWizardsByOwner(network, owner) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('owner', '==', owner)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    async getChallengesByWizard(network, wizardId) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .doc(wizardId)\n+            .collection('duel')\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const challenges = [];\n+                snapshots.docs.forEach(doc => {\n+                    challenges.push({challengeId: doc.id, ...doc.data()});\n+                });\n+                return challenges;\n+            });\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should handle wizards being undefined / not an array as the map will fail + associated test\n+    // Todo: should guard against wizard.id being undefined + associated test\n+    async upsertWizards(network, wizards) {\n+\n+        checkValidNetwork(network);\n+\n+        return Promise.all(wizards.map((wizard) => {\n+            // /wizards/network/{networkID}/{wizardID}/\n+            return db\n+                .collection('wizards')\n+                .doc('network')\n+                .collection(network)\n+                .doc(wizard.id)\n+                .set(wizard, {\n+                    merge: true\n+                });\n+        }));\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should check params passed in valid + associated test\n+    // Todo: do we need to do ownership check that we're challenging someone else's wizard?\n+    async sendChallenge(network, {challengeId, challengingWizardId, otherWizardId}) {\n+\n+        checkValidNetwork(network);\n+\n+        // challenger data\n+        const challengerData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            otherWizardId,\n+            challengeAccepted: false,\n+            challenger: true,\n+        };\n+\n+        // challengee data\n+        const challengeeData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            challengingWizardId,\n+            commitmentHash: '',\n+            challengeAccepted: false,\n+            challenger: false,\n+        };\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengerDataRef = networkRef.doc(challengingWizardId).collection('duel').doc(challengeId);\n+        const challengeeDataRef = networkRef.doc(otherWizardId).collection('duel').doc(challengeId);\n+\n+        await db.runTransaction(t => {\n+            t.set(challengerDataRef, challengerData);\n+            t.set(challengeeDataRef, challengeeData);\n+            return Promise.resolve('done');\n+        });\n+    }\n+\n+    async acceptChallenge(network, {wizardId, challengeId, commitmentHash, currentDuel}) {\n+\n+        checkValidNetwork(network);\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengeRef = networkRef\n+            .doc(wizardId)\n+            .collection('duel')\n+            .doc(challengeId);\n+\n+        await db.runTransaction(t => {\n+           return t.get(challengeRef).then(doc => {\n+               const challenge = doc.data();\n+               const challengerRef = networkRef.doc(challenge.challengingWizardId).collection('duel').doc(challengeId);\n+               return t.get(challengerRef).then(() => {\n+                   t.update(challengeRef, {\n+                       challengeAccepted: true,\n+                       commitmentHash,\n+                       currentDuel\n+                   });\n+\n+                   t.update(challengerRef, {challengeAccepted: true});\n+               });\n+           });\n+        });\n+    }\n+\n+    async allOutstandingChallenges(network, owner) {\n+        // TODO I need this in the stage\n+    }\n+\n+    async registerFirebaseMessagingTokenForEthAddress() {\n+\n+    }\n+\n+    // async registerWizardForDueling(network, {owner, wizard}) {",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": 201,
        "original_position": 187,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "vince0656",
            "id": 15893673,
            "node_id": "MDQ6VXNlcjE1ODkzNjcz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/15893673?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vince0656",
            "html_url": "https://github.com/vince0656",
            "followers_url": "https://api.github.com/users/vince0656/followers",
            "following_url": "https://api.github.com/users/vince0656/following{/other_user}",
            "gists_url": "https://api.github.com/users/vince0656/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vince0656/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vince0656/subscriptions",
            "organizations_url": "https://api.github.com/users/vince0656/orgs",
            "repos_url": "https://api.github.com/users/vince0656/repos",
            "events_url": "https://api.github.com/users/vince0656/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vince0656/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not sure about the comments - will need to speak with Andy about them",
        "created_at": "2019-11-18T14:11:15Z",
        "updated_at": "2019-11-19T11:17:39Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347401000",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347401000"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347401000"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        },
        "in_reply_to_id": 347344997
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347401161",
        "pull_request_review_id": 318357116,
        "id": 347401161,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzQwMTE2MQ==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    async getOnlineWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('online', '==', true)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    // Todo: should return an empty array if owner is not defined or not a valid address + associated test\n+    async getWizardsByOwner(network, owner) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('owner', '==', owner)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    async getChallengesByWizard(network, wizardId) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .doc(wizardId)\n+            .collection('duel')\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const challenges = [];\n+                snapshots.docs.forEach(doc => {\n+                    challenges.push({challengeId: doc.id, ...doc.data()});\n+                });\n+                return challenges;\n+            });\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should handle wizards being undefined / not an array as the map will fail + associated test\n+    // Todo: should guard against wizard.id being undefined + associated test\n+    async upsertWizards(network, wizards) {\n+\n+        checkValidNetwork(network);\n+\n+        return Promise.all(wizards.map((wizard) => {\n+            // /wizards/network/{networkID}/{wizardID}/\n+            return db\n+                .collection('wizards')\n+                .doc('network')\n+                .collection(network)\n+                .doc(wizard.id)\n+                .set(wizard, {\n+                    merge: true\n+                });\n+        }));\n+    }\n+\n+    // Todo: should handle network not being defined or invalid + associated test\n+    // Todo: should check params passed in valid + associated test\n+    // Todo: do we need to do ownership check that we're challenging someone else's wizard?\n+    async sendChallenge(network, {challengeId, challengingWizardId, otherWizardId}) {\n+\n+        checkValidNetwork(network);\n+\n+        // challenger data\n+        const challengerData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            otherWizardId,\n+            challengeAccepted: false,\n+            challenger: true,\n+        };\n+\n+        // challengee data\n+        const challengeeData = {\n+            currentDuel: '0x0000000000000000000000000000000000000000000000000000000000000000',\n+            challengingWizardId,\n+            commitmentHash: '',\n+            challengeAccepted: false,\n+            challenger: false,\n+        };\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengerDataRef = networkRef.doc(challengingWizardId).collection('duel').doc(challengeId);\n+        const challengeeDataRef = networkRef.doc(otherWizardId).collection('duel').doc(challengeId);\n+\n+        await db.runTransaction(t => {\n+            t.set(challengerDataRef, challengerData);\n+            t.set(challengeeDataRef, challengeeData);\n+            return Promise.resolve('done');\n+        });\n+    }\n+\n+    async acceptChallenge(network, {wizardId, challengeId, commitmentHash, currentDuel}) {\n+\n+        checkValidNetwork(network);\n+\n+        const networkRef = db.collection('wizards').doc('network').collection(network);\n+        const challengeRef = networkRef\n+            .doc(wizardId)\n+            .collection('duel')\n+            .doc(challengeId);\n+\n+        await db.runTransaction(t => {",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": 180,
        "original_position": 162,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "vince0656",
            "id": 15893673,
            "node_id": "MDQ6VXNlcjE1ODkzNjcz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/15893673?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vince0656",
            "html_url": "https://github.com/vince0656",
            "followers_url": "https://api.github.com/users/vince0656/followers",
            "following_url": "https://api.github.com/users/vince0656/following{/other_user}",
            "gists_url": "https://api.github.com/users/vince0656/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vince0656/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vince0656/subscriptions",
            "organizations_url": "https://api.github.com/users/vince0656/orgs",
            "repos_url": "https://api.github.com/users/vince0656/repos",
            "events_url": "https://api.github.com/users/vince0656/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vince0656/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah it was great to figure this out",
        "created_at": "2019-11-18T14:11:34Z",
        "updated_at": "2019-11-19T11:17:39Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347401161",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347401161"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347401161"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        },
        "in_reply_to_id": 347344860
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347411528",
        "pull_request_review_id": 318370985,
        "id": 347411528,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzQxMTUyOA==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test\n+    async getOnlineWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .where('online', '==', true)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": null,
        "original_position": 50,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "vince0656",
            "id": 15893673,
            "node_id": "MDQ6VXNlcjE1ODkzNjcz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/15893673?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vince0656",
            "html_url": "https://github.com/vince0656",
            "followers_url": "https://api.github.com/users/vince0656/followers",
            "following_url": "https://api.github.com/users/vince0656/following{/other_user}",
            "gists_url": "https://api.github.com/users/vince0656/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vince0656/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vince0656/subscriptions",
            "organizations_url": "https://api.github.com/users/vince0656/orgs",
            "repos_url": "https://api.github.com/users/vince0656/repos",
            "events_url": "https://api.github.com/users/vince0656/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vince0656/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll address these now",
        "created_at": "2019-11-18T14:30:33Z",
        "updated_at": "2019-11-19T11:17:39Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347411528",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347411528"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347411528"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        },
        "in_reply_to_id": 347344165
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347411640",
        "pull_request_review_id": 318371145,
        "id": 347411640,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzQxMTY0MA==",
        "diff_hunk": "@@ -0,0 +1,239 @@\n+import {db} from '../../../../AliceSDK/Firebase';\n+\n+import {checkValidNetwork} from '../../Utils/networkSplitter';\n+\n+export default new class FirebaseService {\n+    async getAllWizards(network) {\n+\n+        checkValidNetwork(network);\n+\n+        return db\n+            .collection('wizards')\n+            .doc('network')\n+            .collection(network)\n+            .get()\n+            .then(snapshots => {\n+                if (snapshots.empty) {\n+                    return [];\n+                }\n+                const wizards = [];\n+                snapshots.docs.forEach(doc => {\n+                    wizards.push(doc.data());\n+                });\n+                return wizards;\n+            });\n+    }\n+\n+    // Todo: should return an empty array if network is not defined or not a valid string + associated test",
        "path": "src/Apps/CheezeWizards/Services/Firebase/FirebaseService.js",
        "position": null,
        "original_position": 27,
        "commit_id": "0992c5815aa20a0134b68eb58baee7059e854377",
        "original_commit_id": "8033966e743a884f14fdf196c7e794eef794a58d",
        "user": {
            "login": "vince0656",
            "id": 15893673,
            "node_id": "MDQ6VXNlcjE1ODkzNjcz",
            "avatar_url": "https://avatars3.githubusercontent.com/u/15893673?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vince0656",
            "html_url": "https://github.com/vince0656",
            "followers_url": "https://api.github.com/users/vince0656/followers",
            "following_url": "https://api.github.com/users/vince0656/following{/other_user}",
            "gists_url": "https://api.github.com/users/vince0656/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vince0656/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vince0656/subscriptions",
            "organizations_url": "https://api.github.com/users/vince0656/orgs",
            "repos_url": "https://api.github.com/users/vince0656/repos",
            "events_url": "https://api.github.com/users/vince0656/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vince0656/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll address these now",
        "created_at": "2019-11-18T14:30:45Z",
        "updated_at": "2019-11-19T11:17:39Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347411640",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/37",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/347411640"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/37#discussion_r347411640"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/37"
            }
        },
        "in_reply_to_id": 347344194
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/364924166",
        "pull_request_review_id": 340767028,
        "id": 364924166,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDE2Ng==",
        "diff_hunk": "@@ -11,23 +11,48 @@ import ReactNativeHapticFeedback from 'react-native-haptic-feedback';\n import { AnimatedCircularProgress } from 'react-native-circular-progress';\n import makeBlockie from 'ethereum-blockies-base64';\n import Markdown from 'react-native-simple-markdown';\n-\n+import JoinModal from './JoinModal';\n import { Countdown, Proposer, Beneficiary, ContributionReward, VoteBreakdown } from './'\n import { Settings } from '../../../AliceSDK/Web3';\n \n const { height, width } = Dimensions.get('window');\n \n+const options = {\n+  enableVibrateFallback: true,\n+  ignoreAndroidSystemSettings: false,\n+};\n+\n export default class Proposal extends Component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       loading: true,\n       daos: [],\n+      modalVisible: false\n     };\n   }\n \n+  toggleJoinModal = () => {\n+    ReactNativeHapticFeedback.trigger('selection', options);\n+    this.setState({ modalVisible: !this.state.modalVisible });\n+  };\n+\n+  newProposal = () => {\n+    this.toggleJoinModal();\n+    this.props.navigation.navigate('DAOstack/NewProposal');",
        "path": "src/Apps/DAOstack/Components/Proposal.js",
        "position": null,
        "original_position": 33,
        "commit_id": "9bdbb89aa638ebefa243dc01e22df9902181a7ad",
        "original_commit_id": "a4fc834806a2e5115f46a25d8b6fa81635073007",
        "user": {
            "login": "markspereira",
            "id": 17998913,
            "node_id": "MDQ6VXNlcjE3OTk4OTEz",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17998913?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/markspereira",
            "html_url": "https://github.com/markspereira",
            "followers_url": "https://api.github.com/users/markspereira/followers",
            "following_url": "https://api.github.com/users/markspereira/following{/other_user}",
            "gists_url": "https://api.github.com/users/markspereira/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/markspereira/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/markspereira/subscriptions",
            "organizations_url": "https://api.github.com/users/markspereira/orgs",
            "repos_url": "https://api.github.com/users/markspereira/repos",
            "events_url": "https://api.github.com/users/markspereira/events{/privacy}",
            "received_events_url": "https://api.github.com/users/markspereira/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Running into an error after pressing the 'Join the DAO' button. because of an undefined backgroundColor prop not being passed to the NewProposal.js Component\r\n\r\nI included after line 41 -\r\n```\r\n    const { dao, backgroundColor } = this.props.navigation.state.params;\r\n    this.props.navigation.navigate('DAOstack/NewProposal', { dao, backgroundColor });\r\n```\r\n - and it fixed the error.\r\n\r\nNice touch with the background color change for the header to match the DAO!",
        "created_at": "2020-01-09T19:37:57Z",
        "updated_at": "2020-01-13T08:00:58Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/42#discussion_r364924166",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/42",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/364924166"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/42#discussion_r364924166"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/42"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/366331613",
        "pull_request_review_id": 342522971,
        "id": 366331613,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMzMTYxMw==",
        "diff_hunk": "@@ -1,16 +1,60 @@\n /* eslint-disable import/prefer-default-export */\n-import { ApolloClient, HttpLink, InMemoryCache } from 'apollo-boost';\n import {IPFSApiClient} from './ipfs-api'\n+import { ApolloClient } from 'apollo-client';\n+import { InMemoryCache } from 'apollo-cache-inmemory';\n+import { HttpLink } from 'apollo-link-http';\n+import { onError } from 'apollo-link-error';\n+import { ApolloLink, split } from 'apollo-link';\n+import { WebSocketLink } from 'apollo-link-ws';\n+import { getMainDefinition } from 'apollo-utilities';\n \n-const apolloClientConfig = {\n-  link: new HttpLink({\n-    uri: 'https://api.thegraph.com/subgraphs/name/daostack/v29_0',\n-    fetchOptions: {\n-      mode: 'no-cors',\n-    },\n-  }),\n-  cache: new InMemoryCache(),\n-};\n+const graphHttpLink = 'https://api.thegraph.com/subgraphs/name/daostack/v29_0_rinkeby';",
        "path": "src/Apps/DAOstack/Config/index.js",
        "position": null,
        "original_position": 21,
        "commit_id": "19358e08678f3bd3916d818bae37bb7c7659b196",
        "original_commit_id": "f876c0cba1bc1a8d29ac5982a257d6a205762136",
        "user": {
            "login": "Perseverance",
            "id": 5130509,
            "node_id": "MDQ6VXNlcjUxMzA1MDk=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/5130509?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Perseverance",
            "html_url": "https://github.com/Perseverance",
            "followers_url": "https://api.github.com/users/Perseverance/followers",
            "following_url": "https://api.github.com/users/Perseverance/following{/other_user}",
            "gists_url": "https://api.github.com/users/Perseverance/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Perseverance/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Perseverance/subscriptions",
            "organizations_url": "https://api.github.com/users/Perseverance/orgs",
            "repos_url": "https://api.github.com/users/Perseverance/repos",
            "events_url": "https://api.github.com/users/Perseverance/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Perseverance/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Lets remove the _rinkeby part on both of these",
        "created_at": "2020-01-14T13:17:58Z",
        "updated_at": "2020-01-14T13:31:59Z",
        "html_url": "https://github.com/alicedapp/AliceX/pull/43#discussion_r366331613",
        "pull_request_url": "https://api.github.com/repos/alicedapp/AliceX/pulls/43",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/comments/366331613"
            },
            "html": {
                "href": "https://github.com/alicedapp/AliceX/pull/43#discussion_r366331613"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/alicedapp/AliceX/pulls/43"
            }
        }
    }
]