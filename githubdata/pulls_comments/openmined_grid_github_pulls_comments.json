[
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/168985157",
        "pull_request_review_id": 97437618,
        "id": 168985157,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk4NTE1Nw==",
        "diff_hunk": "@@ -0,0 +1,122 @@\n+import os\n+import os.path\n+import errno\n+import codecs\n+import pickle\n+import numpy as np\n+import keras\n+\n+\n+# Below code sample is taken from https://github.com/pytorch/vision/blob/master/torchvision/datasets/mnist.py\n+class MNIST(object):\n+\turls = [\n+        'http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz',\n+        'http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz',\n+        'http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz',\n+        'http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz',\n+    ]\n+\traw_folder = 'raw'\n+\tprocessed_folder = 'processed'\n+\ttraining_file = 'training.pt'\n+\ttest_file = 'test.pt'\n+\n+\tdef __init__(self, root=\"./data\"):\n+            self.root = root\n+            if not self._check_exists():\n+                self.download()\n+\n+            self.train_data, self.train_labels = pickle.load( open(os.path.join(self.root, self.processed_folder, self.training_file), \"rb\"))\n+            self.test_data, self.test_labels = pickle.load( open(os.path.join(self.root, self.processed_folder, self.test_file), \"rb\"))\n+\n+\tdef download(self):\n+\t\t\"\"\"Download the MNIST data if it doesn't exist in processed_folder already.\"\"\"\n+\t\timport urllib.request\n+\t\timport gzip\n+\n+\t\tif self._check_exists():\n+\t\t\treturn\n+\n+\t\t# download files\n+\t\ttry:\n+\t\t\tos.makedirs(os.path.join(self.root, self.raw_folder))\n+\t\t\tos.makedirs(os.path.join(self.root, self.processed_folder))\n+\t\texcept OSError as e:\n+\t\t\tif e.errno == errno.EEXIST:\n+\t\t\t\tpass\n+\t\t\telse:\n+\t\t\t\traise\n+\n+\t\tfor url in self.urls:\n+\t\t\tprint('Downloading ' + url)\n+\t\t\tdata = urllib.request.urlopen(url)\n+\t\t\tfilename = url.rpartition('/')[2]\n+\t\t\tfile_path = os.path.join(self.root, self.raw_folder, filename)\n+\t\t\twith open(file_path, 'wb') as f:\n+\t\t\t\tf.write(data.read())\n+\t\t\twith open(file_path.replace('.gz', ''), 'wb') as out_f, \\\n+\t\t\t\tgzip.GzipFile(file_path) as zip_f:\n+\t\t\t\tout_f.write(zip_f.read())\n+\n+\t\t\tos.unlink(file_path)\n+\n+\t\t# process and save as torch files\n+\t\tprint('Processing...')\n+\t\ttraining_set = (\n+\t\t\tread_image_file(os.path.join(self.root, self.raw_folder, 'train-images-idx3-ubyte')),\n+\t\t\tkeras.utils.to_categorical(read_label_file(os.path.join(self.root, self.raw_folder, 'train-labels-idx1-ubyte')), 10)\n+\t\t\t)\n+\n+\t\ttest_set = (\n+\t\t\tread_image_file(os.path.join(self.root, self.raw_folder, 't10k-images-idx3-ubyte')),\n+\t\t\tkeras.utils.to_categorical(read_label_file(os.path.join(self.root, self.raw_folder, 't10k-labels-idx1-ubyte')), 10)\n+\t\t\t)\n+\t\twith open(os.path.join(self.root, self.processed_folder, self.training_file), 'wb') as f:\n+\t\t\tpickle.dump(training_set, f)\n+\t\twith open(os.path.join(self.root, self.processed_folder, self.test_file), 'wb') as f:\n+                        pickle.dump(test_set, f)\n+\t\tprint('Done!')\n+\tdef _check_exists(self):\n+\t\treturn os.path.exists(os.path.join(self.root, self.processed_folder, self.training_file)) and \\\n+\t\t\tos.path.exists(os.path.join(self.root, self.processed_folder, self.test_file))\n+\n+\n+def read_label_file(path):\n+    with open(path, 'rb') as f:\n+        data = f.read()\n+        assert get_int(data[:4]) == 2049\n+        length = get_int(data[4:8])\n+        parsed = np.frombuffer(data, dtype=np.uint8, offset=8)\n+        return parsed.reshape(length)\n+\n+\n+def read_image_file(path):\n+    with open(path, 'rb') as f:\n+        data = f.read()\n+        assert get_int(data[:4]) == 2051\n+        length = get_int(data[4:8])\n+        num_rows = get_int(data[8:12])\n+        num_cols = get_int(data[12:16])\n+        images = []\n+        parsed = np.frombuffer(data, dtype=np.uint8, offset=16)\n+        return parsed.reshape(length, num_rows * num_cols)\n+\n+\n+def get_int(b):\n+    return int(codecs.encode(b, 'hex'), 16)\n+\n+\n+def get_training_data(target):\n+\tif target == \"mnist\":",
        "path": "grid/adapter/adapter.py",
        "position": 109,
        "original_position": 109,
        "commit_id": "02acadd56c7f8b2054007ffeb4165a22ff8acda0",
        "original_commit_id": "02acadd56c7f8b2054007ffeb4165a22ff8acda0",
        "user": {
            "login": "jvmncs",
            "id": 7891333,
            "node_id": "MDQ6VXNlcjc4OTEzMzM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7891333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvmncs",
            "html_url": "https://github.com/jvmncs",
            "followers_url": "https://api.github.com/users/jvmncs/followers",
            "following_url": "https://api.github.com/users/jvmncs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvmncs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvmncs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvmncs/subscriptions",
            "organizations_url": "https://api.github.com/users/jvmncs/orgs",
            "repos_url": "https://api.github.com/users/jvmncs/repos",
            "events_url": "https://api.github.com/users/jvmncs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvmncs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Target here is task name, correct?",
        "created_at": "2018-02-19T04:09:55Z",
        "updated_at": "2018-02-19T04:13:27Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/27#discussion_r168985157",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/27",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/168985157"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/27#discussion_r168985157"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/27"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/168985273",
        "pull_request_review_id": 97437618,
        "id": 168985273,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk4NTI3Mw==",
        "diff_hunk": "@@ -17,15 +17,15 @@ def ipfs2keras(model_addr):\n     return deserialize_keras_model(model_bin)\n \n def serialize_keras_model(model):\n-    model.save('temp_model.h5')\n-    with open('temp_model.h5','rb') as f:\n+    model.save('mnist.h5')",
        "path": "grid/lib/utils.py",
        "position": 6,
        "original_position": 6,
        "commit_id": "02acadd56c7f8b2054007ffeb4165a22ff8acda0",
        "original_commit_id": "02acadd56c7f8b2054007ffeb4165a22ff8acda0",
        "user": {
            "login": "jvmncs",
            "id": 7891333,
            "node_id": "MDQ6VXNlcjc4OTEzMzM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7891333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvmncs",
            "html_url": "https://github.com/jvmncs",
            "followers_url": "https://api.github.com/users/jvmncs/followers",
            "following_url": "https://api.github.com/users/jvmncs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvmncs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvmncs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvmncs/subscriptions",
            "organizations_url": "https://api.github.com/users/jvmncs/orgs",
            "repos_url": "https://api.github.com/users/jvmncs/repos",
            "events_url": "https://api.github.com/users/jvmncs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvmncs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think this should have changed, it's supposed to be for general models.",
        "created_at": "2018-02-19T04:11:48Z",
        "updated_at": "2018-02-19T04:13:27Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/27#discussion_r168985273",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/27",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/168985273"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/27#discussion_r168985273"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/27"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/168985320",
        "pull_request_review_id": 97437618,
        "id": 168985320,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2ODk4NTMyMA==",
        "diff_hunk": "@@ -0,0 +1,122 @@\n+import os\n+import os.path\n+import errno\n+import codecs\n+import pickle\n+import numpy as np\n+import keras\n+\n+\n+# Below code sample is taken from https://github.com/pytorch/vision/blob/master/torchvision/datasets/mnist.py\n+class MNIST(object):\n+\turls = [\n+        'http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz',\n+        'http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz',\n+        'http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz',\n+        'http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz',\n+    ]\n+\traw_folder = 'raw'\n+\tprocessed_folder = 'processed'\n+\ttraining_file = 'training.pt'\n+\ttest_file = 'test.pt'\n+\n+\tdef __init__(self, root=\"./data\"):\n+            self.root = root\n+            if not self._check_exists():\n+                self.download()\n+\n+            self.train_data, self.train_labels = pickle.load( open(os.path.join(self.root, self.processed_folder, self.training_file), \"rb\"))\n+            self.test_data, self.test_labels = pickle.load( open(os.path.join(self.root, self.processed_folder, self.test_file), \"rb\"))\n+\n+\tdef download(self):\n+\t\t\"\"\"Download the MNIST data if it doesn't exist in processed_folder already.\"\"\"\n+\t\timport urllib.request\n+\t\timport gzip\n+\n+\t\tif self._check_exists():\n+\t\t\treturn\n+\n+\t\t# download files\n+\t\ttry:\n+\t\t\tos.makedirs(os.path.join(self.root, self.raw_folder))\n+\t\t\tos.makedirs(os.path.join(self.root, self.processed_folder))\n+\t\texcept OSError as e:\n+\t\t\tif e.errno == errno.EEXIST:\n+\t\t\t\tpass\n+\t\t\telse:\n+\t\t\t\traise\n+\n+\t\tfor url in self.urls:\n+\t\t\tprint('Downloading ' + url)\n+\t\t\tdata = urllib.request.urlopen(url)\n+\t\t\tfilename = url.rpartition('/')[2]\n+\t\t\tfile_path = os.path.join(self.root, self.raw_folder, filename)\n+\t\t\twith open(file_path, 'wb') as f:\n+\t\t\t\tf.write(data.read())\n+\t\t\twith open(file_path.replace('.gz', ''), 'wb') as out_f, \\\n+\t\t\t\tgzip.GzipFile(file_path) as zip_f:\n+\t\t\t\tout_f.write(zip_f.read())\n+\n+\t\t\tos.unlink(file_path)\n+\n+\t\t# process and save as torch files\n+\t\tprint('Processing...')\n+\t\ttraining_set = (\n+\t\t\tread_image_file(os.path.join(self.root, self.raw_folder, 'train-images-idx3-ubyte')),\n+\t\t\tkeras.utils.to_categorical(read_label_file(os.path.join(self.root, self.raw_folder, 'train-labels-idx1-ubyte')), 10)\n+\t\t\t)\n+\n+\t\ttest_set = (\n+\t\t\tread_image_file(os.path.join(self.root, self.raw_folder, 't10k-images-idx3-ubyte')),\n+\t\t\tkeras.utils.to_categorical(read_label_file(os.path.join(self.root, self.raw_folder, 't10k-labels-idx1-ubyte')), 10)\n+\t\t\t)\n+\t\twith open(os.path.join(self.root, self.processed_folder, self.training_file), 'wb') as f:\n+\t\t\tpickle.dump(training_set, f)\n+\t\twith open(os.path.join(self.root, self.processed_folder, self.test_file), 'wb') as f:\n+                        pickle.dump(test_set, f)\n+\t\tprint('Done!')\n+\tdef _check_exists(self):\n+\t\treturn os.path.exists(os.path.join(self.root, self.processed_folder, self.training_file)) and \\\n+\t\t\tos.path.exists(os.path.join(self.root, self.processed_folder, self.test_file))\n+\n+\n+def read_label_file(path):\n+    with open(path, 'rb') as f:\n+        data = f.read()\n+        assert get_int(data[:4]) == 2049\n+        length = get_int(data[4:8])\n+        parsed = np.frombuffer(data, dtype=np.uint8, offset=8)\n+        return parsed.reshape(length)\n+\n+\n+def read_image_file(path):\n+    with open(path, 'rb') as f:\n+        data = f.read()\n+        assert get_int(data[:4]) == 2051\n+        length = get_int(data[4:8])\n+        num_rows = get_int(data[8:12])\n+        num_cols = get_int(data[12:16])\n+        images = []\n+        parsed = np.frombuffer(data, dtype=np.uint8, offset=16)\n+        return parsed.reshape(length, num_rows * num_cols)\n+\n+\n+def get_int(b):\n+    return int(codecs.encode(b, 'hex'), 16)\n+\n+\n+def get_training_data(target):\n+\tif target == \"mnist\":",
        "path": "grid/adapter/adapter.py",
        "position": 109,
        "original_position": 109,
        "commit_id": "02acadd56c7f8b2054007ffeb4165a22ff8acda0",
        "original_commit_id": "02acadd56c7f8b2054007ffeb4165a22ff8acda0",
        "user": {
            "login": "jvmncs",
            "id": 7891333,
            "node_id": "MDQ6VXNlcjc4OTEzMzM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7891333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvmncs",
            "html_url": "https://github.com/jvmncs",
            "followers_url": "https://api.github.com/users/jvmncs/followers",
            "following_url": "https://api.github.com/users/jvmncs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvmncs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvmncs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvmncs/subscriptions",
            "organizations_url": "https://api.github.com/users/jvmncs/orgs",
            "repos_url": "https://api.github.com/users/jvmncs/repos",
            "events_url": "https://api.github.com/users/jvmncs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvmncs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm a little concerned that this isn't robust enough.  We can't be adding tasks to these functions for every dataset/task out there.",
        "created_at": "2018-02-19T04:12:58Z",
        "updated_at": "2018-02-19T04:13:27Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/27#discussion_r168985320",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/27",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/168985320"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/27#discussion_r168985320"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/27"
            }
        },
        "in_reply_to_id": 168985157
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/171615760",
        "pull_request_review_id": 100500020,
        "id": 171615760,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTYxNTc2MA==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+from coinbase.wallet.client import Client\n+\n+\n+class CoinbaseHelper():\n+    def __init__(self, api_key, api_secret):\n+        self.client = Client(api_key, api_secret)\n+\n+    def get_price(self, seconds):\n+\n+        price = self.client.get_spot_price(currency_pair='ETH-USD')\n+\n+        dollar_per_second = 0.00025\n+        ether_per_dollar = 1 / float(price['amount'])\n+        ether_price_per_second = ether_per_dollar * dollar_per_second\n+        final_price = ether_price_per_second * seconds\n+\n+        if final_price < 0.000001:\n+            print(\"SENDING 0.000001\")\n+            return 0.000001\n+\n+        print(f\"SENDING {final_price}\")\n+        return final_price\n+\n+    def send_ether(self, email, seconds):\n+        account = self.client.get_account(\"ETH\")\n+        amount_to_send = self.get_price(seconds)\n+        tx = account.send_money(to=email,\n+                                amount=self.get_price(seconds),",
        "path": "grid/lib/coinbase_helper.py",
        "position": null,
        "original_position": 28,
        "commit_id": "e500a0d20fff260c2ce84bda173f165433b092a9",
        "original_commit_id": "3918fd1e789e6ccc98ea06fd2ae806100c407d67",
        "user": {
            "login": "jvmncs",
            "id": 7891333,
            "node_id": "MDQ6VXNlcjc4OTEzMzM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7891333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvmncs",
            "html_url": "https://github.com/jvmncs",
            "followers_url": "https://api.github.com/users/jvmncs/followers",
            "following_url": "https://api.github.com/users/jvmncs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvmncs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvmncs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvmncs/subscriptions",
            "organizations_url": "https://api.github.com/users/jvmncs/orgs",
            "repos_url": "https://api.github.com/users/jvmncs/repos",
            "events_url": "https://api.github.com/users/jvmncs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvmncs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think you want `amount=amount_to_send` or to remove the `amount_to_send = ...` line above.",
        "created_at": "2018-03-01T16:31:45Z",
        "updated_at": "2018-03-01T16:40:38Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/89#discussion_r171615760",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/89",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/171615760"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/89#discussion_r171615760"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/89"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/171616853",
        "pull_request_review_id": 100501322,
        "id": 171616853,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTYxNjg1Mw==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+from coinbase.wallet.client import Client\n+\n+\n+class CoinbaseHelper():\n+    def __init__(self, api_key, api_secret):\n+        self.client = Client(api_key, api_secret)\n+\n+    def get_price(self, seconds):\n+\n+        price = self.client.get_spot_price(currency_pair='ETH-USD')\n+\n+        dollar_per_second = 0.00025\n+        ether_per_dollar = 1 / float(price['amount'])\n+        ether_price_per_second = ether_per_dollar * dollar_per_second\n+        final_price = ether_price_per_second * seconds\n+\n+        if final_price < 0.000001:\n+            print(\"SENDING 0.000001\")\n+            return 0.000001\n+\n+        print(f\"SENDING {final_price}\")\n+        return final_price\n+\n+    def send_ether(self, email, seconds):\n+        account = self.client.get_account(\"ETH\")\n+        amount_to_send = self.get_price(seconds)\n+        tx = account.send_money(to=email,\n+                                amount=self.get_price(seconds),",
        "path": "grid/lib/coinbase_helper.py",
        "position": null,
        "original_position": 28,
        "commit_id": "e500a0d20fff260c2ce84bda173f165433b092a9",
        "original_commit_id": "3918fd1e789e6ccc98ea06fd2ae806100c407d67",
        "user": {
            "login": "justin1121",
            "id": 1417322,
            "node_id": "MDQ6VXNlcjE0MTczMjI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1417322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/justin1121",
            "html_url": "https://github.com/justin1121",
            "followers_url": "https://api.github.com/users/justin1121/followers",
            "following_url": "https://api.github.com/users/justin1121/following{/other_user}",
            "gists_url": "https://api.github.com/users/justin1121/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/justin1121/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justin1121/subscriptions",
            "organizations_url": "https://api.github.com/users/justin1121/orgs",
            "repos_url": "https://api.github.com/users/justin1121/repos",
            "events_url": "https://api.github.com/users/justin1121/events{/privacy}",
            "received_events_url": "https://api.github.com/users/justin1121/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "yep good catch",
        "created_at": "2018-03-01T16:34:53Z",
        "updated_at": "2018-03-01T16:40:38Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/89#discussion_r171616853",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/89",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/171616853"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/89#discussion_r171616853"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/89"
            }
        },
        "in_reply_to_id": 171615760
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/171617963",
        "pull_request_review_id": 100502705,
        "id": 171617963,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTYxNzk2Mw==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+from coinbase.wallet.client import Client\n+\n+\n+class CoinbaseHelper():\n+    def __init__(self, api_key, api_secret):\n+        self.client = Client(api_key, api_secret)\n+\n+    def get_price(self, seconds):\n+\n+        price = self.client.get_spot_price(currency_pair='ETH-USD')\n+\n+        dollar_per_second = 0.00025\n+        ether_per_dollar = 1 / float(price['amount'])\n+        ether_price_per_second = ether_per_dollar * dollar_per_second\n+        final_price = ether_price_per_second * seconds\n+\n+        if final_price < 0.000001:\n+            print(\"SENDING 0.000001\")\n+            return 0.000001\n+\n+        print(f\"SENDING {final_price}\")\n+        return final_price\n+\n+    def send_ether(self, email, seconds):\n+        account = self.client.get_account(\"ETH\")\n+        amount_to_send = self.get_price(seconds)\n+        tx = account.send_money(to=email,\n+                                amount=self.get_price(seconds),",
        "path": "grid/lib/coinbase_helper.py",
        "position": null,
        "original_position": 28,
        "commit_id": "e500a0d20fff260c2ce84bda173f165433b092a9",
        "original_commit_id": "3918fd1e789e6ccc98ea06fd2ae806100c407d67",
        "user": {
            "login": "justin1121",
            "id": 1417322,
            "node_id": "MDQ6VXNlcjE0MTczMjI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1417322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/justin1121",
            "html_url": "https://github.com/justin1121",
            "followers_url": "https://api.github.com/users/justin1121/followers",
            "following_url": "https://api.github.com/users/justin1121/following{/other_user}",
            "gists_url": "https://api.github.com/users/justin1121/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/justin1121/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justin1121/subscriptions",
            "organizations_url": "https://api.github.com/users/justin1121/orgs",
            "repos_url": "https://api.github.com/users/justin1121/repos",
            "events_url": "https://api.github.com/users/justin1121/events{/privacy}",
            "received_events_url": "https://api.github.com/users/justin1121/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed!",
        "created_at": "2018-03-01T16:38:15Z",
        "updated_at": "2018-03-01T16:40:38Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/89#discussion_r171617963",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/89",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/171617963"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/89#discussion_r171617963"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/89"
            }
        },
        "in_reply_to_id": 171615760
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/173290341",
        "pull_request_review_id": 102456268,
        "id": 173290341,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzI5MDM0MQ==",
        "diff_hunk": "@@ -52,16 +51,6 @@ def save_adapter(addr):\n     adapter_bin = get_ipfs_api().cat(addr)\n     ensure_exists(f'{Path.home()}/grid/adapters/adapter.py', adapter_bin)\n \n-\n-def keras2ipfs(model):",
        "path": "grid/lib/utils.py",
        "position": 13,
        "original_position": 13,
        "commit_id": "0c0bc1ee75073f773000cf5828911afcb1dd055e",
        "original_commit_id": "e803cf0411d814c8e7a4ffd767f9b5a7fdabc26c",
        "user": {
            "login": "jvmncs",
            "id": 7891333,
            "node_id": "MDQ6VXNlcjc4OTEzMzM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7891333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvmncs",
            "html_url": "https://github.com/jvmncs",
            "followers_url": "https://api.github.com/users/jvmncs/followers",
            "following_url": "https://api.github.com/users/jvmncs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvmncs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvmncs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvmncs/subscriptions",
            "organizations_url": "https://api.github.com/users/jvmncs/orgs",
            "repos_url": "https://api.github.com/users/jvmncs/repos",
            "events_url": "https://api.github.com/users/jvmncs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvmncs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Technically, anything that doesn't require a function/class from either of the keras/torch modules could stay, including these functions.  But I think it's a good idea to move these to keras_utils as well, since we really won't need them if we're not loading keras in.  Any other file that uses them will need to import them from there -- that will require some other changes, please see comment in PR about that.",
        "created_at": "2018-03-08T21:05:23Z",
        "updated_at": "2018-03-08T22:57:29Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/121#discussion_r173290341",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/121",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/173290341"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/121#discussion_r173290341"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/121"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/173507424",
        "pull_request_review_id": 102715734,
        "id": 173507424,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzUwNzQyNA==",
        "diff_hunk": "@@ -7,55 +7,64 @@\n import sys\n import numpy as np\n \n-\n-def get_ipfs_api(ipfs_addr='127.0.0.1', port=5001, max_tries=10):\n+def get_ipfs_api(mode, ipfs_addr='127.0.0.1', port=5001, max_tries=25):\n     print(f'\\n{Fore.BLUE}UPDATE: {Style.RESET_ALL}Connecting to IPFS... this can take a few seconds...')\n \n+    api = _attempt_ipfs_connection(ipfs_addr, port, 0, 1)\n+    if api != False:\n+        id = get_id(mode, api)\n+        print(f'\\n{Fore.GREEN}SUCCESS: {Style.RESET_ALL}Connected!!! - My ID: {id}')\n+        return api\n+\n+    print(f'\\n{Fore.RED}ERROR: {Style.RESET_ALL}could not connect to IPFS.  Is your daemon running with pubsub support at {ipfs_addr} on port {port}? Let me try to start IPFS for you... (this will take ~15 seconds)')\n+    os.system('ipfs daemon --enable-pubsub-experiment  > ipfs.log 2> ipfs.log.err &')\n+\n+    api = _attempt_ipfs_connection(ipfs_addr, port, 0, max_tries, _write_dot)\n+    if api != False:\n+        id = get_id(mode, api)\n+        print(f'\\n{Fore.GREEN}SUCCESS: {Style.RESET_ALL}Connected!!! - My ID: {id}')\n+        return api\n+\n+    print(f'\\n{Fore.RED}ERROR: {Style.RESET_ALL}could not connect to IPFS. Failed after {max_tries} attempts... Is IPFS installed? Consult the README at https://github.com/OpenMined/Grid')\n+    sys.exit()\n+\n+def _write_dot():\n+    sys.stdout.write('.')\n+\n+def _attempt_ipfs_connection(ipfs_addr='127.0.0.1', port=5000, current_tries=0, max_tries=10, progress_fn=None):",
        "path": "grid/lib/utils.py",
        "position": null,
        "original_position": 30,
        "commit_id": "2d42f0690d63de4c552a2106ea0a2403c77beecc",
        "original_commit_id": "260014a3fd469f35c0a6419fee9f4c312423e71b",
        "user": {
            "login": "justin1121",
            "id": 1417322,
            "node_id": "MDQ6VXNlcjE0MTczMjI=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1417322?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/justin1121",
            "html_url": "https://github.com/justin1121",
            "followers_url": "https://api.github.com/users/justin1121/followers",
            "following_url": "https://api.github.com/users/justin1121/following{/other_user}",
            "gists_url": "https://api.github.com/users/justin1121/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/justin1121/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/justin1121/subscriptions",
            "organizations_url": "https://api.github.com/users/justin1121/orgs",
            "repos_url": "https://api.github.com/users/justin1121/repos",
            "events_url": "https://api.github.com/users/justin1121/events{/privacy}",
            "received_events_url": "https://api.github.com/users/justin1121/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "should this be 5001?",
        "created_at": "2018-03-09T16:57:57Z",
        "updated_at": "2018-03-09T17:00:26Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/126#discussion_r173507424",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/126",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/173507424"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/126#discussion_r173507424"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/126"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/173508174",
        "pull_request_review_id": 102716659,
        "id": 173508174,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MzUwODE3NA==",
        "diff_hunk": "@@ -7,55 +7,64 @@\n import sys\n import numpy as np\n \n-\n-def get_ipfs_api(ipfs_addr='127.0.0.1', port=5001, max_tries=10):\n+def get_ipfs_api(mode, ipfs_addr='127.0.0.1', port=5001, max_tries=25):\n     print(f'\\n{Fore.BLUE}UPDATE: {Style.RESET_ALL}Connecting to IPFS... this can take a few seconds...')\n \n+    api = _attempt_ipfs_connection(ipfs_addr, port, 0, 1)\n+    if api != False:\n+        id = get_id(mode, api)\n+        print(f'\\n{Fore.GREEN}SUCCESS: {Style.RESET_ALL}Connected!!! - My ID: {id}')\n+        return api\n+\n+    print(f'\\n{Fore.RED}ERROR: {Style.RESET_ALL}could not connect to IPFS.  Is your daemon running with pubsub support at {ipfs_addr} on port {port}? Let me try to start IPFS for you... (this will take ~15 seconds)')\n+    os.system('ipfs daemon --enable-pubsub-experiment  > ipfs.log 2> ipfs.log.err &')\n+\n+    api = _attempt_ipfs_connection(ipfs_addr, port, 0, max_tries, _write_dot)\n+    if api != False:\n+        id = get_id(mode, api)\n+        print(f'\\n{Fore.GREEN}SUCCESS: {Style.RESET_ALL}Connected!!! - My ID: {id}')\n+        return api\n+\n+    print(f'\\n{Fore.RED}ERROR: {Style.RESET_ALL}could not connect to IPFS. Failed after {max_tries} attempts... Is IPFS installed? Consult the README at https://github.com/OpenMined/Grid')\n+    sys.exit()\n+\n+def _write_dot():\n+    sys.stdout.write('.')\n+\n+def _attempt_ipfs_connection(ipfs_addr='127.0.0.1', port=5000, current_tries=0, max_tries=10, progress_fn=None):",
        "path": "grid/lib/utils.py",
        "position": null,
        "original_position": 30,
        "commit_id": "2d42f0690d63de4c552a2106ea0a2403c77beecc",
        "original_commit_id": "260014a3fd469f35c0a6419fee9f4c312423e71b",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Fixed!",
        "created_at": "2018-03-09T17:00:58Z",
        "updated_at": "2018-03-09T17:00:58Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/126#discussion_r173508174",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/126",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/173508174"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/126#discussion_r173508174"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/126"
            }
        },
        "in_reply_to_id": 173507424
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174638705",
        "pull_request_review_id": 104032436,
        "id": 174638705,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzODcwNQ==",
        "diff_hunk": "@@ -0,0 +1,54 @@\n+# for OpenMined/Grid ",
        "path": "install_scripts/Dockerfile_Ubuntu",
        "position": 1,
        "original_position": 1,
        "commit_id": "d183a47dd852627f0481889ebb28bb41a550fc14",
        "original_commit_id": "2451a7e4f1428b59f578fbb4f539b6965aec221b",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It looks like there are two duplicate files, one named `Dockerfile_Ubuntu` and one named `Dockerfile_ubuntu`. Could you remove one as their duplicates?",
        "created_at": "2018-03-14T23:19:43Z",
        "updated_at": "2018-03-15T02:44:53Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/127#discussion_r174638705",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/127",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174638705"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/127#discussion_r174638705"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/127"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174642996",
        "pull_request_review_id": 104037361,
        "id": 174642996,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDY0Mjk5Ng==",
        "diff_hunk": "@@ -0,0 +1,54 @@\n+# for OpenMined/Grid ",
        "path": "install_scripts/Dockerfile_Ubuntu",
        "position": 1,
        "original_position": 1,
        "commit_id": "d183a47dd852627f0481889ebb28bb41a550fc14",
        "original_commit_id": "2451a7e4f1428b59f578fbb4f539b6965aec221b",
        "user": {
            "login": "ppirrip",
            "id": 303327,
            "node_id": "MDQ6VXNlcjMwMzMyNw==",
            "avatar_url": "https://avatars1.githubusercontent.com/u/303327?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ppirrip",
            "html_url": "https://github.com/ppirrip",
            "followers_url": "https://api.github.com/users/ppirrip/followers",
            "following_url": "https://api.github.com/users/ppirrip/following{/other_user}",
            "gists_url": "https://api.github.com/users/ppirrip/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ppirrip/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ppirrip/subscriptions",
            "organizations_url": "https://api.github.com/users/ppirrip/orgs",
            "repos_url": "https://api.github.com/users/ppirrip/repos",
            "events_url": "https://api.github.com/users/ppirrip/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ppirrip/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This might be the time I lost a PR and the file and I have to redo it. Anyway, I removed the duplicated/outdated one. The current one (\"Dockerfile_Ubuntu\") is the current one and the only one in the repo.\r\n\r\nI have to said the one using Docker Compose (#136 ) seems more elegant, and I am open to suggestion to change. ",
        "created_at": "2018-03-14T23:47:19Z",
        "updated_at": "2018-03-15T02:44:53Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/127#discussion_r174642996",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/127",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174642996"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/127#discussion_r174642996"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/127"
            }
        },
        "in_reply_to_id": 174638705
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174635475",
        "pull_request_review_id": 104028678,
        "id": 174635475,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzNTQ3NQ==",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+version: \"2\"",
        "path": "docker-compose.gpu.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Instead of having two duplicate `docker-compose.yml` files, one that pulls in the `nvidia` device drivers and one that doesn't, perhaps we could leverage an override (https://docs.docker.com/compose/extends/#example-use-case)?\r\n\r\nFor example, we'd have the `docker-compose.yml` be the standard definition, then the `docker-compose.gpu.yml` would just be:\r\n\r\n```\r\nversion: \"2\"\r\n\r\nservices:\r\n  worker:\r\n    devices:\r\n      - /dev/nvidia0\r\n```\r\n\r\nThis way, it'd be much easier to maintain and simpler for those wishing to use `nvidia-docker-compose` as we'd just have to instruct them to use `nvidia-docker-compose -f docker-compose.yml -f docker-compose.gpu.yml` which could even get wrapped up in a script or Makefile.",
        "created_at": "2018-03-14T22:59:33Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174635475",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174635475"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174635475"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636288",
        "pull_request_review_id": 104028678,
        "id": 174636288,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzNjI4OA==",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+version: \"2\"\n+\n+services:\n+  ipfs:\n+    build:\n+      context: ./docker\n+      dockerfile: ./Dockerfile.ipfs\n+    container_name: ipfs_host\n+    tty: true\n+    privileged: true\n+    ports:\n+      - \"4001:4001\"\n+      - \"8080:8080\"\n+      - \"5001:5001\"\n+\n+  worker:\n+    build:\n+      context: ./docker\n+      dockerfile: ./Dockerfile.worker\n+      args:\n+        email: 'openmined@openmined.com'",
        "path": "docker-compose.yml",
        "position": null,
        "original_position": 21,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A small thing I thought about as I read through, these could be defined as environment variables with defaults (or not, which causes docker-compose to fail), instead of having them hard coded to `openmined@openmined.com` and `openmined` respectively.\r\n\r\nIt might be nice in future if we were to build a setup or install script that handled these things.",
        "created_at": "2018-03-14T23:04:21Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636288",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636288"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636288"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636505",
        "pull_request_review_id": 104028678,
        "id": 174636505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzNjUwNQ==",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+version: \"2\"",
        "path": "docker-compose.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there a specific reason you chose version 2 instead of 3?",
        "created_at": "2018-03-14T23:05:45Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636505",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636505"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636766",
        "pull_request_review_id": 104028678,
        "id": 174636766,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzNjc2Ng==",
        "diff_hunk": "@@ -0,0 +1,3 @@\n+FROM ipfs/go-ipfs",
        "path": "docker/Dockerfile.ipfs",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can override the start command in the docker-compose.yml file via the `command` block, meaning we wouldn't need our own image for it!\r\n\r\nhttps://docs.docker.com/compose/compose-file/#command",
        "created_at": "2018-03-14T23:07:24Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636766",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636766"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636766"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636974",
        "pull_request_review_id": 104028678,
        "id": 174636974,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzNjk3NA==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+FROM ufoym/deepo:all-py36",
        "path": "docker/Dockerfile.worker-gpu",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I might be mistaken but I can't find a difference between this image and `docker/Dockerfile.worker` that you've provided above. Is there a reason we need two?",
        "created_at": "2018-03-14T23:08:59Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636974",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174636974"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174636974"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174637552",
        "pull_request_review_id": 104028678,
        "id": 174637552,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzNzU1Mg==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+FROM ufoym/deepo:all-py36\n+\n+# setup user/mail\n+ARG name\n+ARG email\n+RUN mkdir ~/.openmined && \\\n+    echo '{\"email\": \"'${email}'\", \"name\": \"'${name}'\"}' > ~/.openmined/whoami.json\n+\n+# install libssl\n+RUN apt-get update &&\\\n+    apt-get install -y libssl-dev\n+\n+# install requirements\n+COPY ./requirements.txt /requirements.txt\n+RUN pip install -r requirements.txt\n+\n+\n+# jupyter\n+RUN pip install jupyter\n+COPY ./run_jupyter.sh /run_jupyter.sh\n+COPY ./jupyter_notebook_config.py /root/.jupyter/\n+RUN jupyter nbextension enable --py --sys-prefix widgetsnbextension && \\\n+    python -m ipykernel.kernelspec\n+\n+\n+ENV PASSWORD=tf",
        "path": "docker/Dockerfile.worker-gpu",
        "position": null,
        "original_position": 26,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there a reason we're setting a default password for the jupyter server? Would it be easier for user if there wasn't a password set at all? If we do need to set a default password, it'd be nice if it was documented in the README.md.",
        "created_at": "2018-03-14T23:12:17Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174637552",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174637552"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174637552"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174637881",
        "pull_request_review_id": 104028678,
        "id": 174637881,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzNzg4MQ==",
        "diff_hunk": "@@ -0,0 +1,11 @@\n+numpy",
        "path": "docker/requirements.txt",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we pull in the requirement.txt file from repository root? It'd be nice to only have one place to document/manage build dependencies.",
        "created_at": "2018-03-14T23:14:31Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174637881",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174637881"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174637881"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174638271",
        "pull_request_review_id": 104028678,
        "id": 174638271,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzODI3MQ==",
        "diff_hunk": "@@ -54,6 +55,11 @@ def _attempt_ipfs_connection(ipfs_addr,\n     try:\n         api = ipfsapi.connect(ipfs_addr, port)\n         return api\n+    except ConnectionError:",
        "path": "grid/lib/utils.py",
        "position": null,
        "original_position": 12,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Perhaps we could use an environment variable to override the default here? For example:\r\n\r\n```python\r\ndef get_ipfs_api(mode, ipfs_addr='127.0.0.1', port=5001, max_tries=25):\r\n  ipfs_addr = ipfs_addr if 'IPFS_ADDR' not in os.environ else os.environ['IPFS_ADDR']\r\n```\r\n\r\nThis way we don't have to try to connect twice, we fallback to the ipfs_addr we were provided and we can document it as a part of the log output in `get_ipfs_api` instead of as a fallback inside `_attempt_ipfs_connection`.",
        "created_at": "2018-03-14T23:17:04Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174638271",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174638271"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174638271"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174639427",
        "pull_request_review_id": 104033266,
        "id": 174639427,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDYzOTQyNw==",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+version: \"2\"",
        "path": "docker-compose.gpu.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It looks like the latest versions of docker-compose support the runtime parameter inside version 3 of `docker-compose.yml`: https://github.com/docker/compose/pull/5405\r\n\r\nI'd suggest we look into leveraging the latest nvidia support for docker.",
        "created_at": "2018-03-14T23:24:22Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174639427",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174639427"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174639427"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174635475
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174640627",
        "pull_request_review_id": 104034601,
        "id": 174640627,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDY0MDYyNw==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+FROM ufoym/deepo:py36-cpu",
        "path": "docker/Dockerfile.worker",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "ianlivingstone",
            "id": 191893,
            "node_id": "MDQ6VXNlcjE5MTg5Mw==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/191893?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ianlivingstone",
            "html_url": "https://github.com/ianlivingstone",
            "followers_url": "https://api.github.com/users/ianlivingstone/followers",
            "following_url": "https://api.github.com/users/ianlivingstone/following{/other_user}",
            "gists_url": "https://api.github.com/users/ianlivingstone/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ianlivingstone/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ianlivingstone/subscriptions",
            "organizations_url": "https://api.github.com/users/ianlivingstone/orgs",
            "repos_url": "https://api.github.com/users/ianlivingstone/repos",
            "events_url": "https://api.github.com/users/ianlivingstone/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ianlivingstone/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there a reason you're using the same image for the notebook and the worker instead of two separate images or a shared base image?",
        "created_at": "2018-03-14T23:31:59Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174640627",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174640627"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174640627"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174766495",
        "pull_request_review_id": 104181888,
        "id": 174766495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDc2NjQ5NQ==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+FROM ufoym/deepo:all-py36\n+\n+# setup user/mail\n+ARG name\n+ARG email\n+RUN mkdir ~/.openmined && \\\n+    echo '{\"email\": \"'${email}'\", \"name\": \"'${name}'\"}' > ~/.openmined/whoami.json\n+\n+# install libssl\n+RUN apt-get update &&\\\n+    apt-get install -y libssl-dev\n+\n+# install requirements\n+COPY ./requirements.txt /requirements.txt\n+RUN pip install -r requirements.txt\n+\n+\n+# jupyter\n+RUN pip install jupyter\n+COPY ./run_jupyter.sh /run_jupyter.sh\n+COPY ./jupyter_notebook_config.py /root/.jupyter/\n+RUN jupyter nbextension enable --py --sys-prefix widgetsnbextension && \\\n+    python -m ipykernel.kernelspec\n+\n+\n+ENV PASSWORD=tf",
        "path": "docker/Dockerfile.worker-gpu",
        "position": null,
        "original_position": 26,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "maschinensehen",
            "id": 20043662,
            "node_id": "MDQ6VXNlcjIwMDQzNjYy",
            "avatar_url": "https://avatars3.githubusercontent.com/u/20043662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maschinensehen",
            "html_url": "https://github.com/maschinensehen",
            "followers_url": "https://api.github.com/users/maschinensehen/followers",
            "following_url": "https://api.github.com/users/maschinensehen/following{/other_user}",
            "gists_url": "https://api.github.com/users/maschinensehen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maschinensehen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maschinensehen/subscriptions",
            "organizations_url": "https://api.github.com/users/maschinensehen/orgs",
            "repos_url": "https://api.github.com/users/maschinensehen/repos",
            "events_url": "https://api.github.com/users/maschinensehen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maschinensehen/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The newer jupyter versions default to using a login prompt with password. In order to get rid off the login screen and passwords, you can add `c.NotebookApp.token = \"\"` to `/etc/jupyter/jupyter_notebook_config.py`.",
        "created_at": "2018-03-15T12:35:34Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174766495",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174766495"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174766495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174637552
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174768734",
        "pull_request_review_id": 104184567,
        "id": 174768734,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDc2ODczNA==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+FROM ufoym/deepo:all-py36",
        "path": "docker/Dockerfile.worker-gpu",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "maschinensehen",
            "id": 20043662,
            "node_id": "MDQ6VXNlcjIwMDQzNjYy",
            "avatar_url": "https://avatars3.githubusercontent.com/u/20043662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maschinensehen",
            "html_url": "https://github.com/maschinensehen",
            "followers_url": "https://api.github.com/users/maschinensehen/followers",
            "following_url": "https://api.github.com/users/maschinensehen/following{/other_user}",
            "gists_url": "https://api.github.com/users/maschinensehen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maschinensehen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maschinensehen/subscriptions",
            "organizations_url": "https://api.github.com/users/maschinensehen/orgs",
            "repos_url": "https://api.github.com/users/maschinensehen/repos",
            "events_url": "https://api.github.com/users/maschinensehen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maschinensehen/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "IMHO the base image is an ugly piece of a dockerfile. It has a single `RUN` statement to run all the package installation commands, be it `apt-get`, `pip install`, `git clone`... for each and every software artifact that is installed in the container... (see: https://github.com/ufoym/deepo/blob/master/docker/Dockerfile.all-py27) this approach fundamentally neglects the philosophy of layered dockerfiles... thus everytime a `docker build` fails because of any small issue during software installation, everything that has been done before in the build, is thrown away... also it never removes unnecessary temporary data like `rm -rf .git` after every `git clone` or `rm -rf .cache` after every `pip install`... thus this docker image becomes unnecessarily bloated...",
        "created_at": "2018-03-15T12:45:16Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174768734",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174768734"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174768734"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174636974
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174770939",
        "pull_request_review_id": 104187309,
        "id": 174770939,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDc3MDkzOQ==",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+version: \"2\"",
        "path": "docker-compose.gpu.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "maschinensehen",
            "id": 20043662,
            "node_id": "MDQ6VXNlcjIwMDQzNjYy",
            "avatar_url": "https://avatars3.githubusercontent.com/u/20043662?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maschinensehen",
            "html_url": "https://github.com/maschinensehen",
            "followers_url": "https://api.github.com/users/maschinensehen/followers",
            "following_url": "https://api.github.com/users/maschinensehen/following{/other_user}",
            "gists_url": "https://api.github.com/users/maschinensehen/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maschinensehen/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maschinensehen/subscriptions",
            "organizations_url": "https://api.github.com/users/maschinensehen/orgs",
            "repos_url": "https://api.github.com/users/maschinensehen/repos",
            "events_url": "https://api.github.com/users/maschinensehen/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maschinensehen/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should definetely make use of `nvidia-docker` only. Adding `devices: /dev/nvidia0` to `docker-compose.yml` is a bad practice and reduces portability. From the best practice guide of NVidia (http://docs.nvidia.com/deeplearning/dgx/pdf/Best-Practices-Docker.pdf):\r\n\r\n```\r\nOne approach to solving this complexity when using containers is to have the NVIDIA\r\ndrivers installed in the container and have the character devices mapped corresponding\r\nto the NVIDIA GPUs such as /dev/nvidia0. For this to work, the drivers on the host\r\n(the system that is running the container), must match the version of the driver installed\r\nin the container. This approach drastically reduces the portability of the container.\r\n\r\nTo make things easier for Docker\u00ae containers that are built for GPUs, NVIDIA\u00ae has\r\ncreated nvidia-docker. It is and open-source project hosted on GitHub. It is basically\r\na wrapper around the docker command that takes care of orchestrating the GPU\r\ncontainers that are needed for your container to run.\r\n\r\nImportant It is highly recommended you use nvidia-docker when running a Docker\r\ncontainer that uses GPUs.\r\n```",
        "created_at": "2018-03-15T12:54:09Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174770939",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174770939"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174770939"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174635475
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174820769",
        "pull_request_review_id": 104247759,
        "id": 174820769,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NDgyMDc2OQ==",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+import os\n+\n+from IPython.lib import passwd\n+\n+c.NotebookApp.ip = '*'",
        "path": "docker/jupyter_notebook_config.py",
        "position": 19,
        "original_position": 19,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "jvmncs",
            "id": 7891333,
            "node_id": "MDQ6VXNlcjc4OTEzMzM=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/7891333?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jvmncs",
            "html_url": "https://github.com/jvmncs",
            "followers_url": "https://api.github.com/users/jvmncs/followers",
            "following_url": "https://api.github.com/users/jvmncs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jvmncs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jvmncs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jvmncs/subscriptions",
            "organizations_url": "https://api.github.com/users/jvmncs/orgs",
            "repos_url": "https://api.github.com/users/jvmncs/repos",
            "events_url": "https://api.github.com/users/jvmncs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jvmncs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there a convenient way of allowing the user to run Jupyter remotely?  Would ideally like to spin up clusters in the cloud and connect them to Grid with this container, and I think that would require being able to connect to Jupyter through ssh or through some secure static hostname/IP. Would like to pass a few flags to enable this, default should definitely have the Jupyter running from localhost.",
        "created_at": "2018-03-15T15:16:59Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174820769",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/174820769"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r174820769"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254435",
        "pull_request_review_id": 104762879,
        "id": 175254435,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDQzNQ==",
        "diff_hunk": "@@ -0,0 +1,50 @@\n+version: \"2\"",
        "path": "docker-compose.gpu.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "cthorey",
            "id": 1473289,
            "node_id": "MDQ6VXNlcjE0NzMyODk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1473289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cthorey",
            "html_url": "https://github.com/cthorey",
            "followers_url": "https://api.github.com/users/cthorey/followers",
            "following_url": "https://api.github.com/users/cthorey/following{/other_user}",
            "gists_url": "https://api.github.com/users/cthorey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cthorey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cthorey/subscriptions",
            "organizations_url": "https://api.github.com/users/cthorey/orgs",
            "repos_url": "https://api.github.com/users/cthorey/repos",
            "events_url": "https://api.github.com/users/cthorey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cthorey/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "+1 for overiding compose file. I did not know that. +2 for nvidia-docker :) I manage to use and it works as a charm. \r\n\r\nHowever, I could not get compose to recognize the runtime arguments. The PR seems to have merged in january, I build compose one commit ahead and still not recognised.. If someone else can give it a try .\r\n\r\nIn the meantime, you can setup nvidia as the default runtime by changing the daemon.yml for docker. I put the instruction in the README.md, it is a bit of a pain, but it works.",
        "created_at": "2018-03-17T10:37:25Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254435",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254435"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254435"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174635475
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254540",
        "pull_request_review_id": 104762981,
        "id": 175254540,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDU0MA==",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+version: \"2\"\n+\n+services:\n+  ipfs:\n+    build:\n+      context: ./docker\n+      dockerfile: ./Dockerfile.ipfs\n+    container_name: ipfs_host\n+    tty: true\n+    privileged: true\n+    ports:\n+      - \"4001:4001\"\n+      - \"8080:8080\"\n+      - \"5001:5001\"\n+\n+  worker:\n+    build:\n+      context: ./docker\n+      dockerfile: ./Dockerfile.worker\n+      args:\n+        email: 'openmined@openmined.com'",
        "path": "docker-compose.yml",
        "position": null,
        "original_position": 21,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "cthorey",
            "id": 1473289,
            "node_id": "MDQ6VXNlcjE0NzMyODk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1473289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cthorey",
            "html_url": "https://github.com/cthorey",
            "followers_url": "https://api.github.com/users/cthorey/followers",
            "following_url": "https://api.github.com/users/cthorey/following{/other_user}",
            "gists_url": "https://api.github.com/users/cthorey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cthorey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cthorey/subscriptions",
            "organizations_url": "https://api.github.com/users/cthorey/orgs",
            "repos_url": "https://api.github.com/users/cthorey/repos",
            "events_url": "https://api.github.com/users/cthorey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cthorey/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I setup a small bash script to handle those\r\n\r\n```\r\n./run_grid.sh [-g <gpu>] [-m <grid-mode>] [-a <host_ip>] [-n <name>] [-e <email>]\r\n```",
        "created_at": "2018-03-17T10:42:34Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254540",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254540"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254540"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174636288
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254542",
        "pull_request_review_id": 104762985,
        "id": 175254542,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDU0Mg==",
        "diff_hunk": "@@ -0,0 +1,46 @@\n+version: \"2\"",
        "path": "docker-compose.yml",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "cthorey",
            "id": 1473289,
            "node_id": "MDQ6VXNlcjE0NzMyODk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1473289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cthorey",
            "html_url": "https://github.com/cthorey",
            "followers_url": "https://api.github.com/users/cthorey/followers",
            "following_url": "https://api.github.com/users/cthorey/following{/other_user}",
            "gists_url": "https://api.github.com/users/cthorey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cthorey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cthorey/subscriptions",
            "organizations_url": "https://api.github.com/users/cthorey/orgs",
            "repos_url": "https://api.github.com/users/cthorey/repos",
            "events_url": "https://api.github.com/users/cthorey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cthorey/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Switch to 3",
        "created_at": "2018-03-17T10:42:45Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254542",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254542"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254542"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174636505
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254757",
        "pull_request_review_id": 104763205,
        "id": 175254757,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDc1Nw==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+FROM ufoym/deepo:all-py36",
        "path": "docker/Dockerfile.worker-gpu",
        "position": null,
        "original_position": 1,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "cthorey",
            "id": 1473289,
            "node_id": "MDQ6VXNlcjE0NzMyODk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1473289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cthorey",
            "html_url": "https://github.com/cthorey",
            "followers_url": "https://api.github.com/users/cthorey/followers",
            "following_url": "https://api.github.com/users/cthorey/following{/other_user}",
            "gists_url": "https://api.github.com/users/cthorey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cthorey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cthorey/subscriptions",
            "organizations_url": "https://api.github.com/users/cthorey/orgs",
            "repos_url": "https://api.github.com/users/cthorey/repos",
            "events_url": "https://api.github.com/users/cthorey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cthorey/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I remove the build on top of  deepo. As recommended by @ianlivingstone, i build the main image on top of nvidia/cuda then add python3.6 and run pip to install other requirements. I did not use the already provided ubuntu installation script are they are installing ipfs which will be useless here.\r\n\r\nI still need two images cpu/gpu because installing tensorflow using pip install tensorflow does not allow tensorflow to actually detect the gpus. You can check by running \r\n\r\n```\r\nimport tensorflow as tf\r\nsess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\r\n```\r\nSo we need one image, where tensorflow is installed for cpu usage and one in tensorflow-gpu for those who want to use gpus. Ideally, compose does not build anything and just use **openmined/grid** and **openmined/grid:gpu** where the second  is built using a Dockerfile that looks like \r\n\r\n```\r\nFROM openmined/grid\r\n\r\nRUN pip install tensorflow-gpu\r\n```\r\n\r\nUsing compose, you cannot really build one Dockerfile on top of another, so they are still very similiar Dockerfile/Dockerfile.gpu where the only difference is the install of tensorflow_gpu for the second one..\r\n\r\nPytorch is much better on that side, just takes whatever it finds :)\r\n\r\nAnyway, I test both cpu/gpu version and it seems to work.\r\n",
        "created_at": "2018-03-17T10:55:00Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254757",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254757"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254757"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174636974
    },
    {
        "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254802",
        "pull_request_review_id": 104763240,
        "id": 175254802,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NTI1NDgwMg==",
        "diff_hunk": "@@ -0,0 +1,31 @@\n+FROM ufoym/deepo:all-py36\n+\n+# setup user/mail\n+ARG name\n+ARG email\n+RUN mkdir ~/.openmined && \\\n+    echo '{\"email\": \"'${email}'\", \"name\": \"'${name}'\"}' > ~/.openmined/whoami.json\n+\n+# install libssl\n+RUN apt-get update &&\\\n+    apt-get install -y libssl-dev\n+\n+# install requirements\n+COPY ./requirements.txt /requirements.txt\n+RUN pip install -r requirements.txt\n+\n+\n+# jupyter\n+RUN pip install jupyter\n+COPY ./run_jupyter.sh /run_jupyter.sh\n+COPY ./jupyter_notebook_config.py /root/.jupyter/\n+RUN jupyter nbextension enable --py --sys-prefix widgetsnbextension && \\\n+    python -m ipykernel.kernelspec\n+\n+\n+ENV PASSWORD=tf",
        "path": "docker/Dockerfile.worker-gpu",
        "position": null,
        "original_position": 26,
        "commit_id": "10def0b6151f80988767db26bcc30870e0dcb456",
        "original_commit_id": "d986592088ce511c3b9ae2373ce64e8a3689447c",
        "user": {
            "login": "cthorey",
            "id": 1473289,
            "node_id": "MDQ6VXNlcjE0NzMyODk=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/1473289?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cthorey",
            "html_url": "https://github.com/cthorey",
            "followers_url": "https://api.github.com/users/cthorey/followers",
            "following_url": "https://api.github.com/users/cthorey/following{/other_user}",
            "gists_url": "https://api.github.com/users/cthorey/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cthorey/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cthorey/subscriptions",
            "organizations_url": "https://api.github.com/users/cthorey/orgs",
            "repos_url": "https://api.github.com/users/cthorey/repos",
            "events_url": "https://api.github.com/users/cthorey/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cthorey/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I usually like to have a passwd for security reason. Say, you spawn a worker onto the cloud, then without a passwd, anybody that figure out the IP of the instance can access the notebook. \r\n\r\nI get ride of it for the time being following @johannes69ki comment",
        "created_at": "2018-03-17T10:57:00Z",
        "updated_at": "2018-03-18T16:28:14Z",
        "html_url": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254802",
        "pull_request_url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/comments/175254802"
            },
            "html": {
                "href": "https://github.com/OpenMined/PyGrid/pull/136#discussion_r175254802"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/OpenMined/PyGrid/pulls/136"
            }
        },
        "in_reply_to_id": 174637552
    }
]