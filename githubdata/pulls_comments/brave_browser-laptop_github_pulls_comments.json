[
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/63638318",
        "pull_request_review_id": null,
        "id": 63638318,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNjM4MzE4",
        "diff_hunk": "@@ -604,14 +604,21 @@ if (typeof KeyEvent === 'undefined') {\n       }\n \n       const selection = getSelection()\n-      let suggestions = []\n-      let isMisspelled = false\n-      if (selection.length > 0 && !hasWhitespace(selection)) {\n-        // This is not very taxing, it only happens once on right click and only\n-        // if it is on one word, and the check and result set are returned very fast.\n-        const info = ipcRenderer.sendSync('get-misspelling-info', selection)\n-        suggestions = info.suggestions\n-        isMisspelled = info.isMisspelled\n+      let spellcheck = null\n+      if (e.target.spellcheck && !e.target.readonly && !e.target.disabled) {",
        "path": "app/extensions/brave/brave-default.js",
        "position": 13,
        "original_position": 13,
        "commit_id": "3b86feab5923aa02e94901fda08f0f7612068945",
        "original_commit_id": "3b86feab5923aa02e94901fda08f0f7612068945",
        "user": {
            "login": "jmalonzo",
            "id": 12141,
            "node_id": "MDQ6VXNlcjEyMTQx",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12141?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jmalonzo",
            "html_url": "https://github.com/jmalonzo",
            "followers_url": "https://api.github.com/users/jmalonzo/followers",
            "following_url": "https://api.github.com/users/jmalonzo/following{/other_user}",
            "gists_url": "https://api.github.com/users/jmalonzo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jmalonzo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jmalonzo/subscriptions",
            "organizations_url": "https://api.github.com/users/jmalonzo/orgs",
            "repos_url": "https://api.github.com/users/jmalonzo/repos",
            "events_url": "https://api.github.com/users/jmalonzo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jmalonzo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oops! Thanks a lot @bbondy \n",
        "created_at": "2016-05-18T02:49:42Z",
        "updated_at": "2016-05-18T02:49:43Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/1769#discussion_r63638318",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/1769",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/63638318"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/1769#discussion_r63638318"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/1769"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/183148609",
        "pull_request_review_id": 114099365,
        "id": 183148609,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzE0ODYwOQ==",
        "diff_hunk": "@@ -58,6 +58,11 @@ describe('suggestion unit tests', function () {\n     it('normalizes location', function () {\n       assert.ok(suggestion.normalizeLocation('https://www.site.com') === 'site.com', 'www. prefix removed')\n       assert.ok(suggestion.normalizeLocation('http://site.com') === 'site.com', 'location not modified')\n+      assert.ok(suggestion.normalizeLocation('http://wowww.com') === 'wowww.com', 'location not modified')",
        "path": "test/unit/app/common/lib/suggestionTest.js",
        "position": 4,
        "original_position": 4,
        "commit_id": "d2e3656b759a20979d8764b411de53baa828a477",
        "original_commit_id": "a27510aae33f6ce047e9183611b2961b2f944b27",
        "user": {
            "login": "catilac",
            "id": 15107,
            "node_id": "MDQ6VXNlcjE1MTA3",
            "avatar_url": "https://avatars1.githubusercontent.com/u/15107?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/catilac",
            "html_url": "https://github.com/catilac",
            "followers_url": "https://api.github.com/users/catilac/followers",
            "following_url": "https://api.github.com/users/catilac/following{/other_user}",
            "gists_url": "https://api.github.com/users/catilac/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/catilac/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/catilac/subscriptions",
            "organizations_url": "https://api.github.com/users/catilac/orgs",
            "repos_url": "https://api.github.com/users/catilac/repos",
            "events_url": "https://api.github.com/users/catilac/events{/privacy}",
            "received_events_url": "https://api.github.com/users/catilac/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh, good catch! thanks. i'll make the changes now.",
        "created_at": "2018-04-20T19:29:37Z",
        "updated_at": "2018-04-20T19:42:37Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/13872#discussion_r183148609",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/13872",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/183148609"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/13872#discussion_r183148609"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/13872"
            }
        },
        "in_reply_to_id": 183147769
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47046662",
        "pull_request_review_id": null,
        "id": 47046662,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2NjYy",
        "diff_hunk": "@@ -40,6 +37,11 @@ class UrlBar extends ImmutableComponent {\n     urlInput.blur()\n   }\n \n+  restore () {\n+    let location = this.props.activeFrameProps.get('location')\n+    AppActions.setLocation(location)",
        "path": "js/components/urlBar.js",
        "position": null,
        "original_position": 29,
        "commit_id": "09c8ca751419395d42804c0318af4b55f50a29d5",
        "original_commit_id": "55d86b9f04aeddcc07481cb5ecb622114242d1c8",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed\n",
        "created_at": "2015-12-09T03:06:46Z",
        "updated_at": "2015-12-09T04:52:10Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/26#discussion_r47046662",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/26",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47046662"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/26#discussion_r47046662"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47046671",
        "pull_request_review_id": null,
        "id": 47046671,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ2Njcx",
        "diff_hunk": "@@ -67,7 +67,7 @@ class UrlBar extends ImmutableComponent {\n   }\n ",
        "path": "js/components/urlBar.js",
        "position": 13,
        "original_position": 58,
        "commit_id": "09c8ca751419395d42804c0318af4b55f50a29d5",
        "original_commit_id": "55d86b9f04aeddcc07481cb5ecb622114242d1c8",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "split focus and select back out\n",
        "created_at": "2015-12-09T03:06:56Z",
        "updated_at": "2015-12-09T04:52:10Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/26#discussion_r47046671",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/26",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47046671"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/26#discussion_r47046671"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47048700",
        "pull_request_review_id": null,
        "id": 47048700,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ4NzAw",
        "diff_hunk": "@@ -40,6 +37,11 @@ class UrlBar extends ImmutableComponent {\n     urlInput.blur()\n   }\n \n+  restore () {\n+    let location = this.props.activeFrameProps.get('location')\n+    AppActions.setLocation(location)",
        "path": "js/components/urlBar.js",
        "position": null,
        "original_position": 29,
        "commit_id": "09c8ca751419395d42804c0318af4b55f50a29d5",
        "original_commit_id": "55d86b9f04aeddcc07481cb5ecb622114242d1c8",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "that may be useful for the remaining portion of #12 that I moved to Asana, but for now this is solved by changing the behavior slightly to match Safari and Chrome \n",
        "created_at": "2015-12-09T03:51:41Z",
        "updated_at": "2015-12-09T04:52:10Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/26#discussion_r47048700",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/26",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47048700"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/26#discussion_r47048700"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47048773",
        "pull_request_review_id": null,
        "id": 47048773,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ4Nzcz",
        "diff_hunk": "@@ -18,9 +18,12 @@ class UrlBar extends ImmutableComponent {\n     super()\n     ipc.on('shortcut-focus-url', () => {\n       this.focus()\n+      this.select()",
        "path": "js/components/urlBar.js",
        "position": 4,
        "original_position": 4,
        "commit_id": "09c8ca751419395d42804c0318af4b55f50a29d5",
        "original_commit_id": "d8886f1f8681e13d8ab61fab867961f92e89e231",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This wasn't really supposed to be part of this bug fix, but it fixes one of the urlbar focus issues from #13 \n",
        "created_at": "2015-12-09T03:52:57Z",
        "updated_at": "2015-12-09T04:52:10Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/26#discussion_r47048773",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/26",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47048773"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/26#discussion_r47048773"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47051192",
        "pull_request_review_id": null,
        "id": 47051192,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTky",
        "diff_hunk": "@@ -48,17 +55,14 @@ class UrlBar extends ImmutableComponent {\n         AppActions.setUrlBarActive(false)\n         this.blur()\n         break\n-      case KeyCodes.ESC:\n-        e.preventDefault()\n-        AppActions.setUrlBarActive(false)\n-        this.blur()\n-        break\n+      // escape is handled by ipc shortcut-stop event\n       default:\n         AppActions.setUrlBarActive(true)\n     }\n   }\n \n   onBlur (e) {\n+    this.blur()",
        "path": "js/components/urlBar.js",
        "position": null,
        "original_position": 50,
        "commit_id": "09c8ca751419395d42804c0318af4b55f50a29d5",
        "original_commit_id": "d8886f1f8681e13d8ab61fab867961f92e89e231",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not sure if I needed this, I think it might have been leftover from a previous change\n",
        "created_at": "2015-12-09T04:48:40Z",
        "updated_at": "2015-12-09T04:52:10Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/26#discussion_r47051192",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/26",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47051192"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/26#discussion_r47051192"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47051224",
        "pull_request_review_id": null,
        "id": 47051224,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMjI0",
        "diff_hunk": "@@ -48,17 +55,14 @@ class UrlBar extends ImmutableComponent {\n         AppActions.setUrlBarActive(false)\n         this.blur()\n         break\n-      case KeyCodes.ESC:\n-        e.preventDefault()\n-        AppActions.setUrlBarActive(false)\n-        this.blur()\n-        break\n+      // escape is handled by ipc shortcut-stop event\n       default:\n         AppActions.setUrlBarActive(true)\n     }\n   }\n \n   onBlur (e) {\n+    this.blur()",
        "path": "js/components/urlBar.js",
        "position": null,
        "original_position": 50,
        "commit_id": "09c8ca751419395d42804c0318af4b55f50a29d5",
        "original_commit_id": "d8886f1f8681e13d8ab61fab867961f92e89e231",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "doesn't look like it\n",
        "created_at": "2015-12-09T04:49:31Z",
        "updated_at": "2015-12-09T04:52:10Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/26#discussion_r47051224",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/26",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47051224"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/26#discussion_r47051224"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/26"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47242185",
        "pull_request_review_id": null,
        "id": 47242185,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyMTg1",
        "diff_hunk": "@@ -19,7 +19,7 @@ let appState = Immutable.fromJS({\n   sites: [],\n   ui: {\n     navbar: {\n-      focused: false,\n+      focused: true,",
        "path": "js/stores/appStore.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "3825daf449c02e1f89153a7abea70028930ab750",
        "original_commit_id": "a89bb44783b91d7c3ee9ee98c515a1f8d12ae9ba",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That is the behavior for other browsers when you open a new window. I never went back to see why there is a separate navbar focus though, so maybe we can get rid of it and just use the urlbar focus?\n",
        "created_at": "2015-12-10T15:47:39Z",
        "updated_at": "2015-12-10T16:02:02Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/37#discussion_r47242185",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/37",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47242185"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/37#discussion_r47242185"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47242632",
        "pull_request_review_id": null,
        "id": 47242632,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQyNjMy",
        "diff_hunk": "@@ -57,7 +57,9 @@ Child components should not modify top level state directly, instead they should\n           searchResults: array,\n           suggestionList: object,\n         },\n+        focused: boolean, // whether the urlbar is focused",
        "path": "docs/applicationState.md",
        "position": 4,
        "original_position": 4,
        "commit_id": "3825daf449c02e1f89153a7abea70028930ab750",
        "original_commit_id": "a89bb44783b91d7c3ee9ee98c515a1f8d12ae9ba",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "it took me a while to sort everything out with active and focused. I can take a look again, but I don't think so.\n",
        "created_at": "2015-12-10T15:50:33Z",
        "updated_at": "2015-12-10T16:02:02Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/37#discussion_r47242632",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/37",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47242632"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/37#discussion_r47242632"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/37"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47405974",
        "pull_request_review_id": null,
        "id": 47405974,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1OTc0",
        "diff_hunk": "@@ -27,3 +27,126 @@ ipc.on('zoom-reset', function () {\n   browserZoomLevel = 0\n   webFrame.setZoomLevel(browserZoomLevel)\n })\n+\n+/**\n+ * Ensures a node replacement div is visible and has a proper zIndex\n+ */\n+function ensureNodeVisible (node) {",
        "path": "app/content/webviewPreload.js",
        "position": 8,
        "original_position": 8,
        "commit_id": "6f20ba13ddfbe4301bc68ee1f1b8fd0ce86f9620",
        "original_commit_id": "6f20ba13ddfbe4301bc68ee1f1b8fd0ce86f9620",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We probably want to differentiate between visible on the page and visible in the browser viewport. We don't need the former yet, but we will want it before we start displaying real ads. I put a task in the backlog in asana for it.\n",
        "created_at": "2015-12-11T21:13:19Z",
        "updated_at": "2015-12-11T21:13:19Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/46#discussion_r47405974",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/46",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47405974"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/46#discussion_r47405974"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/46"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47406273",
        "pull_request_review_id": null,
        "id": 47406273,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2Mjcz",
        "diff_hunk": "@@ -27,3 +27,126 @@ ipc.on('zoom-reset', function () {\n   browserZoomLevel = 0\n   webFrame.setZoomLevel(browserZoomLevel)\n })\n+\n+/**\n+ * Ensures a node replacement div is visible and has a proper zIndex\n+ */\n+function ensureNodeVisible (node) {\n+  if (document.defaultView.getComputedStyle(node).display === 'none') {\n+    node.style.display = ''\n+  }\n+  if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n+    node.style.zIndex = ''\n+  }",
        "path": "app/content/webviewPreload.js",
        "position": 14,
        "original_position": 14,
        "commit_id": "6f20ba13ddfbe4301bc68ee1f1b8fd0ce86f9620",
        "original_commit_id": "6f20ba13ddfbe4301bc68ee1f1b8fd0ce86f9620",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What will this do to hidden ad divs that some less scrupulous pubs use? We would want to block those and not replace them\n",
        "created_at": "2015-12-11T21:16:37Z",
        "updated_at": "2015-12-11T21:16:37Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/46#discussion_r47406273",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/46",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/47406273"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/46#discussion_r47406273"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/46"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099766",
        "pull_request_review_id": null,
        "id": 48099766,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5NzY2",
        "diff_hunk": "@@ -8,7 +8,7 @@\n     \"start-win\": \"set NODE_ENV=development&& electron . --debug=5858\",\n     \"start-brk\": \"NODE_ENV=development electron . --debug-brk=5858\",\n     \"start-win-brk\": \"set NODE_ENV=development&& electron . --debug-brk=5858\",\n-    \"watch\": \"webpack-dev-server\",\n+    \"watch\": \"webpack-dev-server & NODE_ENV=test webpack --watch\",",
        "path": "package.json",
        "position": null,
        "original_position": 5,
        "commit_id": "2c1dfcf7f4866d496f552319b1650bc06629b90e",
        "original_commit_id": "e61575e6dce8766b7c88109d09bbcd62b145ab4b",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yea, but it doesn't build the test bundle. If there's a better way to do it I can change it\n",
        "created_at": "2015-12-20T04:58:46Z",
        "updated_at": "2015-12-20T06:09:59Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099766",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/69",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099766"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099766"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/69"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099792",
        "pull_request_review_id": null,
        "id": 48099792,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5Nzky",
        "diff_hunk": "@@ -0,0 +1,120 @@\n+/* global describe, it, before */\n+\n+const Brave = require('./lib/brave')\n+const Config = require('../js/constants/config').default\n+\n+describe('urlbar', function () {\n+  const urlInput = '#urlInput'\n+\n+  function setup (client) {\n+    return client\n+      .waitUntilWindowLoaded()\n+      .waitForVisible('#browser')\n+      .waitForVisible(urlInput)\n+      .waitForValue(urlInput, Config.defaultUrl)\n+  }\n+\n+  function hasFocus (client) {\n+    return client.getAttribute(':focus', 'id').should.eventually.be.equal('urlInput')\n+  }\n+\n+  function defaultUrl (client) {\n+    return client.getValue(urlInput).should.eventually.be.equal(Config.defaultUrl)\n+  }\n+\n+  function selectsText (client) {\n+    return client.getSelectedText().should.be.eventually.be.equal(Config.defaultUrl)\n+  }\n+\n+  describe('new window', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client)\n+    })\n+\n+    it('displays the default url', function *() {\n+      yield defaultUrl(this.app.client)\n+    })\n+\n+    it('has focus', function *() {\n+      yield hasFocus(this.app.client)\n+    })\n+\n+    it('selects the text', function *() {\n+      yield selectsText(this.app.client)\n+    })\n+  })\n+\n+  describe('typing', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client)\n+    })\n+\n+    it('clears the selected text on keypress', function *() {\n+      yield this.app.client\n+        .keys('a')\n+        .getValue(urlInput).should.eventually.be.equal('a')\n+        .getSelectedText().should.be.eventually.be.equal('')\n+    })\n+\n+    it('reverts typing on escape', function *() {\n+      yield this.app.client\n+        .ipcSend('shortcut-active-frame-stop')\n+        .getValue(urlInput).should.eventually.be.equal(Config.defaultUrl)\n+        .getSelectedText().should.be.eventually.be.equal(Config.defaultUrl)\n+    })\n+  })\n+\n+  describe('new tab', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client).ipcSend('shortcut-new-frame')\n+    })\n+\n+    it('displays the default url', function *() {\n+      yield defaultUrl(this.app.client)\n+    })\n+\n+    it('has focus', function *() {\n+      yield hasFocus(this.app.client)\n+    })\n+\n+    it('selects the text', function *() {\n+      yield selectsText(this.app.client)\n+    })\n+  })\n+\n+  describe('change tabs', function () {\n+    // different states - focused, selected, typing\n+    // including awesome bar state\n+\n+  })\n+\n+  describe('shortcut-focus-url', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client)\n+        .keys('\\uE007') // clear focus\n+        .waitForVisible(urlInput).should.eventually.not.be.elementActive()\n+        .ipcSend('shortcut-focus-url')",
        "path": "test/navigationBarTest.js",
        "position": null,
        "original_position": 104,
        "commit_id": "2c1dfcf7f4866d496f552319b1650bc06629b90e",
        "original_commit_id": "e61575e6dce8766b7c88109d09bbcd62b145ab4b",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "actually I'm not sure why this still works, the messages should have broken it...\n",
        "created_at": "2015-12-20T05:02:06Z",
        "updated_at": "2015-12-20T06:09:59Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099792",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/69",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099792"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099792"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/69"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099797",
        "pull_request_review_id": null,
        "id": 48099797,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5Nzk3",
        "diff_hunk": "@@ -0,0 +1,120 @@\n+/* global describe, it, before */\n+\n+const Brave = require('./lib/brave')\n+const Config = require('../js/constants/config').default\n+\n+describe('urlbar', function () {\n+  const urlInput = '#urlInput'\n+\n+  function setup (client) {\n+    return client\n+      .waitUntilWindowLoaded()\n+      .waitForVisible('#browser')\n+      .waitForVisible(urlInput)\n+      .waitForValue(urlInput, Config.defaultUrl)\n+  }\n+\n+  function hasFocus (client) {\n+    return client.getAttribute(':focus', 'id').should.eventually.be.equal('urlInput')\n+  }\n+\n+  function defaultUrl (client) {\n+    return client.getValue(urlInput).should.eventually.be.equal(Config.defaultUrl)\n+  }\n+\n+  function selectsText (client) {\n+    return client.getSelectedText().should.be.eventually.be.equal(Config.defaultUrl)\n+  }\n+\n+  describe('new window', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client)\n+    })\n+\n+    it('displays the default url', function *() {\n+      yield defaultUrl(this.app.client)\n+    })\n+\n+    it('has focus', function *() {\n+      yield hasFocus(this.app.client)\n+    })\n+\n+    it('selects the text', function *() {\n+      yield selectsText(this.app.client)\n+    })\n+  })\n+\n+  describe('typing', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client)\n+    })\n+\n+    it('clears the selected text on keypress', function *() {\n+      yield this.app.client\n+        .keys('a')\n+        .getValue(urlInput).should.eventually.be.equal('a')\n+        .getSelectedText().should.be.eventually.be.equal('')\n+    })\n+\n+    it('reverts typing on escape', function *() {\n+      yield this.app.client\n+        .ipcSend('shortcut-active-frame-stop')\n+        .getValue(urlInput).should.eventually.be.equal(Config.defaultUrl)\n+        .getSelectedText().should.be.eventually.be.equal(Config.defaultUrl)\n+    })\n+  })\n+\n+  describe('new tab', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client).ipcSend('shortcut-new-frame')\n+    })\n+\n+    it('displays the default url', function *() {\n+      yield defaultUrl(this.app.client)\n+    })\n+\n+    it('has focus', function *() {\n+      yield hasFocus(this.app.client)\n+    })\n+\n+    it('selects the text', function *() {\n+      yield selectsText(this.app.client)\n+    })\n+  })\n+\n+  describe('change tabs', function () {\n+    // different states - focused, selected, typing\n+    // including awesome bar state\n+\n+  })\n+\n+  describe('shortcut-focus-url', function () {\n+    Brave.beforeAll(this)\n+\n+    before(function *() {\n+      yield setup(this.app.client)\n+        .keys('\\uE007') // clear focus\n+        .waitForVisible(urlInput).should.eventually.not.be.elementActive()\n+        .ipcSend('shortcut-focus-url')",
        "path": "test/navigationBarTest.js",
        "position": null,
        "original_position": 104,
        "commit_id": "2c1dfcf7f4866d496f552319b1650bc06629b90e",
        "original_commit_id": "e61575e6dce8766b7c88109d09bbcd62b145ab4b",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh wait, I see, that just converts them from a constant to a string with the old format\n",
        "created_at": "2015-12-20T05:02:45Z",
        "updated_at": "2015-12-20T06:09:59Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099797",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/69",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099797"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099797"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/69"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099885",
        "pull_request_review_id": null,
        "id": 48099885,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5ODg1",
        "diff_hunk": "@@ -8,7 +8,7 @@\n     \"start-win\": \"set NODE_ENV=development&& electron . --debug=5858\",\n     \"start-brk\": \"NODE_ENV=development electron . --debug-brk=5858\",\n     \"start-win-brk\": \"set NODE_ENV=development&& electron . --debug-brk=5858\",\n-    \"watch\": \"webpack-dev-server\",\n+    \"watch\": \"webpack-dev-server & NODE_ENV=test webpack --watch\",",
        "path": "package.json",
        "position": null,
        "original_position": 5,
        "commit_id": "2c1dfcf7f4866d496f552319b1650bc06629b90e",
        "original_commit_id": "e61575e6dce8766b7c88109d09bbcd62b145ab4b",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It doesn't really have any impact and it always keeps both up-to-date. I can break out the test one, but I'll also add another one that gives the option to run both together.\n",
        "created_at": "2015-12-20T05:19:01Z",
        "updated_at": "2015-12-20T06:09:59Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099885",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/69",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48099885"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/69#discussion_r48099885"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/69"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48319947",
        "pull_request_review_id": null,
        "id": 48319947,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE5OTQ3",
        "diff_hunk": "@@ -2,48 +2,79 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n  * You can obtain one at http://mozilla.org/MPL/2.0/. */\n \n-const AppDispatcher = require('../dispatcher/appDispatcher')\n-const EventEmitter = require('events').EventEmitter\n+'use strict'\n const AppConstants = require('../constants/appConstants')\n const Immutable = require('immutable')\n const SiteUtil = require('../state/siteUtil')\n-const ipc = global.require('electron').ipcRenderer\n+const electron = require('electron')\n+const ipcMain = electron.ipcMain\n const messages = require('../constants/messages')\n+const BrowserWindow = electron.BrowserWindow\n+const LocalShortcuts = require('../../app/localShortcuts')\n \n-// For this simple example, store immutable data object for a simple counter.\n-// This is of course very silly, but this is just for an app template with top\n-// level immutable data.\n let appState = Immutable.fromJS({\n+  windows: [],\n   sites: [],\n   visits: [],\n   updateAvailable: false\n })\n \n-var CHANGE_EVENT = 'change'\n+const spawnWindow = () => {",
        "path": "js/stores/appStore.js",
        "position": 28,
        "original_position": 28,
        "commit_id": "2c4237ff3740d3829ebb95bf9386af7a54f1f152",
        "original_commit_id": "f9e74078f21b54f86c00c3a7c399244eaf1516dc",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It's really just a temporary location because I didn't have a better place to put it. It will probably be replaced by something like FrameStateUtil\n",
        "created_at": "2015-12-23T03:38:50Z",
        "updated_at": "2015-12-23T03:47:17Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/87#discussion_r48319947",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/87",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48319947"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/87#discussion_r48319947"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/87"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48451280",
        "pull_request_review_id": null,
        "id": 48451280,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUxMjgw",
        "diff_hunk": "@@ -19,29 +20,109 @@ let appState = Immutable.fromJS({\n   updateAvailable: false\n })\n \n-const spawnWindow = () => {\n-  let mainWindow = new BrowserWindow({\n-    width: 1360,\n-    height: 800,\n-    minWidth: 400,\n+// TODO cleanup all this createWindow crap\n+function isModal (browserOpts) {\n+  // this needs some better checks\n+  return browserOpts.scrollbars === false\n+}\n+\n+function navbarHeight () {\n+  return 75",
        "path": "js/stores/appStore.js",
        "position": null,
        "original_position": 24,
        "commit_id": "ad697a4345e1611db7defd0d66b3966a8f8a1805",
        "original_commit_id": "e4c39ed8d8c8b8be2e7cc9a6fcc7f03a62acb959",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "At this point in the process it hasn't been rendered yet. I don't like hard-coding it like this, but I'm not sure how to get around it here\n",
        "created_at": "2015-12-27T02:41:23Z",
        "updated_at": "2015-12-27T03:00:08Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/99#discussion_r48451280",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/99",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/48451280"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/99#discussion_r48451280"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/99"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/49884077",
        "pull_request_review_id": null,
        "id": 49884077,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MDc3",
        "diff_hunk": "@@ -34,6 +37,17 @@ app.on('window-all-closed', function () {\n   }\n })\n \n+app.on('browser-window-created', function () {\n+  windowAllClosed = false\n+})\n+\n+app.on('activate', function () {\n+  // (OS X) open a new window when the user clicks on the app icon if there aren't any open\n+  if (windowAllClosed) {",
        "path": "app/index.js",
        "position": null,
        "original_position": 21,
        "commit_id": "4930702b6e64f1488cbb1aa67c474adb3abd55f8",
        "original_commit_id": "9eaff59a9b9efba57a73e874f9ee6d2745b967ee",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "good idea, I forgot that was available here\n",
        "created_at": "2016-01-15T18:03:12Z",
        "updated_at": "2016-01-15T18:05:35Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/166#discussion_r49884077",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/166",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/49884077"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/166#discussion_r49884077"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/166"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/50201470",
        "pull_request_review_id": null,
        "id": 50201470,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxNDcw",
        "diff_hunk": "@@ -140,7 +140,7 @@ export function addFrame (frames, frameOpts, newKey, activeFrameKey) {\n       searchSuggestions: true,\n       focused: true,\n       urlbar: {\n-        location: url,\n+        location: '',",
        "path": "js/state/frameStateUtil.js",
        "position": null,
        "original_position": 5,
        "commit_id": "2dfd540ac20362a495f3680fe9c8b8fd04265df4",
        "original_commit_id": "944aa8b612f518743209139c8d6273c52bf11415",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this was causing a brief flicker of about:blank before, but should be ok now. I'll check\n",
        "created_at": "2016-01-20T00:59:29Z",
        "updated_at": "2016-01-20T01:42:33Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/188#discussion_r50201470",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/188",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/50201470"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/188#discussion_r50201470"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/188"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/50219415",
        "pull_request_review_id": null,
        "id": 50219415,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5NDE1",
        "diff_hunk": "@@ -12,7 +12,7 @@ const BrowserWindow = electron.BrowserWindow\n const AppActions = require('../js/actions/appActions')\n let appInitialized = false\n \n-app.on('will-finish-launching', function () {",
        "path": "app/cmdLine.js",
        "position": null,
        "original_position": 4,
        "commit_id": "5b61a682cbedc9ff1cddd006b8f1492c370026ce",
        "original_commit_id": "629c0653deb0b6917e68a89d6885c4410a95a061",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I can change it back, but this does leave the possibility open of BrowserWindow.getFocusedWindow() being called before ready fires which will cause that error\n",
        "created_at": "2016-01-20T06:38:31Z",
        "updated_at": "2016-01-20T07:15:28Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/196#discussion_r50219415",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/196",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/50219415"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/196#discussion_r50219415"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/196"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51611686",
        "pull_request_review_id": null,
        "id": 51611686,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjExNjg2",
        "diff_hunk": "@@ -156,7 +156,8 @@ ipc.on(messages.SET_AD_DIV_CANDIDATES, function (e, adDivCandidates, placeholder\n })\n \n function hasSelection (node) {\n-  if (node && node.selectionStart !== undefined &&\n+  if (node && /password|search|tel|text|url/.test(node.type) &&",
        "path": "app/content/webviewPreload.js",
        "position": null,
        "original_position": 5,
        "commit_id": "2129c378ce469028d68c570a865050d44421751c",
        "original_commit_id": "43ce557b5fa0ce390f4ea5204f3463ef4df83edb",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not sure if we need this extra check, won't it prevent the copy menu from working on plain text? Is there a case that is broken that this fixes? \n",
        "created_at": "2016-02-02T18:29:27Z",
        "updated_at": "2016-02-04T01:16:36Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/566#discussion_r51611686",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/566",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51611686"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/566#discussion_r51611686"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/566"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51782617",
        "pull_request_review_id": null,
        "id": 51782617,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyNjE3",
        "diff_hunk": "@@ -2,10 +2,29 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n  * You can obtain one at http://mozilla.org/MPL/2.0/. */\n \n-var ipc = require('electron').ipcRenderer\n var messages = require('../../js/constants/messages')\n var KeyCodes = require('../../js/constants/keyCodes')\n \n+var ipc = {\n+  events: {},\n+  embedder: null,\n+  processMessage: function (event) {\n+    if (event.origin === 'file://') {",
        "path": "app/content/webviewPreload.js",
        "position": 12,
        "original_position": 12,
        "commit_id": "5e33c008e6a640db79d593c8a8c710bba6713e63",
        "original_commit_id": "5e33c008e6a640db79d593c8a8c710bba6713e63",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It only sends file:// unfortunately. The updates I'm making now to Electron will fire a \"HELO\" message to register the embedder as soon as the script context is created and before the page will have any opportunity to preempt it.\n",
        "created_at": "2016-02-03T20:33:22Z",
        "updated_at": "2016-02-03T20:33:22Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/581#discussion_r51782617",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/581",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51782617"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/581#discussion_r51782617"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/581"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51783395",
        "pull_request_review_id": null,
        "id": 51783395,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzMzk1",
        "diff_hunk": "@@ -54,6 +54,10 @@ class Frame extends ImmutableComponent {\n \n   componentDidMount () {\n     this.updateWebview()\n+    // forward postMessage events from webview to webContents\n+    window.addEventListener('message', function (event) {",
        "path": "js/components/frame.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "5e33c008e6a640db79d593c8a8c710bba6713e63",
        "original_commit_id": "5e33c008e6a640db79d593c8a8c710bba6713e63",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think I should add an origin check here. The page itself will have no access to the embedder and can't send it any messages, but I think this could end up firing multiple messages for the same event because \"window\" is the same for all frames. Going to create a quick patch for it right now.\n",
        "created_at": "2016-02-03T20:38:57Z",
        "updated_at": "2016-02-03T20:38:57Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/581#discussion_r51783395",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/581",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51783395"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/581#discussion_r51783395"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/581"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785085",
        "pull_request_review_id": null,
        "id": 51785085,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1MDg1",
        "diff_hunk": "@@ -2,255 +2,377 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n  * You can obtain one at http://mozilla.org/MPL/2.0/. */\n \n-var messages = require('../../js/constants/messages')\n-var KeyCodes = require('../../js/constants/keyCodes')\n-\n-var ipc = {\n-  events: {},\n-  embedder: null,\n-  processMessage: function (event) {\n-    if (event.origin === 'file://') {\n-      this.embedder = event.source\n-      var cb = this.events[event.data[0]]\n-      cb && cb.apply(null, event.data)\n-    }\n-  },\n-  on: function (name, cb) {\n-    this.events[name] = cb\n-  },\n-  send: function () {\n-    var args = Array.prototype.slice.call(arguments)\n-    this.embedder && this.embedder.postMessage(args, 'file://')\n+// inject missing DOM Level 3 KeyEvent\n+// https://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent\n+if (typeof KeyEvent === 'undefined') {\n+  var KeyEvent = {\n+    DOM_VK_CANCEL: 3,\n+    DOM_VK_HELP: 6,\n+    DOM_VK_BACK_SPACE: 8,\n+    DOM_VK_TAB: 9,\n+    DOM_VK_CLEAR: 12,\n+    DOM_VK_RETURN: 13,\n+    DOM_VK_ENTER: 14,\n+    DOM_VK_SHIFT: 16,\n+    DOM_VK_CONTROL: 17,\n+    DOM_VK_ALT: 18,\n+    DOM_VK_PAUSE: 19,\n+    DOM_VK_CAPS_LOCK: 20,\n+    DOM_VK_ESCAPE: 27,\n+    DOM_VK_SPACE: 32,\n+    DOM_VK_PAGE_UP: 33,\n+    DOM_VK_PAGE_DOWN: 34,\n+    DOM_VK_END: 35,\n+    DOM_VK_HOME: 36,\n+    DOM_VK_LEFT: 37,\n+    DOM_VK_UP: 38,\n+    DOM_VK_RIGHT: 39,\n+    DOM_VK_DOWN: 40,\n+    DOM_VK_PRINTSCREEN: 44,\n+    DOM_VK_INSERT: 45,\n+    DOM_VK_DELETE: 46,\n+    DOM_VK_0: 48,\n+    DOM_VK_1: 49,\n+    DOM_VK_2: 50,\n+    DOM_VK_3: 51,\n+    DOM_VK_4: 52,\n+    DOM_VK_5: 53,\n+    DOM_VK_6: 54,\n+    DOM_VK_7: 55,\n+    DOM_VK_8: 56,\n+    DOM_VK_9: 57,\n+    DOM_VK_SEMICOLON: 59,\n+    DOM_VK_EQUALS: 61,\n+    DOM_VK_A: 65,\n+    DOM_VK_B: 66,\n+    DOM_VK_C: 67,\n+    DOM_VK_D: 68,\n+    DOM_VK_E: 69,\n+    DOM_VK_F: 70,\n+    DOM_VK_G: 71,\n+    DOM_VK_H: 72,\n+    DOM_VK_I: 73,\n+    DOM_VK_J: 74,\n+    DOM_VK_K: 75,\n+    DOM_VK_L: 76,\n+    DOM_VK_M: 77,\n+    DOM_VK_N: 78,\n+    DOM_VK_O: 79,\n+    DOM_VK_P: 80,\n+    DOM_VK_Q: 81,\n+    DOM_VK_R: 82,\n+    DOM_VK_S: 83,\n+    DOM_VK_T: 84,\n+    DOM_VK_U: 85,\n+    DOM_VK_V: 86,\n+    DOM_VK_W: 87,\n+    DOM_VK_X: 88,\n+    DOM_VK_Y: 89,\n+    DOM_VK_Z: 90,\n+    DOM_VK_CONTEXT_MENU: 93,\n+    DOM_VK_NUMPAD0: 96,\n+    DOM_VK_NUMPAD1: 97,\n+    DOM_VK_NUMPAD2: 98,\n+    DOM_VK_NUMPAD3: 99,\n+    DOM_VK_NUMPAD4: 100,\n+    DOM_VK_NUMPAD5: 101,\n+    DOM_VK_NUMPAD6: 102,\n+    DOM_VK_NUMPAD7: 103,\n+    DOM_VK_NUMPAD8: 104,\n+    DOM_VK_NUMPAD9: 105,\n+    DOM_VK_MULTIPLY: 106,\n+    DOM_VK_ADD: 107,\n+    DOM_VK_SEPARATOR: 108,\n+    DOM_VK_SUBTRACT: 109,\n+    DOM_VK_DECIMAL: 110,\n+    DOM_VK_DIVIDE: 111,\n+    DOM_VK_F1: 112,\n+    DOM_VK_F2: 113,\n+    DOM_VK_F3: 114,\n+    DOM_VK_F4: 115,\n+    DOM_VK_F5: 116,\n+    DOM_VK_F6: 117,\n+    DOM_VK_F7: 118,\n+    DOM_VK_F8: 119,\n+    DOM_VK_F9: 120,\n+    DOM_VK_F10: 121,\n+    DOM_VK_F11: 122,\n+    DOM_VK_F12: 123,\n+    DOM_VK_F13: 124,\n+    DOM_VK_F14: 125,\n+    DOM_VK_F15: 126,\n+    DOM_VK_F16: 127,\n+    DOM_VK_F17: 128,\n+    DOM_VK_F18: 129,\n+    DOM_VK_F19: 130,\n+    DOM_VK_F20: 131,\n+    DOM_VK_F21: 132,\n+    DOM_VK_F22: 133,\n+    DOM_VK_F23: 134,\n+    DOM_VK_F24: 135,\n+    DOM_VK_NUM_LOCK: 144,\n+    DOM_VK_SCROLL_LOCK: 145,\n+    DOM_VK_COMMA: 188,\n+    DOM_VK_PERIOD: 190,\n+    DOM_VK_SLASH: 191,\n+    DOM_VK_BACK_QUOTE: 192,\n+    DOM_VK_OPEN_BRACKET: 219,\n+    DOM_VK_BACK_SLASH: 220,\n+    DOM_VK_CLOSE_BRACKET: 221,\n+    DOM_VK_QUOTE: 222,\n+    DOM_VK_META: 224\n   }\n }\n-addEventListener('message', ipc.processMessage.bind(ipc)) // eslint-disable-line",
        "path": "app/content/webviewPreload.js",
        "position": 144,
        "original_position": 144,
        "commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "original_commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Most of this didn't change, I just wrapped it in a function call to isolate it from the rest of the page. I'll mark the actual changes below\n",
        "created_at": "2016-02-03T20:52:39Z",
        "updated_at": "2016-02-03T20:52:39Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785085",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/599",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785085"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785085"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/599"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785114",
        "pull_request_review_id": null,
        "id": 51785114,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1MTE0",
        "diff_hunk": "@@ -2,255 +2,377 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n  * You can obtain one at http://mozilla.org/MPL/2.0/. */\n \n-var messages = require('../../js/constants/messages')\n-var KeyCodes = require('../../js/constants/keyCodes')\n-\n-var ipc = {\n-  events: {},\n-  embedder: null,\n-  processMessage: function (event) {\n-    if (event.origin === 'file://') {\n-      this.embedder = event.source\n-      var cb = this.events[event.data[0]]\n-      cb && cb.apply(null, event.data)\n-    }\n-  },\n-  on: function (name, cb) {\n-    this.events[name] = cb\n-  },\n-  send: function () {\n-    var args = Array.prototype.slice.call(arguments)\n-    this.embedder && this.embedder.postMessage(args, 'file://')\n+// inject missing DOM Level 3 KeyEvent\n+// https://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent\n+if (typeof KeyEvent === 'undefined') {\n+  var KeyEvent = {\n+    DOM_VK_CANCEL: 3,\n+    DOM_VK_HELP: 6,\n+    DOM_VK_BACK_SPACE: 8,\n+    DOM_VK_TAB: 9,\n+    DOM_VK_CLEAR: 12,\n+    DOM_VK_RETURN: 13,\n+    DOM_VK_ENTER: 14,\n+    DOM_VK_SHIFT: 16,\n+    DOM_VK_CONTROL: 17,\n+    DOM_VK_ALT: 18,\n+    DOM_VK_PAUSE: 19,\n+    DOM_VK_CAPS_LOCK: 20,\n+    DOM_VK_ESCAPE: 27,\n+    DOM_VK_SPACE: 32,\n+    DOM_VK_PAGE_UP: 33,\n+    DOM_VK_PAGE_DOWN: 34,\n+    DOM_VK_END: 35,\n+    DOM_VK_HOME: 36,\n+    DOM_VK_LEFT: 37,\n+    DOM_VK_UP: 38,\n+    DOM_VK_RIGHT: 39,\n+    DOM_VK_DOWN: 40,\n+    DOM_VK_PRINTSCREEN: 44,\n+    DOM_VK_INSERT: 45,\n+    DOM_VK_DELETE: 46,\n+    DOM_VK_0: 48,\n+    DOM_VK_1: 49,\n+    DOM_VK_2: 50,\n+    DOM_VK_3: 51,\n+    DOM_VK_4: 52,\n+    DOM_VK_5: 53,\n+    DOM_VK_6: 54,\n+    DOM_VK_7: 55,\n+    DOM_VK_8: 56,\n+    DOM_VK_9: 57,\n+    DOM_VK_SEMICOLON: 59,\n+    DOM_VK_EQUALS: 61,\n+    DOM_VK_A: 65,\n+    DOM_VK_B: 66,\n+    DOM_VK_C: 67,\n+    DOM_VK_D: 68,\n+    DOM_VK_E: 69,\n+    DOM_VK_F: 70,\n+    DOM_VK_G: 71,\n+    DOM_VK_H: 72,\n+    DOM_VK_I: 73,\n+    DOM_VK_J: 74,\n+    DOM_VK_K: 75,\n+    DOM_VK_L: 76,\n+    DOM_VK_M: 77,\n+    DOM_VK_N: 78,\n+    DOM_VK_O: 79,\n+    DOM_VK_P: 80,\n+    DOM_VK_Q: 81,\n+    DOM_VK_R: 82,\n+    DOM_VK_S: 83,\n+    DOM_VK_T: 84,\n+    DOM_VK_U: 85,\n+    DOM_VK_V: 86,\n+    DOM_VK_W: 87,\n+    DOM_VK_X: 88,\n+    DOM_VK_Y: 89,\n+    DOM_VK_Z: 90,\n+    DOM_VK_CONTEXT_MENU: 93,\n+    DOM_VK_NUMPAD0: 96,\n+    DOM_VK_NUMPAD1: 97,\n+    DOM_VK_NUMPAD2: 98,\n+    DOM_VK_NUMPAD3: 99,\n+    DOM_VK_NUMPAD4: 100,\n+    DOM_VK_NUMPAD5: 101,\n+    DOM_VK_NUMPAD6: 102,\n+    DOM_VK_NUMPAD7: 103,\n+    DOM_VK_NUMPAD8: 104,\n+    DOM_VK_NUMPAD9: 105,\n+    DOM_VK_MULTIPLY: 106,\n+    DOM_VK_ADD: 107,\n+    DOM_VK_SEPARATOR: 108,\n+    DOM_VK_SUBTRACT: 109,\n+    DOM_VK_DECIMAL: 110,\n+    DOM_VK_DIVIDE: 111,\n+    DOM_VK_F1: 112,\n+    DOM_VK_F2: 113,\n+    DOM_VK_F3: 114,\n+    DOM_VK_F4: 115,\n+    DOM_VK_F5: 116,\n+    DOM_VK_F6: 117,\n+    DOM_VK_F7: 118,\n+    DOM_VK_F8: 119,\n+    DOM_VK_F9: 120,\n+    DOM_VK_F10: 121,\n+    DOM_VK_F11: 122,\n+    DOM_VK_F12: 123,\n+    DOM_VK_F13: 124,\n+    DOM_VK_F14: 125,\n+    DOM_VK_F15: 126,\n+    DOM_VK_F16: 127,\n+    DOM_VK_F17: 128,\n+    DOM_VK_F18: 129,\n+    DOM_VK_F19: 130,\n+    DOM_VK_F20: 131,\n+    DOM_VK_F21: 132,\n+    DOM_VK_F22: 133,\n+    DOM_VK_F23: 134,\n+    DOM_VK_F24: 135,\n+    DOM_VK_NUM_LOCK: 144,\n+    DOM_VK_SCROLL_LOCK: 145,\n+    DOM_VK_COMMA: 188,\n+    DOM_VK_PERIOD: 190,\n+    DOM_VK_SLASH: 191,\n+    DOM_VK_BACK_QUOTE: 192,\n+    DOM_VK_OPEN_BRACKET: 219,\n+    DOM_VK_BACK_SLASH: 220,\n+    DOM_VK_CLOSE_BRACKET: 221,\n+    DOM_VK_QUOTE: 222,\n+    DOM_VK_META: 224\n   }\n }\n-addEventListener('message', ipc.processMessage.bind(ipc)) // eslint-disable-line\n \n-/**\n- * Ensures a node replacement div is visible and has a proper zIndex\n- */\n-function ensureNodeVisible (node) {\n-  if (document.defaultView.getComputedStyle(node).display === 'none') {\n-    node.style.display = ''\n-  }\n-  if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n-    node.style.zIndex = ''\n+// hide this from the rest of the page\n+(function () {\n+  var ipc = {\n+    events: {},\n+    embedder: null,\n+    processMessage: function (event) {\n+      if (event.origin === 'file://') {\n+        this.embedder = event.source\n+        var cb = this.events[event.data[0]]\n+        cb && cb.apply(null, event.data)\n+      }\n+    },\n+    on: function (name, cb) {\n+      this.events[name] = cb\n+    },\n+    send: function () {\n+      var args = Array.prototype.slice.call(arguments)\n+      this.embedder && this.embedder.postMessage(args, 'file://')\n+    }\n   }\n-}\n+  window.addEventListener('message', ipc.processMessage.bind(ipc))",
        "path": "app/content/webviewPreload.js",
        "position": 176,
        "original_position": 176,
        "commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "original_commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "window. added from previous comment\n",
        "created_at": "2016-02-03T20:52:52Z",
        "updated_at": "2016-02-03T20:52:52Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785114",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/599",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785114"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785114"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/599"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785148",
        "pull_request_review_id": null,
        "id": 51785148,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1MTQ4",
        "diff_hunk": "@@ -2,255 +2,377 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n  * You can obtain one at http://mozilla.org/MPL/2.0/. */\n \n-var messages = require('../../js/constants/messages')\n-var KeyCodes = require('../../js/constants/keyCodes')\n-\n-var ipc = {\n-  events: {},\n-  embedder: null,\n-  processMessage: function (event) {\n-    if (event.origin === 'file://') {\n-      this.embedder = event.source\n-      var cb = this.events[event.data[0]]\n-      cb && cb.apply(null, event.data)\n-    }\n-  },\n-  on: function (name, cb) {\n-    this.events[name] = cb\n-  },\n-  send: function () {\n-    var args = Array.prototype.slice.call(arguments)\n-    this.embedder && this.embedder.postMessage(args, 'file://')\n+// inject missing DOM Level 3 KeyEvent\n+// https://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent\n+if (typeof KeyEvent === 'undefined') {\n+  var KeyEvent = {\n+    DOM_VK_CANCEL: 3,\n+    DOM_VK_HELP: 6,\n+    DOM_VK_BACK_SPACE: 8,\n+    DOM_VK_TAB: 9,\n+    DOM_VK_CLEAR: 12,\n+    DOM_VK_RETURN: 13,\n+    DOM_VK_ENTER: 14,\n+    DOM_VK_SHIFT: 16,\n+    DOM_VK_CONTROL: 17,\n+    DOM_VK_ALT: 18,\n+    DOM_VK_PAUSE: 19,\n+    DOM_VK_CAPS_LOCK: 20,\n+    DOM_VK_ESCAPE: 27,\n+    DOM_VK_SPACE: 32,\n+    DOM_VK_PAGE_UP: 33,\n+    DOM_VK_PAGE_DOWN: 34,\n+    DOM_VK_END: 35,\n+    DOM_VK_HOME: 36,\n+    DOM_VK_LEFT: 37,\n+    DOM_VK_UP: 38,\n+    DOM_VK_RIGHT: 39,\n+    DOM_VK_DOWN: 40,\n+    DOM_VK_PRINTSCREEN: 44,\n+    DOM_VK_INSERT: 45,\n+    DOM_VK_DELETE: 46,\n+    DOM_VK_0: 48,\n+    DOM_VK_1: 49,\n+    DOM_VK_2: 50,\n+    DOM_VK_3: 51,\n+    DOM_VK_4: 52,\n+    DOM_VK_5: 53,\n+    DOM_VK_6: 54,\n+    DOM_VK_7: 55,\n+    DOM_VK_8: 56,\n+    DOM_VK_9: 57,\n+    DOM_VK_SEMICOLON: 59,\n+    DOM_VK_EQUALS: 61,\n+    DOM_VK_A: 65,\n+    DOM_VK_B: 66,\n+    DOM_VK_C: 67,\n+    DOM_VK_D: 68,\n+    DOM_VK_E: 69,\n+    DOM_VK_F: 70,\n+    DOM_VK_G: 71,\n+    DOM_VK_H: 72,\n+    DOM_VK_I: 73,\n+    DOM_VK_J: 74,\n+    DOM_VK_K: 75,\n+    DOM_VK_L: 76,\n+    DOM_VK_M: 77,\n+    DOM_VK_N: 78,\n+    DOM_VK_O: 79,\n+    DOM_VK_P: 80,\n+    DOM_VK_Q: 81,\n+    DOM_VK_R: 82,\n+    DOM_VK_S: 83,\n+    DOM_VK_T: 84,\n+    DOM_VK_U: 85,\n+    DOM_VK_V: 86,\n+    DOM_VK_W: 87,\n+    DOM_VK_X: 88,\n+    DOM_VK_Y: 89,\n+    DOM_VK_Z: 90,\n+    DOM_VK_CONTEXT_MENU: 93,\n+    DOM_VK_NUMPAD0: 96,\n+    DOM_VK_NUMPAD1: 97,\n+    DOM_VK_NUMPAD2: 98,\n+    DOM_VK_NUMPAD3: 99,\n+    DOM_VK_NUMPAD4: 100,\n+    DOM_VK_NUMPAD5: 101,\n+    DOM_VK_NUMPAD6: 102,\n+    DOM_VK_NUMPAD7: 103,\n+    DOM_VK_NUMPAD8: 104,\n+    DOM_VK_NUMPAD9: 105,\n+    DOM_VK_MULTIPLY: 106,\n+    DOM_VK_ADD: 107,\n+    DOM_VK_SEPARATOR: 108,\n+    DOM_VK_SUBTRACT: 109,\n+    DOM_VK_DECIMAL: 110,\n+    DOM_VK_DIVIDE: 111,\n+    DOM_VK_F1: 112,\n+    DOM_VK_F2: 113,\n+    DOM_VK_F3: 114,\n+    DOM_VK_F4: 115,\n+    DOM_VK_F5: 116,\n+    DOM_VK_F6: 117,\n+    DOM_VK_F7: 118,\n+    DOM_VK_F8: 119,\n+    DOM_VK_F9: 120,\n+    DOM_VK_F10: 121,\n+    DOM_VK_F11: 122,\n+    DOM_VK_F12: 123,\n+    DOM_VK_F13: 124,\n+    DOM_VK_F14: 125,\n+    DOM_VK_F15: 126,\n+    DOM_VK_F16: 127,\n+    DOM_VK_F17: 128,\n+    DOM_VK_F18: 129,\n+    DOM_VK_F19: 130,\n+    DOM_VK_F20: 131,\n+    DOM_VK_F21: 132,\n+    DOM_VK_F22: 133,\n+    DOM_VK_F23: 134,\n+    DOM_VK_F24: 135,\n+    DOM_VK_NUM_LOCK: 144,\n+    DOM_VK_SCROLL_LOCK: 145,\n+    DOM_VK_COMMA: 188,\n+    DOM_VK_PERIOD: 190,\n+    DOM_VK_SLASH: 191,\n+    DOM_VK_BACK_QUOTE: 192,\n+    DOM_VK_OPEN_BRACKET: 219,\n+    DOM_VK_BACK_SLASH: 220,\n+    DOM_VK_CLOSE_BRACKET: 221,\n+    DOM_VK_QUOTE: 222,\n+    DOM_VK_META: 224\n   }\n }\n-addEventListener('message', ipc.processMessage.bind(ipc)) // eslint-disable-line\n \n-/**\n- * Ensures a node replacement div is visible and has a proper zIndex\n- */\n-function ensureNodeVisible (node) {\n-  if (document.defaultView.getComputedStyle(node).display === 'none') {\n-    node.style.display = ''\n-  }\n-  if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n-    node.style.zIndex = ''\n+// hide this from the rest of the page\n+(function () {\n+  var ipc = {\n+    events: {},\n+    embedder: null,\n+    processMessage: function (event) {\n+      if (event.origin === 'file://') {\n+        this.embedder = event.source\n+        var cb = this.events[event.data[0]]\n+        cb && cb.apply(null, event.data)\n+      }\n+    },\n+    on: function (name, cb) {\n+      this.events[name] = cb\n+    },\n+    send: function () {\n+      var args = Array.prototype.slice.call(arguments)\n+      this.embedder && this.embedder.postMessage(args, 'file://')\n+    }\n   }\n-}\n+  window.addEventListener('message', ipc.processMessage.bind(ipc))\n \n-/**\n- * Determines the ad size which should be shown\n- * It will first check the node's size and try to infer that way.\n- * If that is not possible it will rely on the iframeData\n- *\n- * @param node The node that is being replaced\n- * @param iframeData The known preprocessed iframeData for that node\n- */\n-function getAdSize (node, iframeData) {\n-  var acceptableAdSizes = [\n-    [970, 250],\n-    [970, 90],\n-    [728, 90],\n-    [300, 250],\n-    [300, 600],\n-    [160, 600],\n-    [120, 600],\n-    [320, 50]\n-  ]\n-  for (var i = 0; i < acceptableAdSizes.length; i++) {\n-    var adSize = acceptableAdSizes[i]\n-    if (node.offsetWidth === adSize[0] && node.offsetHeight >= adSize[1] ||\n-        node.offsetWidth >= adSize[0] && node.offsetHeight === adSize[1]) {\n-      return adSize\n+  /**\n+   * Ensures a node replacement div is visible and has a proper zIndex\n+   */\n+  function ensureNodeVisible (node) {\n+    if (document.defaultView.getComputedStyle(node).display === 'none') {\n+      node.style.display = ''\n+    }\n+    if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n+      node.style.zIndex = ''\n     }\n   }\n \n-  if (iframeData) {\n-    return [iframeData.width || iframeData.w, iframeData.height || iframeData.h]\n-  }\n+  /**\n+   * Determines the ad size which should be shown\n+   * It will first check the node's size and try to infer that way.\n+   * If that is not possible it will rely on the iframeData\n+   *\n+   * @param node The node that is being replaced\n+   * @param iframeData The known preprocessed iframeData for that node\n+   */\n+  function getAdSize (node, iframeData) {\n+    var acceptableAdSizes = [\n+      [970, 250],\n+      [970, 90],\n+      [728, 90],\n+      [300, 250],\n+      [300, 600],\n+      [160, 600],\n+      [120, 600],\n+      [320, 50]\n+    ]\n+    for (var i = 0; i < acceptableAdSizes.length; i++) {\n+      var adSize = acceptableAdSizes[i]\n+      if (node.offsetWidth === adSize[0] && node.offsetHeight >= adSize[1] ||\n+          node.offsetWidth >= adSize[0] && node.offsetHeight === adSize[1]) {\n+        return adSize\n+      }\n+    }\n \n-  return null\n-}\n+    if (iframeData) {\n+      return [iframeData.width || iframeData.w, iframeData.height || iframeData.h]\n+    }\n \n-/**\n- * Processes a single node which is an ad\n- *\n- * @param node The node of the ad to process\n- * @param iframeData The iframe data of the node to process from the slimerJS bot\n- * @param replacementUrl The vault replacement url\n- */\n-function processAdNode (node, iframeData, replacementUrl) {\n-  if (!node) {\n-    return\n+    return null\n   }\n \n-  var adSize = getAdSize(node, iframeData)\n-  // Could not determine the ad size, so just skip this replacement\n-  if (!adSize) {\n-    // we have a replace node node but no replacement, so just display none on it\n-    node.style.display = 'none'\n-    return\n-  }\n+  /**\n+   * Processes a single node which is an ad\n+   *\n+   * @param node The node of the ad to process\n+   * @param iframeData The iframe data of the node to process from the slimerJS bot\n+   * @param replacementUrl The vault replacement url\n+   */\n+  function processAdNode (node, iframeData, replacementUrl) {\n+    if (!node) {\n+      return\n+    }\n \n-  // generate a random segment\n-  // @todo - replace with renko targeting\n-  var segments = ['IAB2', 'IAB17', 'IAB14', 'IAB21', 'IAB20']\n-  var segment = segments[Math.floor(Math.random() * 4)]\n-  var time_in_segment = new Date().getSeconds()\n-  var segment_expiration_time = 0 // no expiration\n+    var adSize = getAdSize(node, iframeData)\n+    // Could not determine the ad size, so just skip this replacement\n+    if (!adSize) {\n+      // we have a replace node node but no replacement, so just display none on it\n+      node.style.display = 'none'\n+      return\n+    }\n \n-  // ref param for referrer when possible\n-  var srcUrl = replacementUrl + '?width=' + adSize[0] + '&height=' + adSize[1] + '&seg=' + segment + ':' + time_in_segment + ':' + segment_expiration_time\n-  var src = '<html><body style=\"width: ' + adSize[0] + 'px; height: ' + adSize[1] + '; padding: 0; margin: 0; overflow: hidden;\"><script src=\"' + srcUrl + '\"></script></body></html>'\n+    // generate a random segment\n+    // @todo - replace with renko targeting\n+    var segments = ['IAB2', 'IAB17', 'IAB14', 'IAB21', 'IAB20']\n+    var segment = segments[Math.floor(Math.random() * 4)]\n+    var time_in_segment = new Date().getSeconds()\n+    var segment_expiration_time = 0 // no expiration\n \n-  if (node.tagName === 'IFRAME') {\n-    node.srcdoc = src\n-    node.sandbox = 'allow-scripts'\n-  } else {\n-    while (node.firstChild) {\n-      node.removeChild(node.firstChild)\n-    }\n-    var iframe = document.createElement('iframe')\n-    iframe.style.padding = 0\n-    iframe.style.border = 0\n-    iframe.style.margin = 0\n-    iframe.style.width = adSize[0] + 'px'\n-    iframe.style.height = adSize[1] + 'px'\n-    iframe.srcdoc = src\n-    iframe.sandbox = 'allow-scripts allow-popups'\n-    node.appendChild(iframe)\n-    ensureNodeVisible(node)\n-    if (node.parentNode) {\n-      ensureNodeVisible(node.parentNode)\n+    // ref param for referrer when possible\n+    var srcUrl = replacementUrl + '?width=' + adSize[0] + '&height=' + adSize[1] + '&seg=' + segment + ':' + time_in_segment + ':' + segment_expiration_time\n+    var src = '<html><body style=\"width: ' + adSize[0] + 'px; height: ' + adSize[1] + '; padding: 0; margin: 0; overflow: hidden;\"><script src=\"' + srcUrl + '\"></script></body></html>'\n+\n+    if (node.tagName === 'IFRAME') {\n+      node.srcdoc = src\n+      node.sandbox = 'allow-scripts'\n+    } else {\n+      while (node.firstChild) {\n+        node.removeChild(node.firstChild)\n+      }\n+      var iframe = document.createElement('iframe')\n+      iframe.style.padding = 0\n+      iframe.style.border = 0\n+      iframe.style.margin = 0\n+      iframe.style.width = adSize[0] + 'px'\n+      iframe.style.height = adSize[1] + 'px'\n+      iframe.srcdoc = src\n+      iframe.sandbox = 'allow-scripts allow-popups'\n+      node.appendChild(iframe)\n+      ensureNodeVisible(node)\n       if (node.parentNode) {\n-        ensureNodeVisible(node.parentNode.parentNode)\n+        ensureNodeVisible(node.parentNode)\n+        if (node.parentNode) {\n+          ensureNodeVisible(node.parentNode.parentNode)\n+        }\n       }\n     }\n   }\n-}\n \n-// Fires when the browser has ad replacement information to give\n-ipc.on(messages.SET_AD_DIV_CANDIDATES, function (e, adDivCandidates, placeholderUrl) {",
        "path": "app/content/webviewPreload.js",
        "position": 358,
        "original_position": 358,
        "commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "original_commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "messages replaced with message text\n",
        "created_at": "2016-02-03T20:53:11Z",
        "updated_at": "2016-02-03T20:53:11Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785148",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/599",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785148"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785148"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/599"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785350",
        "pull_request_review_id": null,
        "id": 51785350,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1MzUw",
        "diff_hunk": "@@ -2,255 +2,377 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n  * You can obtain one at http://mozilla.org/MPL/2.0/. */\n \n-var messages = require('../../js/constants/messages')\n-var KeyCodes = require('../../js/constants/keyCodes')\n-\n-var ipc = {\n-  events: {},\n-  embedder: null,\n-  processMessage: function (event) {\n-    if (event.origin === 'file://') {\n-      this.embedder = event.source\n-      var cb = this.events[event.data[0]]\n-      cb && cb.apply(null, event.data)\n-    }\n-  },\n-  on: function (name, cb) {\n-    this.events[name] = cb\n-  },\n-  send: function () {\n-    var args = Array.prototype.slice.call(arguments)\n-    this.embedder && this.embedder.postMessage(args, 'file://')\n+// inject missing DOM Level 3 KeyEvent\n+// https://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent\n+if (typeof KeyEvent === 'undefined') {\n+  var KeyEvent = {\n+    DOM_VK_CANCEL: 3,\n+    DOM_VK_HELP: 6,\n+    DOM_VK_BACK_SPACE: 8,\n+    DOM_VK_TAB: 9,\n+    DOM_VK_CLEAR: 12,\n+    DOM_VK_RETURN: 13,\n+    DOM_VK_ENTER: 14,\n+    DOM_VK_SHIFT: 16,\n+    DOM_VK_CONTROL: 17,\n+    DOM_VK_ALT: 18,\n+    DOM_VK_PAUSE: 19,\n+    DOM_VK_CAPS_LOCK: 20,\n+    DOM_VK_ESCAPE: 27,\n+    DOM_VK_SPACE: 32,\n+    DOM_VK_PAGE_UP: 33,\n+    DOM_VK_PAGE_DOWN: 34,\n+    DOM_VK_END: 35,\n+    DOM_VK_HOME: 36,\n+    DOM_VK_LEFT: 37,\n+    DOM_VK_UP: 38,\n+    DOM_VK_RIGHT: 39,\n+    DOM_VK_DOWN: 40,\n+    DOM_VK_PRINTSCREEN: 44,\n+    DOM_VK_INSERT: 45,\n+    DOM_VK_DELETE: 46,\n+    DOM_VK_0: 48,\n+    DOM_VK_1: 49,\n+    DOM_VK_2: 50,\n+    DOM_VK_3: 51,\n+    DOM_VK_4: 52,\n+    DOM_VK_5: 53,\n+    DOM_VK_6: 54,\n+    DOM_VK_7: 55,\n+    DOM_VK_8: 56,\n+    DOM_VK_9: 57,\n+    DOM_VK_SEMICOLON: 59,\n+    DOM_VK_EQUALS: 61,\n+    DOM_VK_A: 65,\n+    DOM_VK_B: 66,\n+    DOM_VK_C: 67,\n+    DOM_VK_D: 68,\n+    DOM_VK_E: 69,\n+    DOM_VK_F: 70,\n+    DOM_VK_G: 71,\n+    DOM_VK_H: 72,\n+    DOM_VK_I: 73,\n+    DOM_VK_J: 74,\n+    DOM_VK_K: 75,\n+    DOM_VK_L: 76,\n+    DOM_VK_M: 77,\n+    DOM_VK_N: 78,\n+    DOM_VK_O: 79,\n+    DOM_VK_P: 80,\n+    DOM_VK_Q: 81,\n+    DOM_VK_R: 82,\n+    DOM_VK_S: 83,\n+    DOM_VK_T: 84,\n+    DOM_VK_U: 85,\n+    DOM_VK_V: 86,\n+    DOM_VK_W: 87,\n+    DOM_VK_X: 88,\n+    DOM_VK_Y: 89,\n+    DOM_VK_Z: 90,\n+    DOM_VK_CONTEXT_MENU: 93,\n+    DOM_VK_NUMPAD0: 96,\n+    DOM_VK_NUMPAD1: 97,\n+    DOM_VK_NUMPAD2: 98,\n+    DOM_VK_NUMPAD3: 99,\n+    DOM_VK_NUMPAD4: 100,\n+    DOM_VK_NUMPAD5: 101,\n+    DOM_VK_NUMPAD6: 102,\n+    DOM_VK_NUMPAD7: 103,\n+    DOM_VK_NUMPAD8: 104,\n+    DOM_VK_NUMPAD9: 105,\n+    DOM_VK_MULTIPLY: 106,\n+    DOM_VK_ADD: 107,\n+    DOM_VK_SEPARATOR: 108,\n+    DOM_VK_SUBTRACT: 109,\n+    DOM_VK_DECIMAL: 110,\n+    DOM_VK_DIVIDE: 111,\n+    DOM_VK_F1: 112,\n+    DOM_VK_F2: 113,\n+    DOM_VK_F3: 114,\n+    DOM_VK_F4: 115,\n+    DOM_VK_F5: 116,\n+    DOM_VK_F6: 117,\n+    DOM_VK_F7: 118,\n+    DOM_VK_F8: 119,\n+    DOM_VK_F9: 120,\n+    DOM_VK_F10: 121,\n+    DOM_VK_F11: 122,\n+    DOM_VK_F12: 123,\n+    DOM_VK_F13: 124,\n+    DOM_VK_F14: 125,\n+    DOM_VK_F15: 126,\n+    DOM_VK_F16: 127,\n+    DOM_VK_F17: 128,\n+    DOM_VK_F18: 129,\n+    DOM_VK_F19: 130,\n+    DOM_VK_F20: 131,\n+    DOM_VK_F21: 132,\n+    DOM_VK_F22: 133,\n+    DOM_VK_F23: 134,\n+    DOM_VK_F24: 135,\n+    DOM_VK_NUM_LOCK: 144,\n+    DOM_VK_SCROLL_LOCK: 145,\n+    DOM_VK_COMMA: 188,\n+    DOM_VK_PERIOD: 190,\n+    DOM_VK_SLASH: 191,\n+    DOM_VK_BACK_QUOTE: 192,\n+    DOM_VK_OPEN_BRACKET: 219,\n+    DOM_VK_BACK_SLASH: 220,\n+    DOM_VK_CLOSE_BRACKET: 221,\n+    DOM_VK_QUOTE: 222,\n+    DOM_VK_META: 224\n   }\n }\n-addEventListener('message', ipc.processMessage.bind(ipc)) // eslint-disable-line\n \n-/**\n- * Ensures a node replacement div is visible and has a proper zIndex\n- */\n-function ensureNodeVisible (node) {\n-  if (document.defaultView.getComputedStyle(node).display === 'none') {\n-    node.style.display = ''\n-  }\n-  if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n-    node.style.zIndex = ''\n+// hide this from the rest of the page\n+(function () {\n+  var ipc = {\n+    events: {},\n+    embedder: null,\n+    processMessage: function (event) {\n+      if (event.origin === 'file://') {\n+        this.embedder = event.source\n+        var cb = this.events[event.data[0]]\n+        cb && cb.apply(null, event.data)\n+      }\n+    },\n+    on: function (name, cb) {\n+      this.events[name] = cb\n+    },\n+    send: function () {\n+      var args = Array.prototype.slice.call(arguments)\n+      this.embedder && this.embedder.postMessage(args, 'file://')\n+    }\n   }\n-}\n+  window.addEventListener('message', ipc.processMessage.bind(ipc))\n \n-/**\n- * Determines the ad size which should be shown\n- * It will first check the node's size and try to infer that way.\n- * If that is not possible it will rely on the iframeData\n- *\n- * @param node The node that is being replaced\n- * @param iframeData The known preprocessed iframeData for that node\n- */\n-function getAdSize (node, iframeData) {\n-  var acceptableAdSizes = [\n-    [970, 250],\n-    [970, 90],\n-    [728, 90],\n-    [300, 250],\n-    [300, 600],\n-    [160, 600],\n-    [120, 600],\n-    [320, 50]\n-  ]\n-  for (var i = 0; i < acceptableAdSizes.length; i++) {\n-    var adSize = acceptableAdSizes[i]\n-    if (node.offsetWidth === adSize[0] && node.offsetHeight >= adSize[1] ||\n-        node.offsetWidth >= adSize[0] && node.offsetHeight === adSize[1]) {\n-      return adSize\n+  /**\n+   * Ensures a node replacement div is visible and has a proper zIndex\n+   */\n+  function ensureNodeVisible (node) {\n+    if (document.defaultView.getComputedStyle(node).display === 'none') {\n+      node.style.display = ''\n+    }\n+    if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n+      node.style.zIndex = ''\n     }\n   }\n \n-  if (iframeData) {\n-    return [iframeData.width || iframeData.w, iframeData.height || iframeData.h]\n-  }\n+  /**\n+   * Determines the ad size which should be shown\n+   * It will first check the node's size and try to infer that way.\n+   * If that is not possible it will rely on the iframeData\n+   *\n+   * @param node The node that is being replaced\n+   * @param iframeData The known preprocessed iframeData for that node\n+   */\n+  function getAdSize (node, iframeData) {\n+    var acceptableAdSizes = [\n+      [970, 250],\n+      [970, 90],\n+      [728, 90],\n+      [300, 250],\n+      [300, 600],\n+      [160, 600],\n+      [120, 600],\n+      [320, 50]\n+    ]\n+    for (var i = 0; i < acceptableAdSizes.length; i++) {\n+      var adSize = acceptableAdSizes[i]\n+      if (node.offsetWidth === adSize[0] && node.offsetHeight >= adSize[1] ||\n+          node.offsetWidth >= adSize[0] && node.offsetHeight === adSize[1]) {\n+        return adSize\n+      }\n+    }\n \n-  return null\n-}\n+    if (iframeData) {\n+      return [iframeData.width || iframeData.w, iframeData.height || iframeData.h]\n+    }\n \n-/**\n- * Processes a single node which is an ad\n- *\n- * @param node The node of the ad to process\n- * @param iframeData The iframe data of the node to process from the slimerJS bot\n- * @param replacementUrl The vault replacement url\n- */\n-function processAdNode (node, iframeData, replacementUrl) {\n-  if (!node) {\n-    return\n+    return null\n   }\n \n-  var adSize = getAdSize(node, iframeData)\n-  // Could not determine the ad size, so just skip this replacement\n-  if (!adSize) {\n-    // we have a replace node node but no replacement, so just display none on it\n-    node.style.display = 'none'\n-    return\n-  }\n+  /**\n+   * Processes a single node which is an ad\n+   *\n+   * @param node The node of the ad to process\n+   * @param iframeData The iframe data of the node to process from the slimerJS bot\n+   * @param replacementUrl The vault replacement url\n+   */\n+  function processAdNode (node, iframeData, replacementUrl) {\n+    if (!node) {\n+      return\n+    }\n \n-  // generate a random segment\n-  // @todo - replace with renko targeting\n-  var segments = ['IAB2', 'IAB17', 'IAB14', 'IAB21', 'IAB20']\n-  var segment = segments[Math.floor(Math.random() * 4)]\n-  var time_in_segment = new Date().getSeconds()\n-  var segment_expiration_time = 0 // no expiration\n+    var adSize = getAdSize(node, iframeData)\n+    // Could not determine the ad size, so just skip this replacement\n+    if (!adSize) {\n+      // we have a replace node node but no replacement, so just display none on it\n+      node.style.display = 'none'\n+      return\n+    }\n \n-  // ref param for referrer when possible\n-  var srcUrl = replacementUrl + '?width=' + adSize[0] + '&height=' + adSize[1] + '&seg=' + segment + ':' + time_in_segment + ':' + segment_expiration_time\n-  var src = '<html><body style=\"width: ' + adSize[0] + 'px; height: ' + adSize[1] + '; padding: 0; margin: 0; overflow: hidden;\"><script src=\"' + srcUrl + '\"></script></body></html>'\n+    // generate a random segment\n+    // @todo - replace with renko targeting\n+    var segments = ['IAB2', 'IAB17', 'IAB14', 'IAB21', 'IAB20']\n+    var segment = segments[Math.floor(Math.random() * 4)]\n+    var time_in_segment = new Date().getSeconds()\n+    var segment_expiration_time = 0 // no expiration\n \n-  if (node.tagName === 'IFRAME') {\n-    node.srcdoc = src\n-    node.sandbox = 'allow-scripts'\n-  } else {\n-    while (node.firstChild) {\n-      node.removeChild(node.firstChild)\n-    }\n-    var iframe = document.createElement('iframe')\n-    iframe.style.padding = 0\n-    iframe.style.border = 0\n-    iframe.style.margin = 0\n-    iframe.style.width = adSize[0] + 'px'\n-    iframe.style.height = adSize[1] + 'px'\n-    iframe.srcdoc = src\n-    iframe.sandbox = 'allow-scripts allow-popups'\n-    node.appendChild(iframe)\n-    ensureNodeVisible(node)\n-    if (node.parentNode) {\n-      ensureNodeVisible(node.parentNode)\n+    // ref param for referrer when possible\n+    var srcUrl = replacementUrl + '?width=' + adSize[0] + '&height=' + adSize[1] + '&seg=' + segment + ':' + time_in_segment + ':' + segment_expiration_time\n+    var src = '<html><body style=\"width: ' + adSize[0] + 'px; height: ' + adSize[1] + '; padding: 0; margin: 0; overflow: hidden;\"><script src=\"' + srcUrl + '\"></script></body></html>'\n+\n+    if (node.tagName === 'IFRAME') {\n+      node.srcdoc = src\n+      node.sandbox = 'allow-scripts'\n+    } else {\n+      while (node.firstChild) {\n+        node.removeChild(node.firstChild)\n+      }\n+      var iframe = document.createElement('iframe')\n+      iframe.style.padding = 0\n+      iframe.style.border = 0\n+      iframe.style.margin = 0\n+      iframe.style.width = adSize[0] + 'px'\n+      iframe.style.height = adSize[1] + 'px'\n+      iframe.srcdoc = src\n+      iframe.sandbox = 'allow-scripts allow-popups'\n+      node.appendChild(iframe)\n+      ensureNodeVisible(node)\n       if (node.parentNode) {\n-        ensureNodeVisible(node.parentNode.parentNode)\n+        ensureNodeVisible(node.parentNode)\n+        if (node.parentNode) {\n+          ensureNodeVisible(node.parentNode.parentNode)\n+        }\n       }\n     }\n   }\n-}\n \n-// Fires when the browser has ad replacement information to give\n-ipc.on(messages.SET_AD_DIV_CANDIDATES, function (e, adDivCandidates, placeholderUrl) {\n-  // Keep a lookup for skipped common elements\n-  var fallbackNodeDataForCommon = {}\n+  // Fires when the browser has ad replacement information to give\n+  ipc.on('set-ad-div-candidates', function (e, adDivCandidates, placeholderUrl) {\n+    // Keep a lookup for skipped common elements\n+    var fallbackNodeDataForCommon = {}\n \n-  // Process all of the specific ad information for this page\n-  adDivCandidates.forEach(function (iframeData) {\n-    var replaceId = iframeData.replapceId || iframeData.rid\n-    var selector = '[id=\"' + replaceId + '\"]'\n-    var node = document.querySelector(selector)\n-    if (!node) {\n-      return\n-    }\n+    // Process all of the specific ad information for this page\n+    adDivCandidates.forEach(function (iframeData) {\n+      var replaceId = iframeData.replapceId || iframeData.rid\n+      var selector = '[id=\"' + replaceId + '\"]'\n+      var node = document.querySelector(selector)\n+      if (!node) {\n+        return\n+      }\n \n-    // Skip over known common elements\n-    if (replaceId.startsWith('google_ads_iframe_') ||\n-        replaceId.endsWith('__container__')) {\n-      fallbackNodeDataForCommon[node.id] = iframeData\n-      return\n-    }\n+      // Skip over known common elements\n+      if (replaceId.startsWith('google_ads_iframe_') ||\n+          replaceId.endsWith('__container__')) {\n+        fallbackNodeDataForCommon[node.id] = iframeData\n+        return\n+      }\n \n-    // Find the node and process it\n-    processAdNode(document.querySelector(selector), iframeData, placeholderUrl)\n-  })\n+      // Find the node and process it\n+      processAdNode(document.querySelector(selector), iframeData, placeholderUrl)\n+    })\n \n-  // Common selectors which could be on every page\n-  var commonSelectors = [\n-    '[id^=\"google_ads_iframe_\"][id$=\"__container__\"]',\n-    '[id^=\"ad-slot-banner-\"]',\n-    '[data-ad-slot]'\n-  ]\n-  commonSelectors.forEach(commonSelector => {\n-    var nodes = document.querySelectorAll(commonSelector)\n-    if (!nodes) {\n-      return\n-    }\n-    Array.from(nodes).forEach(node => {\n-      processAdNode(node, fallbackNodeDataForCommon[node.id], placeholderUrl)\n+    // Common selectors which could be on every page\n+    var commonSelectors = [\n+      '[id^=\"google_ads_iframe_\"][id$=\"__container__\"]',\n+      '[id^=\"ad-slot-banner-\"]',\n+      '[data-ad-slot]'\n+    ]\n+    commonSelectors.forEach(commonSelector => {\n+      var nodes = document.querySelectorAll(commonSelector)\n+      if (!nodes) {\n+        return\n+      }\n+      Array.from(nodes).forEach(node => {\n+        processAdNode(node, fallbackNodeDataForCommon[node.id], placeholderUrl)\n+      })\n     })\n   })\n-})\n-\n-function hasSelection (node) {\n-  if (node && node.selectionStart !== undefined &&\n-      node.selectionEnd !== undefined &&\n-      node.selectionStart !== node.selectionEnd) {\n-    return true\n-  }\n \n-  var selection = window.getSelection()\n-  for (var i = 0; i < selection.rangeCount; i++) {\n-    var range = window.getSelection().getRangeAt(i)\n-    if (range.endOffset !== undefined &&\n-        range.startOffset !== undefined &&\n-        range.endOffset !== range.startOffset) {\n+  function hasSelection (node) {\n+    if (node && node.selectionStart !== undefined &&\n+        node.selectionEnd !== undefined &&\n+        node.selectionStart !== node.selectionEnd) {\n       return true\n     }\n-  }\n-  return false\n-}\n \n-/**\n- * Whether an element is editable or can be typed into.\n- * @param {Element} elem\n- * @return {boolean}\n- */\n-function isEditable (elem) {\n-  // TODO: find other node types that are editable\n-  return ((elem.contentEditable && elem.contentEditable !== 'false' && elem.contentEditable !== 'inherit') ||\n-          elem.nodeName === 'INPUT' ||\n-          elem.nodeName === 'TEXTAREA')\n-}\n+    var selection = window.getSelection()\n+    for (var i = 0; i < selection.rangeCount; i++) {\n+      var range = window.getSelection().getRangeAt(i)\n+      if (range.endOffset !== undefined &&\n+          range.startOffset !== undefined &&\n+          range.endOffset !== range.startOffset) {\n+        return true\n+      }\n+    }\n+    return false\n+  }\n \n-/**\n- * Whether we are on OS X\n- * @return {boolean}\n- */\n-function isPlatformOSX () {\n-  // TODO: navigator.platform is getting deprecated\n-  return window.navigator.platform.includes('Mac')\n-}\n+  /**\n+   * Whether an element is editable or can be typed into.\n+   * @param {Element} elem\n+   * @return {boolean}\n+   */\n+  function isEditable (elem) {\n+    // TODO: find other node types that are editable\n+    return ((elem.contentEditable && elem.contentEditable !== 'false' && elem.contentEditable !== 'inherit') ||\n+            elem.nodeName === 'INPUT' ||\n+            elem.nodeName === 'TEXTAREA')\n+  }\n \n-document.addEventListener('contextmenu', (e) => {\n-  var name = e.target.nodeName.toUpperCase()\n-  var nodeProps = {\n-    name: name,\n-    src: name === 'A' ? e.target.href : e.target.src,\n-    isContentEditable: e.target.isContentEditable,\n-    hasSelection: hasSelection(e.target)\n+  /**\n+   * Whether we are on OS X\n+   * @return {boolean}\n+   */\n+  function isPlatformOSX () {\n+    // TODO: navigator.platform is getting deprecated\n+    return window.navigator.platform.includes('Mac')\n   }\n-  ipc.send(messages.CONTEXT_MENU_OPENED, nodeProps)\n-  e.preventDefault()\n-}, false)\n \n-document.onkeydown = (e) => {\n-  switch (e.keyCode) {\n-    case KeyCodes.ESC:\n-      e.preventDefault()\n-      ipc.send(messages.STOP_LOAD)\n-      break\n-    case KeyCodes.BACKSPACE:\n-      if (!isEditable(document.activeElement)) {\n-        e.shiftKey ? history.forward() : history.back() // eslint-disable-line\n-      }\n-      break\n-    case KeyCodes.LEFT:\n-      if (e.metaKey && !isEditable(document.activeElement) && isPlatformOSX()) {\n-        history.back() // eslint-disable-line\n-      }\n-      break\n-    case KeyCodes.RIGHT:\n-      if (e.metaKey && !isEditable(document.activeElement) && isPlatformOSX()) {\n-        history.forward() // eslint-disable-line\n-      }\n-      break\n+  document.addEventListener('contextmenu', (e) => {\n+    var name = e.target.nodeName.toUpperCase()\n+    var nodeProps = {\n+      name: name,\n+      src: name === 'A' ? e.target.href : e.target.src,\n+      isContentEditable: e.target.isContentEditable,\n+      hasSelection: hasSelection(e.target)\n+    }\n+    ipc.send('context-menu-opened', nodeProps)\n+    e.preventDefault()\n+  }, false)\n+\n+  document.onkeydown = (e) => {\n+    switch (e.keyCode) {\n+      case KeyEvent.DOM_VK_ESCAPE:\n+        e.preventDefault()\n+        ipc.send('stop-load')\n+        break\n+      case KeyEvent.DOM_VK_BACK_SPACE:\n+        if (!isEditable(document.activeElement)) {\n+          e.shiftKey ? window.history.forward() : window.history.back()",
        "path": "app/content/webviewPreload.js",
        "position": 560,
        "original_position": 560,
        "commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "original_commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "window. added from previous comment\n",
        "created_at": "2016-02-03T20:54:56Z",
        "updated_at": "2016-02-03T20:54:56Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785350",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/599",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785350"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785350"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/599"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785513",
        "pull_request_review_id": null,
        "id": 51785513,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1NTEz",
        "diff_hunk": "@@ -2,255 +2,377 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this file,\n  * You can obtain one at http://mozilla.org/MPL/2.0/. */\n \n-var messages = require('../../js/constants/messages')\n-var KeyCodes = require('../../js/constants/keyCodes')\n-\n-var ipc = {\n-  events: {},\n-  embedder: null,\n-  processMessage: function (event) {\n-    if (event.origin === 'file://') {\n-      this.embedder = event.source\n-      var cb = this.events[event.data[0]]\n-      cb && cb.apply(null, event.data)\n-    }\n-  },\n-  on: function (name, cb) {\n-    this.events[name] = cb\n-  },\n-  send: function () {\n-    var args = Array.prototype.slice.call(arguments)\n-    this.embedder && this.embedder.postMessage(args, 'file://')\n+// inject missing DOM Level 3 KeyEvent\n+// https://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010410/DOM3-Events.html#events-Events-KeyEvent\n+if (typeof KeyEvent === 'undefined') {\n+  var KeyEvent = {\n+    DOM_VK_CANCEL: 3,\n+    DOM_VK_HELP: 6,\n+    DOM_VK_BACK_SPACE: 8,\n+    DOM_VK_TAB: 9,\n+    DOM_VK_CLEAR: 12,\n+    DOM_VK_RETURN: 13,\n+    DOM_VK_ENTER: 14,\n+    DOM_VK_SHIFT: 16,\n+    DOM_VK_CONTROL: 17,\n+    DOM_VK_ALT: 18,\n+    DOM_VK_PAUSE: 19,\n+    DOM_VK_CAPS_LOCK: 20,\n+    DOM_VK_ESCAPE: 27,\n+    DOM_VK_SPACE: 32,\n+    DOM_VK_PAGE_UP: 33,\n+    DOM_VK_PAGE_DOWN: 34,\n+    DOM_VK_END: 35,\n+    DOM_VK_HOME: 36,\n+    DOM_VK_LEFT: 37,\n+    DOM_VK_UP: 38,\n+    DOM_VK_RIGHT: 39,\n+    DOM_VK_DOWN: 40,\n+    DOM_VK_PRINTSCREEN: 44,\n+    DOM_VK_INSERT: 45,\n+    DOM_VK_DELETE: 46,\n+    DOM_VK_0: 48,\n+    DOM_VK_1: 49,\n+    DOM_VK_2: 50,\n+    DOM_VK_3: 51,\n+    DOM_VK_4: 52,\n+    DOM_VK_5: 53,\n+    DOM_VK_6: 54,\n+    DOM_VK_7: 55,\n+    DOM_VK_8: 56,\n+    DOM_VK_9: 57,\n+    DOM_VK_SEMICOLON: 59,\n+    DOM_VK_EQUALS: 61,\n+    DOM_VK_A: 65,\n+    DOM_VK_B: 66,\n+    DOM_VK_C: 67,\n+    DOM_VK_D: 68,\n+    DOM_VK_E: 69,\n+    DOM_VK_F: 70,\n+    DOM_VK_G: 71,\n+    DOM_VK_H: 72,\n+    DOM_VK_I: 73,\n+    DOM_VK_J: 74,\n+    DOM_VK_K: 75,\n+    DOM_VK_L: 76,\n+    DOM_VK_M: 77,\n+    DOM_VK_N: 78,\n+    DOM_VK_O: 79,\n+    DOM_VK_P: 80,\n+    DOM_VK_Q: 81,\n+    DOM_VK_R: 82,\n+    DOM_VK_S: 83,\n+    DOM_VK_T: 84,\n+    DOM_VK_U: 85,\n+    DOM_VK_V: 86,\n+    DOM_VK_W: 87,\n+    DOM_VK_X: 88,\n+    DOM_VK_Y: 89,\n+    DOM_VK_Z: 90,\n+    DOM_VK_CONTEXT_MENU: 93,\n+    DOM_VK_NUMPAD0: 96,\n+    DOM_VK_NUMPAD1: 97,\n+    DOM_VK_NUMPAD2: 98,\n+    DOM_VK_NUMPAD3: 99,\n+    DOM_VK_NUMPAD4: 100,\n+    DOM_VK_NUMPAD5: 101,\n+    DOM_VK_NUMPAD6: 102,\n+    DOM_VK_NUMPAD7: 103,\n+    DOM_VK_NUMPAD8: 104,\n+    DOM_VK_NUMPAD9: 105,\n+    DOM_VK_MULTIPLY: 106,\n+    DOM_VK_ADD: 107,\n+    DOM_VK_SEPARATOR: 108,\n+    DOM_VK_SUBTRACT: 109,\n+    DOM_VK_DECIMAL: 110,\n+    DOM_VK_DIVIDE: 111,\n+    DOM_VK_F1: 112,\n+    DOM_VK_F2: 113,\n+    DOM_VK_F3: 114,\n+    DOM_VK_F4: 115,\n+    DOM_VK_F5: 116,\n+    DOM_VK_F6: 117,\n+    DOM_VK_F7: 118,\n+    DOM_VK_F8: 119,\n+    DOM_VK_F9: 120,\n+    DOM_VK_F10: 121,\n+    DOM_VK_F11: 122,\n+    DOM_VK_F12: 123,\n+    DOM_VK_F13: 124,\n+    DOM_VK_F14: 125,\n+    DOM_VK_F15: 126,\n+    DOM_VK_F16: 127,\n+    DOM_VK_F17: 128,\n+    DOM_VK_F18: 129,\n+    DOM_VK_F19: 130,\n+    DOM_VK_F20: 131,\n+    DOM_VK_F21: 132,\n+    DOM_VK_F22: 133,\n+    DOM_VK_F23: 134,\n+    DOM_VK_F24: 135,\n+    DOM_VK_NUM_LOCK: 144,\n+    DOM_VK_SCROLL_LOCK: 145,\n+    DOM_VK_COMMA: 188,\n+    DOM_VK_PERIOD: 190,\n+    DOM_VK_SLASH: 191,\n+    DOM_VK_BACK_QUOTE: 192,\n+    DOM_VK_OPEN_BRACKET: 219,\n+    DOM_VK_BACK_SLASH: 220,\n+    DOM_VK_CLOSE_BRACKET: 221,\n+    DOM_VK_QUOTE: 222,\n+    DOM_VK_META: 224\n   }\n }\n-addEventListener('message', ipc.processMessage.bind(ipc)) // eslint-disable-line\n \n-/**\n- * Ensures a node replacement div is visible and has a proper zIndex\n- */\n-function ensureNodeVisible (node) {\n-  if (document.defaultView.getComputedStyle(node).display === 'none') {\n-    node.style.display = ''\n-  }\n-  if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n-    node.style.zIndex = ''\n+// hide this from the rest of the page\n+(function () {\n+  var ipc = {\n+    events: {},\n+    embedder: null,\n+    processMessage: function (event) {\n+      if (event.origin === 'file://') {\n+        this.embedder = event.source\n+        var cb = this.events[event.data[0]]\n+        cb && cb.apply(null, event.data)\n+      }\n+    },\n+    on: function (name, cb) {\n+      this.events[name] = cb\n+    },\n+    send: function () {\n+      var args = Array.prototype.slice.call(arguments)\n+      this.embedder && this.embedder.postMessage(args, 'file://')\n+    }\n   }\n-}\n+  window.addEventListener('message', ipc.processMessage.bind(ipc))\n \n-/**\n- * Determines the ad size which should be shown\n- * It will first check the node's size and try to infer that way.\n- * If that is not possible it will rely on the iframeData\n- *\n- * @param node The node that is being replaced\n- * @param iframeData The known preprocessed iframeData for that node\n- */\n-function getAdSize (node, iframeData) {\n-  var acceptableAdSizes = [\n-    [970, 250],\n-    [970, 90],\n-    [728, 90],\n-    [300, 250],\n-    [300, 600],\n-    [160, 600],\n-    [120, 600],\n-    [320, 50]\n-  ]\n-  for (var i = 0; i < acceptableAdSizes.length; i++) {\n-    var adSize = acceptableAdSizes[i]\n-    if (node.offsetWidth === adSize[0] && node.offsetHeight >= adSize[1] ||\n-        node.offsetWidth >= adSize[0] && node.offsetHeight === adSize[1]) {\n-      return adSize\n+  /**\n+   * Ensures a node replacement div is visible and has a proper zIndex\n+   */\n+  function ensureNodeVisible (node) {\n+    if (document.defaultView.getComputedStyle(node).display === 'none') {\n+      node.style.display = ''\n+    }\n+    if (document.defaultView.getComputedStyle(node).zIndex === '-1') {\n+      node.style.zIndex = ''\n     }\n   }\n \n-  if (iframeData) {\n-    return [iframeData.width || iframeData.w, iframeData.height || iframeData.h]\n-  }\n+  /**\n+   * Determines the ad size which should be shown\n+   * It will first check the node's size and try to infer that way.\n+   * If that is not possible it will rely on the iframeData\n+   *\n+   * @param node The node that is being replaced\n+   * @param iframeData The known preprocessed iframeData for that node\n+   */\n+  function getAdSize (node, iframeData) {\n+    var acceptableAdSizes = [\n+      [970, 250],\n+      [970, 90],\n+      [728, 90],\n+      [300, 250],\n+      [300, 600],\n+      [160, 600],\n+      [120, 600],\n+      [320, 50]\n+    ]\n+    for (var i = 0; i < acceptableAdSizes.length; i++) {\n+      var adSize = acceptableAdSizes[i]\n+      if (node.offsetWidth === adSize[0] && node.offsetHeight >= adSize[1] ||\n+          node.offsetWidth >= adSize[0] && node.offsetHeight === adSize[1]) {\n+        return adSize\n+      }\n+    }\n \n-  return null\n-}\n+    if (iframeData) {\n+      return [iframeData.width || iframeData.w, iframeData.height || iframeData.h]\n+    }\n \n-/**\n- * Processes a single node which is an ad\n- *\n- * @param node The node of the ad to process\n- * @param iframeData The iframe data of the node to process from the slimerJS bot\n- * @param replacementUrl The vault replacement url\n- */\n-function processAdNode (node, iframeData, replacementUrl) {\n-  if (!node) {\n-    return\n+    return null\n   }\n \n-  var adSize = getAdSize(node, iframeData)\n-  // Could not determine the ad size, so just skip this replacement\n-  if (!adSize) {\n-    // we have a replace node node but no replacement, so just display none on it\n-    node.style.display = 'none'\n-    return\n-  }\n+  /**\n+   * Processes a single node which is an ad\n+   *\n+   * @param node The node of the ad to process\n+   * @param iframeData The iframe data of the node to process from the slimerJS bot\n+   * @param replacementUrl The vault replacement url\n+   */\n+  function processAdNode (node, iframeData, replacementUrl) {\n+    if (!node) {\n+      return\n+    }\n \n-  // generate a random segment\n-  // @todo - replace with renko targeting\n-  var segments = ['IAB2', 'IAB17', 'IAB14', 'IAB21', 'IAB20']\n-  var segment = segments[Math.floor(Math.random() * 4)]\n-  var time_in_segment = new Date().getSeconds()\n-  var segment_expiration_time = 0 // no expiration\n+    var adSize = getAdSize(node, iframeData)\n+    // Could not determine the ad size, so just skip this replacement\n+    if (!adSize) {\n+      // we have a replace node node but no replacement, so just display none on it\n+      node.style.display = 'none'\n+      return\n+    }\n \n-  // ref param for referrer when possible\n-  var srcUrl = replacementUrl + '?width=' + adSize[0] + '&height=' + adSize[1] + '&seg=' + segment + ':' + time_in_segment + ':' + segment_expiration_time\n-  var src = '<html><body style=\"width: ' + adSize[0] + 'px; height: ' + adSize[1] + '; padding: 0; margin: 0; overflow: hidden;\"><script src=\"' + srcUrl + '\"></script></body></html>'\n+    // generate a random segment\n+    // @todo - replace with renko targeting\n+    var segments = ['IAB2', 'IAB17', 'IAB14', 'IAB21', 'IAB20']\n+    var segment = segments[Math.floor(Math.random() * 4)]\n+    var time_in_segment = new Date().getSeconds()\n+    var segment_expiration_time = 0 // no expiration\n \n-  if (node.tagName === 'IFRAME') {\n-    node.srcdoc = src\n-    node.sandbox = 'allow-scripts'\n-  } else {\n-    while (node.firstChild) {\n-      node.removeChild(node.firstChild)\n-    }\n-    var iframe = document.createElement('iframe')\n-    iframe.style.padding = 0\n-    iframe.style.border = 0\n-    iframe.style.margin = 0\n-    iframe.style.width = adSize[0] + 'px'\n-    iframe.style.height = adSize[1] + 'px'\n-    iframe.srcdoc = src\n-    iframe.sandbox = 'allow-scripts allow-popups'\n-    node.appendChild(iframe)\n-    ensureNodeVisible(node)\n-    if (node.parentNode) {\n-      ensureNodeVisible(node.parentNode)\n+    // ref param for referrer when possible\n+    var srcUrl = replacementUrl + '?width=' + adSize[0] + '&height=' + adSize[1] + '&seg=' + segment + ':' + time_in_segment + ':' + segment_expiration_time\n+    var src = '<html><body style=\"width: ' + adSize[0] + 'px; height: ' + adSize[1] + '; padding: 0; margin: 0; overflow: hidden;\"><script src=\"' + srcUrl + '\"></script></body></html>'\n+\n+    if (node.tagName === 'IFRAME') {\n+      node.srcdoc = src\n+      node.sandbox = 'allow-scripts'\n+    } else {\n+      while (node.firstChild) {\n+        node.removeChild(node.firstChild)\n+      }\n+      var iframe = document.createElement('iframe')\n+      iframe.style.padding = 0\n+      iframe.style.border = 0\n+      iframe.style.margin = 0\n+      iframe.style.width = adSize[0] + 'px'\n+      iframe.style.height = adSize[1] + 'px'\n+      iframe.srcdoc = src\n+      iframe.sandbox = 'allow-scripts allow-popups'\n+      node.appendChild(iframe)\n+      ensureNodeVisible(node)\n       if (node.parentNode) {\n-        ensureNodeVisible(node.parentNode.parentNode)\n+        ensureNodeVisible(node.parentNode)\n+        if (node.parentNode) {\n+          ensureNodeVisible(node.parentNode.parentNode)\n+        }\n       }\n     }\n   }\n-}\n \n-// Fires when the browser has ad replacement information to give\n-ipc.on(messages.SET_AD_DIV_CANDIDATES, function (e, adDivCandidates, placeholderUrl) {\n-  // Keep a lookup for skipped common elements\n-  var fallbackNodeDataForCommon = {}\n+  // Fires when the browser has ad replacement information to give\n+  ipc.on('set-ad-div-candidates', function (e, adDivCandidates, placeholderUrl) {\n+    // Keep a lookup for skipped common elements\n+    var fallbackNodeDataForCommon = {}\n \n-  // Process all of the specific ad information for this page\n-  adDivCandidates.forEach(function (iframeData) {\n-    var replaceId = iframeData.replapceId || iframeData.rid\n-    var selector = '[id=\"' + replaceId + '\"]'\n-    var node = document.querySelector(selector)\n-    if (!node) {\n-      return\n-    }\n+    // Process all of the specific ad information for this page\n+    adDivCandidates.forEach(function (iframeData) {\n+      var replaceId = iframeData.replapceId || iframeData.rid\n+      var selector = '[id=\"' + replaceId + '\"]'\n+      var node = document.querySelector(selector)\n+      if (!node) {\n+        return\n+      }\n \n-    // Skip over known common elements\n-    if (replaceId.startsWith('google_ads_iframe_') ||\n-        replaceId.endsWith('__container__')) {\n-      fallbackNodeDataForCommon[node.id] = iframeData\n-      return\n-    }\n+      // Skip over known common elements\n+      if (replaceId.startsWith('google_ads_iframe_') ||\n+          replaceId.endsWith('__container__')) {\n+        fallbackNodeDataForCommon[node.id] = iframeData\n+        return\n+      }\n \n-    // Find the node and process it\n-    processAdNode(document.querySelector(selector), iframeData, placeholderUrl)\n-  })\n+      // Find the node and process it\n+      processAdNode(document.querySelector(selector), iframeData, placeholderUrl)\n+    })\n \n-  // Common selectors which could be on every page\n-  var commonSelectors = [\n-    '[id^=\"google_ads_iframe_\"][id$=\"__container__\"]',\n-    '[id^=\"ad-slot-banner-\"]',\n-    '[data-ad-slot]'\n-  ]\n-  commonSelectors.forEach(commonSelector => {\n-    var nodes = document.querySelectorAll(commonSelector)\n-    if (!nodes) {\n-      return\n-    }\n-    Array.from(nodes).forEach(node => {\n-      processAdNode(node, fallbackNodeDataForCommon[node.id], placeholderUrl)\n+    // Common selectors which could be on every page\n+    var commonSelectors = [\n+      '[id^=\"google_ads_iframe_\"][id$=\"__container__\"]',\n+      '[id^=\"ad-slot-banner-\"]',\n+      '[data-ad-slot]'\n+    ]\n+    commonSelectors.forEach(commonSelector => {\n+      var nodes = document.querySelectorAll(commonSelector)\n+      if (!nodes) {\n+        return\n+      }\n+      Array.from(nodes).forEach(node => {\n+        processAdNode(node, fallbackNodeDataForCommon[node.id], placeholderUrl)\n+      })\n     })\n   })\n-})\n-\n-function hasSelection (node) {\n-  if (node && node.selectionStart !== undefined &&\n-      node.selectionEnd !== undefined &&\n-      node.selectionStart !== node.selectionEnd) {\n-    return true\n-  }\n \n-  var selection = window.getSelection()\n-  for (var i = 0; i < selection.rangeCount; i++) {\n-    var range = window.getSelection().getRangeAt(i)\n-    if (range.endOffset !== undefined &&\n-        range.startOffset !== undefined &&\n-        range.endOffset !== range.startOffset) {\n+  function hasSelection (node) {\n+    if (node && node.selectionStart !== undefined &&\n+        node.selectionEnd !== undefined &&\n+        node.selectionStart !== node.selectionEnd) {\n       return true\n     }\n-  }\n-  return false\n-}\n \n-/**\n- * Whether an element is editable or can be typed into.\n- * @param {Element} elem\n- * @return {boolean}\n- */\n-function isEditable (elem) {\n-  // TODO: find other node types that are editable\n-  return ((elem.contentEditable && elem.contentEditable !== 'false' && elem.contentEditable !== 'inherit') ||\n-          elem.nodeName === 'INPUT' ||\n-          elem.nodeName === 'TEXTAREA')\n-}\n+    var selection = window.getSelection()\n+    for (var i = 0; i < selection.rangeCount; i++) {\n+      var range = window.getSelection().getRangeAt(i)\n+      if (range.endOffset !== undefined &&\n+          range.startOffset !== undefined &&\n+          range.endOffset !== range.startOffset) {\n+        return true\n+      }\n+    }\n+    return false\n+  }\n \n-/**\n- * Whether we are on OS X\n- * @return {boolean}\n- */\n-function isPlatformOSX () {\n-  // TODO: navigator.platform is getting deprecated\n-  return window.navigator.platform.includes('Mac')\n-}\n+  /**\n+   * Whether an element is editable or can be typed into.\n+   * @param {Element} elem\n+   * @return {boolean}\n+   */\n+  function isEditable (elem) {\n+    // TODO: find other node types that are editable\n+    return ((elem.contentEditable && elem.contentEditable !== 'false' && elem.contentEditable !== 'inherit') ||\n+            elem.nodeName === 'INPUT' ||\n+            elem.nodeName === 'TEXTAREA')\n+  }\n \n-document.addEventListener('contextmenu', (e) => {\n-  var name = e.target.nodeName.toUpperCase()\n-  var nodeProps = {\n-    name: name,\n-    src: name === 'A' ? e.target.href : e.target.src,\n-    isContentEditable: e.target.isContentEditable,\n-    hasSelection: hasSelection(e.target)\n+  /**\n+   * Whether we are on OS X\n+   * @return {boolean}\n+   */\n+  function isPlatformOSX () {\n+    // TODO: navigator.platform is getting deprecated\n+    return window.navigator.platform.includes('Mac')\n   }\n-  ipc.send(messages.CONTEXT_MENU_OPENED, nodeProps)\n-  e.preventDefault()\n-}, false)\n \n-document.onkeydown = (e) => {\n-  switch (e.keyCode) {\n-    case KeyCodes.ESC:\n-      e.preventDefault()\n-      ipc.send(messages.STOP_LOAD)\n-      break\n-    case KeyCodes.BACKSPACE:\n-      if (!isEditable(document.activeElement)) {\n-        e.shiftKey ? history.forward() : history.back() // eslint-disable-line\n-      }\n-      break\n-    case KeyCodes.LEFT:\n-      if (e.metaKey && !isEditable(document.activeElement) && isPlatformOSX()) {\n-        history.back() // eslint-disable-line\n-      }\n-      break\n-    case KeyCodes.RIGHT:\n-      if (e.metaKey && !isEditable(document.activeElement) && isPlatformOSX()) {\n-        history.forward() // eslint-disable-line\n-      }\n-      break\n+  document.addEventListener('contextmenu', (e) => {\n+    var name = e.target.nodeName.toUpperCase()\n+    var nodeProps = {\n+      name: name,\n+      src: name === 'A' ? e.target.href : e.target.src,\n+      isContentEditable: e.target.isContentEditable,\n+      hasSelection: hasSelection(e.target)\n+    }\n+    ipc.send('context-menu-opened', nodeProps)\n+    e.preventDefault()\n+  }, false)\n+\n+  document.onkeydown = (e) => {\n+    switch (e.keyCode) {\n+      case KeyEvent.DOM_VK_ESCAPE:",
        "path": "app/content/webviewPreload.js",
        "position": 554,
        "original_position": 554,
        "commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "original_commit_id": "4f9e43834ef038ab32c643897e9cb9b243f8f891",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "use codes from KeyEvent\n",
        "created_at": "2016-02-03T20:56:14Z",
        "updated_at": "2016-02-03T20:56:14Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785513",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/599",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785513"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/599#discussion_r51785513"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/599"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785735",
        "pull_request_review_id": null,
        "id": 51785735,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg1NzM1",
        "diff_hunk": "@@ -54,6 +54,10 @@ class Frame extends ImmutableComponent {\n \n   componentDidMount () {\n     this.updateWebview()\n+    // forward postMessage events from webview to webContents\n+    window.addEventListener('message', function (event) {",
        "path": "js/components/frame.js",
        "position": 5,
        "original_position": 5,
        "commit_id": "5e33c008e6a640db79d593c8a8c710bba6713e63",
        "original_commit_id": "5e33c008e6a640db79d593c8a8c710bba6713e63",
        "user": {
            "login": "bridiver",
            "id": 34129,
            "node_id": "MDQ6VXNlcjM0MTI5",
            "avatar_url": "https://avatars3.githubusercontent.com/u/34129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/bridiver",
            "html_url": "https://github.com/bridiver",
            "followers_url": "https://api.github.com/users/bridiver/followers",
            "following_url": "https://api.github.com/users/bridiver/following{/other_user}",
            "gists_url": "https://api.github.com/users/bridiver/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/bridiver/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/bridiver/subscriptions",
            "organizations_url": "https://api.github.com/users/bridiver/orgs",
            "repos_url": "https://api.github.com/users/bridiver/repos",
            "events_url": "https://api.github.com/users/bridiver/events{/privacy}",
            "received_events_url": "https://api.github.com/users/bridiver/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "added in https://github.com/brave/browser-laptop/pull/599\n",
        "created_at": "2016-02-03T20:57:49Z",
        "updated_at": "2016-02-03T20:57:49Z",
        "html_url": "https://github.com/brave/browser-laptop/pull/581#discussion_r51785735",
        "pull_request_url": "https://api.github.com/repos/brave/browser-laptop/pulls/581",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/comments/51785735"
            },
            "html": {
                "href": "https://github.com/brave/browser-laptop/pull/581#discussion_r51785735"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/brave/browser-laptop/pulls/581"
            }
        }
    }
]