[
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288382",
        "pull_request_review_id": 20989564,
        "id": 100288382,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI4ODM4Mg==",
        "diff_hunk": "@@ -0,0 +1,177 @@\n+package com.hillnerds.soundsparrow;\n+\n+import android.util.Log;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 06/02/17.\n+ */\n+\n+public class ChannelSoundGeneration {\n+\n+    int scale;\n+    int[] steps;\n+\n+    //a hard coded list of all possible instruments\n+    private static Instrument[] instrumentList = new Instrument[] {\n+            new Instrument(\"piano\", 1, 40, 60),\n+            new Instrument(\"guitar\", 26, 45, 70),\n+            new Instrument(\"trombone\", 58, 55, 70),\n+            new Instrument(\"trumpet\", 57, 64, 80),\n+            new Instrument(\"violin\", 41, 50, 65),\n+            new Instrument(\"saxophone\", 66, 45, 60),\n+            new Instrument(\"flute\", 74, 73, 90)\n+    };\n+\n+    /**\n+     * This function chooses a rondom instrument form a hardcoded instrumentList.\n+     * @param random - a random generator Object\n+     * @return - return an Instrument object from instrumentList\n+     */\n+    public static Instrument generateRandomInstrument(Random random){\n+        int instrumentNumber = random.nextInt((6 - 0) + 1) + 0;",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 35,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Getting a random element from an array should use the array's length as opposed to hardcoded numbers ",
        "created_at": "2017-02-09T11:46:24Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288382",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288382"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288382"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288442",
        "pull_request_review_id": 20989621,
        "id": 100288442,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI4ODQ0Mg==",
        "diff_hunk": "@@ -8,39 +8,31 @@\n \n public class Channel {\n \n-    long id;\n+    long uuid;\n     String emotion;\n     int number;\n-    int instrument;\n-    int range_min;\n-    int range_max;\n+    Instrument instrument;\n+    Random randomGenerator;\n+    //String scaleName; //major or minor",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Channel.java",
        "position": null,
        "original_position": 13,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Commented out code should not be committed",
        "created_at": "2017-02-09T11:46:46Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288442",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288442"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288442"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288645",
        "pull_request_review_id": 20989853,
        "id": 100288645,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI4ODY0NQ==",
        "diff_hunk": "@@ -0,0 +1,177 @@\n+package com.hillnerds.soundsparrow;\n+\n+import android.util.Log;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 06/02/17.\n+ */\n+\n+public class ChannelSoundGeneration {\n+\n+    int scale;\n+    int[] steps;\n+\n+    //a hard coded list of all possible instruments\n+    private static Instrument[] instrumentList = new Instrument[] {\n+            new Instrument(\"piano\", 1, 40, 60),\n+            new Instrument(\"guitar\", 26, 45, 70),\n+            new Instrument(\"trombone\", 58, 55, 70),\n+            new Instrument(\"trumpet\", 57, 64, 80),\n+            new Instrument(\"violin\", 41, 50, 65),\n+            new Instrument(\"saxophone\", 66, 45, 60),\n+            new Instrument(\"flute\", 74, 73, 90)\n+    };\n+\n+    /**\n+     * This function chooses a rondom instrument form a hardcoded instrumentList.\n+     * @param random - a random generator Object\n+     * @return - return an Instrument object from instrumentList\n+     */\n+    public static Instrument generateRandomInstrument(Random random){\n+        int instrumentNumber = random.nextInt((6 - 0) + 1) + 0;\n+        return instrumentList[instrumentNumber];\n+    }\n+\n+    /**\n+     * Generate a MIDI file for a single Channel.\n+     * @param c - A single channel object\n+     * @return - An array of MidiSequence Objects\n+     */\n+    public static ArrayList<MidiSequence> generateMidiChannel(Channel c) {\n+        ArrayList<MidiSequence> midiSequenceArray = new ArrayList<>();\n+\n+        int timestampCounter = 0;\n+\n+        StartingSequence instrument_change = new StartingSequence(192 + c.number, c.instrument, timestampCounter);",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 49,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is the significance of 192?",
        "created_at": "2017-02-09T11:47:59Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288645",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288645"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288645"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288981",
        "pull_request_review_id": 20990198,
        "id": 100288981,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI4ODk4MQ==",
        "diff_hunk": "@@ -0,0 +1,177 @@\n+package com.hillnerds.soundsparrow;\n+\n+import android.util.Log;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 06/02/17.\n+ */\n+\n+public class ChannelSoundGeneration {\n+\n+    int scale;\n+    int[] steps;\n+\n+    //a hard coded list of all possible instruments\n+    private static Instrument[] instrumentList = new Instrument[] {\n+            new Instrument(\"piano\", 1, 40, 60),\n+            new Instrument(\"guitar\", 26, 45, 70),\n+            new Instrument(\"trombone\", 58, 55, 70),\n+            new Instrument(\"trumpet\", 57, 64, 80),\n+            new Instrument(\"violin\", 41, 50, 65),\n+            new Instrument(\"saxophone\", 66, 45, 60),\n+            new Instrument(\"flute\", 74, 73, 90)\n+    };\n+\n+    /**\n+     * This function chooses a rondom instrument form a hardcoded instrumentList.\n+     * @param random - a random generator Object\n+     * @return - return an Instrument object from instrumentList\n+     */\n+    public static Instrument generateRandomInstrument(Random random){\n+        int instrumentNumber = random.nextInt((6 - 0) + 1) + 0;\n+        return instrumentList[instrumentNumber];\n+    }\n+\n+    /**\n+     * Generate a MIDI file for a single Channel.\n+     * @param c - A single channel object\n+     * @return - An array of MidiSequence Objects\n+     */\n+    public static ArrayList<MidiSequence> generateMidiChannel(Channel c) {\n+        ArrayList<MidiSequence> midiSequenceArray = new ArrayList<>();\n+\n+        int timestampCounter = 0;\n+\n+        StartingSequence instrument_change = new StartingSequence(192 + c.number, c.instrument, timestampCounter);\n+        midiSequenceArray.add(instrument_change);\n+\n+        /**\n+         * TODO: implement the way of setting the length of the track differently (ie. a number of\n+         * bars so that tunes are synchronised)\n+         */\n+        for (int i = 0; i < 16; i = i+2) {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 56,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why i+2 when i isn't being used in the loop, could this be simplified? Also, ideally i should be named more descriptively.",
        "created_at": "2017-02-09T11:50:17Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288981",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100288981"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100288981"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100289573",
        "pull_request_review_id": 20990841,
        "id": 100289573,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI4OTU3Mw==",
        "diff_hunk": "@@ -0,0 +1,177 @@\n+package com.hillnerds.soundsparrow;\n+\n+import android.util.Log;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 06/02/17.\n+ */\n+\n+public class ChannelSoundGeneration {\n+\n+    int scale;\n+    int[] steps;\n+\n+    //a hard coded list of all possible instruments\n+    private static Instrument[] instrumentList = new Instrument[] {\n+            new Instrument(\"piano\", 1, 40, 60),\n+            new Instrument(\"guitar\", 26, 45, 70),\n+            new Instrument(\"trombone\", 58, 55, 70),\n+            new Instrument(\"trumpet\", 57, 64, 80),\n+            new Instrument(\"violin\", 41, 50, 65),\n+            new Instrument(\"saxophone\", 66, 45, 60),\n+            new Instrument(\"flute\", 74, 73, 90)\n+    };\n+\n+    /**\n+     * This function chooses a rondom instrument form a hardcoded instrumentList.\n+     * @param random - a random generator Object\n+     * @return - return an Instrument object from instrumentList\n+     */\n+    public static Instrument generateRandomInstrument(Random random){\n+        int instrumentNumber = random.nextInt((6 - 0) + 1) + 0;\n+        return instrumentList[instrumentNumber];\n+    }\n+\n+    /**\n+     * Generate a MIDI file for a single Channel.\n+     * @param c - A single channel object\n+     * @return - An array of MidiSequence Objects\n+     */\n+    public static ArrayList<MidiSequence> generateMidiChannel(Channel c) {\n+        ArrayList<MidiSequence> midiSequenceArray = new ArrayList<>();\n+\n+        int timestampCounter = 0;\n+\n+        StartingSequence instrument_change = new StartingSequence(192 + c.number, c.instrument, timestampCounter);\n+        midiSequenceArray.add(instrument_change);\n+\n+        /**\n+         * TODO: implement the way of setting the length of the track differently (ie. a number of\n+         * bars so that tunes are synchronised)\n+         */\n+        for (int i = 0; i < 16; i = i+2) {\n+            int startingCode = generateStartingCode(c.number);\n+            int pitch = generatePitch(c);\n+            int velocity = generateVelocity(c.randomGenerator);\n+\n+            int duration = generateNoteDuration(c.randomGenerator);\n+\n+            //create a Note on sequence (start of the note)\n+            Note note_on = new Note(startingCode, pitch, velocity, timestampCounter);\n+            timestampCounter = timestampCounter + duration;\n+\n+            //create a Note off sequence (same as Note on but with velocity at 0)\n+            Note note_off = new Note(startingCode, pitch, 0, timestampCounter);\n+\n+            midiSequenceArray.add(note_on);\n+            midiSequenceArray.add(note_off);\n+        }\n+        return midiSequenceArray;\n+    }\n+\n+    /**\n+     * Genrates a starting code for a note. Of the form XXXX CCCC where XXXX is the code\n+     * of the MidiSequnce (ie. 1001 Note on) and CCCC is the channel number (from 0 to 15)\n+     * @param channelNumber - the number of tha channel for which the starting seqence will be generated\n+     * @return - a total starting code value\n+     */\n+    public static int generateStartingCode(int channelNumber){\n+        return 144 + channelNumber;",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 83,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What exactly is 144? It's good that this is in its own documented function though.",
        "created_at": "2017-02-09T11:53:45Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100289573",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100289573"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100289573"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100290001",
        "pull_request_review_id": 20991311,
        "id": 100290001,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MDAwMQ==",
        "diff_hunk": "@@ -0,0 +1,177 @@\n+package com.hillnerds.soundsparrow;\n+\n+import android.util.Log;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 06/02/17.\n+ */\n+\n+public class ChannelSoundGeneration {\n+\n+    int scale;\n+    int[] steps;\n+\n+    //a hard coded list of all possible instruments\n+    private static Instrument[] instrumentList = new Instrument[] {\n+            new Instrument(\"piano\", 1, 40, 60),\n+            new Instrument(\"guitar\", 26, 45, 70),\n+            new Instrument(\"trombone\", 58, 55, 70),\n+            new Instrument(\"trumpet\", 57, 64, 80),\n+            new Instrument(\"violin\", 41, 50, 65),\n+            new Instrument(\"saxophone\", 66, 45, 60),\n+            new Instrument(\"flute\", 74, 73, 90)\n+    };\n+\n+    /**\n+     * This function chooses a rondom instrument form a hardcoded instrumentList.\n+     * @param random - a random generator Object\n+     * @return - return an Instrument object from instrumentList\n+     */\n+    public static Instrument generateRandomInstrument(Random random){\n+        int instrumentNumber = random.nextInt((6 - 0) + 1) + 0;\n+        return instrumentList[instrumentNumber];\n+    }\n+\n+    /**\n+     * Generate a MIDI file for a single Channel.\n+     * @param c - A single channel object\n+     * @return - An array of MidiSequence Objects\n+     */\n+    public static ArrayList<MidiSequence> generateMidiChannel(Channel c) {\n+        ArrayList<MidiSequence> midiSequenceArray = new ArrayList<>();\n+\n+        int timestampCounter = 0;\n+\n+        StartingSequence instrument_change = new StartingSequence(192 + c.number, c.instrument, timestampCounter);\n+        midiSequenceArray.add(instrument_change);\n+\n+        /**\n+         * TODO: implement the way of setting the length of the track differently (ie. a number of\n+         * bars so that tunes are synchronised)\n+         */\n+        for (int i = 0; i < 16; i = i+2) {\n+            int startingCode = generateStartingCode(c.number);\n+            int pitch = generatePitch(c);\n+            int velocity = generateVelocity(c.randomGenerator);\n+\n+            int duration = generateNoteDuration(c.randomGenerator);\n+\n+            //create a Note on sequence (start of the note)\n+            Note note_on = new Note(startingCode, pitch, velocity, timestampCounter);\n+            timestampCounter = timestampCounter + duration;\n+\n+            //create a Note off sequence (same as Note on but with velocity at 0)\n+            Note note_off = new Note(startingCode, pitch, 0, timestampCounter);\n+\n+            midiSequenceArray.add(note_on);\n+            midiSequenceArray.add(note_off);\n+        }\n+        return midiSequenceArray;\n+    }\n+\n+    /**\n+     * Genrates a starting code for a note. Of the form XXXX CCCC where XXXX is the code\n+     * of the MidiSequnce (ie. 1001 Note on) and CCCC is the channel number (from 0 to 15)\n+     * @param channelNumber - the number of tha channel for which the starting seqence will be generated\n+     * @return - a total starting code value\n+     */\n+    public static int generateStartingCode(int channelNumber){\n+        return 144 + channelNumber;\n+    }\n+\n+    /**\n+     * Generate a random pitch value for a channel based off of the scale assigned to it\n+     * @param c - the channel for which a note is generated\n+     * @return - a value between 0 and 127\n+     */\n+    public static int generatePitch(Channel c){\n+        int randomGeneratedPitch = c.scaleValues[c.randomGenerator.nextInt((7 - 0) + 1)];",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 92,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think using c.scaleValues.length would be clearer than (7-0)+1.",
        "created_at": "2017-02-09T11:56:33Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100290001",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100290001"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100290001"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100290531",
        "pull_request_review_id": 20991900,
        "id": 100290531,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MDUzMQ==",
        "diff_hunk": "@@ -0,0 +1,177 @@\n+package com.hillnerds.soundsparrow;\n+\n+import android.util.Log;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 06/02/17.\n+ */\n+\n+public class ChannelSoundGeneration {\n+\n+    int scale;",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 15,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Every function in this class is static, are these variables actually used anywhere? If so, consider just using them in the function that uses them instead of declaring them non-static out here.",
        "created_at": "2017-02-09T11:59:35Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100290531",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100290531"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100290531"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100290995",
        "pull_request_review_id": 20992379,
        "id": 100290995,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MDk5NQ==",
        "diff_hunk": "@@ -0,0 +1,177 @@\n+package com.hillnerds.soundsparrow;\n+\n+import android.util.Log;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 06/02/17.\n+ */\n+\n+public class ChannelSoundGeneration {\n+\n+    int scale;\n+    int[] steps;\n+\n+    //a hard coded list of all possible instruments\n+    private static Instrument[] instrumentList = new Instrument[] {\n+            new Instrument(\"piano\", 1, 40, 60),\n+            new Instrument(\"guitar\", 26, 45, 70),\n+            new Instrument(\"trombone\", 58, 55, 70),\n+            new Instrument(\"trumpet\", 57, 64, 80),\n+            new Instrument(\"violin\", 41, 50, 65),\n+            new Instrument(\"saxophone\", 66, 45, 60),\n+            new Instrument(\"flute\", 74, 73, 90)\n+    };\n+\n+    /**\n+     * This function chooses a rondom instrument form a hardcoded instrumentList.\n+     * @param random - a random generator Object\n+     * @return - return an Instrument object from instrumentList\n+     */\n+    public static Instrument generateRandomInstrument(Random random){\n+        int instrumentNumber = random.nextInt((6 - 0) + 1) + 0;\n+        return instrumentList[instrumentNumber];\n+    }\n+\n+    /**\n+     * Generate a MIDI file for a single Channel.\n+     * @param c - A single channel object\n+     * @return - An array of MidiSequence Objects\n+     */\n+    public static ArrayList<MidiSequence> generateMidiChannel(Channel c) {\n+        ArrayList<MidiSequence> midiSequenceArray = new ArrayList<>();\n+\n+        int timestampCounter = 0;\n+\n+        StartingSequence instrument_change = new StartingSequence(192 + c.number, c.instrument, timestampCounter);\n+        midiSequenceArray.add(instrument_change);\n+\n+        /**\n+         * TODO: implement the way of setting the length of the track differently (ie. a number of\n+         * bars so that tunes are synchronised)\n+         */\n+        for (int i = 0; i < 16; i = i+2) {\n+            int startingCode = generateStartingCode(c.number);\n+            int pitch = generatePitch(c);\n+            int velocity = generateVelocity(c.randomGenerator);\n+\n+            int duration = generateNoteDuration(c.randomGenerator);\n+\n+            //create a Note on sequence (start of the note)\n+            Note note_on = new Note(startingCode, pitch, velocity, timestampCounter);\n+            timestampCounter = timestampCounter + duration;\n+\n+            //create a Note off sequence (same as Note on but with velocity at 0)\n+            Note note_off = new Note(startingCode, pitch, 0, timestampCounter);\n+\n+            midiSequenceArray.add(note_on);\n+            midiSequenceArray.add(note_off);\n+        }\n+        return midiSequenceArray;\n+    }\n+\n+    /**\n+     * Genrates a starting code for a note. Of the form XXXX CCCC where XXXX is the code\n+     * of the MidiSequnce (ie. 1001 Note on) and CCCC is the channel number (from 0 to 15)\n+     * @param channelNumber - the number of tha channel for which the starting seqence will be generated\n+     * @return - a total starting code value\n+     */\n+    public static int generateStartingCode(int channelNumber){\n+        return 144 + channelNumber;\n+    }\n+\n+    /**\n+     * Generate a random pitch value for a channel based off of the scale assigned to it\n+     * @param c - the channel for which a note is generated\n+     * @return - a value between 0 and 127\n+     */\n+    public static int generatePitch(Channel c){\n+        int randomGeneratedPitch = c.scaleValues[c.randomGenerator.nextInt((7 - 0) + 1)];\n+\n+        return randomGeneratedPitch;\n+    }\n+\n+    /**\n+     * Generate a velocity value\n+     * @param random_generator - a random generator object for a Channel in which note is generated\n+     * @return - an integer velocity value\n+     */\n+    public static int generateVelocity(Random random_generator){\n+        //TODO: pass signal strength as well to change the velosity value\n+        int rssi = -80;\n+        int randomGeneratedVelocity = Math.abs(rssi);\n+\n+        return randomGeneratedVelocity;\n+    }\n+\n+    /**\n+     * Chooses a duration for the Note\n+     * @param random_generator - random generator for current channel\n+     * @return - a duartion in miliseconds\n+     */\n+    public static int generateNoteDuration(Random random_generator){\n+        //TODO: make the duration fit within measures\n+        int[] duration = new int[] {200, 400, 400};\n+        int random_duration = duration[random_generator.nextInt((2-0) + 1) + 0];\n+\n+        return random_duration;\n+    }\n+\n+    /**\n+     * Called from within a channel constructor.\n+     * Choose a note that will be a starting point for scale generation.\n+     * @param instrument - the instrument which will rpovide the range of pitch requirements.\n+     * @param randomGenerator - a random generator object\n+     * @return - a value within a range of the chosen instrument (between 0 and 127)\n+     */\n+    public static  int chooseStartingNote (Instrument instrument, Random randomGenerator){\n+        int startingNote = randomGenerator.nextInt((instrument.rangeMax -\n+                instrument.rangeMin) + 1) + instrument.rangeMin;\n+\n+        return startingNote;\n+    }\n+\n+    /**\n+     * Called from within a channel constructor.\n+     * Based on the emotion assigned to this channel chooses a major or minor scale and\n+     * its respective step array.\n+     * @param emotion - an emotion name\n+     * @return - an array of steps for an appropriate scale\n+     */\n+    public static int[] chooseScaleStep(String emotion) {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": 156,
        "original_position": 144,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe restructure this to be something more like\r\n\r\n```\r\nswitch (emotion) {\r\n    case \"happy\":\r\n        return new int[] {steps...};\r\n    case \"sad\":\r\n        return new int[] {steps...};\r\netc\r\n}\r\n```\r\nto avoid instantiating unused arrays every time",
        "created_at": "2017-02-09T12:02:42Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100290995",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100290995"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100290995"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100291196",
        "pull_request_review_id": 20992595,
        "id": 100291196,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MTE5Ng==",
        "diff_hunk": "@@ -0,0 +1,28 @@\n+package com.hillnerds.soundsparrow;\n+\n+import java.util.Random;\n+\n+/**\n+ * Created by aga on 02/02/17.\n+ */\n+\n+public class Instrument {\n+    String instrument;\n+    int instrumentMidiCode;\n+    int rangeMin;\n+    int rangeMax;\n+\n+    public static String[] instrument_list = new String[] {\"piano\", \"guitar\", \"trombone\", \"trumpet\", \"violin\", \"saxophone\", \"flute\"};",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Instrument.java",
        "position": null,
        "original_position": 15,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "These are now in ChannelSoundGeneration, they shouldn't need to be duplicated",
        "created_at": "2017-02-09T12:04:05Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100291196",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100291196"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100291196"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100291457",
        "pull_request_review_id": 20992861,
        "id": 100291457,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MTQ1Nw==",
        "diff_hunk": "@@ -0,0 +1,16 @@\n+package com.hillnerds.soundsparrow;\n+\n+/**\n+ * Created by aga on 02/02/17.\n+ */\n+\n+public class MidiSequence {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/MidiSequence.java",
        "position": null,
        "original_position": 7,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Some comment saying this is the superclass for Note and StartingSequence",
        "created_at": "2017-02-09T12:05:39Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100291457",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100291457"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100291457"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100292081",
        "pull_request_review_id": 20993509,
        "id": 100292081,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MjA4MQ==",
        "diff_hunk": "@@ -18,30 +19,26 @@\n \n public class Sound extends AppCompatActivity implements MidiDriver.OnMidiStartListener {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Sound.java",
        "position": null,
        "original_position": 10,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "More class Javadoc pls, also why does it implement Midi.OnMidiStartListener",
        "created_at": "2017-02-09T12:10:11Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100292081",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100292081"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100292081"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100292276",
        "pull_request_review_id": 20993689,
        "id": 100292276,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MjI3Ng==",
        "diff_hunk": "@@ -18,30 +19,26 @@\n \n public class Sound extends AppCompatActivity implements MidiDriver.OnMidiStartListener {\n     protected MidiDriver midi;\n-    protected MediaPlayer player;\n \n     protected long userId = MainActivity.uuid_long;\n-    protected long randomSeed = userId;\n+    //protected long randomSeed = userId;",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Sound.java",
        "position": null,
        "original_position": 16,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Again, commented out code. This code exists in the previous commit, so if you really needed it again, you could pull it from there.",
        "created_at": "2017-02-09T12:11:25Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100292276",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100292276"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100292276"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100292633",
        "pull_request_review_id": 20994025,
        "id": 100292633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MjYzMw==",
        "diff_hunk": "@@ -18,30 +19,26 @@\n \n public class Sound extends AppCompatActivity implements MidiDriver.OnMidiStartListener {\n     protected MidiDriver midi;\n-    protected MediaPlayer player;\n \n     protected long userId = MainActivity.uuid_long;",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Sound.java",
        "position": null,
        "original_position": 14,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is not the way to go about it. Use BluetoothHelper.getDeviceUUID",
        "created_at": "2017-02-09T12:13:44Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100292633",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100292633"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100292633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100293053",
        "pull_request_review_id": 20994489,
        "id": 100293053,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MzA1Mw==",
        "diff_hunk": "@@ -123,11 +141,11 @@ public void onMidiStart() {\n         // TODO: Decide if this needs to do anything\n     }\n \n-    public void initializeRandomNumberGenerator() {\n-        long random_seed_num = randomSeed;\n-        randomGenerator = new Random(random_seed_num);\n-    }\n-\n+    /**\n+     * A safe sleep function including a try catch statement to capture exceptions.\n+     * Created to avoid using try catch every time a Thread sleeps.\n+     * @param time - a sleep time",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Sound.java",
        "position": null,
        "original_position": 156,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "A sleep time in what units? Also, what exceptions does it capture and why?",
        "created_at": "2017-02-09T12:16:41Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100293053",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100293053"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100293053"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100293465",
        "pull_request_review_id": 20994946,
        "id": 100293465,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5MzQ2NQ==",
        "diff_hunk": "@@ -136,114 +154,34 @@ public void safeSleep(int time) {\n         }\n     }\n \n-    public ArrayList<Note> generateMidiChannel(Channel c) {\n-        ArrayList<Note> noteArray = new ArrayList<>();\n-\n-        int timestampCounter = 0;\n-\n-        c.generateInstrument(randomGenerator);\n-\n-        Note instrument_change = new Note(192 + c.number, c.instrument, timestampCounter);\n-        noteArray.add(instrument_change);\n-\n-        for (int i = 0; i < 16; i = i+2) {\n-            int startingCode = SoundGeneration.generate_starting_code(c.number);\n-            int pitch = SoundGeneration.generate_pitch(randomGenerator, c.range_min, c.range_max);\n-            int velocity = SoundGeneration.generate_velocity(randomGenerator);\n-\n-            int duration = SoundGeneration.generate_note_duration(randomGenerator);\n-\n-            Note note_on = new Note(startingCode, pitch, velocity, timestampCounter);\n-            timestampCounter = timestampCounter + duration;\n-\n-            Note note_off = new Note(startingCode, pitch, 0, timestampCounter);\n-\n-            noteArray.add(note_on);\n-            noteArray.add(note_off);\n-        }\n-        return noteArray;\n-    }\n \n-    public ArrayList <Note> generate_midi_file(ArrayList<Channel> channelList){\n-        ArrayList<ArrayList<Note>> midiToMerge = new ArrayList<>();\n \n-        for (Channel c : channelList) {\n-            midiToMerge.add(generateMidiChannel(c));\n-        }\n-\n-        ArrayList<Note> combined = new ArrayList<>();\n+    public class MidiParser implements Runnable {\n+        private ArrayList<MidiSequence> midiSequenceFile;\n \n-        for (ArrayList<Note> a_m : midiToMerge){\n-            combined.addAll(a_m);\n+        public MidiParser(ArrayList<MidiSequence> midiSequenceFile) {\n+            this.midiSequenceFile = midiSequenceFile;\n         }\n \n-        return combined;\n-    }\n-\n-    public ArrayList<Note> sort_midi_array (ArrayList<Note> noteArray){\n-        Collections.sort(noteArray,new Comparator<Note>() {\n-            @Override\n-            public int compare(Note m1, Note m2) {\n-                return Integer.valueOf(m1.timestamp).compareTo(m2.timestamp);\n-            }\n-        });\n-\n-        return noteArray;\n-    }\n+        public void run() {\n+            int currentTimestamp = 0;\n ",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Sound.java",
        "position": null,
        "original_position": 225,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Your spacing is inconsistent (number of newlines, number of spaces between things etc)",
        "created_at": "2017-02-09T12:19:52Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100293465",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100293465"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100293465"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100293789",
        "pull_request_review_id": 20995304,
        "id": 100293789,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDI5Mzc4OQ==",
        "diff_hunk": "@@ -10,135 +18,88 @@\n \n public class SoundGeneration {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/SoundGeneration.java",
        "position": null,
        "original_position": 18,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why is this class still a thing? From what I can see, all methods are static. This should be combined with ChannelSoundGeneration I think",
        "created_at": "2017-02-09T12:22:13Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100293789",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100293789"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100293789"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100306268",
        "pull_request_review_id": 21008523,
        "id": 100306268,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDMwNjI2OA==",
        "diff_hunk": "@@ -10,135 +18,88 @@\n \n public class SoundGeneration {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/SoundGeneration.java",
        "position": null,
        "original_position": 18,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "394658036b2a0a25f9bfceb46c8b00ffb7e1cf54",
        "user": {
            "login": "aga11313",
            "id": 23415764,
            "node_id": "MDQ6VXNlcjIzNDE1NzY0",
            "avatar_url": "https://avatars0.githubusercontent.com/u/23415764?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/aga11313",
            "html_url": "https://github.com/aga11313",
            "followers_url": "https://api.github.com/users/aga11313/followers",
            "following_url": "https://api.github.com/users/aga11313/following{/other_user}",
            "gists_url": "https://api.github.com/users/aga11313/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/aga11313/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/aga11313/subscriptions",
            "organizations_url": "https://api.github.com/users/aga11313/orgs",
            "repos_url": "https://api.github.com/users/aga11313/repos",
            "events_url": "https://api.github.com/users/aga11313/events{/privacy}",
            "received_events_url": "https://api.github.com/users/aga11313/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think that the distinction between SoundGeneration and ChannelSoundGeneration is important as the first one takes care of everything to do with mergin and sorting MIDI sequence files and the sedond is responsible for generation of MidiSequences for one Channel Specifically.",
        "created_at": "2017-02-09T13:37:45Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100306268",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100306268"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100306268"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        },
        "in_reply_to_id": 100293789
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100308998",
        "pull_request_review_id": 21011255,
        "id": 100308998,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDMwODk5OA==",
        "diff_hunk": "@@ -26,13 +26,22 @@\n             new Instrument(\"flute\", 74, 73, 90)\n     };\n \n+     // (1100 0000) the first 4 bits of a starting sequence for an instrument change\n+    final static int INSTRUMENT_CHANGE_CODE = 192;\n+\n+    //the amount of notes generated for each channel\n+    final static int CHANNEL_NOTE_AMOUNT = 16;\n+\n+    // (1001 0000) the first 4 bits of a note on sequence\n+    final static int NOTE_ON_START_CODE = 144;\n+\n     /**\n      * This function chooses a rondom instrument form a hardcoded instrumentList.\n      * @param random - a random generator Object\n      * @return - return an Instrument object from instrumentList\n      */\n     public static Instrument generateRandomInstrument(Random random){\n-        int instrumentNumber = random.nextInt((6 - 0) + 1) + 0;\n+        int instrumentNumber = random.nextInt((instrumentList.length - 0) + 1) + 0;",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 35,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "7d66ce1796adddf56758a7b8f6f79514ad64a300",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You don't need length - 0 +1\r\nnextInt will generate an int in range (0, length], meaning you will get a valid index with just that. I think this will cause an occasional OutOfBoundsException\r\n`int instrumentNumber = random.nextInt(instrumentList.length);`",
        "created_at": "2017-02-09T13:50:31Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100308998",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100308998"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100308998"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100309282",
        "pull_request_review_id": 21011557,
        "id": 100309282,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDMwOTI4Mg==",
        "diff_hunk": "@@ -46,26 +55,28 @@ public static Instrument generateRandomInstrument(Random random){\n \n         int timestampCounter = 0;\n \n-        StartingSequence instrument_change = new StartingSequence(192 + c.number, c.instrument, timestampCounter);\n+        StartingSequence instrument_change = new StartingSequence(INSTRUMENT_CHANGE_CODE + c.number,\n+                c.instrument, timestampCounter);\n         midiSequenceArray.add(instrument_change);\n \n         /**\n          * TODO: implement the way of setting the length of the track differently (ie. a number of\n-         * bars so that tunes are synchronised)\n+         * bars so that tunes are synchronised).\n+         * For now every channel is just 16 notes long\n          */\n-        for (int i = 0; i < 16; i = i+2) {\n-            int startingCode = generateStartingCode(c.number);\n+        for (int noteCounter = 0; noteCounter < CHANNEL_NOTE_AMOUNT; noteCounter += 2) {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 56,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "7d66ce1796adddf56758a7b8f6f79514ad64a300",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Still using += 2",
        "created_at": "2017-02-09T13:51:54Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100309282",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100309282"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100309282"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100309592",
        "pull_request_review_id": 21011901,
        "id": 100309592,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDMwOTU5Mg==",
        "diff_hunk": "@@ -89,7 +100,8 @@ public static int generateStartingCode(int channelNumber){\n      * @return - a value between 0 and 127\n      */\n     public static int generatePitch(Channel c){\n-        int randomGeneratedPitch = c.scaleValues[c.randomGenerator.nextInt((7 - 0) + 1)];\n+        int arrayIndex = c.randomGenerator.nextInt((c.scaleValues.length) + 1);",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 90,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "7d66ce1796adddf56758a7b8f6f79514ad64a300",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No more +1, out of bounds",
        "created_at": "2017-02-09T13:53:28Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100309592",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100309592"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100309592"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100309858",
        "pull_request_review_id": 21012196,
        "id": 100309858,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDMwOTg1OA==",
        "diff_hunk": "@@ -143,17 +155,19 @@ public static  int chooseStartingNote (Instrument instrument, Random randomGener\n      */\n     public static int[] chooseScaleStep(String emotion) {\n         //return 1 for major 2 for minor\n-        int[] step_major = new int[] {2,2,1,2,2,2,1};\n-        int[] step_minor = new int[] {2,1,2,2,1,2,2};\n \n         int[] step_array;",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/ChannelSoundGeneration.java",
        "position": null,
        "original_position": 102,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "7d66ce1796adddf56758a7b8f6f79514ad64a300",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No longer necessary I don't think",
        "created_at": "2017-02-09T13:54:57Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100309858",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100309858"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100309858"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100316455",
        "pull_request_review_id": 21019366,
        "id": 100316455,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMDMxNjQ1NQ==",
        "diff_hunk": "@@ -16,14 +16,13 @@\n import java.util.Random;\n import java.util.UUID;\n \n-\n+/**\n+ * A class responsible for synthesizing the MIDI Sequence files produced by SoundGeneration and\n+ * ChannelSoundGeneration\n+ */\n public class Sound extends AppCompatActivity implements MidiDriver.OnMidiStartListener {",
        "path": "app/src/main/java/com/hillnerds/soundsparrow/Sound.java",
        "position": null,
        "original_position": 9,
        "commit_id": "c02e6a559921c9a4f1e4f5b388e6278eb554e27a",
        "original_commit_id": "7d66ce1796adddf56758a7b8f6f79514ad64a300",
        "user": {
            "login": "notexactlyawe",
            "id": 4598381,
            "node_id": "MDQ6VXNlcjQ1OTgzODE=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/4598381?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/notexactlyawe",
            "html_url": "https://github.com/notexactlyawe",
            "followers_url": "https://api.github.com/users/notexactlyawe/followers",
            "following_url": "https://api.github.com/users/notexactlyawe/following{/other_user}",
            "gists_url": "https://api.github.com/users/notexactlyawe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/notexactlyawe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/notexactlyawe/subscriptions",
            "organizations_url": "https://api.github.com/users/notexactlyawe/orgs",
            "repos_url": "https://api.github.com/users/notexactlyawe/repos",
            "events_url": "https://api.github.com/users/notexactlyawe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/notexactlyawe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Still don't understand the implements",
        "created_at": "2017-02-09T14:27:23Z",
        "updated_at": "2017-02-09T14:53:04Z",
        "html_url": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100316455",
        "pull_request_url": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/comments/100316455"
            },
            "html": {
                "href": "https://github.com/aga11313/SoundSparrow/pull/10#discussion_r100316455"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/aga11313/SoundSparrow/pulls/10"
            }
        }
    }
]