[
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/341579099",
        "pull_request_review_id": 310462494,
        "id": 341579099,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTU3OTA5OQ==",
        "diff_hunk": "@@ -5,3 +5,4 @@\n /.vs\n /node_modules/.bin\n /node_modules\n+/package-lock ",
        "path": ".gitignore",
        "position": null,
        "original_position": 4,
        "commit_id": "7ef31b9a793fe15e5be20c6da3ad425f4fa7abaa",
        "original_commit_id": "d7228d8a4ed3b54385085eedc7dcd74c7a1b2047",
        "user": {
            "login": "negreirosleo",
            "id": 20492786,
            "node_id": "MDQ6VXNlcjIwNDkyNzg2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/20492786?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/negreirosleo",
            "html_url": "https://github.com/negreirosleo",
            "followers_url": "https://api.github.com/users/negreirosleo/followers",
            "following_url": "https://api.github.com/users/negreirosleo/following{/other_user}",
            "gists_url": "https://api.github.com/users/negreirosleo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/negreirosleo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/negreirosleo/subscriptions",
            "organizations_url": "https://api.github.com/users/negreirosleo/orgs",
            "repos_url": "https://api.github.com/users/negreirosleo/repos",
            "events_url": "https://api.github.com/users/negreirosleo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/negreirosleo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "```suggestion\r\n/package-lock.json\r\n```",
        "created_at": "2019-11-01T13:48:57Z",
        "updated_at": "2019-11-01T13:51:44Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/10#discussion_r341579099",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/10",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/341579099"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/10#discussion_r341579099"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/10"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853435",
        "pull_request_review_id": 336960122,
        "id": 361853435,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg1MzQzNQ==",
        "diff_hunk": "@@ -0,0 +1,310 @@\n+const routes = require('express').Router();",
        "path": "routes/api/v2.js",
        "position": 1,
        "original_position": 1,
        "commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "original_commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "user": {
            "login": "jrtechs",
            "id": 13894625,
            "node_id": "MDQ6VXNlcjEzODk0NjI1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13894625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrtechs",
            "html_url": "https://github.com/jrtechs",
            "followers_url": "https://api.github.com/users/jrtechs/followers",
            "following_url": "https://api.github.com/users/jrtechs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrtechs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrtechs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrtechs/subscriptions",
            "organizations_url": "https://api.github.com/users/jrtechs/orgs",
            "repos_url": "https://api.github.com/users/jrtechs/repos",
            "events_url": "https://api.github.com/users/jrtechs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrtechs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Moving forward we should start adding top level descriptions for files",
        "created_at": "2019-12-29T14:30:17Z",
        "updated_at": "2019-12-29T14:32:28Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853435",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853435"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853435"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853480",
        "pull_request_review_id": 336960122,
        "id": 361853480,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg1MzQ4MA==",
        "diff_hunk": "@@ -0,0 +1,310 @@\n+const routes = require('express').Router();\n+const got = require(\"got\");\n+const cache = require('memory-cache');\n+const dotenv = require(\"dotenv\").config();\n+const GITHUB_API = \"https://api.github.com\";\n+const authenticate = `client_id=${process.env.CLIENT_ID}&client_secret=${process.env.CLIENT_SECRET}`;\n+\n+const API_FOLLOWING = \"/following\";\n+const API_FOLLOWERS = \"/followers\";\n+const API_USER_PATH = \"/users/\";\n+const API_ORGS_PATH = \"/orgs/\";\n+const API_PAGINATION_SIZE = 100; // 100 is the max, 30 is the default\n+// if this is too large, it would be infeasible to make graphs for people following popular people\n+const API_MAX_PAGES = 2;\n+const API_PAGINATION = \"&per_page=\" + API_PAGINATION_SIZE;\n+\n+const REPOS_PATH = \"/repos\";\n+\n+\n+/**\n+ * Queries data from the github APi server and returns it as\n+ * a json object in a promise.\n+ * \n+ * This makes no attempt to cache\n+ * \n+ * @param {*} requestURL endpoint on githubapi: ex: /users/jrtechs/following\n+ */\n+const queryGithubAPIRaw = async requestURL => {\n+    let queryURL = requestURL.includes(\"?page=\") ? `${GITHUB_API}${requestURL}&${authenticate}` :`${GITHUB_API}${requestURL}?${authenticate}`;\n+    console.log(queryURL);\n+    try {\n+        const req = await got(queryURL, { json: true });\n+        cache.put(requestURL, req);\n+        return req;\n+    } catch (error) {\n+        console.log(error);\n+        cache.put(requestURL, `${error.statusCode} - ${error.statusMessage}`);\n+    }\n+}\n+\n+\n+/**\n+ * Queries data from the github api server\n+ * and caches the results locally.\n+ * \n+ * @param {*} requestURL \n+ */\n+const queryGitHubAPI = async requestURL => {\n+    const apiData = cache.get(requestURL);\n+    if (apiData) {\n+        console.log(\"Fetched From Cache\");\n+        return apiData\n+    }\n+\n+    try {\n+        return await queryGithubAPIRaw(requestURL);\n+    } catch (error) {\n+        console.log(error);\n+    }\n+}\n+\n+\n+/**\n+ * Fetches all content from a particular github api endpoint\n+ * using their pagination schema.\n+ * \n+ * @param {*} username username of github client\n+ * @param {*} apiPath following or followers\n+ * @param {*} page current pagination page\n+ * @param {*} lst list we are building on\n+ */\n+const fetchAllWithPagination = async (apiPath, page, lst) => {\n+    try {\n+        const req = await queryGithubAPIRaw(`${apiPath}?page=${page}${API_PAGINATION}`);\n+        if (req.body.hasOwnProperty(\"length\")) {\n+            const list = lst.concat(req.body);\n+            if(page < API_MAX_PAGES && req.length === API_PAGINATION_SIZE) {\n+                const redo = await fetchAllWithPagination(apiPath, page + 1, list);\n+                return redo;\n+            }\n+            return list;\n+        }\n+    } catch (error) {\n+        console.log(\"Error with api request\");\n+    }\n+}\n+\n+\n+/**\n+ * Makes a copy of a JS object with certain properties\n+ * \n+ * @param {*} props \n+ * @param {*} obj \n+ */\n+const copyWithProperties = (props, obj) => {\n+    let newO = new Object();\n+    props.forEach(prop => {\n+        newO[prop] = obj[prop];\n+    })\n+    return newO;\n+}\n+\n+\n+/**\n+ * Combines the list of friends and followers ignoring duplicates\n+ * that are already in the list. (person is both following and followed by someone)\n+ * \n+ * This also removes any unused properties like events_url and organizations_url\n+ * \n+ * @param {*} followingAndFollowers \n+ */\n+const minimizeFriends = people => {\n+    let friendLst = [];\n+    let ids = new Set();\n+    people.forEach(person => {\n+        if(!ids.has(person.id)) {\n+            ids.add(person.id);\n+            friendLst.push({\n+                login: person.login, \n+                avatar_url: person.avatar_url\n+            });\n+        }\n+    });\n+    return friendLst;\n+}\n+\n+\n+/**\n+ * Fetches all the people that are either following or is followed\n+ * by a person on github. This will cache the results to make simultaneous\n+ * connections easier and less demanding on the github API.\n+ * \n+ * @param {*} user \n+ */\n+const queryFriends = async user => {\n+    const cacheHit = cache.get(\"/friends/\" + user);\n+    if (cacheHit){\n+        console.log(\"Friends cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const followers = await fetchAllWithPagination(API_USER_PATH + user + API_FOLLOWERS, 1, []);\n+        const following = await fetchAllWithPagination(API_USER_PATH + user + API_FOLLOWING, 1, []);\n+        const fList = minimizeFriends(following.concat(followers));\n+        cache.put(`/friends/${user}`, fList);\n+        return fList;\n+    } catch (error) {\n+        console.log(\"API Error\", err); \n+    }\n+}\n+\n+\n+/**\n+ * \n+ * Fetches all of the members of an organization from the\n+ * API or cache\n+ *\n+ * /orgs/RITlug/members?page=1\n+ *\n+ * @param {*} orgName \n+ */\n+const getOrganizationMembers = async orgName => {\n+    const cacheHit = cache.get(\"/org/users/\" + orgName);\n+    if (cacheHit){\n+        console.log(\"Org members cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const members = await fetchAllWithPagination(API_ORGS_PATH + orgName + \"/members\", 1, []);\n+        const membersMin = minimizeFriends(members);\n+        cache.put(\"/org/users/\" + orgName, membersMin);\n+        return membersMin;\n+    } catch (error) {\n+        console.log(error);\n+    }\n+}\n+\n+\n+/**\n+ * Minimizes the JSON for a list of repositories\n+ * \n+ * @param {*} repositories \n+ */\n+const minimizeRepositories = repositories => {\n+    let rList = [];\n+    repositories.forEach(repo => {\n+        rList.push(copyWithProperties([\"name\", \"created_at\", \"homepage\", \n+            \"description\", \"language\", \"forks\", \"watchers\",\n+            \"open_issues_count\", \"license\", \"html_url\"],\n+            repo));\n+    })\n+\n+    return rList;\n+}\n+\n+\n+/**\n+ * Fetches all repositories from the API\n+ * \n+ * @param {*} user name of org/user\n+ * @param {*} orgsOrUsers  either /users/ or /orgs/\n+ */\n+const queryRepositories = async (user, orgsOrUsers) => {\n+    const cacheHit = cache.get(user + REPOS_PATH);\n+    if (cacheHit) {\n+        console.log(\"Repositories cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const repos = await fetchAllWithPagination(orgsOrUsers + user + REPOS_PATH, 1, []);\n+        const minRepos = minimizeRepositories(repos);\n+        cache.put(`${user}${REPOS_PATH}`, minRepos);\n+        return minRepos;\n+    } catch (error) {\n+        console.log(error)\n+        console.log(\"bad things went down\");\n+    }\n+}\n+\n+\n+/**\n+ * /users/name/following/followers\n+ */\n+routes.get(\"/friends/:name\", async (req, res)=> {\n+    try {\n+        const query = await queryFriends(req.params.name);\n+        res.json(query);\n+    } catch (error) {\n+        res.status(500).json({error: 'API error fetching friends'});\n+    }\n+});\n+\n+",
        "path": "routes/api/v2.js",
        "position": 236,
        "original_position": 236,
        "commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "original_commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "user": {
            "login": "jrtechs",
            "id": 13894625,
            "node_id": "MDQ6VXNlcjEzODk0NjI1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13894625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrtechs",
            "html_url": "https://github.com/jrtechs",
            "followers_url": "https://api.github.com/users/jrtechs/followers",
            "following_url": "https://api.github.com/users/jrtechs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrtechs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrtechs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrtechs/subscriptions",
            "organizations_url": "https://api.github.com/users/jrtechs/orgs",
            "repos_url": "https://api.github.com/users/jrtechs/repos",
            "events_url": "https://api.github.com/users/jrtechs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrtechs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "hmm, we should make some API docs somewhere",
        "created_at": "2019-12-29T14:31:15Z",
        "updated_at": "2019-12-29T14:32:28Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853480",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853480"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853480"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853653",
        "pull_request_review_id": 336960320,
        "id": 361853653,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg1MzY1Mw==",
        "diff_hunk": "@@ -0,0 +1,310 @@\n+const routes = require('express').Router();\n+const got = require(\"got\");\n+const cache = require('memory-cache');\n+const dotenv = require(\"dotenv\").config();\n+const GITHUB_API = \"https://api.github.com\";\n+const authenticate = `client_id=${process.env.CLIENT_ID}&client_secret=${process.env.CLIENT_SECRET}`;\n+\n+const API_FOLLOWING = \"/following\";\n+const API_FOLLOWERS = \"/followers\";\n+const API_USER_PATH = \"/users/\";\n+const API_ORGS_PATH = \"/orgs/\";\n+const API_PAGINATION_SIZE = 100; // 100 is the max, 30 is the default\n+// if this is too large, it would be infeasible to make graphs for people following popular people\n+const API_MAX_PAGES = 2;\n+const API_PAGINATION = \"&per_page=\" + API_PAGINATION_SIZE;\n+\n+const REPOS_PATH = \"/repos\";\n+\n+\n+/**\n+ * Queries data from the github APi server and returns it as\n+ * a json object in a promise.\n+ * \n+ * This makes no attempt to cache\n+ * \n+ * @param {*} requestURL endpoint on githubapi: ex: /users/jrtechs/following\n+ */\n+const queryGithubAPIRaw = async requestURL => {\n+    let queryURL = requestURL.includes(\"?page=\") ? `${GITHUB_API}${requestURL}&${authenticate}` :`${GITHUB_API}${requestURL}?${authenticate}`;\n+    console.log(queryURL);\n+    try {\n+        const req = await got(queryURL, { json: true });\n+        cache.put(requestURL, req);\n+        return req;\n+    } catch (error) {\n+        console.log(error);\n+        cache.put(requestURL, `${error.statusCode} - ${error.statusMessage}`);\n+    }\n+}\n+\n+\n+/**\n+ * Queries data from the github api server\n+ * and caches the results locally.\n+ * \n+ * @param {*} requestURL \n+ */\n+const queryGitHubAPI = async requestURL => {\n+    const apiData = cache.get(requestURL);\n+    if (apiData) {\n+        console.log(\"Fetched From Cache\");\n+        return apiData\n+    }\n+\n+    try {\n+        return await queryGithubAPIRaw(requestURL);\n+    } catch (error) {\n+        console.log(error);\n+    }\n+}\n+\n+\n+/**\n+ * Fetches all content from a particular github api endpoint\n+ * using their pagination schema.\n+ * \n+ * @param {*} username username of github client\n+ * @param {*} apiPath following or followers\n+ * @param {*} page current pagination page\n+ * @param {*} lst list we are building on\n+ */\n+const fetchAllWithPagination = async (apiPath, page, lst) => {\n+    try {\n+        const req = await queryGithubAPIRaw(`${apiPath}?page=${page}${API_PAGINATION}`);\n+        if (req.body.hasOwnProperty(\"length\")) {\n+            const list = lst.concat(req.body);\n+            if(page < API_MAX_PAGES && req.length === API_PAGINATION_SIZE) {\n+                const redo = await fetchAllWithPagination(apiPath, page + 1, list);\n+                return redo;\n+            }\n+            return list;\n+        }\n+    } catch (error) {\n+        console.log(\"Error with api request\");\n+    }\n+}\n+\n+\n+/**\n+ * Makes a copy of a JS object with certain properties\n+ * \n+ * @param {*} props \n+ * @param {*} obj \n+ */\n+const copyWithProperties = (props, obj) => {\n+    let newO = new Object();\n+    props.forEach(prop => {\n+        newO[prop] = obj[prop];\n+    })\n+    return newO;\n+}\n+\n+\n+/**\n+ * Combines the list of friends and followers ignoring duplicates\n+ * that are already in the list. (person is both following and followed by someone)\n+ * \n+ * This also removes any unused properties like events_url and organizations_url\n+ * \n+ * @param {*} followingAndFollowers \n+ */\n+const minimizeFriends = people => {\n+    let friendLst = [];\n+    let ids = new Set();\n+    people.forEach(person => {\n+        if(!ids.has(person.id)) {\n+            ids.add(person.id);\n+            friendLst.push({\n+                login: person.login, \n+                avatar_url: person.avatar_url\n+            });\n+        }\n+    });\n+    return friendLst;\n+}\n+\n+\n+/**\n+ * Fetches all the people that are either following or is followed\n+ * by a person on github. This will cache the results to make simultaneous\n+ * connections easier and less demanding on the github API.\n+ * \n+ * @param {*} user \n+ */\n+const queryFriends = async user => {\n+    const cacheHit = cache.get(\"/friends/\" + user);\n+    if (cacheHit){\n+        console.log(\"Friends cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const followers = await fetchAllWithPagination(API_USER_PATH + user + API_FOLLOWERS, 1, []);\n+        const following = await fetchAllWithPagination(API_USER_PATH + user + API_FOLLOWING, 1, []);\n+        const fList = minimizeFriends(following.concat(followers));\n+        cache.put(`/friends/${user}`, fList);\n+        return fList;\n+    } catch (error) {\n+        console.log(\"API Error\", err); \n+    }\n+}\n+\n+\n+/**\n+ * \n+ * Fetches all of the members of an organization from the\n+ * API or cache\n+ *\n+ * /orgs/RITlug/members?page=1\n+ *\n+ * @param {*} orgName \n+ */\n+const getOrganizationMembers = async orgName => {\n+    const cacheHit = cache.get(\"/org/users/\" + orgName);\n+    if (cacheHit){\n+        console.log(\"Org members cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const members = await fetchAllWithPagination(API_ORGS_PATH + orgName + \"/members\", 1, []);\n+        const membersMin = minimizeFriends(members);\n+        cache.put(\"/org/users/\" + orgName, membersMin);\n+        return membersMin;\n+    } catch (error) {\n+        console.log(error);\n+    }\n+}\n+\n+\n+/**\n+ * Minimizes the JSON for a list of repositories\n+ * \n+ * @param {*} repositories \n+ */\n+const minimizeRepositories = repositories => {\n+    let rList = [];\n+    repositories.forEach(repo => {\n+        rList.push(copyWithProperties([\"name\", \"created_at\", \"homepage\", \n+            \"description\", \"language\", \"forks\", \"watchers\",\n+            \"open_issues_count\", \"license\", \"html_url\"],\n+            repo));\n+    })\n+\n+    return rList;\n+}\n+\n+\n+/**\n+ * Fetches all repositories from the API\n+ * \n+ * @param {*} user name of org/user\n+ * @param {*} orgsOrUsers  either /users/ or /orgs/\n+ */\n+const queryRepositories = async (user, orgsOrUsers) => {\n+    const cacheHit = cache.get(user + REPOS_PATH);\n+    if (cacheHit) {\n+        console.log(\"Repositories cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const repos = await fetchAllWithPagination(orgsOrUsers + user + REPOS_PATH, 1, []);\n+        const minRepos = minimizeRepositories(repos);\n+        cache.put(`${user}${REPOS_PATH}`, minRepos);\n+        return minRepos;\n+    } catch (error) {\n+        console.log(error)\n+        console.log(\"bad things went down\");\n+    }\n+}\n+\n+\n+/**\n+ * /users/name/following/followers\n+ */\n+routes.get(\"/friends/:name\", async (req, res)=> {\n+    try {\n+        const query = await queryFriends(req.params.name);\n+        res.json(query);\n+    } catch (error) {\n+        res.status(500).json({error: 'API error fetching friends'});\n+    }\n+});\n+\n+",
        "path": "routes/api/v2.js",
        "position": 236,
        "original_position": 236,
        "commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "original_commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "user": {
            "login": "PeterMorganGH",
            "id": 22879182,
            "node_id": "MDQ6VXNlcjIyODc5MTgy",
            "avatar_url": "https://avatars1.githubusercontent.com/u/22879182?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PeterMorganGH",
            "html_url": "https://github.com/PeterMorganGH",
            "followers_url": "https://api.github.com/users/PeterMorganGH/followers",
            "following_url": "https://api.github.com/users/PeterMorganGH/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterMorganGH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/PeterMorganGH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterMorganGH/subscriptions",
            "organizations_url": "https://api.github.com/users/PeterMorganGH/orgs",
            "repos_url": "https://api.github.com/users/PeterMorganGH/repos",
            "events_url": "https://api.github.com/users/PeterMorganGH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/PeterMorganGH/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I can work on starting that effort today.",
        "created_at": "2019-12-29T14:34:51Z",
        "updated_at": "2019-12-29T14:34:51Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853653",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853653"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853653"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28"
            }
        },
        "in_reply_to_id": 361853480
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853942",
        "pull_request_review_id": 336960553,
        "id": 361853942,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTg1Mzk0Mg==",
        "diff_hunk": "@@ -0,0 +1,310 @@\n+const routes = require('express').Router();\n+const got = require(\"got\");\n+const cache = require('memory-cache');\n+const dotenv = require(\"dotenv\").config();\n+const GITHUB_API = \"https://api.github.com\";\n+const authenticate = `client_id=${process.env.CLIENT_ID}&client_secret=${process.env.CLIENT_SECRET}`;\n+\n+const API_FOLLOWING = \"/following\";\n+const API_FOLLOWERS = \"/followers\";\n+const API_USER_PATH = \"/users/\";\n+const API_ORGS_PATH = \"/orgs/\";\n+const API_PAGINATION_SIZE = 100; // 100 is the max, 30 is the default\n+// if this is too large, it would be infeasible to make graphs for people following popular people\n+const API_MAX_PAGES = 2;\n+const API_PAGINATION = \"&per_page=\" + API_PAGINATION_SIZE;\n+\n+const REPOS_PATH = \"/repos\";\n+\n+\n+/**\n+ * Queries data from the github APi server and returns it as\n+ * a json object in a promise.\n+ * \n+ * This makes no attempt to cache\n+ * \n+ * @param {*} requestURL endpoint on githubapi: ex: /users/jrtechs/following\n+ */\n+const queryGithubAPIRaw = async requestURL => {\n+    let queryURL = requestURL.includes(\"?page=\") ? `${GITHUB_API}${requestURL}&${authenticate}` :`${GITHUB_API}${requestURL}?${authenticate}`;\n+    console.log(queryURL);\n+    try {\n+        const req = await got(queryURL, { json: true });\n+        cache.put(requestURL, req);\n+        return req;\n+    } catch (error) {\n+        console.log(error);\n+        cache.put(requestURL, `${error.statusCode} - ${error.statusMessage}`);\n+    }\n+}\n+\n+\n+/**\n+ * Queries data from the github api server\n+ * and caches the results locally.\n+ * \n+ * @param {*} requestURL \n+ */\n+const queryGitHubAPI = async requestURL => {\n+    const apiData = cache.get(requestURL);\n+    if (apiData) {\n+        console.log(\"Fetched From Cache\");\n+        return apiData\n+    }\n+\n+    try {\n+        return await queryGithubAPIRaw(requestURL);\n+    } catch (error) {\n+        console.log(error);\n+    }\n+}\n+\n+\n+/**\n+ * Fetches all content from a particular github api endpoint\n+ * using their pagination schema.\n+ * \n+ * @param {*} username username of github client\n+ * @param {*} apiPath following or followers\n+ * @param {*} page current pagination page\n+ * @param {*} lst list we are building on\n+ */\n+const fetchAllWithPagination = async (apiPath, page, lst) => {\n+    try {\n+        const req = await queryGithubAPIRaw(`${apiPath}?page=${page}${API_PAGINATION}`);\n+        if (req.body.hasOwnProperty(\"length\")) {\n+            const list = lst.concat(req.body);\n+            if(page < API_MAX_PAGES && req.length === API_PAGINATION_SIZE) {\n+                const redo = await fetchAllWithPagination(apiPath, page + 1, list);\n+                return redo;\n+            }\n+            return list;\n+        }\n+    } catch (error) {\n+        console.log(\"Error with api request\");\n+    }\n+}\n+\n+\n+/**\n+ * Makes a copy of a JS object with certain properties\n+ * \n+ * @param {*} props \n+ * @param {*} obj \n+ */\n+const copyWithProperties = (props, obj) => {\n+    let newO = new Object();\n+    props.forEach(prop => {\n+        newO[prop] = obj[prop];\n+    })\n+    return newO;\n+}\n+\n+\n+/**\n+ * Combines the list of friends and followers ignoring duplicates\n+ * that are already in the list. (person is both following and followed by someone)\n+ * \n+ * This also removes any unused properties like events_url and organizations_url\n+ * \n+ * @param {*} followingAndFollowers \n+ */\n+const minimizeFriends = people => {\n+    let friendLst = [];\n+    let ids = new Set();\n+    people.forEach(person => {\n+        if(!ids.has(person.id)) {\n+            ids.add(person.id);\n+            friendLst.push({\n+                login: person.login, \n+                avatar_url: person.avatar_url\n+            });\n+        }\n+    });\n+    return friendLst;\n+}\n+\n+\n+/**\n+ * Fetches all the people that are either following or is followed\n+ * by a person on github. This will cache the results to make simultaneous\n+ * connections easier and less demanding on the github API.\n+ * \n+ * @param {*} user \n+ */\n+const queryFriends = async user => {\n+    const cacheHit = cache.get(\"/friends/\" + user);\n+    if (cacheHit){\n+        console.log(\"Friends cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const followers = await fetchAllWithPagination(API_USER_PATH + user + API_FOLLOWERS, 1, []);\n+        const following = await fetchAllWithPagination(API_USER_PATH + user + API_FOLLOWING, 1, []);\n+        const fList = minimizeFriends(following.concat(followers));\n+        cache.put(`/friends/${user}`, fList);\n+        return fList;\n+    } catch (error) {\n+        console.log(\"API Error\", err); \n+    }\n+}\n+\n+\n+/**\n+ * \n+ * Fetches all of the members of an organization from the\n+ * API or cache\n+ *\n+ * /orgs/RITlug/members?page=1\n+ *\n+ * @param {*} orgName \n+ */\n+const getOrganizationMembers = async orgName => {\n+    const cacheHit = cache.get(\"/org/users/\" + orgName);\n+    if (cacheHit){\n+        console.log(\"Org members cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const members = await fetchAllWithPagination(API_ORGS_PATH + orgName + \"/members\", 1, []);\n+        const membersMin = minimizeFriends(members);\n+        cache.put(\"/org/users/\" + orgName, membersMin);\n+        return membersMin;\n+    } catch (error) {\n+        console.log(error);\n+    }\n+}\n+\n+\n+/**\n+ * Minimizes the JSON for a list of repositories\n+ * \n+ * @param {*} repositories \n+ */\n+const minimizeRepositories = repositories => {\n+    let rList = [];\n+    repositories.forEach(repo => {\n+        rList.push(copyWithProperties([\"name\", \"created_at\", \"homepage\", \n+            \"description\", \"language\", \"forks\", \"watchers\",\n+            \"open_issues_count\", \"license\", \"html_url\"],\n+            repo));\n+    })\n+\n+    return rList;\n+}\n+\n+\n+/**\n+ * Fetches all repositories from the API\n+ * \n+ * @param {*} user name of org/user\n+ * @param {*} orgsOrUsers  either /users/ or /orgs/\n+ */\n+const queryRepositories = async (user, orgsOrUsers) => {\n+    const cacheHit = cache.get(user + REPOS_PATH);\n+    if (cacheHit) {\n+        console.log(\"Repositories cache hit\");\n+        return cacheHit;\n+    }\n+\n+    try {\n+        const repos = await fetchAllWithPagination(orgsOrUsers + user + REPOS_PATH, 1, []);\n+        const minRepos = minimizeRepositories(repos);\n+        cache.put(`${user}${REPOS_PATH}`, minRepos);\n+        return minRepos;\n+    } catch (error) {\n+        console.log(error)\n+        console.log(\"bad things went down\");\n+    }\n+}\n+\n+\n+/**\n+ * /users/name/following/followers\n+ */\n+routes.get(\"/friends/:name\", async (req, res)=> {\n+    try {\n+        const query = await queryFriends(req.params.name);\n+        res.json(query);\n+    } catch (error) {\n+        res.status(500).json({error: 'API error fetching friends'});\n+    }\n+});\n+\n+",
        "path": "routes/api/v2.js",
        "position": 236,
        "original_position": 236,
        "commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "original_commit_id": "e47f050f695c693129e3749a45ea046712a97dbf",
        "user": {
            "login": "jrtechs",
            "id": 13894625,
            "node_id": "MDQ6VXNlcjEzODk0NjI1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13894625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrtechs",
            "html_url": "https://github.com/jrtechs",
            "followers_url": "https://api.github.com/users/jrtechs/followers",
            "following_url": "https://api.github.com/users/jrtechs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrtechs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrtechs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrtechs/subscriptions",
            "organizations_url": "https://api.github.com/users/jrtechs/orgs",
            "repos_url": "https://api.github.com/users/jrtechs/repos",
            "events_url": "https://api.github.com/users/jrtechs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrtechs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "https://github.com/jrtechs/github-graphs/issues/29",
        "created_at": "2019-12-29T14:39:33Z",
        "updated_at": "2019-12-29T14:39:33Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853942",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/361853942"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/28#discussion_r361853942"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/28"
            }
        },
        "in_reply_to_id": 361853480
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362139903",
        "pull_request_review_id": 337287939,
        "id": 362139903,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjEzOTkwMw==",
        "diff_hunk": "@@ -37,7 +35,27 @@ npm install\n node server.js\n ```\n \n-\n # Contributing\n \n-We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request. \n\\ No newline at end of file\n+We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request.\n+\n+# API Reference\n+\n+`https://github-graphs.com/api/friends/<username>`",
        "path": "README.md",
        "position": null,
        "original_position": 31,
        "commit_id": "71bfeb476672ec89db62a670ccde8edb1ddb2e5a",
        "original_commit_id": "0a164cca32bc74f4ec6ebb15762939ecd4cb1ef8",
        "user": {
            "login": "jrtechs",
            "id": 13894625,
            "node_id": "MDQ6VXNlcjEzODk0NjI1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13894625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrtechs",
            "html_url": "https://github.com/jrtechs",
            "followers_url": "https://api.github.com/users/jrtechs/followers",
            "following_url": "https://api.github.com/users/jrtechs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrtechs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrtechs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrtechs/subscriptions",
            "organizations_url": "https://api.github.com/users/jrtechs/orgs",
            "repos_url": "https://api.github.com/users/jrtechs/repos",
            "events_url": "https://api.github.com/users/jrtechs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrtechs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should make it clear that this is a GET request and provide a small sample of what it returns.",
        "created_at": "2019-12-31T03:03:21Z",
        "updated_at": "2019-12-31T03:50:16Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362139903",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362139903"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362139903"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362139985",
        "pull_request_review_id": 337287939,
        "id": 362139985,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjEzOTk4NQ==",
        "diff_hunk": "@@ -37,7 +35,27 @@ npm install\n node server.js\n ```\n \n-\n # Contributing\n \n-We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request. \n\\ No newline at end of file\n+We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request.\n+\n+# API Reference\n+\n+`https://github-graphs.com/api/friends/<username>`\n+\n+- `https://api.github.com/users/<username>`\n+- `https://api.github.com/users/<username>/followers`\n+- `https://api.github.com/users/<username>/following`\n+- `https://api.github.com/users/<username>/orgs`",
        "path": "README.md",
        "position": null,
        "original_position": 36,
        "commit_id": "71bfeb476672ec89db62a670ccde8edb1ddb2e5a",
        "original_commit_id": "0a164cca32bc74f4ec6ebb15762939ecd4cb1ef8",
        "user": {
            "login": "jrtechs",
            "id": 13894625,
            "node_id": "MDQ6VXNlcjEzODk0NjI1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13894625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrtechs",
            "html_url": "https://github.com/jrtechs",
            "followers_url": "https://api.github.com/users/jrtechs/followers",
            "following_url": "https://api.github.com/users/jrtechs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrtechs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrtechs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrtechs/subscriptions",
            "organizations_url": "https://api.github.com/users/jrtechs/orgs",
            "repos_url": "https://api.github.com/users/jrtechs/repos",
            "events_url": "https://api.github.com/users/jrtechs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrtechs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Doesn't actually get called with the friends request, this is only called when we try to render the users profile",
        "created_at": "2019-12-31T03:04:13Z",
        "updated_at": "2019-12-31T03:50:16Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362139985",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362139985"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362139985"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362140115",
        "pull_request_review_id": 337287939,
        "id": 362140115,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjE0MDExNQ==",
        "diff_hunk": "@@ -37,7 +35,27 @@ npm install\n node server.js\n ```\n \n-\n # Contributing\n \n-We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request. \n\\ No newline at end of file\n+We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request.\n+\n+# API Reference\n+\n+`https://github-graphs.com/api/friends/<username>`\n+\n+- `https://api.github.com/users/<username>`\n+- `https://api.github.com/users/<username>/followers`",
        "path": "README.md",
        "position": null,
        "original_position": 34,
        "commit_id": "71bfeb476672ec89db62a670ccde8edb1ddb2e5a",
        "original_commit_id": "0a164cca32bc74f4ec6ebb15762939ecd4cb1ef8",
        "user": {
            "login": "jrtechs",
            "id": 13894625,
            "node_id": "MDQ6VXNlcjEzODk0NjI1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13894625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrtechs",
            "html_url": "https://github.com/jrtechs",
            "followers_url": "https://api.github.com/users/jrtechs/followers",
            "following_url": "https://api.github.com/users/jrtechs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrtechs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrtechs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrtechs/subscriptions",
            "organizations_url": "https://api.github.com/users/jrtechs/orgs",
            "repos_url": "https://api.github.com/users/jrtechs/repos",
            "events_url": "https://api.github.com/users/jrtechs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrtechs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We could possibly link to the GH API here.",
        "created_at": "2019-12-31T03:05:48Z",
        "updated_at": "2019-12-31T03:50:16Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362140115",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362140115"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362140115"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362140122",
        "pull_request_review_id": 337287939,
        "id": 362140122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjE0MDEyMg==",
        "diff_hunk": "@@ -37,7 +35,27 @@ npm install\n node server.js\n ```\n \n-\n # Contributing\n \n-We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request. \n\\ No newline at end of file\n+We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request.\n+\n+# API Reference\n+\n+`https://github-graphs.com/api/friends/<username>`\n+\n+- `https://api.github.com/users/<username>`\n+- `https://api.github.com/users/<username>/followers`\n+- `https://api.github.com/users/<username>/following`\n+- `https://api.github.com/users/<username>/orgs`\n+\n+`https://github-graphs.com/api/repositories/<username>`\n+\n+- `https://api.github.com/users/<username>/repos`\n+\n+`https://github-graphs.com/api/org/users/<username>`\n+\n+- `https://api.github.com/orgs/<username>/members`\n+\n+`https://github-graphs.com/api/org/repositories/<username>`",
        "path": "README.md",
        "position": null,
        "original_position": 46,
        "commit_id": "71bfeb476672ec89db62a670ccde8edb1ddb2e5a",
        "original_commit_id": "0a164cca32bc74f4ec6ebb15762939ecd4cb1ef8",
        "user": {
            "login": "jrtechs",
            "id": 13894625,
            "node_id": "MDQ6VXNlcjEzODk0NjI1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/13894625?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jrtechs",
            "html_url": "https://github.com/jrtechs",
            "followers_url": "https://api.github.com/users/jrtechs/followers",
            "following_url": "https://api.github.com/users/jrtechs/following{/other_user}",
            "gists_url": "https://api.github.com/users/jrtechs/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jrtechs/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jrtechs/subscriptions",
            "organizations_url": "https://api.github.com/users/jrtechs/orgs",
            "repos_url": "https://api.github.com/users/jrtechs/repos",
            "events_url": "https://api.github.com/users/jrtechs/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jrtechs/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should provide a high-level explanation for each API endpoint, like \"returns all repositories that are owned by a GH organization\"",
        "created_at": "2019-12-31T03:05:55Z",
        "updated_at": "2019-12-31T03:50:16Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362140122",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362140122"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362140122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362141400",
        "pull_request_review_id": 337289447,
        "id": 362141400,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjE0MTQwMA==",
        "diff_hunk": "@@ -37,7 +35,27 @@ npm install\n node server.js\n ```\n \n-\n # Contributing\n \n-We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request. \n\\ No newline at end of file\n+We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request.\n+\n+# API Reference\n+\n+`https://github-graphs.com/api/friends/<username>`\n+\n+- `https://api.github.com/users/<username>`\n+- `https://api.github.com/users/<username>/followers`\n+- `https://api.github.com/users/<username>/following`\n+- `https://api.github.com/users/<username>/orgs`",
        "path": "README.md",
        "position": null,
        "original_position": 36,
        "commit_id": "71bfeb476672ec89db62a670ccde8edb1ddb2e5a",
        "original_commit_id": "0a164cca32bc74f4ec6ebb15762939ecd4cb1ef8",
        "user": {
            "login": "PeterMorganGH",
            "id": 22879182,
            "node_id": "MDQ6VXNlcjIyODc5MTgy",
            "avatar_url": "https://avatars1.githubusercontent.com/u/22879182?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PeterMorganGH",
            "html_url": "https://github.com/PeterMorganGH",
            "followers_url": "https://api.github.com/users/PeterMorganGH/followers",
            "following_url": "https://api.github.com/users/PeterMorganGH/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterMorganGH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/PeterMorganGH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterMorganGH/subscriptions",
            "organizations_url": "https://api.github.com/users/PeterMorganGH/orgs",
            "repos_url": "https://api.github.com/users/PeterMorganGH/repos",
            "events_url": "https://api.github.com/users/PeterMorganGH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/PeterMorganGH/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I removed the `/orgs` link is in https://github.com/PeterMorganGH/github-graphs/commit/490ff1709dd6f06c4052c6c321d28d96ff426e5f.",
        "created_at": "2019-12-31T03:21:25Z",
        "updated_at": "2019-12-31T03:50:16Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362141400",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362141400"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362141400"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32"
            }
        },
        "in_reply_to_id": 362139985
    },
    {
        "url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362143362",
        "pull_request_review_id": 337291401,
        "id": 362143362,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjE0MzM2Mg==",
        "diff_hunk": "@@ -37,7 +35,27 @@ npm install\n node server.js\n ```\n \n-\n # Contributing\n \n-We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request. \n\\ No newline at end of file\n+We are very open to new contributors. If you want to contribute to this project, and don't know where to start, look at the [open issues](https://github.com/jrtechs/github-graphs/issues). Once you know what you want to work on, comment on the issue and file a pull request.\n+\n+# API Reference\n+\n+`https://github-graphs.com/api/friends/<username>`\n+\n+- `https://api.github.com/users/<username>`\n+- `https://api.github.com/users/<username>/followers`",
        "path": "README.md",
        "position": null,
        "original_position": 34,
        "commit_id": "71bfeb476672ec89db62a670ccde8edb1ddb2e5a",
        "original_commit_id": "0a164cca32bc74f4ec6ebb15762939ecd4cb1ef8",
        "user": {
            "login": "PeterMorganGH",
            "id": 22879182,
            "node_id": "MDQ6VXNlcjIyODc5MTgy",
            "avatar_url": "https://avatars1.githubusercontent.com/u/22879182?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/PeterMorganGH",
            "html_url": "https://github.com/PeterMorganGH",
            "followers_url": "https://api.github.com/users/PeterMorganGH/followers",
            "following_url": "https://api.github.com/users/PeterMorganGH/following{/other_user}",
            "gists_url": "https://api.github.com/users/PeterMorganGH/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/PeterMorganGH/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/PeterMorganGH/subscriptions",
            "organizations_url": "https://api.github.com/users/PeterMorganGH/orgs",
            "repos_url": "https://api.github.com/users/PeterMorganGH/repos",
            "events_url": "https://api.github.com/users/PeterMorganGH/events{/privacy}",
            "received_events_url": "https://api.github.com/users/PeterMorganGH/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Done",
        "created_at": "2019-12-31T03:44:34Z",
        "updated_at": "2019-12-31T03:50:16Z",
        "html_url": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362143362",
        "pull_request_url": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/comments/362143362"
            },
            "html": {
                "href": "https://github.com/jrtechs/github-graphs/pull/32#discussion_r362143362"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jrtechs/github-graphs/pulls/32"
            }
        },
        "in_reply_to_id": 362140115
    }
]