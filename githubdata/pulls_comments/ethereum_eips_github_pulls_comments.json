[
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49465995",
        "pull_request_review_id": null,
        "id": 49465995,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY1OTk1",
        "diff_hunk": "@@ -38,15 +38,15 @@ The EIP process begins with a new idea for Ethereum. It is highly recommended th\n \n Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The EIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is EIP-able. Posting to the  the [https://forum.ethereum.org/categories/protocol-and-client-discussion Protocol Discussion] forum or opening an [https://github.com/ethereum/EIP/issues Issue] is the best way to go about this.\n \n-Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used.\n+Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used.\n \n Once the champion has asked the Ethereum community as to whether an idea has any chance of acceptance, a draft EIP should be presented as a Pull Request. This gives the author a chance to flesh out the draft EIP to make properly formatted, of high quality, and to address initial concerns about the proposal.\n \n-If the EIP collaborators approves, the will assign the EIP a number, label it as Standards Track, Informational, or Process, give it status \"Draft\", and add it to the git repository. The EIP editor will not unreasonably deny a EIP. Reasons for denying EIP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Ethereum philosophy.\n+If the EIP collaborators approves, the EIP editor will assign the EIP a number, label it as Standards Track, Informational, or Process, give it status \"Draft\", and add it to the git repository. The EIP editor will not unreasonably deny an EIP. Reasons for denying EIP status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Ethereum philosophy.",
        "path": "EIPS/eip-1.mediawiki",
        "position": 36,
        "original_position": 36,
        "commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "original_commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "user": {
            "login": "jonathancross",
            "id": 5115470,
            "node_id": "MDQ6VXNlcjUxMTU0NzA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5115470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonathancross",
            "html_url": "https://github.com/jonathancross",
            "followers_url": "https://api.github.com/users/jonathancross/followers",
            "following_url": "https://api.github.com/users/jonathancross/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonathancross/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonathancross/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonathancross/subscriptions",
            "organizations_url": "https://api.github.com/users/jonathancross/orgs",
            "repos_url": "https://api.github.com/users/jonathancross/repos",
            "events_url": "https://api.github.com/users/jonathancross/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonathancross/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "FYI: Added \"EIP editor\" here.\n\nI now see that there is another typo in the same line, but can make that fix in a future pull request.\neg: \"If the EIP collaborators approve**s**\" => \"If the EIP collaborator(s) approve\"\n",
        "created_at": "2016-01-12T15:15:00Z",
        "updated_at": "2016-01-12T15:15:00Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/52#discussion_r49465995",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49465995"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/52#discussion_r49465995"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49466159",
        "pull_request_review_id": null,
        "id": 49466159,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2MTU5",
        "diff_hunk": "@@ -62,7 +62,7 @@ EIPs can also be superseded by a different EIP, rendering the original obsolete.\n \n The possible paths of the status of EIPs are as follows:\n \n-<img src=./eip-1/process.png></img>",
        "path": "EIPS/eip-1.mediawiki",
        "position": 49,
        "original_position": 49,
        "commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "original_commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "user": {
            "login": "jonathancross",
            "id": 5115470,
            "node_id": "MDQ6VXNlcjUxMTU0NzA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5115470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonathancross",
            "html_url": "https://github.com/jonathancross",
            "followers_url": "https://api.github.com/users/jonathancross/followers",
            "following_url": "https://api.github.com/users/jonathancross/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonathancross/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonathancross/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonathancross/subscriptions",
            "organizations_url": "https://api.github.com/users/jonathancross/orgs",
            "repos_url": "https://api.github.com/users/jonathancross/repos",
            "events_url": "https://api.github.com/users/jonathancross/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonathancross/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "FYI: `img` tag is empty (cannot have a closing tag)\n",
        "created_at": "2016-01-12T15:16:03Z",
        "updated_at": "2016-01-12T15:16:03Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/52#discussion_r49466159",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49466159"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/52#discussion_r49466159"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49467120",
        "pull_request_review_id": null,
        "id": 49467120,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MTIw",
        "diff_hunk": "@@ -168,8 +168,8 @@ Once the EIP is ready for the repository, the EIP editor will:\n \n Many EIPs are written and maintained by developers with write access to the Ethereum codebase. The EIP editors monitor EIP changes, and correct any structure, grammar, spelling, or markup mistakes we see.\n \n-The editors don't pass judgement on EIPs. We merely do the administrative & editorial part. Except for times like this, there's relatively low volume.\n+The editors don't pass judgment on EIPs. We merely do the administrative & editorial part. Except for times like this, there's relatively low volume.\n \n ==History==\n \n-This document was derived heavily from [https://github.com/bitcoin/bips Bitcoin's BIP-0001] written by Amir Taaki wich in turn was derived from [https://www.python.org/dev/peps/ Python's PEP-0001]. In many places text was simply copied and modified. Although the PEP-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the Ethereum Improvement Process, and should not be bothered with technical questions specific to Ethereum or the EIP. Please direct all comments to the EIP editors.",
        "path": "EIPS/eip-1.mediawiki",
        "position": 86,
        "original_position": 86,
        "commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "original_commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "user": {
            "login": "jonathancross",
            "id": 5115470,
            "node_id": "MDQ6VXNlcjUxMTU0NzA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5115470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonathancross",
            "html_url": "https://github.com/jonathancross",
            "followers_url": "https://api.github.com/users/jonathancross/followers",
            "following_url": "https://api.github.com/users/jonathancross/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonathancross/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonathancross/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonathancross/subscriptions",
            "organizations_url": "https://api.github.com/users/jonathancross/orgs",
            "repos_url": "https://api.github.com/users/jonathancross/repos",
            "events_url": "https://api.github.com/users/jonathancross/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonathancross/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "FYI: \"wich\" => \"which\"\n",
        "created_at": "2016-01-12T15:22:50Z",
        "updated_at": "2016-01-12T15:22:50Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/52#discussion_r49467120",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49467120"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/52#discussion_r49467120"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49467427",
        "pull_request_review_id": null,
        "id": 49467427,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDI3",
        "diff_hunk": "@@ -38,15 +38,15 @@ The EIP process begins with a new idea for Ethereum. It is highly recommended th\n \n Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The EIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is EIP-able. Posting to the  the [https://forum.ethereum.org/categories/protocol-and-client-discussion Protocol Discussion] forum or opening an [https://github.com/ethereum/EIP/issues Issue] is the best way to go about this.\n \n-Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used.\n+Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used.",
        "path": "EIPS/eip-1.mediawiki",
        "position": 31,
        "original_position": 31,
        "commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "original_commit_id": "1bd62c85cf673c0e94e2e483fcf0d99d26fbc18e",
        "user": {
            "login": "jonathancross",
            "id": 5115470,
            "node_id": "MDQ6VXNlcjUxMTU0NzA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/5115470?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jonathancross",
            "html_url": "https://github.com/jonathancross",
            "followers_url": "https://api.github.com/users/jonathancross/followers",
            "following_url": "https://api.github.com/users/jonathancross/following{/other_user}",
            "gists_url": "https://api.github.com/users/jonathancross/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jonathancross/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jonathancross/subscriptions",
            "organizations_url": "https://api.github.com/users/jonathancross/orgs",
            "repos_url": "https://api.github.com/users/jonathancross/repos",
            "events_url": "https://api.github.com/users/jonathancross/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jonathancross/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "FYI: Capitalized \"internet\"\n",
        "created_at": "2016-01-12T15:24:56Z",
        "updated_at": "2016-01-12T15:24:56Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/52#discussion_r49467427",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/49467427"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/52#discussion_r49467427"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/52"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48545320",
        "pull_request_review_id": null,
        "id": 48545320,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MzIw",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 22,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "karalabe",
            "id": 129561,
            "node_id": "MDQ6VXNlcjEyOTU2MQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/129561?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/karalabe",
            "html_url": "https://github.com/karalabe",
            "followers_url": "https://api.github.com/users/karalabe/followers",
            "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
            "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
            "organizations_url": "https://api.github.com/users/karalabe/orgs",
            "repos_url": "https://api.github.com/users/karalabe/repos",
            "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/karalabe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Aren't the hello packets being sent out immediately as the connection is established? Also not sure about it, but AFAIK there are no ordering guarantees between who sends such a packet first or second, so I don't really see a way to send the lower of the two, if both sides have to wait for the remote one to figure out the correct version.\n\nEdit: Perhaps you meant not that they should reply with the lowest, but rather that they should use the lowest version throughout the communication?\n",
        "created_at": "2015-12-29T15:00:45Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48545320",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48545320"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48545320"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48548904",
        "pull_request_review_id": null,
        "id": 48548904,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4OTA0",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 112,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "karalabe",
            "id": 129561,
            "node_id": "MDQ6VXNlcjEyOTU2MQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/129561?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/karalabe",
            "html_url": "https://github.com/karalabe",
            "followers_url": "https://api.github.com/users/karalabe/followers",
            "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
            "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
            "organizations_url": "https://api.github.com/users/karalabe/orgs",
            "repos_url": "https://api.github.com/users/karalabe/repos",
            "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/karalabe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not familiar with the cryptographic consequences here, but using RLP for encoding the body of the handshake would lead to an attacker knowing a few bytes of the clear-text data, namely the schema of the RLP encoding itself. \n\nGiven that the encoded fields are fixed sized ones, an attacker could know for sure the position and value of the length encodings in the cleartext, which could weaken the encryption a bit. I'm not familiar enough with te primitives though to say whether this is acceptable or not.\n",
        "created_at": "2015-12-29T15:54:16Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48548904",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48548904"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48548904"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48549122",
        "pull_request_review_id": null,
        "id": 48549122,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MTIy",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).\n+* Removing the hash of the ephemeral public key (it is redundant).\n+\n+These changes make it possible to upgrade the RLPx TCP transport protocol in the same\n+manner as described for the other protocols, i.e. by adding list elements and bumping the\n+version. Since this is the first change to the RLPx handshake packet, we can seize the\n+opportunity to remove all currently unused fields.\n+\n+Additional data is permitted (and in fact required) after the RLP list because the\n+handshake packet needs to grow in order to be distinguishable from the old format. Clients\n+can employ logic such as the following pseudocode to handle both formats simultaneously:\n+\n+```go\n+packet = read(307, connection)\n+if decrypt(packet) {\n+    // process as old format\n+} else {\n+    size = unpack_16bit_big_endian(packet)\n+    packet += read(size-307, connection)\n+    if !decrypt(packet) {\n+        // error\n+    }\n+    // process as new format\n+}\n+```\n+\n+Implementations may choose to add a random amount of bytes to vary the size of the packet.\n+Doing so helps prevent statistical traffic classification.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 140,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "karalabe",
            "id": 129561,
            "node_id": "MDQ6VXNlcjEyOTU2MQ==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/129561?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/karalabe",
            "html_url": "https://github.com/karalabe",
            "followers_url": "https://api.github.com/users/karalabe/followers",
            "following_url": "https://api.github.com/users/karalabe/following{/other_user}",
            "gists_url": "https://api.github.com/users/karalabe/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/karalabe/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/karalabe/subscriptions",
            "organizations_url": "https://api.github.com/users/karalabe/orgs",
            "repos_url": "https://api.github.com/users/karalabe/repos",
            "events_url": "https://api.github.com/users/karalabe/events{/privacy}",
            "received_events_url": "https://api.github.com/users/karalabe/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "If the handshake is prefixed with the length of the cipher-text, isn't that already leaking enough information to allow statistical classification? I.e. a single TCP frame containing exactly the same amount of random data that was specified by the first N bytes?\n",
        "created_at": "2015-12-29T15:57:09Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48549122",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48549122"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48549122"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48661492",
        "pull_request_review_id": null,
        "id": 48661492,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYxNDky",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 112,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "wanderer",
            "id": 158211,
            "node_id": "MDQ6VXNlcjE1ODIxMQ==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/158211?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/wanderer",
            "html_url": "https://github.com/wanderer",
            "followers_url": "https://api.github.com/users/wanderer/followers",
            "following_url": "https://api.github.com/users/wanderer/following{/other_user}",
            "gists_url": "https://api.github.com/users/wanderer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/wanderer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/wanderer/subscriptions",
            "organizations_url": "https://api.github.com/users/wanderer/orgs",
            "repos_url": "https://api.github.com/users/wanderer/repos",
            "events_url": "https://api.github.com/users/wanderer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/wanderer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "that and we don't really need RLP here. RLP is good for when there is an variable length array but the handshake is always the same. It would be more efficient just to do section size + section. \n",
        "created_at": "2015-12-31T16:12:49Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48661492",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48661492"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48661492"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671480",
        "pull_request_review_id": null,
        "id": 48671480,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxNDgw",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 22,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Agree this requires clarification and that neither side should wait on the other side to send their version and either side can choose to disconnect or continue communication if the version is different. The proposed specifications are ambiguous because they state that either side can do what they want. This can be simplified to:\n- Once a secure connection is established a Hello packet or Disconnect packet MUST be sent\n- The hello packet MUST contain the highest version supported by the client\n",
        "created_at": "2015-12-31T21:17:32Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671480",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671480"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671480"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671624",
        "pull_request_review_id": null,
        "id": 48671624,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxNjI0",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 24,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can be simplified to:\n- RLPx UDP packets with unknown type should be ignored\n\nWhy the specification to ignore additional list elements?\n\nThe version number in Ping/Pong packets shouldn't be ignored. It is to be cached and/or checked against existing metadata and maybe further verified as a compatible version following encrypted handshake.\n",
        "created_at": "2015-12-31T21:23:12Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671624",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671624"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671624"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671715",
        "pull_request_review_id": null,
        "id": 48671715,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxNzE1",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 111,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "No plaintext. The problem with this is that the length will _always_ be greater than X, and likely equal to X, so it can be inferred that the connection is rlpx. Leaking information (aka plaintext) is not within the design rationale of RLPx or any encrypted protocol.\n",
        "created_at": "2015-12-31T21:28:04Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671715",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671715"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671715"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671818",
        "pull_request_review_id": null,
        "id": 48671818,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxODE4",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 112,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@karalabe @wanderer I think RLP is better than DER and it gives us more flexibility than fixed-length without adding too much complexity. Specifically, RLP is helpful for future upgrades and future features.\n",
        "created_at": "2015-12-31T21:33:18Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671818",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48671818"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48671818"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672023",
        "pull_request_review_id": null,
        "id": 48672023,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMDIz",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 113,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The token flag will be used, don't remove it! Just because it isn't used doesn't mean it isn't a priority. It isn't used now because other issues are a higher priority and need to be resolved first.\n",
        "created_at": "2015-12-31T21:44:02Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672023",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672023"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672023"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672040",
        "pull_request_review_id": null,
        "id": 48672040,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMDQw",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).\n+* Removing the hash of the ephemeral public key (it is redundant).",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 114,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "+1\n",
        "created_at": "2015-12-31T21:44:49Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672040",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672040"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672040"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672263",
        "pull_request_review_id": null,
        "id": 48672263,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMjYz",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).\n+* Removing the hash of the ephemeral public key (it is redundant).\n+\n+These changes make it possible to upgrade the RLPx TCP transport protocol in the same\n+manner as described for the other protocols, i.e. by adding list elements and bumping the\n+version. Since this is the first change to the RLPx handshake packet, we can seize the\n+opportunity to remove all currently unused fields.\n+\n+Additional data is permitted (and in fact required) after the RLP list because the\n+handshake packet needs to grow in order to be distinguishable from the old format. Clients\n+can employ logic such as the following pseudocode to handle both formats simultaneously:\n+\n+```go\n+packet = read(307, connection)\n+if decrypt(packet) {\n+    // process as old format\n+} else {\n+    size = unpack_16bit_big_endian(packet)\n+    packet += read(size-307, connection)\n+    if !decrypt(packet) {\n+        // error\n+    }\n+    // process as new format\n+}\n+```\n+\n+Implementations may choose to add a random amount of bytes to vary the size of the packet.\n+Doing so helps prevent statistical traffic classification.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 140,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@karalabe Yes \u2013 although I'm not a trained cryptanalyst like others whom I've worked with on rlpx. The ciphertext will always be at least N bytes, so over time, the fact that the value is greater than N and rest is random leaks information. If the value is cleartext it can also be reliably manipulated which can create other problems; flipping a few bits to increase the value would cause a longer read which results in timing out the connection.\n\n<3 that I was able to sync up and send eth transactions from several locations where I couldn't use github.\n",
        "created_at": "2015-12-31T21:56:13Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672263",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672263"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672263"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672674",
        "pull_request_review_id": null,
        "id": 48672674,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNjc0",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 113,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "fjl",
            "id": 6915,
            "node_id": "MDQ6VXNlcjY5MTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6915?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjl",
            "html_url": "https://github.com/fjl",
            "followers_url": "https://api.github.com/users/fjl/followers",
            "following_url": "https://api.github.com/users/fjl/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
            "organizations_url": "https://api.github.com/users/fjl/orgs",
            "repos_url": "https://api.github.com/users/fjl/repos",
            "events_url": "https://api.github.com/users/fjl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Adding the token feature (if it ever happens) will incur a version bump. The flag value can be added back into the list at that time.\n",
        "created_at": "2015-12-31T22:17:25Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672674",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672674"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672674"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672702",
        "pull_request_review_id": null,
        "id": 48672702,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNzAy",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 22,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "fjl",
            "id": 6915,
            "node_id": "MDQ6VXNlcjY5MTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6915?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjl",
            "html_url": "https://github.com/fjl",
            "followers_url": "https://api.github.com/users/fjl/followers",
            "following_url": "https://api.github.com/users/fjl/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
            "organizations_url": "https://api.github.com/users/fjl/orgs",
            "repos_url": "https://api.github.com/users/fjl/repos",
            "events_url": "https://api.github.com/users/fjl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I will clarify this in the text, it was definitely not meant to imply that implementations should wait for the remote hello packet.\n",
        "created_at": "2015-12-31T22:19:01Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672702",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672702"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672702"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672761",
        "pull_request_review_id": null,
        "id": 48672761,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNzYx",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 112,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "fjl",
            "id": 6915,
            "node_id": "MDQ6VXNlcjY5MTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6915?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjl",
            "html_url": "https://github.com/fjl",
            "followers_url": "https://api.github.com/users/fjl/followers",
            "following_url": "https://api.github.com/users/fjl/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
            "organizations_url": "https://api.github.com/users/fjl/orgs",
            "repos_url": "https://api.github.com/users/fjl/repos",
            "events_url": "https://api.github.com/users/fjl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The initial packet is encrypted using AES, which is not known to be vulnerable to known plaintext attacks.\n\nRLP is suggested here because it can carry more structure than a simple length-value scheme.\nFor example, a future version of the handshake could carry the devp2p hello packet and/or arbitrary protocol-specific metadata to reduce the number of round trips.\n",
        "created_at": "2015-12-31T22:23:05Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672761",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672761"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672761"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672846",
        "pull_request_review_id": null,
        "id": 48672846,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyODQ2",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 24,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "fjl",
            "id": 6915,
            "node_id": "MDQ6VXNlcjY5MTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6915?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjl",
            "html_url": "https://github.com/fjl",
            "followers_url": "https://api.github.com/users/fjl/followers",
            "following_url": "https://api.github.com/users/fjl/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
            "organizations_url": "https://api.github.com/users/fjl/orgs",
            "repos_url": "https://api.github.com/users/fjl/repos",
            "events_url": "https://api.github.com/users/fjl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I will clarify this too. \"Ignore\" may suggest that the version number should be discarded, which is not the intended meaning. It is simply meant to say that nodes with mismatching version should still be included in the discovery table.\n\nThe bit about additional list elements allows for backwards-compatible upgrades in the same manner as for the devp2p hello packet: If any packet is extended to include more information in a later version of the protocol, older nodes will simply ignore these elements.\n",
        "created_at": "2015-12-31T22:29:52Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672846",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48672846"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48672846"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48674691",
        "pull_request_review_id": null,
        "id": 48674691,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0Njkx",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).\n+* Removing the hash of the ephemeral public key (it is redundant).\n+\n+These changes make it possible to upgrade the RLPx TCP transport protocol in the same\n+manner as described for the other protocols, i.e. by adding list elements and bumping the\n+version. Since this is the first change to the RLPx handshake packet, we can seize the\n+opportunity to remove all currently unused fields.\n+\n+Additional data is permitted (and in fact required) after the RLP list because the\n+handshake packet needs to grow in order to be distinguishable from the old format. Clients\n+can employ logic such as the following pseudocode to handle both formats simultaneously:\n+\n+```go\n+packet = read(307, connection)\n+if decrypt(packet) {\n+    // process as old format\n+} else {\n+    size = unpack_16bit_big_endian(packet)\n+    packet += read(size-307, connection)\n+    if !decrypt(packet) {\n+        // error\n+    }\n+    // process as new format\n+}\n+```\n+\n+Implementations may choose to add a random amount of bytes to vary the size of the packet.\n+Doing so helps prevent statistical traffic classification.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 140,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "fjl",
            "id": 6915,
            "node_id": "MDQ6VXNlcjY5MTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6915?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjl",
            "html_url": "https://github.com/fjl",
            "followers_url": "https://api.github.com/users/fjl/followers",
            "following_url": "https://api.github.com/users/fjl/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
            "organizations_url": "https://api.github.com/users/fjl/orgs",
            "repos_url": "https://api.github.com/users/fjl/repos",
            "events_url": "https://api.github.com/users/fjl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I would like to note that an earlier draft of EIP-8 encoded the length prefix as:\n\n``` text\nsize-mask = sha3(recipient-pubk[:4] || enc-auth-msg[:16])[:2]\nauth-size-masked = xor(size-mask, auth-size)\n```\n\nI played around with a few variations of this idea (omitting the public key, etc.) and concluded that the complexity isn't worth it. Such masking schemes can become a strong indicator themselves or leak peer identities. Statistical classification these days can differentiate based on inter-packet timing, to the point where [Tor traffic can be detected even though it masquerades as HTTPS](http://www.netresec.com/?page=Blog&month=2013-04&post=Detecting-TOR-Communication-in-Network-Traffic). We won't win against such attempts, whether we mask the size or not.\n\nThe issue that @karalabe mentioned is a valid concern, but one could argue that the (admittedly weak) protection against traffic classification is merely a side effect. Padding the handshake is required for another reason (see a few lines further up in the EIP document), if anything this is defense-in-depth. I will change the sentence to say \"helps prevent signature-based traffic classification\".\n\nGiven that the size of the handshake plaintext is randomly padded, the length prefix does not leak information about the plaintext. This is what matters.\n\nSide note: TLS, ZRTP and other encrypted protocols include version number and length as plaintext fields.\n\n> flipping a few bits to increase the value would cause a longer read which results in timing out the connection.\n\nA (privileged) attacker wishing to fail connection attempts has other means to do so: flipping any bit of the handshake packet is sufficient to invalidate its MAC.\n\nThe 16bit length prefix allows for up to ~64kB of handshake data. With todays connection speeds, it is unlikely that anyone will run into a timeout even if the maximum amount of data is actually used for a valid purpose.\n",
        "created_at": "2016-01-01T00:34:35Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48674691",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48674691"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48674691"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48674700",
        "pull_request_review_id": null,
        "id": 48674700,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NzAw",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 111,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "fjl",
            "id": 6915,
            "node_id": "MDQ6VXNlcjY5MTU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6915?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fjl",
            "html_url": "https://github.com/fjl",
            "followers_url": "https://api.github.com/users/fjl/followers",
            "following_url": "https://api.github.com/users/fjl/following{/other_user}",
            "gists_url": "https://api.github.com/users/fjl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fjl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fjl/subscriptions",
            "organizations_url": "https://api.github.com/users/fjl/orgs",
            "repos_url": "https://api.github.com/users/fjl/repos",
            "events_url": "https://api.github.com/users/fjl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fjl/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "See https://github.com/ethereum/EIPs/pull/49#discussion_r48674691\n",
        "created_at": "2016-01-01T00:35:09Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48674700",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48674700"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48674700"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48675722",
        "pull_request_review_id": null,
        "id": 48675722,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NzIy",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).\n+* Removing the hash of the ephemeral public key (it is redundant).\n+\n+These changes make it possible to upgrade the RLPx TCP transport protocol in the same\n+manner as described for the other protocols, i.e. by adding list elements and bumping the\n+version. Since this is the first change to the RLPx handshake packet, we can seize the\n+opportunity to remove all currently unused fields.\n+\n+Additional data is permitted (and in fact required) after the RLP list because the\n+handshake packet needs to grow in order to be distinguishable from the old format. Clients\n+can employ logic such as the following pseudocode to handle both formats simultaneously:\n+\n+```go\n+packet = read(307, connection)\n+if decrypt(packet) {\n+    // process as old format\n+} else {\n+    size = unpack_16bit_big_endian(packet)\n+    packet += read(size-307, connection)\n+    if !decrypt(packet) {\n+        // error\n+    }\n+    // process as new format\n+}\n+```\n+\n+Implementations may choose to add a random amount of bytes to vary the size of the packet.\n+Doing so helps prevent statistical traffic classification.",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 140,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> I played around with a few variations of this idea (omitting the public key, etc.) and concluded that the complexity isn't worth it.\n\nI believe zero knowledge proofs would be useful here however its too soon and I don't think there are libraries which implement ZK proofs in a generally usable way.\n\n> to the point where Tor traffic can be detected even though it masquerades as HTTPS. We won't win against such attempts, whether we mask the size or not.\n\nTor can be detected by statistical classification because there isn't a source for entropy or robust multiplexing and tor doesn't wish to address the problem (I've spoken to 3 of their devs about this). TL;DR it's out of scope for Tor.\n\nI've known about statistical classification systems since 2006, have worked with netflow systems, and a patent for a signal classification system, thus...\n\n> \"We won't win\".\n\n...is nonsense. It's Science :) Research, writing code and not compromising on design principles.\n\n> Side note: TLS, ZRTP and other encrypted protocols include version number and length as plaintext fields.\n\nThey also send public key and certs in plaintext. I spoke with an author of SSL and they simply didn't get to build what they wanted, and they didn't have the strong guarantees of cryptography which we have today. There's complete agreement that plaintext is bad.\n",
        "created_at": "2016-01-01T03:09:06Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48675722",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48675722"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48675722"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48675805",
        "pull_request_review_id": null,
        "id": 48675805,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1ODA1",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 24,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can this be a nested tuple? Something like:\n\n```\nauth-body     = rlp.list(auth-vsn, rlp.list(sig, initiator-pubk, initiator-nonce OR token))\n```\n\nThus:\n- The first item in auth-body will always be VERSION\n- The second item in auth-body will always be a list for HANDSHAKE (3 items)\n\nNotably, any extensions would need to be _very_ strict to ensure they aren't introducing plaintext elements.\n",
        "created_at": "2016-01-01T03:31:12Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48675805",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48675805"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48675805"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48675825",
        "pull_request_review_id": null,
        "id": 48675825,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1ODI1",
        "diff_hunk": "@@ -0,0 +1,148 @@\n+### Title\n+\n+      EIP: 8\n+      Title: devp2p Forward Compatibility Requirements for Homestead\n+      Author: Felix Lange <felix@ethdev.com>\n+      Status: Draft\n+      Type: Standards Track\n+      Layer: Networking\n+      Created: 2015-12-18\n+\n+### Abstract\n+\n+This EIP introduces new forward-compatibility requirements for implementations of the\n+devp2p Wire Protocol, the RLPx Discovery Protocol and the RLPx TCP Transport Protocol.\n+\n+### Specification\n+\n+Implementations of the devp2p Wire Protocol should ignore the version number of hello\n+packets. If the remote hello packet contains a version greater than the current local\n+version, the implementation should reply with a hello packet containing the local (lower)\n+version. Implementations should also ignore any additional list elements at the end of the\n+hello packet.\n+\n+Similarly, implementations of the RLPx Discovery Protocol should ignore the version number\n+of the ping and pong packet, any additional list elements in any packet, and any data\n+after the first RLP value in any packet. Discovery packets with unknown packet type should\n+be discarded silently.\n+\n+Finally, implementations of the RLPx TCP transport protocol should accept a new encoding\n+for the encrypted key establishment handshake packets. If an EIP-8 style RLPx\n+`auth-packet` is received, the corresponding `ack-packet` should be sent using the rules\n+below.\n+\n+Decoding the RLP data in `auth-body` and `ack-body` should ignore mismatches of `auth-vsn`\n+and `ack-vsn`, any additional list elements and any trailing data after the list. During\n+the transitioning period (i.e. until the old format has been retired), implementations\n+should pad `auth-body` with at least 100 bytes of junk data. \n+\n+```text\n+auth-vsn      = 4\n+auth-size     = size of enc-auth-body, encoded as a big-endian 16-bit integer\n+auth-body     = rlp.list(sig, initiator-pubk, initiator-nonce, auth-vsn)\n+enc-auth-body = ecies.encrypt(recipient-pubk, auth-body)\n+auth-packet   = auth-size || enc-auth-body\n+\n+ack-vsn       = 4\n+ack-size      = size of enc-ack-body, encoded as a big-endian 16-bit integer\n+ack-body      = rlp.list(recipient-ephemeral-pubk, recipient-nonce, ack-vsn)\n+enc-ack-body  = ecies.encrypt(initiator-pubk, ack-body)\n+ack-packet    = ack-size || enc-ack-body\n+\n+where\n+\n+X || Y\n+    denotes concatenation of X and Y.\n+X[:N]\n+    denotes an N-byte prefix of X.\n+rlp.list(X, Y, Z, ...)\n+    denotes recursive encoding of [X, Y, Z, ...] as an RLP list.\n+sha3(MESSAGE)\n+    is the Keccak256 hash function as used by Ethereum.\n+ecies.encrypt(PUBKEY, MESSAGE)\n+    is the asymmetric encryption function as used by RLPx.\n+```\n+\n+### Motivation\n+\n+Changes to the devp2p protocols are hard to deploy because clients running an older\n+version will refuse communication if the version number or structure of the hello\n+(discovery ping, RLPx handshake) packet does not match local expectations.\n+\n+Introducing forward-compatibility requirements as part of the Homestead consensus upgrade\n+will ensure that all client software in use on the Ethereum network can cope with future\n+network protocol upgrades (as long as backwards-compatibility is maintained).\n+\n+### Rationale\n+\n+#### Changes to the devp2p Wire Protocol\n+\n+All clients currently contain statements such as the following:\n+\n+```python\n+# pydevp2p/p2p_protocol.py\n+if data['version'] != proto.version:\n+    log.debug('incompatible network protocols', peer=proto.peer,\n+        expected=proto.version, received=data['version'])\n+    return proto.send_disconnect(reason=reasons.incompatibel_p2p_version)\n+```\n+\n+These checks make it impossible to change the version or structure of the initial packet.\n+Dropping them enables switching to a newer protocol version: Clients implementing a newer\n+version simply send a packet with higher version and possibly additional list elements.\n+\n+* If such a packet is received by a node with lower version, it will blindly assume that\n+  the remote end is backwards-compatible and respond with the old handshake.\n+* If the packet is received by a node with equal version, new features of the protocol can\n+  be used.\n+* If the packet is received by a node with higher version, it can enable\n+  backwards-compatibility logic or drop the connection.\n+\n+#### Changes to the RLPx TCP Handshake\n+\n+Discussions of the RLPx v5 changes (chunked packets, change to key derivation) have\n+faltered in part because the v4 handshake encoding provides only one in-band way to add a\n+version number: shortening the random portion of the nonce. Even if the RLPx v5 handshake\n+proposal were accepted, future upgrades are hard because the handshake packet is a fixed\n+size ECIES ciphertext with known layout.\n+\n+I propose the following changes to the handshake packets:\n+\n+* Adding the length of the ciphertext as a plaintext header.\n+* Encoding the body of the handshake as RLP.\n+* Adding a version number to both packets in place of the token flag (unused).",
        "path": "EIPS/EIP-8.md",
        "position": null,
        "original_position": 113,
        "commit_id": "31d63d17556d5506fe78865033850c733ef72152",
        "original_commit_id": "51d57bcfc72fed39be8be20ed656403b66d8407f",
        "user": {
            "login": "subtly",
            "id": 6557250,
            "node_id": "MDQ6VXNlcjY1NTcyNTA=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6557250?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/subtly",
            "html_url": "https://github.com/subtly",
            "followers_url": "https://api.github.com/users/subtly/followers",
            "following_url": "https://api.github.com/users/subtly/following{/other_user}",
            "gists_url": "https://api.github.com/users/subtly/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/subtly/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/subtly/subscriptions",
            "organizations_url": "https://api.github.com/users/subtly/orgs",
            "repos_url": "https://api.github.com/users/subtly/repos",
            "events_url": "https://api.github.com/users/subtly/events{/privacy}",
            "received_events_url": "https://api.github.com/users/subtly/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Its happened! I need to be able to use it now (as soon as I can implement it).\n",
        "created_at": "2016-01-01T03:36:23Z",
        "updated_at": "2016-02-18T23:16:21Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/49#discussion_r48675825",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/49",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/48675825"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/49#discussion_r48675825"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/49"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91430111",
        "pull_request_review_id": 11938264,
        "id": 91430111,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDMwMTEx",
        "diff_hunk": "@@ -13,46 +13,43 @@ EIP stands for Ethereum Improvement Proposal. A EIP is a design document providi\n \n ==EIP Rational==\n \n-We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n+We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n \n For Ethereum implementers, EIPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the EIPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.\n \n-EIPs are intend to replace the venerable etherpads which described the initial PoC (Proof of Concept) and strike a balance between ease of accessibility and trackablity.\n-\n ==EIP Types==\n \n-There are three kinds of EIP:\n-\n-* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the [https://github.com/ethereum/yellowpaper Yellow Paper], the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n-** Consensus - Once PoS has been established it is expected that PoS protocol will have a separate specification.\n-** Networking - Currently Networking discussion tracks in the [https://github.com/ethereum/devp2p devp2p repository].\n+There are three types of EIP:\n \n+* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n+** Core - improvements requiring a consensus fork (e.g. [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5.md EIP5], [https://github.com/ethereum/EIPs/issues/28 EIP101]), as well as changes that are not necessarily consensus critical but may be relevant to \u201ccore dev\u201d discussions (for example, [https://github.com/ethereum/EIPs/issues/90 EIP90], and the miner/node strategy changes 2, 3, and 4 of [https://github.com/ethereum/EIPs/issues/86#issue-145324865 EIP86]).\n+** Networking - includes improvements around [https://github.com/ethereum/wiki/wiki/%C3%90%CE%9EVp2p-Wire-Protocol devp2p] ([https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md EIP8]) and [https://github.com/ethereum/wiki/wiki/Light-client-protocol Light Ethereum Subprotocol], as well as proposed improvements to network protocol specifications of [https://gist.github.com/gluk256/4654922ca45eb9d0846d941d7ca326f4 whisper] and [https://github.com/ethereum/go-ethereum/pull/2959 swarm].\n+** Interface - includes improvements around client [https://github.com/ethereum/wiki/wiki/JSON-RPC API/RPC] specifications and standards, and also certain language-level standards like method names ([https://github.com/ethereum/EIPs/issues/59 EIP59], [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6.md EIP6]) and [https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI contract ABIs]. The label \u201cinterface\u201d aligns with the [https://github.com/ethereum/interfaces interfaces repo] and discussion should primarily occur in that repository before an EIP is submitted to the EIPs repository.\n+** ERC - application-level standards and conventions, including contract standards such as token standards ([https://github.com/ethereum/EIPs/issues/20 ERC20]), name registries ([https://github.com/ethereum/EIPs/issues/26 ERC26], [https://github.com/ethereum/EIPs/issues/137 ERC137]), URI schemes ([https://github.com/ethereum/EIPs/issues/67 ERC67]), library/package formats ([https://github.com/ethereum/EIPs/issues/82 EIP82]), and wallet formats ([https://github.com/ethereum/EIPs/issues/75 EIP75], [https://github.com/ethereum/EIPs/issues/85 EIP85]).\n * An Informational EIP describes a Ethereum design issue, or provides general guidelines or information to the Ethereum community, but does not propose a new feature. Informational EIPs do not necessarily represent Ethereum community consensus or a recommendation, so users and implementors are free to ignore Informational EIPs or follow their advice.\n * A Meta EIP describes a process surrounding Ethereum or proposes a change to (or an event in) a process. Process EIPs are like Standards Track EIPs but apply to areas other than the Ethereum protocol itself. They may propose an implementation, but not to Ethereum's codebase; they often require community consensus; unlike Informational EIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Ethereum development. Any meta-EIP is also considered a Process EIP.\n \n ==EIP Work Flow==\n \n The EIP repository Collaborators change the EIPs status. Please send all EIP-related email to the EIP Collaborators, which is listed under EIP Editors below. Also see EIP Editor Responsibilities & Workflow.\n \n-The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches that don't affect consensus often don't need a EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.\n+The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches often don't need an EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.\n \n-Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The EIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is EIP-able. Posting to the  the [https://forum.ethereum.org/categories/protocol-and-client-discussion Protocol Discussion] forum or opening an [https://github.com/ethereum/EIP/issues Issue] is the best way to go about this.\n+Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea.\n \n-Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used.\n+Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used. Examples of appropriate public forums to gauge interest around your EIP include [https://www.reddit.com/r/ethereum/ the Ethereum subreddit] and [https://gitter.im/ethereum/ one of the Ethereum Gitter chat rooms].",
        "path": "EIPS/eip-1.mediawiki",
        "position": null,
        "original_position": 50,
        "commit_id": "0d06b5e7390cccab722435eb834a159d82f3e715",
        "original_commit_id": "f690686b6598e77710a59bb3c8008888c385e29a",
        "user": {
            "login": "gcolvin",
            "id": 16827129,
            "node_id": "MDQ6VXNlcjE2ODI3MTI5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16827129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gcolvin",
            "html_url": "https://github.com/gcolvin",
            "followers_url": "https://api.github.com/users/gcolvin/followers",
            "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
            "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
            "organizations_url": "https://api.github.com/users/gcolvin/orgs",
            "repos_url": "https://api.github.com/users/gcolvin/repos",
            "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gcolvin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Any standards for where to put these pre-draft EIPs and what to call them?  Currently we open an issue in the EIP repository and refer to it by issue number, and by watching there you get some warning of what's coming.  Do we keep doing that?  With with no place for them in the workflow I fear reversion to chaos.  It becomes \"That proposal of John's that he posted on Reddit last week.  I think there is a newer version on his blog.  No, not that proposal, the other one, I forget the title...\" rather than a link to the usual place from wherever it is being discussed.",
        "created_at": "2016-12-08T02:11:12Z",
        "updated_at": "2017-02-02T00:15:41Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/183#discussion_r91430111",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/183",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91430111"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/183#discussion_r91430111"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91492776",
        "pull_request_review_id": 12000692,
        "id": 91492776,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDkyNzc2",
        "diff_hunk": "@@ -13,46 +13,43 @@ EIP stands for Ethereum Improvement Proposal. A EIP is a design document providi\n \n ==EIP Rational==\n \n-We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n+We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n \n For Ethereum implementers, EIPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the EIPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.\n \n-EIPs are intend to replace the venerable etherpads which described the initial PoC (Proof of Concept) and strike a balance between ease of accessibility and trackablity.\n-\n ==EIP Types==\n \n-There are three kinds of EIP:\n-\n-* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the [https://github.com/ethereum/yellowpaper Yellow Paper], the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n-** Consensus - Once PoS has been established it is expected that PoS protocol will have a separate specification.\n-** Networking - Currently Networking discussion tracks in the [https://github.com/ethereum/devp2p devp2p repository].\n+There are three types of EIP:\n \n+* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n+** Core - improvements requiring a consensus fork (e.g. [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5.md EIP5], [https://github.com/ethereum/EIPs/issues/28 EIP101]), as well as changes that are not necessarily consensus critical but may be relevant to \u201ccore dev\u201d discussions (for example, [https://github.com/ethereum/EIPs/issues/90 EIP90], and the miner/node strategy changes 2, 3, and 4 of [https://github.com/ethereum/EIPs/issues/86#issue-145324865 EIP86]).\n+** Networking - includes improvements around [https://github.com/ethereum/wiki/wiki/%C3%90%CE%9EVp2p-Wire-Protocol devp2p] ([https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md EIP8]) and [https://github.com/ethereum/wiki/wiki/Light-client-protocol Light Ethereum Subprotocol], as well as proposed improvements to network protocol specifications of [https://gist.github.com/gluk256/4654922ca45eb9d0846d941d7ca326f4 whisper] and [https://github.com/ethereum/go-ethereum/pull/2959 swarm].\n+** Interface - includes improvements around client [https://github.com/ethereum/wiki/wiki/JSON-RPC API/RPC] specifications and standards, and also certain language-level standards like method names ([https://github.com/ethereum/EIPs/issues/59 EIP59], [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6.md EIP6]) and [https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI contract ABIs]. The label \u201cinterface\u201d aligns with the [https://github.com/ethereum/interfaces interfaces repo] and discussion should primarily occur in that repository before an EIP is submitted to the EIPs repository.\n+** ERC - application-level standards and conventions, including contract standards such as token standards ([https://github.com/ethereum/EIPs/issues/20 ERC20]), name registries ([https://github.com/ethereum/EIPs/issues/26 ERC26], [https://github.com/ethereum/EIPs/issues/137 ERC137]), URI schemes ([https://github.com/ethereum/EIPs/issues/67 ERC67]), library/package formats ([https://github.com/ethereum/EIPs/issues/82 EIP82]), and wallet formats ([https://github.com/ethereum/EIPs/issues/75 EIP75], [https://github.com/ethereum/EIPs/issues/85 EIP85]).",
        "path": "EIPS/eip-1.mediawiki",
        "position": null,
        "original_position": 35,
        "commit_id": "0d06b5e7390cccab722435eb834a159d82f3e715",
        "original_commit_id": "f690686b6598e77710a59bb3c8008888c385e29a",
        "user": {
            "login": "Arachnid",
            "id": 17865,
            "node_id": "MDQ6VXNlcjE3ODY1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17865?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Arachnid",
            "html_url": "https://github.com/Arachnid",
            "followers_url": "https://api.github.com/users/Arachnid/followers",
            "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
            "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
            "organizations_url": "https://api.github.com/users/Arachnid/orgs",
            "repos_url": "https://api.github.com/users/Arachnid/repos",
            "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Arachnid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is long overdue - thanks! Informational was really not the right tag for these.",
        "created_at": "2016-12-08T11:09:50Z",
        "updated_at": "2017-02-02T00:15:41Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/183#discussion_r91492776",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/183",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91492776"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/183#discussion_r91492776"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91492969",
        "pull_request_review_id": 12000692,
        "id": 91492969,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDkyOTY5",
        "diff_hunk": "@@ -13,46 +13,43 @@ EIP stands for Ethereum Improvement Proposal. A EIP is a design document providi\n \n ==EIP Rational==\n \n-We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n+We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n \n For Ethereum implementers, EIPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the EIPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.\n \n-EIPs are intend to replace the venerable etherpads which described the initial PoC (Proof of Concept) and strike a balance between ease of accessibility and trackablity.\n-\n ==EIP Types==\n \n-There are three kinds of EIP:\n-\n-* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the [https://github.com/ethereum/yellowpaper Yellow Paper], the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n-** Consensus - Once PoS has been established it is expected that PoS protocol will have a separate specification.\n-** Networking - Currently Networking discussion tracks in the [https://github.com/ethereum/devp2p devp2p repository].\n+There are three types of EIP:\n \n+* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n+** Core - improvements requiring a consensus fork (e.g. [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5.md EIP5], [https://github.com/ethereum/EIPs/issues/28 EIP101]), as well as changes that are not necessarily consensus critical but may be relevant to \u201ccore dev\u201d discussions (for example, [https://github.com/ethereum/EIPs/issues/90 EIP90], and the miner/node strategy changes 2, 3, and 4 of [https://github.com/ethereum/EIPs/issues/86#issue-145324865 EIP86]).\n+** Networking - includes improvements around [https://github.com/ethereum/wiki/wiki/%C3%90%CE%9EVp2p-Wire-Protocol devp2p] ([https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md EIP8]) and [https://github.com/ethereum/wiki/wiki/Light-client-protocol Light Ethereum Subprotocol], as well as proposed improvements to network protocol specifications of [https://gist.github.com/gluk256/4654922ca45eb9d0846d941d7ca326f4 whisper] and [https://github.com/ethereum/go-ethereum/pull/2959 swarm].\n+** Interface - includes improvements around client [https://github.com/ethereum/wiki/wiki/JSON-RPC API/RPC] specifications and standards, and also certain language-level standards like method names ([https://github.com/ethereum/EIPs/issues/59 EIP59], [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6.md EIP6]) and [https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI contract ABIs]. The label \u201cinterface\u201d aligns with the [https://github.com/ethereum/interfaces interfaces repo] and discussion should primarily occur in that repository before an EIP is submitted to the EIPs repository.\n+** ERC - application-level standards and conventions, including contract standards such as token standards ([https://github.com/ethereum/EIPs/issues/20 ERC20]), name registries ([https://github.com/ethereum/EIPs/issues/26 ERC26], [https://github.com/ethereum/EIPs/issues/137 ERC137]), URI schemes ([https://github.com/ethereum/EIPs/issues/67 ERC67]), library/package formats ([https://github.com/ethereum/EIPs/issues/82 EIP82]), and wallet formats ([https://github.com/ethereum/EIPs/issues/75 EIP75], [https://github.com/ethereum/EIPs/issues/85 EIP85]).\n * An Informational EIP describes a Ethereum design issue, or provides general guidelines or information to the Ethereum community, but does not propose a new feature. Informational EIPs do not necessarily represent Ethereum community consensus or a recommendation, so users and implementors are free to ignore Informational EIPs or follow their advice.\n * A Meta EIP describes a process surrounding Ethereum or proposes a change to (or an event in) a process. Process EIPs are like Standards Track EIPs but apply to areas other than the Ethereum protocol itself. They may propose an implementation, but not to Ethereum's codebase; they often require community consensus; unlike Informational EIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Ethereum development. Any meta-EIP is also considered a Process EIP.\n \n ==EIP Work Flow==\n \n The EIP repository Collaborators change the EIPs status. Please send all EIP-related email to the EIP Collaborators, which is listed under EIP Editors below. Also see EIP Editor Responsibilities & Workflow.\n \n-The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches that don't affect consensus often don't need a EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.\n+The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches often don't need an EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.",
        "path": "EIPS/eip-1.mediawiki",
        "position": null,
        "original_position": 44,
        "commit_id": "0d06b5e7390cccab722435eb834a159d82f3e715",
        "original_commit_id": "f690686b6598e77710a59bb3c8008888c385e29a",
        "user": {
            "login": "Arachnid",
            "id": 17865,
            "node_id": "MDQ6VXNlcjE3ODY1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17865?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Arachnid",
            "html_url": "https://github.com/Arachnid",
            "followers_url": "https://api.github.com/users/Arachnid/followers",
            "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
            "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
            "organizations_url": "https://api.github.com/users/Arachnid/orgs",
            "repos_url": "https://api.github.com/users/Arachnid/repos",
            "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Arachnid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Since you're editing this bit anyway, instead of talking about how big the change is, it probably makes sense to distinguish changes based on whether they require coordination. A change to one client doesn't require an EIP; a change that affects multiple clients, or defines a standard for multiple apps to use, does.",
        "created_at": "2016-12-08T11:11:01Z",
        "updated_at": "2017-02-02T00:15:41Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/183#discussion_r91492969",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/183",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91492969"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/183#discussion_r91492969"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91493169",
        "pull_request_review_id": 12000692,
        "id": 91493169,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDkzMTY5",
        "diff_hunk": "@@ -13,46 +13,43 @@ EIP stands for Ethereum Improvement Proposal. A EIP is a design document providi\n \n ==EIP Rational==\n \n-We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n+We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n \n For Ethereum implementers, EIPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the EIPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.\n \n-EIPs are intend to replace the venerable etherpads which described the initial PoC (Proof of Concept) and strike a balance between ease of accessibility and trackablity.\n-\n ==EIP Types==\n \n-There are three kinds of EIP:\n-\n-* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the [https://github.com/ethereum/yellowpaper Yellow Paper], the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n-** Consensus - Once PoS has been established it is expected that PoS protocol will have a separate specification.\n-** Networking - Currently Networking discussion tracks in the [https://github.com/ethereum/devp2p devp2p repository].\n+There are three types of EIP:\n \n+* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n+** Core - improvements requiring a consensus fork (e.g. [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5.md EIP5], [https://github.com/ethereum/EIPs/issues/28 EIP101]), as well as changes that are not necessarily consensus critical but may be relevant to \u201ccore dev\u201d discussions (for example, [https://github.com/ethereum/EIPs/issues/90 EIP90], and the miner/node strategy changes 2, 3, and 4 of [https://github.com/ethereum/EIPs/issues/86#issue-145324865 EIP86]).\n+** Networking - includes improvements around [https://github.com/ethereum/wiki/wiki/%C3%90%CE%9EVp2p-Wire-Protocol devp2p] ([https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md EIP8]) and [https://github.com/ethereum/wiki/wiki/Light-client-protocol Light Ethereum Subprotocol], as well as proposed improvements to network protocol specifications of [https://gist.github.com/gluk256/4654922ca45eb9d0846d941d7ca326f4 whisper] and [https://github.com/ethereum/go-ethereum/pull/2959 swarm].\n+** Interface - includes improvements around client [https://github.com/ethereum/wiki/wiki/JSON-RPC API/RPC] specifications and standards, and also certain language-level standards like method names ([https://github.com/ethereum/EIPs/issues/59 EIP59], [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6.md EIP6]) and [https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI contract ABIs]. The label \u201cinterface\u201d aligns with the [https://github.com/ethereum/interfaces interfaces repo] and discussion should primarily occur in that repository before an EIP is submitted to the EIPs repository.\n+** ERC - application-level standards and conventions, including contract standards such as token standards ([https://github.com/ethereum/EIPs/issues/20 ERC20]), name registries ([https://github.com/ethereum/EIPs/issues/26 ERC26], [https://github.com/ethereum/EIPs/issues/137 ERC137]), URI schemes ([https://github.com/ethereum/EIPs/issues/67 ERC67]), library/package formats ([https://github.com/ethereum/EIPs/issues/82 EIP82]), and wallet formats ([https://github.com/ethereum/EIPs/issues/75 EIP75], [https://github.com/ethereum/EIPs/issues/85 EIP85]).\n * An Informational EIP describes a Ethereum design issue, or provides general guidelines or information to the Ethereum community, but does not propose a new feature. Informational EIPs do not necessarily represent Ethereum community consensus or a recommendation, so users and implementors are free to ignore Informational EIPs or follow their advice.\n * A Meta EIP describes a process surrounding Ethereum or proposes a change to (or an event in) a process. Process EIPs are like Standards Track EIPs but apply to areas other than the Ethereum protocol itself. They may propose an implementation, but not to Ethereum's codebase; they often require community consensus; unlike Informational EIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Ethereum development. Any meta-EIP is also considered a Process EIP.\n \n ==EIP Work Flow==\n \n The EIP repository Collaborators change the EIPs status. Please send all EIP-related email to the EIP Collaborators, which is listed under EIP Editors below. Also see EIP Editor Responsibilities & Workflow.\n \n-The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches that don't affect consensus often don't need a EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.\n+The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches often don't need an EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.\n \n-Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The EIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is EIP-able. Posting to the  the [https://forum.ethereum.org/categories/protocol-and-client-discussion Protocol Discussion] forum or opening an [https://github.com/ethereum/EIP/issues Issue] is the best way to go about this.\n+Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea.\n \n-Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used.\n+Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used. Examples of appropriate public forums to gauge interest around your EIP include [https://www.reddit.com/r/ethereum/ the Ethereum subreddit] and [https://gitter.im/ethereum/ one of the Ethereum Gitter chat rooms].",
        "path": "EIPS/eip-1.mediawiki",
        "position": null,
        "original_position": 50,
        "commit_id": "0d06b5e7390cccab722435eb834a159d82f3e715",
        "original_commit_id": "f690686b6598e77710a59bb3c8008888c385e29a",
        "user": {
            "login": "Arachnid",
            "id": 17865,
            "node_id": "MDQ6VXNlcjE3ODY1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17865?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Arachnid",
            "html_url": "https://github.com/Arachnid",
            "followers_url": "https://api.github.com/users/Arachnid/followers",
            "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
            "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
            "organizations_url": "https://api.github.com/users/Arachnid/orgs",
            "repos_url": "https://api.github.com/users/Arachnid/repos",
            "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Arachnid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I suggest borrowing a page from RFCs; drafts can be written and submitted in a separate directory named eip-draft-some-short-name; they're only given a number an made standards when consensus is reached and the editor approves the move.",
        "created_at": "2016-12-08T11:12:17Z",
        "updated_at": "2017-02-02T00:15:41Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/183#discussion_r91493169",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/183",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91493169"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/183#discussion_r91493169"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/183"
            }
        },
        "in_reply_to_id": 91430111
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91493360",
        "pull_request_review_id": 12000692,
        "id": 91493360,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNDkzMzYw",
        "diff_hunk": "@@ -86,45 +83,42 @@ Each EIP should have the following parts:\n \n * Implementations -- The implementations must be completed before any EIP is given status \"Final\", but it need not be completed before the EIP is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.\n \n+* Simple Summary -- \"If you can't explain it simply, you don't understand it well enough.\" Provide a simplified and layman-accessible explanation of the EIP.\n+\n ==EIP Formats and Templates==\n \n-EIPs should be written in mediawiki or markdown format. Image files should be included in a subdirectory for that EIP.\n+EIPs should be written in [https://en.wikipedia.org/wiki/Help:Cheatsheet mediawiki] or [https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet markdown] format. Image files should be included in a subdirectory for that EIP.",
        "path": "EIPS/eip-1.mediawiki",
        "position": null,
        "original_position": 80,
        "commit_id": "0d06b5e7390cccab722435eb834a159d82f3e715",
        "original_commit_id": "f690686b6598e77710a59bb3c8008888c385e29a",
        "user": {
            "login": "Arachnid",
            "id": 17865,
            "node_id": "MDQ6VXNlcjE3ODY1",
            "avatar_url": "https://avatars2.githubusercontent.com/u/17865?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Arachnid",
            "html_url": "https://github.com/Arachnid",
            "followers_url": "https://api.github.com/users/Arachnid/followers",
            "following_url": "https://api.github.com/users/Arachnid/following{/other_user}",
            "gists_url": "https://api.github.com/users/Arachnid/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Arachnid/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Arachnid/subscriptions",
            "organizations_url": "https://api.github.com/users/Arachnid/orgs",
            "repos_url": "https://api.github.com/users/Arachnid/repos",
            "events_url": "https://api.github.com/users/Arachnid/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Arachnid/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Could we just drop mediawiki support? It's much harder to parse, and isn't compatible with systems like Jekyll.",
        "created_at": "2016-12-08T11:13:33Z",
        "updated_at": "2017-02-02T00:15:41Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/183#discussion_r91493360",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/183",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91493360"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/183#discussion_r91493360"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/183"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91574485",
        "pull_request_review_id": 12084511,
        "id": 91574485,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxNTc0NDg1",
        "diff_hunk": "@@ -13,46 +13,43 @@ EIP stands for Ethereum Improvement Proposal. A EIP is a design document providi\n \n ==EIP Rational==\n \n-We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n+We intend EIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Ethereum. Because the EIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.\n \n For Ethereum implementers, EIPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the EIPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.\n \n-EIPs are intend to replace the venerable etherpads which described the initial PoC (Proof of Concept) and strike a balance between ease of accessibility and trackablity.\n-\n ==EIP Types==\n \n-There are three kinds of EIP:\n-\n-* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the [https://github.com/ethereum/yellowpaper Yellow Paper], the network protocol, a change in block or transaction validity rules, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n-** Consensus - Once PoS has been established it is expected that PoS protocol will have a separate specification.\n-** Networking - Currently Networking discussion tracks in the [https://github.com/ethereum/devp2p devp2p repository].\n+There are three types of EIP:\n \n+* A Standard Track EIP describes any change that affects most or all Ethereum implementations, such as a change to the the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Ethereum. Furthermore Standard EIPs can be broken down into the following categories.\n+** Core - improvements requiring a consensus fork (e.g. [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-5.md EIP5], [https://github.com/ethereum/EIPs/issues/28 EIP101]), as well as changes that are not necessarily consensus critical but may be relevant to \u201ccore dev\u201d discussions (for example, [https://github.com/ethereum/EIPs/issues/90 EIP90], and the miner/node strategy changes 2, 3, and 4 of [https://github.com/ethereum/EIPs/issues/86#issue-145324865 EIP86]).\n+** Networking - includes improvements around [https://github.com/ethereum/wiki/wiki/%C3%90%CE%9EVp2p-Wire-Protocol devp2p] ([https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md EIP8]) and [https://github.com/ethereum/wiki/wiki/Light-client-protocol Light Ethereum Subprotocol], as well as proposed improvements to network protocol specifications of [https://gist.github.com/gluk256/4654922ca45eb9d0846d941d7ca326f4 whisper] and [https://github.com/ethereum/go-ethereum/pull/2959 swarm].\n+** Interface - includes improvements around client [https://github.com/ethereum/wiki/wiki/JSON-RPC API/RPC] specifications and standards, and also certain language-level standards like method names ([https://github.com/ethereum/EIPs/issues/59 EIP59], [https://github.com/ethereum/EIPs/blob/master/EIPS/eip-6.md EIP6]) and [https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI contract ABIs]. The label \u201cinterface\u201d aligns with the [https://github.com/ethereum/interfaces interfaces repo] and discussion should primarily occur in that repository before an EIP is submitted to the EIPs repository.\n+** ERC - application-level standards and conventions, including contract standards such as token standards ([https://github.com/ethereum/EIPs/issues/20 ERC20]), name registries ([https://github.com/ethereum/EIPs/issues/26 ERC26], [https://github.com/ethereum/EIPs/issues/137 ERC137]), URI schemes ([https://github.com/ethereum/EIPs/issues/67 ERC67]), library/package formats ([https://github.com/ethereum/EIPs/issues/82 EIP82]), and wallet formats ([https://github.com/ethereum/EIPs/issues/75 EIP75], [https://github.com/ethereum/EIPs/issues/85 EIP85]).\n * An Informational EIP describes a Ethereum design issue, or provides general guidelines or information to the Ethereum community, but does not propose a new feature. Informational EIPs do not necessarily represent Ethereum community consensus or a recommendation, so users and implementors are free to ignore Informational EIPs or follow their advice.\n * A Meta EIP describes a process surrounding Ethereum or proposes a change to (or an event in) a process. Process EIPs are like Standards Track EIPs but apply to areas other than the Ethereum protocol itself. They may propose an implementation, but not to Ethereum's codebase; they often require community consensus; unlike Informational EIPs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Ethereum development. Any meta-EIP is also considered a Process EIP.\n \n ==EIP Work Flow==\n \n The EIP repository Collaborators change the EIPs status. Please send all EIP-related email to the EIP Collaborators, which is listed under EIP Editors below. Also see EIP Editor Responsibilities & Workflow.\n \n-The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches that don't affect consensus often don't need a EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.\n+The EIP process begins with a new idea for Ethereum. It is highly recommended that a single EIP contain a single key proposal or new idea. Small enhancements or patches often don't need an EIP and can be injected into the Ethereum development workflow with a patch submission to the corresponding Ethereum issue tracker. The more focused the EIP, the more successful it tends to be. The EIP editor reserves the right to reject EIP proposals if they appear too unfocused or too broad. If in doubt, split your EIP into several well-focused ones.\n \n-Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea. The EIP champion (a.k.a. Author) should first attempt to ascertain whether the idea is EIP-able. Posting to the  the [https://forum.ethereum.org/categories/protocol-and-client-discussion Protocol Discussion] forum or opening an [https://github.com/ethereum/EIP/issues Issue] is the best way to go about this.\n+Each EIP must have a champion -- someone who writes the EIP using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea.\n \n-Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used.\n+Vetting an idea publicly before going as far as writing a EIP is meant to save the potential author time. Asking the Ethereum community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Ethereum is used. Examples of appropriate public forums to gauge interest around your EIP include [https://www.reddit.com/r/ethereum/ the Ethereum subreddit] and [https://gitter.im/ethereum/ one of the Ethereum Gitter chat rooms].",
        "path": "EIPS/eip-1.mediawiki",
        "position": null,
        "original_position": 50,
        "commit_id": "0d06b5e7390cccab722435eb834a159d82f3e715",
        "original_commit_id": "f690686b6598e77710a59bb3c8008888c385e29a",
        "user": {
            "login": "gcolvin",
            "id": 16827129,
            "node_id": "MDQ6VXNlcjE2ODI3MTI5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16827129?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/gcolvin",
            "html_url": "https://github.com/gcolvin",
            "followers_url": "https://api.github.com/users/gcolvin/followers",
            "following_url": "https://api.github.com/users/gcolvin/following{/other_user}",
            "gists_url": "https://api.github.com/users/gcolvin/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/gcolvin/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/gcolvin/subscriptions",
            "organizations_url": "https://api.github.com/users/gcolvin/orgs",
            "repos_url": "https://api.github.com/users/gcolvin/repos",
            "events_url": "https://api.github.com/users/gcolvin/events{/privacy}",
            "received_events_url": "https://api.github.com/users/gcolvin/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "OK.  I have a proposal ready for the old place today.  I don't know what to do with it now.  Seems we are taking a social practice that was working, and technically supported by github, and abandoning it.",
        "created_at": "2016-12-08T18:25:09Z",
        "updated_at": "2017-02-02T00:15:41Z",
        "html_url": "https://github.com/ethereum/EIPs/pull/183#discussion_r91574485",
        "pull_request_url": "https://api.github.com/repos/ethereum/EIPs/pulls/183",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/comments/91574485"
            },
            "html": {
                "href": "https://github.com/ethereum/EIPs/pull/183#discussion_r91574485"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ethereum/EIPs/pulls/183"
            }
        },
        "in_reply_to_id": 91430111
    }
]