[
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68508383",
        "pull_request_review_id": null,
        "id": 68508383,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA4Mzgz",
        "diff_hunk": "@@ -16,22 +16,23 @@\n     \"body-parser\": \"1.15.0\",\n     \"connect-flash\": \"0.1.1\",\n     \"cookie-parser\": \"1.4.1\",\n+    \"cookie-session\": \"2.0.0-alpha.1\",\n     \"ejs\": \"2.4.1\",\n     \"express\": \"4.13.4\",\n     \"express-session\": \"1.13.0\",\n     \"font-awesome\": \"4.6.1\",\n-    \"jquery\": \"1.12.2\",\n+    \"jquery\": \"1.12.3\",\n     \"keen-js\": \"3.4.1\",\n     \"knex\": \"0.10.0\",\n     \"moment\": \"2.13.0\",\n     \"moment-timezone\": \"0.5.4\",\n     \"newrelic\": \"1.28.0\",\n     \"node-uuid\": \"1.4.7\",\n     \"nodemailer\": \"2.4.1\",\n-    \"nodemon\": \"1.8.1\",\n+    \"nodemon\": \"1.9.1\",\n     \"passport\": \"0.3.2\",\n     \"passport-local\": \"1.0.0\",\n-    \"pg\": \"4.4.6\",\n+    \"pg\": \"4.5.1\",",
        "path": "package.json",
        "position": 23,
        "original_position": 23,
        "commit_id": "ea25686f6975af255babb1a77ea65928dd9ffb30",
        "original_commit_id": "828373d131af025c4d4dfa93d91390d2cb937c80",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Out of curiosity, how was specific version decided upon?\n",
        "created_at": "2016-06-26T19:44:18Z",
        "updated_at": "2016-06-26T21:40:08Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68508383",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68508383"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68508383"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68508403",
        "pull_request_review_id": null,
        "id": 68508403,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA4NDAz",
        "diff_hunk": "@@ -25,6 +25,7 @@ var cookieParser = require(\"cookie-parser\");\n var flash = require(\"connect-flash\");\n \n \n+var session = require(\"cookie-session\");\n ",
        "path": "server/app.js",
        "position": null,
        "original_position": 5,
        "commit_id": "ea25686f6975af255babb1a77ea65928dd9ffb30",
        "original_commit_id": "828373d131af025c4d4dfa93d91390d2cb937c80",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is session a built in tool of Express? Curious as to why it exists still, when so much else of Express has been abstracted out as separate libraries.\n",
        "created_at": "2016-06-26T19:45:37Z",
        "updated_at": "2016-06-26T21:40:08Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68508403",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68508403"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68508403"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68508439",
        "pull_request_review_id": null,
        "id": 68508439,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA4NDM5",
        "diff_hunk": "@@ -16,22 +16,23 @@\n     \"body-parser\": \"1.15.0\",\n     \"connect-flash\": \"0.1.1\",\n     \"cookie-parser\": \"1.4.1\",\n+    \"cookie-session\": \"2.0.0-alpha.1\",\n     \"ejs\": \"2.4.1\",\n     \"express\": \"4.13.4\",\n     \"express-session\": \"1.13.0\",\n     \"font-awesome\": \"4.6.1\",\n-    \"jquery\": \"1.12.2\",\n+    \"jquery\": \"1.12.3\",\n     \"keen-js\": \"3.4.1\",\n     \"knex\": \"0.10.0\",\n     \"moment\": \"2.13.0\",\n     \"moment-timezone\": \"0.5.4\",\n     \"newrelic\": \"1.28.0\",\n     \"node-uuid\": \"1.4.7\",\n     \"nodemailer\": \"2.4.1\",\n-    \"nodemon\": \"1.8.1\",\n+    \"nodemon\": \"1.9.1\",\n     \"passport\": \"0.3.2\",\n     \"passport-local\": \"1.0.0\",\n-    \"pg\": \"4.4.6\",\n+    \"pg\": \"4.5.1\",",
        "path": "package.json",
        "position": 23,
        "original_position": 23,
        "commit_id": "ea25686f6975af255babb1a77ea65928dd9ffb30",
        "original_commit_id": "828373d131af025c4d4dfa93d91390d2cb937c80",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I removed my node_modules folder and ran a fresh npm install. Then npm installed the cookie-session package and npm threw errors explaining that I actually had these versions installed. \n\nNot quite sure what's going on there, but switching to these version numbers allowed for a successful install. \n\n-Max\n\n> On Jun 26, 2016, at 3:44 PM, Kuan Butts notifications@github.com wrote:\n> \n> In package.json:\n> \n> > ```\n> >  \"passport\": \"0.3.2\",\n> >  \"passport-local\": \"1.0.0\",\n> > ```\n> > -    \"pg\": \"4.4.6\",\n> > -    \"pg\": \"4.5.1\",\n> >   Out of curiosity, how was specific version decided upon?\n> \n> \u2015\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n",
        "created_at": "2016-06-26T19:49:19Z",
        "updated_at": "2016-06-26T21:40:08Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68508439",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68508439"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68508439"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68510306",
        "pull_request_review_id": null,
        "id": 68510306,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTEwMzA2",
        "diff_hunk": "@@ -25,6 +25,7 @@ var cookieParser = require(\"cookie-parser\");\n var flash = require(\"connect-flash\");\n \n \n+var session = require(\"cookie-session\");\n ",
        "path": "server/app.js",
        "position": null,
        "original_position": 5,
        "commit_id": "ea25686f6975af255babb1a77ea65928dd9ffb30",
        "original_commit_id": "828373d131af025c4d4dfa93d91390d2cb937c80",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Forgot to remove the old one, that has been fixed. \n\nPreviously `var session` was `var session = require(\"express-session\")`\n",
        "created_at": "2016-06-26T21:41:07Z",
        "updated_at": "2016-06-26T21:41:07Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68510306",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68510306"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/91#discussion_r68510306"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/91"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868472",
        "pull_request_review_id": null,
        "id": 68868472,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODY4NDcy",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+'use strict';",
        "path": "models/models.js",
        "position": 1,
        "original_position": 1,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "required for use of `const` and `let`\n",
        "created_at": "2016-06-29T00:36:21Z",
        "updated_at": "2016-06-29T00:36:21Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868472",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868472"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868472"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868557",
        "pull_request_review_id": null,
        "id": 68868557,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODY4NTU3",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+'use strict';\n+\n+const db  = require(\"../server/db\");\n+const Promise = require(\"bluebird\");\n+\n+class Communication {\n+  static findById(id) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"comms\")\n+      .where(\"commid\", id)\n+      .limit(1)\n+      .then(function (comms) {\n+        if (comms.length > 0) {\n+          fulfill(comms[0])\n+        } else {\n+          fulfill()\n+        }\n+      })\n+      .catch(reject)      \n+    })\n+  }\n+}\n+\n+class Message {\n+  static create(messageObject) {",
        "path": "models/models.js",
        "position": 25,
        "original_position": 25,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Was going to pass message attributes as individual parameters but it quickly got confusing. We might want to put more thought into a message creation process. This doesn't same a lot of lines of code, but would be easy to add lots of complex validation logic.\n",
        "created_at": "2016-06-29T00:37:32Z",
        "updated_at": "2016-06-29T00:37:50Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868557",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868557"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868557"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868596",
        "pull_request_review_id": null,
        "id": 68868596,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODY4NTk2",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+'use strict';\n+\n+const db  = require(\"../server/db\");\n+const Promise = require(\"bluebird\");\n+\n+class Communication {\n+  static findById(id) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"comms\")\n+      .where(\"commid\", id)\n+      .limit(1)\n+      .then(function (comms) {\n+        if (comms.length > 0) {\n+          fulfill(comms[0])\n+        } else {\n+          fulfill()\n+        }\n+      })\n+      .catch(reject)      \n+    })\n+  }\n+}\n+\n+class Message {\n+  static create(messageObject) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"msgs\")\n+      .insert(messageObject).returning(\"msgid\")\n+      .then((messageIds) => {\n+        fulfill(messageIds[0])\n+      }).catch(reject)\n+    })\n+  }\n+}\n+\n+class Convo {\n+  static closeAll(cmid, clid) {",
        "path": "models/models.js",
        "position": 37,
        "original_position": 37,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Would be nice if this had a better name. It is not closing all.\n",
        "created_at": "2016-06-29T00:38:14Z",
        "updated_at": "2016-06-29T00:38:14Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868596",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868596"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868596"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868663",
        "pull_request_review_id": null,
        "id": 68868663,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODY4NjYz",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+'use strict';\n+\n+const db  = require(\"../server/db\");\n+const Promise = require(\"bluebird\");\n+\n+class Communication {\n+  static findById(id) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"comms\")\n+      .where(\"commid\", id)\n+      .limit(1)\n+      .then(function (comms) {\n+        if (comms.length > 0) {\n+          fulfill(comms[0])\n+        } else {\n+          fulfill()\n+        }\n+      })\n+      .catch(reject)      \n+    })\n+  }\n+}\n+\n+class Message {\n+  static create(messageObject) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"msgs\")\n+      .insert(messageObject).returning(\"msgid\")\n+      .then((messageIds) => {\n+        fulfill(messageIds[0])\n+      }).catch(reject)\n+    })\n+  }\n+}\n+\n+class Convo {\n+  static closeAll(cmid, clid) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"convos\")\n+        .where(\"client\", clid)\n+        .andWhere(\"cm\", cmid)\n+        .andWhere(\"convos.open\", true)\n+        .pluck(\"convid\")\n+        .then(function (convos) {\n+          db(\"convos\").whereIn(\"convid\", convos)\n+            .update({\n+              open: false\n+            }).then(function (success) {\n+              fulfill(success)\n+            })\n+            .catch(reject)\n+        })\n+        .catch(reject)",
        "path": "models/models.js",
        "position": 53,
        "original_position": 53,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sticking with the routes pattern, we can probably return the future on line 45 and then have a single catch statement. \n",
        "created_at": "2016-06-29T00:38:59Z",
        "updated_at": "2016-06-29T00:38:59Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868663",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868663"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868663"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868761",
        "pull_request_review_id": null,
        "id": 68868761,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODY4NzYx",
        "diff_hunk": "@@ -859,86 +860,53 @@ router.post(\"/:cmid/cls/:clid/convos\", function (req, res) {\n   var cmid = req.body.cmid;\n   var clid = req.body.clid;\n   var subject = req.body.subject;\n+  var content = req.body.content;\n+  var commid = req.body.commid;\n \n   if (Number(cmid) !== Number(req.user.cmid)) {\n     req.flash(\"warning\", \"Mixmatched user cmid and request user cmid insert.\");\n     res.redirect(redirect_loc);\n   } else {\n \n-    // close all the other conversations\n-    db(\"convos\")\n-    .where(\"client\", clid)\n-    .andWhere(\"cm\", cmid)\n-    .andWhere(\"convos.open\", true)\n-    .pluck(\"convid\")\n-    .then(function (convos) {\n-      \n-      db(\"convos\").whereIn(\"convid\", convos)\n-      .update({\n-        open: false\n-      }).then(function (success) {\n-        \n-        db(\"convos\")\n-        .insert({\n-          cm: cmid,\n-          client: clid,\n-          subject: subject,\n-          open: true,\n-          accepted: true\n-        }).returning(\"convid\").then(function (convids) {\n-\n-          var convid = convids[0];\n-          var content = req.body.content;\n-          var commid = req.body.commid;\n-\n-          db(\"comms\")\n-          .where(\"commid\", commid)\n-          .limit(1)\n-          .then(function (comms) {\n-            \n-            if (comms.length > 0) {\n-              var comm = comms[0];\n-\n-              twClient.sendSms({\n-                to: comm.value,\n-                from: TWILIO_NUM,\n-                body: content\n-              }, function (err, msg) {\n-                if (err) {\n-                  console.log(\"Twilio send error: \", err);\n-                  if (err.hasOwnProperty(\"code\") && err.code == 21211) res.status(500).send(\"That number is not a valid phone number.\");\n-                  else res.redirect(\"/500\");\n-                } else {\n-                  db(\"msgs\")\n-                  .insert({\n-                    convo: convid,\n-                    comm: commid,\n-                    content: content,\n-                    inbound: false,\n-                    read: true,\n-                    tw_sid: msg.sid,\n-                    tw_status: msg.status\n-                  })\n-                  .returning(\"msgid\")\n-                  .then(function (msgs) {\n-\n-                    req.flash(\"success\", \"New conversation created.\");\n-                    redirect_loc = redirect_loc + \"/convos/\" + convid;\n-                    res.redirect(redirect_loc);\n-\n-                  }).catch(errorRedirect);\n-                }\n-              });\n-\n-            } else { res.redirect(\"/500\"); }\n+    var newConvoId;\n+\n+    Convo.closeAll(cmid, clid)\n+    .then(() => {\n+      return Convo.create(cmid, clid, subject, true)\n+    }).then((convoId) => {\n+      newConvoId = convoId\n+      return Communication.findById(commid)\n+    }).then((communication) => {\n+      twClient.sendSms({",
        "path": "routes/cmview.js",
        "position": 113,
        "original_position": 113,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As this twilio logic is repeated elsewhere it should likely be abstracted to a utility function as well. \n",
        "created_at": "2016-06-29T00:40:20Z",
        "updated_at": "2016-06-29T00:40:20Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868761",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68868761"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68868761"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68870309",
        "pull_request_review_id": null,
        "id": 68870309,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODcwMzA5",
        "diff_hunk": "@@ -0,0 +1,80 @@\n+'use strict';\n+\n+const db  = require(\"../server/db\");\n+const Promise = require(\"bluebird\");\n+\n+class Communication {\n+  static findById(id) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"comms\")\n+      .where(\"commid\", id)\n+      .limit(1)\n+      .then(function (comms) {\n+        if (comms.length > 0) {\n+          fulfill(comms[0])\n+        } else {\n+          fulfill()\n+        }\n+      })\n+      .catch(reject)      \n+    })\n+  }\n+}\n+\n+class Message {\n+  static create(messageObject) {\n+    return new Promise((fulfill, reject) => {\n+      db(\"msgs\")\n+      .insert(messageObject).returning(\"msgid\")\n+      .then((messageIds) => {\n+        fulfill(messageIds[0])\n+      }).catch(reject)\n+    })\n+  }\n+}\n+\n+class Convo {\n+  static closeAll(cmid, clid) {",
        "path": "models/models.js",
        "position": 37,
        "original_position": 37,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "CloseAllSimilar ?\n",
        "created_at": "2016-06-29T01:01:02Z",
        "updated_at": "2016-06-29T01:01:02Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68870309",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68870309"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68870309"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68870538",
        "pull_request_review_id": null,
        "id": 68870538,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODcwNTM4",
        "diff_hunk": "@@ -859,86 +860,53 @@ router.post(\"/:cmid/cls/:clid/convos\", function (req, res) {\n   var cmid = req.body.cmid;\n   var clid = req.body.clid;\n   var subject = req.body.subject;\n+  var content = req.body.content;\n+  var commid = req.body.commid;\n \n   if (Number(cmid) !== Number(req.user.cmid)) {\n     req.flash(\"warning\", \"Mixmatched user cmid and request user cmid insert.\");\n     res.redirect(redirect_loc);\n   } else {\n \n-    // close all the other conversations\n-    db(\"convos\")\n-    .where(\"client\", clid)\n-    .andWhere(\"cm\", cmid)\n-    .andWhere(\"convos.open\", true)\n-    .pluck(\"convid\")\n-    .then(function (convos) {\n-      \n-      db(\"convos\").whereIn(\"convid\", convos)\n-      .update({\n-        open: false\n-      }).then(function (success) {\n-        \n-        db(\"convos\")\n-        .insert({\n-          cm: cmid,\n-          client: clid,\n-          subject: subject,\n-          open: true,\n-          accepted: true\n-        }).returning(\"convid\").then(function (convids) {\n-\n-          var convid = convids[0];\n-          var content = req.body.content;\n-          var commid = req.body.commid;\n-\n-          db(\"comms\")\n-          .where(\"commid\", commid)\n-          .limit(1)\n-          .then(function (comms) {\n-            \n-            if (comms.length > 0) {\n-              var comm = comms[0];\n-\n-              twClient.sendSms({\n-                to: comm.value,\n-                from: TWILIO_NUM,\n-                body: content\n-              }, function (err, msg) {\n-                if (err) {\n-                  console.log(\"Twilio send error: \", err);\n-                  if (err.hasOwnProperty(\"code\") && err.code == 21211) res.status(500).send(\"That number is not a valid phone number.\");\n-                  else res.redirect(\"/500\");\n-                } else {\n-                  db(\"msgs\")\n-                  .insert({\n-                    convo: convid,\n-                    comm: commid,\n-                    content: content,\n-                    inbound: false,\n-                    read: true,\n-                    tw_sid: msg.sid,\n-                    tw_status: msg.status\n-                  })\n-                  .returning(\"msgid\")\n-                  .then(function (msgs) {\n-\n-                    req.flash(\"success\", \"New conversation created.\");\n-                    redirect_loc = redirect_loc + \"/convos/\" + convid;\n-                    res.redirect(redirect_loc);\n-\n-                  }).catch(errorRedirect);\n-                }\n-              });\n-\n-            } else { res.redirect(\"/500\"); }\n+    var newConvoId;\n+\n+    Convo.closeAll(cmid, clid)\n+    .then(() => {\n+      return Convo.create(cmid, clid, subject, true)\n+    }).then((convoId) => {\n+      newConvoId = convoId\n+      return Communication.findById(commid)\n+    }).then((communication) => {\n+      twClient.sendSms({",
        "path": "routes/cmview.js",
        "position": 113,
        "original_position": 113,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you explain line 874? Looks like you create a new func which just returns convo.create()\n\nI assume it is this through this methodology that the `.catch()` can be passed all the way through... \n\nit is \"strange\" through . perhaps just me getting used to it. assume you know what you're doing and this does not lead to any risk, just makes the returned function exist \"unnested\"\n",
        "created_at": "2016-06-29T01:04:01Z",
        "updated_at": "2016-06-29T01:04:01Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68870538",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68870538"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68870538"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68875495",
        "pull_request_review_id": null,
        "id": 68875495,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODc1NDk1",
        "diff_hunk": "@@ -859,86 +860,53 @@ router.post(\"/:cmid/cls/:clid/convos\", function (req, res) {\n   var cmid = req.body.cmid;\n   var clid = req.body.clid;\n   var subject = req.body.subject;\n+  var content = req.body.content;\n+  var commid = req.body.commid;\n \n   if (Number(cmid) !== Number(req.user.cmid)) {\n     req.flash(\"warning\", \"Mixmatched user cmid and request user cmid insert.\");\n     res.redirect(redirect_loc);\n   } else {\n \n-    // close all the other conversations\n-    db(\"convos\")\n-    .where(\"client\", clid)\n-    .andWhere(\"cm\", cmid)\n-    .andWhere(\"convos.open\", true)\n-    .pluck(\"convid\")\n-    .then(function (convos) {\n-      \n-      db(\"convos\").whereIn(\"convid\", convos)\n-      .update({\n-        open: false\n-      }).then(function (success) {\n-        \n-        db(\"convos\")\n-        .insert({\n-          cm: cmid,\n-          client: clid,\n-          subject: subject,\n-          open: true,\n-          accepted: true\n-        }).returning(\"convid\").then(function (convids) {\n-\n-          var convid = convids[0];\n-          var content = req.body.content;\n-          var commid = req.body.commid;\n-\n-          db(\"comms\")\n-          .where(\"commid\", commid)\n-          .limit(1)\n-          .then(function (comms) {\n-            \n-            if (comms.length > 0) {\n-              var comm = comms[0];\n-\n-              twClient.sendSms({\n-                to: comm.value,\n-                from: TWILIO_NUM,\n-                body: content\n-              }, function (err, msg) {\n-                if (err) {\n-                  console.log(\"Twilio send error: \", err);\n-                  if (err.hasOwnProperty(\"code\") && err.code == 21211) res.status(500).send(\"That number is not a valid phone number.\");\n-                  else res.redirect(\"/500\");\n-                } else {\n-                  db(\"msgs\")\n-                  .insert({\n-                    convo: convid,\n-                    comm: commid,\n-                    content: content,\n-                    inbound: false,\n-                    read: true,\n-                    tw_sid: msg.sid,\n-                    tw_status: msg.status\n-                  })\n-                  .returning(\"msgid\")\n-                  .then(function (msgs) {\n-\n-                    req.flash(\"success\", \"New conversation created.\");\n-                    redirect_loc = redirect_loc + \"/convos/\" + convid;\n-                    res.redirect(redirect_loc);\n-\n-                  }).catch(errorRedirect);\n-                }\n-              });\n-\n-            } else { res.redirect(\"/500\"); }\n+    var newConvoId;\n+\n+    Convo.closeAll(cmid, clid)\n+    .then(() => {\n+      return Convo.create(cmid, clid, subject, true)\n+    }).then((convoId) => {\n+      newConvoId = convoId\n+      return Communication.findById(commid)\n+    }).then((communication) => {\n+      twClient.sendSms({",
        "path": "routes/cmview.js",
        "position": 113,
        "original_position": 113,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, it's a little weird. Exactly as you're guessing. We know `Convo.create(cmid, clid, subject, true)` returns a future. So we can just return it from this function and the next `then` call will work. \n\nIf the first future errors out, I'm assuming the `.catch` will propogate through all the extra `.then` calls. The logic being that a `.then` call on an errored out future should not call the contained function and just return the same future until a `.catch` call is made. So if `closeAll` errors out, we're just running:\n`Convo.closeAll(cmid, clid).then().then().then().catch(errorHandler)`\n",
        "created_at": "2016-06-29T02:11:46Z",
        "updated_at": "2016-06-29T02:12:00Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68875495",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68875495"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68875495"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68876017",
        "pull_request_review_id": null,
        "id": 68876017,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4ODc2MDE3",
        "diff_hunk": "@@ -859,86 +860,53 @@ router.post(\"/:cmid/cls/:clid/convos\", function (req, res) {\n   var cmid = req.body.cmid;\n   var clid = req.body.clid;\n   var subject = req.body.subject;\n+  var content = req.body.content;\n+  var commid = req.body.commid;\n \n   if (Number(cmid) !== Number(req.user.cmid)) {\n     req.flash(\"warning\", \"Mixmatched user cmid and request user cmid insert.\");\n     res.redirect(redirect_loc);\n   } else {\n \n-    // close all the other conversations\n-    db(\"convos\")\n-    .where(\"client\", clid)\n-    .andWhere(\"cm\", cmid)\n-    .andWhere(\"convos.open\", true)\n-    .pluck(\"convid\")\n-    .then(function (convos) {\n-      \n-      db(\"convos\").whereIn(\"convid\", convos)\n-      .update({\n-        open: false\n-      }).then(function (success) {\n-        \n-        db(\"convos\")\n-        .insert({\n-          cm: cmid,\n-          client: clid,\n-          subject: subject,\n-          open: true,\n-          accepted: true\n-        }).returning(\"convid\").then(function (convids) {\n-\n-          var convid = convids[0];\n-          var content = req.body.content;\n-          var commid = req.body.commid;\n-\n-          db(\"comms\")\n-          .where(\"commid\", commid)\n-          .limit(1)\n-          .then(function (comms) {\n-            \n-            if (comms.length > 0) {\n-              var comm = comms[0];\n-\n-              twClient.sendSms({\n-                to: comm.value,\n-                from: TWILIO_NUM,\n-                body: content\n-              }, function (err, msg) {\n-                if (err) {\n-                  console.log(\"Twilio send error: \", err);\n-                  if (err.hasOwnProperty(\"code\") && err.code == 21211) res.status(500).send(\"That number is not a valid phone number.\");\n-                  else res.redirect(\"/500\");\n-                } else {\n-                  db(\"msgs\")\n-                  .insert({\n-                    convo: convid,\n-                    comm: commid,\n-                    content: content,\n-                    inbound: false,\n-                    read: true,\n-                    tw_sid: msg.sid,\n-                    tw_status: msg.status\n-                  })\n-                  .returning(\"msgid\")\n-                  .then(function (msgs) {\n-\n-                    req.flash(\"success\", \"New conversation created.\");\n-                    redirect_loc = redirect_loc + \"/convos/\" + convid;\n-                    res.redirect(redirect_loc);\n-\n-                  }).catch(errorRedirect);\n-                }\n-              });\n-\n-            } else { res.redirect(\"/500\"); }\n+    var newConvoId;\n+\n+    Convo.closeAll(cmid, clid)\n+    .then(() => {\n+      return Convo.create(cmid, clid, subject, true)\n+    }).then((convoId) => {\n+      newConvoId = convoId\n+      return Communication.findById(commid)\n+    }).then((communication) => {\n+      twClient.sendSms({",
        "path": "routes/cmview.js",
        "position": 113,
        "original_position": 113,
        "commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "original_commit_id": "66694bbc0e026f7d0e518ce48848d2192c7eb51e",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "As we're now avoiding nested functions, this pattern might also be useful to look at:\nhttps://github.com/caolan/async#waterfalltasks-callback\n\nGets passed an array of functions and supports error handling. Wildly popular apparently. Avoids nesting and futures. Worth a look.\n",
        "created_at": "2016-06-29T02:19:44Z",
        "updated_at": "2016-06-29T02:19:44Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68876017",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/68876017"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/93#discussion_r68876017"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/93"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266482",
        "pull_request_review_id": null,
        "id": 78266482,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MjY2NDgy",
        "diff_hunk": "@@ -39,7 +39,8 @@\n   },\n   \"scripts\": {\n     \"start\": \"./node_modules/.bin/nodemon server/server.js --ignore node_modules/\",\n-    \"coverage\": \"istanbul cover _mocha ./test/app/ -- -R spec; open coverage/lcov-report/index.html\"\n+    \"coverage\": \"istanbul cover _mocha ./test/app/ -- -R spec; open coverage/lcov-report/index.html\",\n+    \"test\": \"CCENV=testing mocha test/app/\"\n   },",
        "path": "package.json",
        "position": 7,
        "original_position": 7,
        "commit_id": "e8a5a9c2c48e6bfbb28d5346859fedb58481a7a8",
        "original_commit_id": "4c334c5a3685876379e05c007d3e6780df97bfc6",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Test now run with `npm test`\n",
        "created_at": "2016-09-10T00:30:30Z",
        "updated_at": "2016-09-10T00:33:12Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266482",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266482"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266482"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266562",
        "pull_request_review_id": null,
        "id": 78266562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MjY2NTYy",
        "diff_hunk": "@@ -1,22 +1,71 @@\n-const seedFile = require('knex-seed-file');\n+const Promise = require(\"bluebird\");\n+\n+require(\"colors\");\n \n exports.seed = function(knex, Promise) {\n-  return Promise.join(\n-    // Deletes ALL existing entries\n-    knex('orgs').del(), \n+  console.log(\"Running seeds.js\".yellow)\n+  console.log(\"Deleting all tables\".yellow)\n+  return knex.raw(\n+    `DROP SCHEMA public CASCADE;\n+    CREATE SCHEMA public;`\n+  ).then(() => {",
        "path": "seeds/seeds.js",
        "position": 15,
        "original_position": 15,
        "commit_id": "e8a5a9c2c48e6bfbb28d5346859fedb58481a7a8",
        "original_commit_id": "4c334c5a3685876379e05c007d3e6780df97bfc6",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Just dropping all the tables, a little heavy-handed, want to make sure this isn't ever run on anything important, maybe add a check that we're on a testing database\n",
        "created_at": "2016-09-10T00:32:29Z",
        "updated_at": "2016-09-10T00:33:12Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266562",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266562"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266635",
        "pull_request_review_id": null,
        "id": 78266635,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MjY2NjM1",
        "diff_hunk": "@@ -39,7 +39,8 @@\n   },\n   \"scripts\": {\n     \"start\": \"./node_modules/.bin/nodemon server/server.js --ignore node_modules/\",\n-    \"coverage\": \"istanbul cover _mocha ./test/app/ -- -R spec; open coverage/lcov-report/index.html\"\n+    \"coverage\": \"istanbul cover _mocha ./test/app/ -- -R spec; open coverage/lcov-report/index.html\",\n+    \"test\": \"CCENV=testing mocha test/app/\"\n   },",
        "path": "package.json",
        "position": 7,
        "original_position": 7,
        "commit_id": "e8a5a9c2c48e6bfbb28d5346859fedb58481a7a8",
        "original_commit_id": "4c334c5a3685876379e05c007d3e6780df97bfc6",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "bull \n",
        "created_at": "2016-09-10T00:34:28Z",
        "updated_at": "2016-09-10T00:34:28Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266635",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266635"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266635"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158"
            }
        },
        "in_reply_to_id": 78266482
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266716",
        "pull_request_review_id": null,
        "id": 78266716,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MjY2NzE2",
        "diff_hunk": "@@ -1,22 +1,71 @@\n-const seedFile = require('knex-seed-file');\n+const Promise = require(\"bluebird\");\n+\n+require(\"colors\");\n \n exports.seed = function(knex, Promise) {\n-  return Promise.join(\n-    // Deletes ALL existing entries\n-    knex('orgs').del(), \n+  console.log(\"Running seeds.js\".yellow)\n+  console.log(\"Deleting all tables\".yellow)\n+  return knex.raw(\n+    `DROP SCHEMA public CASCADE;\n+    CREATE SCHEMA public;`\n+  ).then(() => {",
        "path": "seeds/seeds.js",
        "position": 15,
        "original_position": 15,
        "commit_id": "e8a5a9c2c48e6bfbb28d5346859fedb58481a7a8",
        "original_commit_id": "4c334c5a3685876379e05c007d3e6780df97bfc6",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I actually think this is not heavy handed in the sense that, each time you run the test, you technically want to build **everything** right? Or is this the wrong way to think about it?\n",
        "created_at": "2016-09-10T00:36:05Z",
        "updated_at": "2016-09-10T00:36:05Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266716",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78266716"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/158#discussion_r78266716"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/158"
            }
        },
        "in_reply_to_id": 78266562
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78269942",
        "pull_request_review_id": null,
        "id": 78269942,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MjY5OTQy",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+const Promise = require(\"bluebird\");\n+const db = require(\"../server/db\");\n+\n+class BaseModel {\n+  constructor(info) {\n+    \n+    this._info = info\n+\n+    info.columns.map(name => {\n+      this[name] = info.data[name]\n+    })\n+  }\n+\n+  static _checkModelValidity() {\n+    this._checkForTableName()\n+    this._checkForPrimaryId()\n+  }\n+\n+  static _checkForTableName() {\n+      if(!this.tableName) {\n+        throw new Error(\"This model needs a tableName!\")\n+      }    \n+  }\n+\n+  static _checkForPrimaryId() {\n+      if(!this.primaryId) {\n+        throw new Error(\"This model needs a primaryId!\")\n+      }    \n+  }\n+\n+  static _getSingleResponse(objects, fulfill, reject) {\n+    if (!objects || objects.length === 0) {\n+      reject(new Error(\"nothing returned from db\"))\n+    } else {\n+      // return class instance\n+      let instance = new this(objects[0])",
        "path": "models/base.js",
        "position": null,
        "original_position": 36,
        "commit_id": "7267394bb83ce489bd57dec8451850cce78fe592",
        "original_commit_id": "e300dfc24620d9a8c0b128bd531debee1d3b91d5",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Everything returned from the DB is an instance of the class, when we're good with this BaseModel we should update all DB calls to do the same\n",
        "created_at": "2016-09-10T02:52:42Z",
        "updated_at": "2016-09-13T21:41:22Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78269942",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78269942"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78269942"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78269967",
        "pull_request_review_id": null,
        "id": 78269967,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MjY5OTY3",
        "diff_hunk": "@@ -157,4 +148,7 @@ class Users {\n   \n }\n \n+Users.primaryId = \"cmid\"\n+Users.tableName = \"cms\"",
        "path": "models/classes/users.js",
        "position": 63,
        "original_position": 63,
        "commit_id": "7267394bb83ce489bd57dec8451850cce78fe592",
        "original_commit_id": "e300dfc24620d9a8c0b128bd531debee1d3b91d5",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This is a little weird, shoving the primaryId and tableName at the bottom of the file. Not sure how to improve this as static values can only be added after the class is instantiated.\n",
        "created_at": "2016-09-10T02:54:09Z",
        "updated_at": "2016-09-13T21:41:22Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78269967",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78269967"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78269967"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78269972",
        "pull_request_review_id": null,
        "id": 78269972,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MjY5OTcy",
        "diff_hunk": "@@ -63,23 +63,25 @@ app.use(passport.session());\n \n // Logging\n app.use((req, res, next) => {\n-  let start = new Date()\n-  res.on('finish', () => {\n-    let milliseconds = new Date().getTime() - start.getTime()\n-    let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n-    let timestamp = start.toUTCString();\n-    let method = req.method;\n-    let path = req.originalUrl;\n-    let statusCode = res.statusCode;\n-    let contentLength = res.header()._headers['content-length'] || 0;\n-    let userAgent = req.headers['user-agent'];\n-    console.log(\n-      `${ip} -- [${timestamp}] ` +\n-      `${method} ${path} ${statusCode} `.magenta +\n-      `${contentLength} ${milliseconds}ms `.cyan +\n-      `\"${userAgent}\"\\n`\n-    );\n-  });",
        "path": "server/app.js",
        "position": 20,
        "original_position": 20,
        "commit_id": "7267394bb83ce489bd57dec8451850cce78fe592",
        "original_commit_id": "e300dfc24620d9a8c0b128bd531debee1d3b91d5",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Removing http logs from the testing env so that we get cleaner test logs\n",
        "created_at": "2016-09-10T02:54:37Z",
        "updated_at": "2016-09-13T21:41:22Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78269972",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78269972"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78269972"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78306981",
        "pull_request_review_id": null,
        "id": 78306981,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4MzA2OTgx",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+const Promise = require(\"bluebird\");\n+const db = require(\"../server/db\");\n+\n+class BaseModel {\n+  constructor(info) {\n+    \n+    this._info = info\n+\n+    info.columns.map(name => {\n+      this[name] = info.data[name]\n+    })\n+  }\n+\n+  static _checkModelValidity() {\n+    this._checkForTableName()\n+    this._checkForPrimaryId()\n+  }\n+\n+  static _checkForTableName() {\n+      if(!this.tableName) {\n+        throw new Error(\"This model needs a tableName!\")\n+      }    \n+  }\n+\n+  static _checkForPrimaryId() {\n+      if(!this.primaryId) {\n+        throw new Error(\"This model needs a primaryId!\")\n+      }    \n+  }\n+\n+  static _getSingleResponse(objects, fulfill, reject) {\n+    if (!objects || objects.length === 0) {\n+      reject(new Error(\"nothing returned from db\"))\n+    } else {\n+      // return class instance\n+      let instance = new this(objects[0])",
        "path": "models/base.js",
        "position": null,
        "original_position": 36,
        "commit_id": "7267394bb83ce489bd57dec8451850cce78fe592",
        "original_commit_id": "e300dfc24620d9a8c0b128bd531debee1d3b91d5",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we need to validate what the `info` object looks like? Is there a comment somewhere that specifies exactly what it is that we need in `info`? I am assuming info is everything associated with the \"sub\" class that we would be instantiating... I assume this is very Rails-esque... But is there complexity in knowing/documenting `info` arg?\n",
        "created_at": "2016-09-12T01:10:10Z",
        "updated_at": "2016-09-13T21:41:22Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78306981",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78306981"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78306981"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160"
            }
        },
        "in_reply_to_id": 78269942
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78409052",
        "pull_request_review_id": null,
        "id": 78409052,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NDA5MDUy",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+const Promise = require(\"bluebird\");\n+const db = require(\"../server/db\");\n+\n+class BaseModel {\n+  constructor(info) {\n+    \n+    this._info = info\n+\n+    info.columns.map(name => {\n+      this[name] = info.data[name]\n+    })\n+  }\n+\n+  static _checkModelValidity() {\n+    this._checkForTableName()\n+    this._checkForPrimaryId()\n+  }\n+\n+  static _checkForTableName() {\n+      if(!this.tableName) {\n+        throw new Error(\"This model needs a tableName!\")\n+      }    \n+  }\n+\n+  static _checkForPrimaryId() {\n+      if(!this.primaryId) {\n+        throw new Error(\"This model needs a primaryId!\")\n+      }    \n+  }\n+\n+  static _getSingleResponse(objects, fulfill, reject) {\n+    if (!objects || objects.length === 0) {\n+      reject(new Error(\"nothing returned from db\"))\n+    } else {\n+      // return class instance\n+      let instance = new this(objects[0])",
        "path": "models/base.js",
        "position": null,
        "original_position": 36,
        "commit_id": "7267394bb83ce489bd57dec8451850cce78fe592",
        "original_commit_id": "e300dfc24620d9a8c0b128bd531debee1d3b91d5",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`info` is undocumented and very important. Every new model has to pass a correctly formatted `info` object to the BaseModel constructor. Would argue this isn't very Rails-esque and is kind of a hack to get all the values we need for the model. Will discuss on the call as I would be open to an alternate way to handle this. \n",
        "created_at": "2016-09-12T16:46:39Z",
        "updated_at": "2016-09-13T21:41:22Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78409052",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78409052"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78409052"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160"
            }
        },
        "in_reply_to_id": 78269942
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78412975",
        "pull_request_review_id": null,
        "id": 78412975,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4NDEyOTc1",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+const Promise = require(\"bluebird\");\n+const db = require(\"../server/db\");\n+\n+class BaseModel {\n+  constructor(info) {\n+    \n+    this._info = info\n+\n+    info.columns.map(name => {\n+      this[name] = info.data[name]\n+    })\n+  }\n+\n+  static _checkModelValidity() {\n+    this._checkForTableName()\n+    this._checkForPrimaryId()\n+  }\n+\n+  static _checkForTableName() {\n+      if(!this.tableName) {\n+        throw new Error(\"This model needs a tableName!\")\n+      }    \n+  }\n+\n+  static _checkForPrimaryId() {\n+      if(!this.primaryId) {\n+        throw new Error(\"This model needs a primaryId!\")\n+      }    \n+  }\n+\n+  static _getSingleResponse(objects, fulfill, reject) {\n+    if (!objects || objects.length === 0) {\n+      reject(new Error(\"nothing returned from db\"))\n+    } else {\n+      // return class instance\n+      let instance = new this(objects[0])",
        "path": "models/base.js",
        "position": null,
        "original_position": 36,
        "commit_id": "7267394bb83ce489bd57dec8451850cce78fe592",
        "original_commit_id": "e300dfc24620d9a8c0b128bd531debee1d3b91d5",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sounds good\n",
        "created_at": "2016-09-12T17:10:11Z",
        "updated_at": "2016-09-13T21:41:22Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78412975",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78412975"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/160#discussion_r78412975"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/160"
            }
        },
        "in_reply_to_id": 78269942
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78776498",
        "pull_request_review_id": null,
        "id": 78776498,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc4Nzc2NDk4",
        "diff_hunk": "@@ -207,29 +207,19 @@ router.get(\"/clients\", (req, res) => {\n   }).catch(error500(res));  \n });\n \n-// TODO: If owner, show a list of all users to attribute client to\n-//       Same for supervisor, but limit only within department\n router.get(\"/clients/create\", (req, res) => {\n-  res.render(\"clients/create\");\n+  res.render(\"clients/create\", { users: null });\n });\n \n router.post(\"/clients/create\", (req, res) => {\n-  let userID = req.user.cmid;\n-  let first  = req.body.first;\n-  let middle = req.body.middle ? req.body.middle : \"\";\n-  let last   = req.body.last;\n-  let dob    = req.body.DOB;\n-  let so     = req.body.uniqueID1 ? req.body.uniqueID1 : null;\n-  let otn    = req.body.uniqueID2 ? req.body.uniqueID2 : null;\n-\n   Client.create(\n-          userID, \n-          first, \n-          middle, \n-          last, \n-          dob, \n-          otn, \n-          so\n+          req.user.cmid, \n+          req.body.first, \n+          req.body.middle ? req.body.middle : \"\", \n+          req.body.last, \n+          req.body.dob, \n+          req.body.uniqueID2 ? req.body.uniqueID2 : null, \n+          req.body.uniqueID1 ? req.body.uniqueID1 : null",
        "path": "routes/user.js",
        "position": null,
        "original_position": 34,
        "commit_id": "efb9b3baad60ed94ce114a4eb832a0f18d1d15b9",
        "original_commit_id": "38cb8e89136dab5674c2d75bd23e4e167774c8a7",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Wouldn't necessarily do this. `let so = req.bodyUniqueID1` is making it clearer that the creation function wants a param called `so`. `so` should probably also have a better name.\n\nDefining parameters with inconsistent names into variables with correct names seems like a good step. \n\nAgain, this is a good time to point out that we should probably switch to dictionaries over ordered params for something like \"create\" so that the names are present in the function call. \n",
        "created_at": "2016-09-14T15:47:22Z",
        "updated_at": "2016-09-14T15:55:24Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/162#discussion_r78776498",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/162",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/78776498"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/162#discussion_r78776498"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/162"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79460809",
        "pull_request_review_id": 612061,
        "id": 79460809,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDYwODA5",
        "diff_hunk": "@@ -0,0 +1,289 @@\n+const Clients = require('../models/clients');\n+const Client = require('../models/client');\n+const CommConns = require('../models/commConns');\n+const Conversations = require('../models/conversations');\n+const Messages = require('../models/messages');\n+const Users = require('../models/users');\n+\n+module.exports = {\n+  \n+  index(req, res) {\n+    let status      = req.query.status == \"closed\" ? false : true;\n+    let department  = req.user.department || req.query.department;\n+    let user        = req.body.targetUser || req.user.cmid;\n+\n+    // Controls against a case where the owner would accidentally have a department\n+    if (req.user.class === \"owner\" && !req.query.department) {\n+      department = null;\n+    }\n+\n+    let method;\n+    if (res.locals.level == \"user\") {\n+      method = Clients.findByUsers(user, status)\n+    } else if (department) {\n+      method = Clients.findByDepartment(department, status);\n+    } else {\n+      method = Clients.findByOrg(req.user.org, status);\n+    }\n+\n+    method.then((clients) => {\n+      if (req.query.limitByUser) {\n+        clients = clients.filter((c) => {\n+          return Number(c.cm) === Number(req.query.limitByUser);\n+        });\n+      }\n+\n+      res.render(\"clients/index\", {\n+        hub: {\n+          tab: \"clients\",\n+          sel: status ? \"open\" : \"closed\"\n+        },\n+        clients: clients,\n+        limitByUser: req.query.limitByUser || null\n+      });\n+    }).catch(res.error500);\n+  },\n+\n+  new(req, res) {\n+    let c = req.user.class;",
        "path": "app/controllers/clients.js",
        "position": null,
        "original_position": 48,
        "commit_id": "cee7cd1b2aea1189ff126b5047d551d7b4dc5810",
        "original_commit_id": "67d3571ebf9caa79e216046670211c02c627a892",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should avoid single-letter variables. Looks like this should be `class`.\n",
        "created_at": "2016-09-19T18:44:25Z",
        "updated_at": "2016-09-19T19:26:18Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79460809",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79460809"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79460809"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79463284",
        "pull_request_review_id": 612061,
        "id": 79463284,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDYzMjg0",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+const Departments = require('../models/departments');\n+const Users = require('../models/users');\n+const Messages = require('../models/messages');\n+\n+module.exports = {\n+\n+  orgIndex(req, res) {\n+    let departments;\n+    let departmentFilter = req.user.department || Number(req.query.department) || null;\n+    let userFilter = req.query.user || null;\n+    let users;\n+    let countsByDay, countsByWeek;\n+\n+    Departments.findByOrg(req.user.org, true)\n+    .then((depts) => {\n+      departments = depts;\n+\n+      if (departmentFilter) {\n+        if (req.user.department) departments = departments.filter((d) => { return d.department_id === departmentFilter});\n+        return Users.findByDepartment(departmentFilter, true)\n+      } else {\n+        return Users.findByOrg(req.user.org, true)\n+      }\n+    }).then((u) => {\n+      users = u;\n+\n+      if (departmentFilter) {\n+        users = users.filter((u) => { return u.department == departmentFilter});\n+        return Messages.countsByDepartment(req.user.org, departmentFilter, \"day\")",
        "path": "app/controllers/dashboard.js",
        "position": null,
        "original_position": 29,
        "commit_id": "cee7cd1b2aea1189ff126b5047d551d7b4dc5810",
        "original_commit_id": "67d3571ebf9caa79e216046670211c02c627a892",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "let's even use long variable names here, perfect example of where it's confusing that `u` momentarily means `users` and `user`. Even on that one-line anonymous function, the clarity of `user.department` is helpful.\n",
        "created_at": "2016-09-19T18:55:48Z",
        "updated_at": "2016-09-19T19:26:18Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79463284",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79463284"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79463284"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79463612",
        "pull_request_review_id": 612061,
        "id": 79463612,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDYzNjEy",
        "diff_hunk": "@@ -0,0 +1,107 @@\n+const Groups = require('../models/groups');\n+const Clients = require('../models/clients');\n+\n+module.exports = {\n+  index(req, res) {\n+    let status = req.query.status === \"deleted\" ? false : true;\n+\n+    Groups.findByUser(req.user.cmid, status)\n+    .then((groups) => {\n+      res.render(\"groups\", {\n+        hub: {\n+          tab: \"groups\",\n+          sel: status ? \"current\" : \"deleted\"\n+        },\n+        groups: groups\n+      });\n+    }).catch(res.error500);\n+  },\n+  new(req, res) {",
        "path": "app/controllers/groups.js",
        "position": null,
        "original_position": 19,
        "commit_id": "cee7cd1b2aea1189ff126b5047d551d7b4dc5810",
        "original_commit_id": "67d3571ebf9caa79e216046670211c02c627a892",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think this is my fault, but it seems we're pretty consistent about leaving a line of whitespace above and below function definitions in controllers. That's great, let's keep doing that. \n",
        "created_at": "2016-09-19T18:57:09Z",
        "updated_at": "2016-09-19T19:26:18Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79463612",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79463612"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79463612"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79464375",
        "pull_request_review_id": 612061,
        "id": 79464375,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDY0Mzc1",
        "diff_hunk": "@@ -0,0 +1,59 @@\n+const Departments = require('../models/departments');\n+const Users = require('../models/users');\n+const Messages = require('../models/messages');\n+\n+module.exports = {\n+\n+  orgIndex(req, res) {",
        "path": "app/controllers/dashboard.js",
        "position": null,
        "original_position": 7,
        "commit_id": "cee7cd1b2aea1189ff126b5047d551d7b4dc5810",
        "original_commit_id": "67d3571ebf9caa79e216046670211c02c627a892",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this should probably be just `organization`. Is not an index view and we know it's a dashboard because it's in the dashboard controller. Or maybe just `org` as that's more consistent right now. \n",
        "created_at": "2016-09-19T19:00:44Z",
        "updated_at": "2016-09-19T19:26:18Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79464375",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79464375"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79464375"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79464883",
        "pull_request_review_id": 615824,
        "id": 79464883,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDY0ODgz",
        "diff_hunk": "@@ -0,0 +1,289 @@\n+const Clients = require('../models/clients');\n+const Client = require('../models/client');\n+const CommConns = require('../models/commConns');\n+const Conversations = require('../models/conversations');\n+const Messages = require('../models/messages');\n+const Users = require('../models/users');\n+\n+module.exports = {\n+  \n+  index(req, res) {\n+    let status      = req.query.status == \"closed\" ? false : true;\n+    let department  = req.user.department || req.query.department;\n+    let user        = req.body.targetUser || req.user.cmid;\n+\n+    // Controls against a case where the owner would accidentally have a department\n+    if (req.user.class === \"owner\" && !req.query.department) {\n+      department = null;\n+    }\n+\n+    let method;\n+    if (res.locals.level == \"user\") {\n+      method = Clients.findByUsers(user, status)\n+    } else if (department) {\n+      method = Clients.findByDepartment(department, status);\n+    } else {\n+      method = Clients.findByOrg(req.user.org, status);\n+    }\n+\n+    method.then((clients) => {\n+      if (req.query.limitByUser) {\n+        clients = clients.filter((c) => {\n+          return Number(c.cm) === Number(req.query.limitByUser);\n+        });\n+      }\n+\n+      res.render(\"clients/index\", {\n+        hub: {\n+          tab: \"clients\",\n+          sel: status ? \"open\" : \"closed\"\n+        },\n+        clients: clients,\n+        limitByUser: req.query.limitByUser || null\n+      });\n+    }).catch(res.error500);\n+  },\n+\n+  new(req, res) {\n+    let c = req.user.class;",
        "path": "app/controllers/clients.js",
        "position": null,
        "original_position": 48,
        "commit_id": "cee7cd1b2aea1189ff126b5047d551d7b4dc5810",
        "original_commit_id": "67d3571ebf9caa79e216046670211c02c627a892",
        "user": {
            "login": "maxmcd",
            "id": 283903,
            "node_id": "MDQ6VXNlcjI4MzkwMw==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/283903?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/maxmcd",
            "html_url": "https://github.com/maxmcd",
            "followers_url": "https://api.github.com/users/maxmcd/followers",
            "following_url": "https://api.github.com/users/maxmcd/following{/other_user}",
            "gists_url": "https://api.github.com/users/maxmcd/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/maxmcd/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/maxmcd/subscriptions",
            "organizations_url": "https://api.github.com/users/maxmcd/orgs",
            "repos_url": "https://api.github.com/users/maxmcd/repos",
            "events_url": "https://api.github.com/users/maxmcd/events{/privacy}",
            "received_events_url": "https://api.github.com/users/maxmcd/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "oh of course, we can't use `class` in javascript. `userClass` then?\n",
        "created_at": "2016-09-19T19:03:12Z",
        "updated_at": "2016-09-19T19:26:18Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79464883",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79464883"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79464883"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167"
            }
        },
        "in_reply_to_id": 79460809
    },
    {
        "url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79468154",
        "pull_request_review_id": 618808,
        "id": 79468154,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDc5NDY4MTU0",
        "diff_hunk": "@@ -0,0 +1,107 @@\n+const Groups = require('../models/groups');\n+const Clients = require('../models/clients');\n+\n+module.exports = {\n+  index(req, res) {\n+    let status = req.query.status === \"deleted\" ? false : true;\n+\n+    Groups.findByUser(req.user.cmid, status)\n+    .then((groups) => {\n+      res.render(\"groups\", {\n+        hub: {\n+          tab: \"groups\",\n+          sel: status ? \"current\" : \"deleted\"\n+        },\n+        groups: groups\n+      });\n+    }).catch(res.error500);\n+  },\n+  new(req, res) {",
        "path": "app/controllers/groups.js",
        "position": null,
        "original_position": 19,
        "commit_id": "cee7cd1b2aea1189ff126b5047d551d7b4dc5810",
        "original_commit_id": "67d3571ebf9caa79e216046670211c02c627a892",
        "user": {
            "login": "kuanb",
            "id": 6053396,
            "node_id": "MDQ6VXNlcjYwNTMzOTY=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/6053396?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/kuanb",
            "html_url": "https://github.com/kuanb",
            "followers_url": "https://api.github.com/users/kuanb/followers",
            "following_url": "https://api.github.com/users/kuanb/following{/other_user}",
            "gists_url": "https://api.github.com/users/kuanb/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/kuanb/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/kuanb/subscriptions",
            "organizations_url": "https://api.github.com/users/kuanb/orgs",
            "repos_url": "https://api.github.com/users/kuanb/repos",
            "events_url": "https://api.github.com/users/kuanb/events{/privacy}",
            "received_events_url": "https://api.github.com/users/kuanb/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Cool, did you merge these changes into or just comment \n",
        "created_at": "2016-09-19T19:19:44Z",
        "updated_at": "2016-09-19T19:26:18Z",
        "html_url": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79468154",
        "pull_request_url": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/comments/79468154"
            },
            "html": {
                "href": "https://github.com/slco-2016/clientcomm/pull/167#discussion_r79468154"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/slco-2016/clientcomm/pulls/167"
            }
        },
        "in_reply_to_id": 79463612
    }
]