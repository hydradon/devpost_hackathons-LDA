[
    {
        "url": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334313",
        "pull_request_review_id": null,
        "id": 42334313,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MzEz",
        "diff_hunk": "@@ -52,256 +52,268 @@ var socket = io.connect();\n \n var room = location.pathname.substring(1);\n \n-if (room === '') {\n-    room = prompt('Enter room name:');\n-}\n-\n-updateTurn(function() {\n-    console.log('hi');\n-});\n-\n-if (room !== '') {\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-}\n-\n-\n-socket.on('created', function (room){\n-    console.log('Created room ' + room);\n-    console.log('this should not happen');\n-    isInitiator = true;\n-});\n-\n-socket.on('error', function (msg) {\n-    console.log('ERROR: ' + JSON.stringify(msg));\n-});\n-\n-socket.on('room not found', function () {\n-    room = prompt(\"Room not found. Try again or cancel.\");\n-    if (room === null) return;\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-});\n-\n-socket.on('join', function (room){\n-    console.log('Join called. this should not happen');\n-    isChannelReady = true;\n+document.getElementById(\"submit\").addEventListener(\"click\", function(){\n+    var inputBox = document.getElementById(\"code\");\n+    room = inputBox.value;\n+\n+    //handle this and show \"Connected\" or provide error message if connection failed\"\n+    this.innerHTML = \"CONNECTED\";\n+    inputBox.disabled = true;\n+    playAudio();\n });\n \n-socket.on('joined', function (room){\n-    console.log('This peer has joined room ' + room);\n-    isChannelReady = true;\n-});\n-\n-socket.on('log', function (array){\n-    console.log.apply(console, array);\n-});\n \n-////////////////////////////////////////////////\n-\n-function sendMessage(message){\n-    console.log('Client sending message: ', message);\n-    socket.emit('message', message);\n+if (room !== '') {\n+    playAudio();\n }\n \n-socket.on('message', function (message){\n-    console.log('Client received message:', message);\n-    if (message === 'got user media') {\n-        maybeStart();\n-    } else if (message.type === 'offer') {\n-        if (!isStarted) {\n+function playAudio() {\n+    updateTurn(function() {",
        "path": "server/js/main.js",
        "position": null,
        "original_position": 73,
        "commit_id": "07ed93a80eae87c92bd1b3375a9fa4242bba0d40",
        "original_commit_id": "61de213a82bc60b3994d259e2a8accb0b281152d",
        "user": {
            "login": "hpp3",
            "id": 448866,
            "node_id": "MDQ6VXNlcjQ0ODg2Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/448866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hpp3",
            "html_url": "https://github.com/hpp3",
            "followers_url": "https://api.github.com/users/hpp3/followers",
            "following_url": "https://api.github.com/users/hpp3/following{/other_user}",
            "gists_url": "https://api.github.com/users/hpp3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hpp3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hpp3/subscriptions",
            "organizations_url": "https://api.github.com/users/hpp3/orgs",
            "repos_url": "https://api.github.com/users/hpp3/repos",
            "events_url": "https://api.github.com/users/hpp3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hpp3/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "move updateTurn to outside playAudio (can be before or after io.connect)\n",
        "created_at": "2015-10-19T03:27:40Z",
        "updated_at": "2015-10-19T03:35:24Z",
        "html_url": "https://github.com/jsshao/WAT/pull/1#discussion_r42334313",
        "pull_request_url": "https://api.github.com/repos/jsshao/WAT/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334313"
            },
            "html": {
                "href": "https://github.com/jsshao/WAT/pull/1#discussion_r42334313"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334332",
        "pull_request_review_id": null,
        "id": 42334332,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MzMy",
        "diff_hunk": "@@ -52,256 +52,268 @@ var socket = io.connect();\n \n var room = location.pathname.substring(1);\n \n-if (room === '') {\n-    room = prompt('Enter room name:');\n-}\n-\n-updateTurn(function() {\n-    console.log('hi');\n-});\n-\n-if (room !== '') {\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-}\n-\n-\n-socket.on('created', function (room){\n-    console.log('Created room ' + room);\n-    console.log('this should not happen');\n-    isInitiator = true;\n-});\n-\n-socket.on('error', function (msg) {\n-    console.log('ERROR: ' + JSON.stringify(msg));\n-});\n-\n-socket.on('room not found', function () {\n-    room = prompt(\"Room not found. Try again or cancel.\");\n-    if (room === null) return;\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-});\n-\n-socket.on('join', function (room){\n-    console.log('Join called. this should not happen');\n-    isChannelReady = true;\n+document.getElementById(\"submit\").addEventListener(\"click\", function(){\n+    var inputBox = document.getElementById(\"code\");\n+    room = inputBox.value;\n+\n+    //handle this and show \"Connected\" or provide error message if connection failed\"\n+    this.innerHTML = \"CONNECTED\";\n+    inputBox.disabled = true;\n+    playAudio();\n });\n \n-socket.on('joined', function (room){\n-    console.log('This peer has joined room ' + room);\n-    isChannelReady = true;\n-});\n-\n-socket.on('log', function (array){\n-    console.log.apply(console, array);\n-});\n \n-////////////////////////////////////////////////\n-\n-function sendMessage(message){\n-    console.log('Client sending message: ', message);\n-    socket.emit('message', message);\n+if (room !== '') {\n+    playAudio();\n }\n \n-socket.on('message', function (message){\n-    console.log('Client received message:', message);\n-    if (message === 'got user media') {\n-        maybeStart();\n-    } else if (message.type === 'offer') {\n-        if (!isStarted) {\n+function playAudio() {\n+    updateTurn(function() {\n+        console.log('hi');\n+    });\n+    \n+    if (room !== '') {\n+        console.log('join room', room);\n+        socket.emit('join room', room);\n+    }\n+    \n+    \n+    socket.on('created', function (room){",
        "path": "server/js/main.js",
        "position": null,
        "original_position": 83,
        "commit_id": "07ed93a80eae87c92bd1b3375a9fa4242bba0d40",
        "original_commit_id": "61de213a82bc60b3994d259e2a8accb0b281152d",
        "user": {
            "login": "hpp3",
            "id": 448866,
            "node_id": "MDQ6VXNlcjQ0ODg2Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/448866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hpp3",
            "html_url": "https://github.com/hpp3",
            "followers_url": "https://api.github.com/users/hpp3/followers",
            "following_url": "https://api.github.com/users/hpp3/following{/other_user}",
            "gists_url": "https://api.github.com/users/hpp3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hpp3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hpp3/subscriptions",
            "organizations_url": "https://api.github.com/users/hpp3/orgs",
            "repos_url": "https://api.github.com/users/hpp3/repos",
            "events_url": "https://api.github.com/users/hpp3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hpp3/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "from here\n",
        "created_at": "2015-10-19T03:28:27Z",
        "updated_at": "2015-10-19T03:35:24Z",
        "html_url": "https://github.com/jsshao/WAT/pull/1#discussion_r42334332",
        "pull_request_url": "https://api.github.com/repos/jsshao/WAT/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334332"
            },
            "html": {
                "href": "https://github.com/jsshao/WAT/pull/1#discussion_r42334332"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334336",
        "pull_request_review_id": null,
        "id": 42334336,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MzM2",
        "diff_hunk": "@@ -52,256 +52,268 @@ var socket = io.connect();\n \n var room = location.pathname.substring(1);\n \n-if (room === '') {\n-    room = prompt('Enter room name:');\n-}\n-\n-updateTurn(function() {\n-    console.log('hi');\n-});\n-\n-if (room !== '') {\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-}\n-\n-\n-socket.on('created', function (room){\n-    console.log('Created room ' + room);\n-    console.log('this should not happen');\n-    isInitiator = true;\n-});\n-\n-socket.on('error', function (msg) {\n-    console.log('ERROR: ' + JSON.stringify(msg));\n-});\n-\n-socket.on('room not found', function () {\n-    room = prompt(\"Room not found. Try again or cancel.\");\n-    if (room === null) return;\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-});\n-\n-socket.on('join', function (room){\n-    console.log('Join called. this should not happen');\n-    isChannelReady = true;\n+document.getElementById(\"submit\").addEventListener(\"click\", function(){\n+    var inputBox = document.getElementById(\"code\");\n+    room = inputBox.value;\n+\n+    //handle this and show \"Connected\" or provide error message if connection failed\"\n+    this.innerHTML = \"CONNECTED\";\n+    inputBox.disabled = true;\n+    playAudio();\n });\n \n-socket.on('joined', function (room){\n-    console.log('This peer has joined room ' + room);\n-    isChannelReady = true;\n-});\n-\n-socket.on('log', function (array){\n-    console.log.apply(console, array);\n-});\n \n-////////////////////////////////////////////////\n-\n-function sendMessage(message){\n-    console.log('Client sending message: ', message);\n-    socket.emit('message', message);\n+if (room !== '') {\n+    playAudio();\n }\n \n-socket.on('message', function (message){\n-    console.log('Client received message:', message);\n-    if (message === 'got user media') {\n-        maybeStart();\n-    } else if (message.type === 'offer') {\n-        if (!isStarted) {\n+function playAudio() {\n+    updateTurn(function() {",
        "path": "server/js/main.js",
        "position": null,
        "original_position": 73,
        "commit_id": "07ed93a80eae87c92bd1b3375a9fa4242bba0d40",
        "original_commit_id": "61de213a82bc60b3994d259e2a8accb0b281152d",
        "user": {
            "login": "jsshao",
            "id": 3219879,
            "node_id": "MDQ6VXNlcjMyMTk4Nzk=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/3219879?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/jsshao",
            "html_url": "https://github.com/jsshao",
            "followers_url": "https://api.github.com/users/jsshao/followers",
            "following_url": "https://api.github.com/users/jsshao/following{/other_user}",
            "gists_url": "https://api.github.com/users/jsshao/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/jsshao/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/jsshao/subscriptions",
            "organizations_url": "https://api.github.com/users/jsshao/orgs",
            "repos_url": "https://api.github.com/users/jsshao/repos",
            "events_url": "https://api.github.com/users/jsshao/events{/privacy}",
            "received_events_url": "https://api.github.com/users/jsshao/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Right I already did that. Can you highlight which functions playAudio() should encapsulate?\n",
        "created_at": "2015-10-19T03:28:42Z",
        "updated_at": "2015-10-19T03:35:24Z",
        "html_url": "https://github.com/jsshao/WAT/pull/1#discussion_r42334336",
        "pull_request_url": "https://api.github.com/repos/jsshao/WAT/pulls/1",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334336"
            },
            "html": {
                "href": "https://github.com/jsshao/WAT/pull/1#discussion_r42334336"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334346",
        "pull_request_review_id": null,
        "id": 42334346,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MzQ2",
        "diff_hunk": "@@ -52,256 +52,268 @@ var socket = io.connect();\n \n var room = location.pathname.substring(1);\n \n-if (room === '') {\n-    room = prompt('Enter room name:');\n-}\n-\n-updateTurn(function() {\n-    console.log('hi');\n-});\n-\n-if (room !== '') {\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-}\n-\n-\n-socket.on('created', function (room){\n-    console.log('Created room ' + room);\n-    console.log('this should not happen');\n-    isInitiator = true;\n-});\n-\n-socket.on('error', function (msg) {\n-    console.log('ERROR: ' + JSON.stringify(msg));\n-});\n-\n-socket.on('room not found', function () {\n-    room = prompt(\"Room not found. Try again or cancel.\");\n-    if (room === null) return;\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-});\n-\n-socket.on('join', function (room){\n-    console.log('Join called. this should not happen');\n-    isChannelReady = true;\n+document.getElementById(\"submit\").addEventListener(\"click\", function(){\n+    var inputBox = document.getElementById(\"code\");\n+    room = inputBox.value;\n+\n+    //handle this and show \"Connected\" or provide error message if connection failed\"\n+    this.innerHTML = \"CONNECTED\";\n+    inputBox.disabled = true;\n+    playAudio();\n });\n \n-socket.on('joined', function (room){\n-    console.log('This peer has joined room ' + room);\n-    isChannelReady = true;\n-});\n-\n-socket.on('log', function (array){\n-    console.log.apply(console, array);\n-});\n \n-////////////////////////////////////////////////\n-\n-function sendMessage(message){\n-    console.log('Client sending message: ', message);\n-    socket.emit('message', message);\n+if (room !== '') {\n+    playAudio();\n }\n \n-socket.on('message', function (message){\n-    console.log('Client received message:', message);\n-    if (message === 'got user media') {\n-        maybeStart();\n-    } else if (message.type === 'offer') {\n-        if (!isStarted) {\n+function playAudio() {\n+    updateTurn(function() {\n+        console.log('hi');\n+    });\n+    \n+    if (room !== '') {\n+        console.log('join room', room);\n+        socket.emit('join room', room);\n+    }\n+    \n+    \n+    socket.on('created', function (room){\n+        console.log('Created room ' + room);\n+        console.log('this should not happen');\n+        isInitiator = true;\n+    });\n+    \n+    socket.on('error', function (msg) {\n+        console.log('ERROR: ' + JSON.stringify(msg));\n+    });\n+    \n+    socket.on('room not found', function () {\n+        room = prompt(\"Room not found. Try again or cancel.\");\n+        if (room === null) return;\n+        console.log('join room', room);\n+        socket.emit('join room', room);\n+    });\n+    \n+    socket.on('join', function (room){\n+        console.log('Join called. this should not happen');\n+        isChannelReady = true;\n+    });\n+    \n+    socket.on('joined', function (room){\n+        console.log('This peer has joined room ' + room);\n+        isChannelReady = true;\n+    });\n+    \n+    socket.on('log', function (array){\n+        console.log.apply(console, array);\n+    });\n+    \n+    ////////////////////////////////////////////////\n+    \n+    function sendMessage(message){\n+        console.log('Client sending message: ', message);\n+        socket.emit('message', message);\n+    }\n+    \n+    socket.on('message', function (message){\n+        console.log('Client received message:', message);\n+        if (message === 'got user media') {\n             maybeStart();\n+        } else if (message.type === 'offer') {\n+            if (!isStarted) {\n+                maybeStart();\n+            }\n+            pc.setRemoteDescription(new RTCSessionDescription(message));\n+            doAnswer();\n+        } else if (message.type === 'answer' && isStarted) {\n+            pc.setRemoteDescription(new RTCSessionDescription(message));\n+        } else if (message.type === 'candidate' && isStarted) {\n+            var candidate = new RTCIceCandidate({\n+                sdpMLineIndex: message.label,\n+                candidate: message.candidate\n+            });\n+            pc.addIceCandidate(candidate);\n+        } else if (message === 'bye' && isStarted) {\n+            handleRemoteHangup();\n+        }\n+    });",
        "path": "server/js/main.js",
        "position": null,
        "original_position": 142,
        "commit_id": "07ed93a80eae87c92bd1b3375a9fa4242bba0d40",
        "original_commit_id": "61de213a82bc60b3994d259e2a8accb0b281152d",
        "user": {
            "login": "hpp3",
            "id": 448866,
            "node_id": "MDQ6VXNlcjQ0ODg2Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/448866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hpp3",
            "html_url": "https://github.com/hpp3",
            "followers_url": "https://api.github.com/users/hpp3/followers",
            "following_url": "https://api.github.com/users/hpp3/following{/other_user}",
            "gists_url": "https://api.github.com/users/hpp3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hpp3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hpp3/subscriptions",
            "organizations_url": "https://api.github.com/users/hpp3/orgs",
            "repos_url": "https://api.github.com/users/hpp3/repos",
            "events_url": "https://api.github.com/users/hpp3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hpp3/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "...to here you can move out of getAudio. it's just function declarations and event registering\n",
        "created_at": "2015-10-19T03:28:54Z",
        "updated_at": "2015-10-19T03:35:24Z",
        "html_url": "https://github.com/jsshao/WAT/pull/1#discussion_r42334346",
        "pull_request_url": "https://api.github.com/repos/jsshao/WAT/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334346"
            },
            "html": {
                "href": "https://github.com/jsshao/WAT/pull/1#discussion_r42334346"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334384",
        "pull_request_review_id": null,
        "id": 42334384,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0Mzg0",
        "diff_hunk": "@@ -52,256 +52,268 @@ var socket = io.connect();\n \n var room = location.pathname.substring(1);\n \n-if (room === '') {\n-    room = prompt('Enter room name:');\n-}\n-\n-updateTurn(function() {\n-    console.log('hi');\n-});\n-\n-if (room !== '') {\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-}\n-\n-\n-socket.on('created', function (room){\n-    console.log('Created room ' + room);\n-    console.log('this should not happen');\n-    isInitiator = true;\n-});\n-\n-socket.on('error', function (msg) {\n-    console.log('ERROR: ' + JSON.stringify(msg));\n-});\n-\n-socket.on('room not found', function () {\n-    room = prompt(\"Room not found. Try again or cancel.\");\n-    if (room === null) return;\n-    console.log('join room', room);\n-    socket.emit('join room', room);\n-});\n-\n-socket.on('join', function (room){\n-    console.log('Join called. this should not happen');\n-    isChannelReady = true;\n+document.getElementById(\"submit\").addEventListener(\"click\", function(){\n+    var inputBox = document.getElementById(\"code\");\n+    room = inputBox.value;\n+\n+    //handle this and show \"Connected\" or provide error message if connection failed\"\n+    this.innerHTML = \"CONNECTED\";\n+    inputBox.disabled = true;\n+    playAudio();\n });\n \n-socket.on('joined', function (room){\n-    console.log('This peer has joined room ' + room);\n-    isChannelReady = true;\n-});\n-\n-socket.on('log', function (array){\n-    console.log.apply(console, array);\n-});\n \n-////////////////////////////////////////////////\n-\n-function sendMessage(message){\n-    console.log('Client sending message: ', message);\n-    socket.emit('message', message);\n+if (room !== '') {\n+    playAudio();\n }\n \n-socket.on('message', function (message){\n-    console.log('Client received message:', message);\n-    if (message === 'got user media') {\n-        maybeStart();\n-    } else if (message.type === 'offer') {\n-        if (!isStarted) {\n+function playAudio() {\n+    updateTurn(function() {\n+        console.log('hi');\n+    });\n+    \n+    if (room !== '') {\n+        console.log('join room', room);\n+        socket.emit('join room', room);\n+    }\n+    \n+    \n+    socket.on('created', function (room){\n+        console.log('Created room ' + room);\n+        console.log('this should not happen');\n+        isInitiator = true;\n+    });\n+    \n+    socket.on('error', function (msg) {\n+        console.log('ERROR: ' + JSON.stringify(msg));\n+    });\n+    \n+    socket.on('room not found', function () {\n+        room = prompt(\"Room not found. Try again or cancel.\");\n+        if (room === null) return;\n+        console.log('join room', room);\n+        socket.emit('join room', room);\n+    });\n+    \n+    socket.on('join', function (room){\n+        console.log('Join called. this should not happen');\n+        isChannelReady = true;\n+    });\n+    \n+    socket.on('joined', function (room){\n+        console.log('This peer has joined room ' + room);\n+        isChannelReady = true;\n+    });\n+    \n+    socket.on('log', function (array){\n+        console.log.apply(console, array);\n+    });\n+    \n+    ////////////////////////////////////////////////\n+    \n+    function sendMessage(message){\n+        console.log('Client sending message: ', message);\n+        socket.emit('message', message);\n+    }\n+    \n+    socket.on('message', function (message){\n+        console.log('Client received message:', message);\n+        if (message === 'got user media') {\n             maybeStart();\n+        } else if (message.type === 'offer') {\n+            if (!isStarted) {\n+                maybeStart();\n+            }\n+            pc.setRemoteDescription(new RTCSessionDescription(message));\n+            doAnswer();\n+        } else if (message.type === 'answer' && isStarted) {\n+            pc.setRemoteDescription(new RTCSessionDescription(message));\n+        } else if (message.type === 'candidate' && isStarted) {\n+            var candidate = new RTCIceCandidate({\n+                sdpMLineIndex: message.label,\n+                candidate: message.candidate\n+            });\n+            pc.addIceCandidate(candidate);\n+        } else if (message === 'bye' && isStarted) {\n+            handleRemoteHangup();\n+        }\n+    });\n+    \n+    ////////////////////////////////////////////////////\n+    \n+    var remoteAudio = document.querySelector('#remoteAudio');\n+    \n+    \n+    \n+    function maybeStart() {",
        "path": "server/js/main.js",
        "position": null,
        "original_position": 150,
        "commit_id": "07ed93a80eae87c92bd1b3375a9fa4242bba0d40",
        "original_commit_id": "61de213a82bc60b3994d259e2a8accb0b281152d",
        "user": {
            "login": "hpp3",
            "id": 448866,
            "node_id": "MDQ6VXNlcjQ0ODg2Ng==",
            "avatar_url": "https://avatars2.githubusercontent.com/u/448866?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hpp3",
            "html_url": "https://github.com/hpp3",
            "followers_url": "https://api.github.com/users/hpp3/followers",
            "following_url": "https://api.github.com/users/hpp3/following{/other_user}",
            "gists_url": "https://api.github.com/users/hpp3/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hpp3/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hpp3/subscriptions",
            "organizations_url": "https://api.github.com/users/hpp3/orgs",
            "repos_url": "https://api.github.com/users/hpp3/repos",
            "events_url": "https://api.github.com/users/hpp3/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hpp3/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "just move everything out of getAudio actually. the only thing that should stay inside getAudio is line 75 -78 (code to join room).\n",
        "created_at": "2015-10-19T03:30:13Z",
        "updated_at": "2015-10-19T03:35:24Z",
        "html_url": "https://github.com/jsshao/WAT/pull/1#discussion_r42334384",
        "pull_request_url": "https://api.github.com/repos/jsshao/WAT/pulls/1",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/comments/42334384"
            },
            "html": {
                "href": "https://github.com/jsshao/WAT/pull/1#discussion_r42334384"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/jsshao/WAT/pulls/1"
            }
        }
    }
]