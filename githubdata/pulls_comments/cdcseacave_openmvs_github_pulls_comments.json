[
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41061515",
        "pull_request_review_id": null,
        "id": 41061515,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNTE1",
        "diff_hunk": "@@ -10,8 +10,13 @@\n #ifdef _IMAGE_TIFF\n #include \"ImageTIFF.h\"\n \n+// This corrects a conflict where both libtiff and opencv3 try to redefine uint64 and int64\n extern \"C\" {\n-#include <tiffio.h>",
        "path": "libs/IO/ImageTIFF.cpp",
        "position": 6,
        "original_position": 6,
        "commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "original_commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "user": {
            "login": "Meekohi",
            "id": 10985,
            "node_id": "MDQ6VXNlcjEwOTg1",
            "avatar_url": "https://avatars3.githubusercontent.com/u/10985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Meekohi",
            "html_url": "https://github.com/Meekohi",
            "followers_url": "https://api.github.com/users/Meekohi/followers",
            "following_url": "https://api.github.com/users/Meekohi/following{/other_user}",
            "gists_url": "https://api.github.com/users/Meekohi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Meekohi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Meekohi/subscriptions",
            "organizations_url": "https://api.github.com/users/Meekohi/orgs",
            "repos_url": "https://api.github.com/users/Meekohi/repos",
            "events_url": "https://api.github.com/users/Meekohi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Meekohi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The only changes other than these lines in this file is to rename all instances of `int64` to `int64_tiff` so there is no name collision with openCV.\n",
        "created_at": "2015-10-02T20:00:11Z",
        "updated_at": "2015-10-02T20:00:11Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41061515",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41061515"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41061515"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41061575",
        "pull_request_review_id": null,
        "id": 41061575,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNTc1",
        "diff_hunk": "@@ -723,7 +723,7 @@ void MeshRefine::ImageMeshWarp(\n {\n \tASSERT(!imageA.empty());\n \ttypedef Sampler::Linear<float> Sampler;\n-\tconst Sampler sampler;",
        "path": "libs/MVS/SceneRefine.cpp",
        "position": 4,
        "original_position": 4,
        "commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "original_commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "user": {
            "login": "Meekohi",
            "id": 10985,
            "node_id": "MDQ6VXNlcjEwOTg1",
            "avatar_url": "https://avatars3.githubusercontent.com/u/10985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Meekohi",
            "html_url": "https://github.com/Meekohi",
            "followers_url": "https://api.github.com/users/Meekohi/followers",
            "following_url": "https://api.github.com/users/Meekohi/following{/other_user}",
            "gists_url": "https://api.github.com/users/Meekohi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Meekohi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Meekohi/subscriptions",
            "organizations_url": "https://api.github.com/users/Meekohi/orgs",
            "repos_url": "https://api.github.com/users/Meekohi/repos",
            "events_url": "https://api.github.com/users/Meekohi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Meekohi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "In C++11 you cannot use the default initializer with a const object.\n",
        "created_at": "2015-10-02T20:00:53Z",
        "updated_at": "2015-10-02T20:00:53Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41061575",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41061575"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41061575"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41061696",
        "pull_request_review_id": null,
        "id": 41061696,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYxNjk2",
        "diff_hunk": "@@ -1677,7 +1677,8 @@ void MeshTexture::PoissonBlending(const Image32F3& src, Image32F3& dst, const Im\n \t\t\tconst MatIdx idx(indices(i));\n \t\t\tASSERT(idx != -1);\n \t\t\tcoeffA.AddConstruct(idx, idx, 1.f);\n-\t\t\tcoeffB[idx] = Color(dst(i));\n+\t\t\tColor c = dst(i);",
        "path": "libs/MVS/SceneTexture.cpp",
        "position": 23,
        "original_position": 23,
        "commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "original_commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "user": {
            "login": "Meekohi",
            "id": 10985,
            "node_id": "MDQ6VXNlcjEwOTg1",
            "avatar_url": "https://avatars3.githubusercontent.com/u/10985?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/Meekohi",
            "html_url": "https://github.com/Meekohi",
            "followers_url": "https://api.github.com/users/Meekohi/followers",
            "following_url": "https://api.github.com/users/Meekohi/following{/other_user}",
            "gists_url": "https://api.github.com/users/Meekohi/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/Meekohi/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/Meekohi/subscriptions",
            "organizations_url": "https://api.github.com/users/Meekohi/orgs",
            "repos_url": "https://api.github.com/users/Meekohi/repos",
            "events_url": "https://api.github.com/users/Meekohi/events{/privacy}",
            "received_events_url": "https://api.github.com/users/Meekohi/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Make it unambiguous as to whether the move or copy implicit type-cast is being used (C++11 won't let you leave it ambiguous).\n",
        "created_at": "2015-10-02T20:01:52Z",
        "updated_at": "2015-10-02T20:01:52Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41061696",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41061696"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41061696"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41082826",
        "pull_request_review_id": null,
        "id": 41082826,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyODI2",
        "diff_hunk": "@@ -723,7 +723,7 @@ void MeshRefine::ImageMeshWarp(\n {\n \tASSERT(!imageA.empty());\n \ttypedef Sampler::Linear<float> Sampler;\n-\tconst Sampler sampler;",
        "path": "libs/MVS/SceneRefine.cpp",
        "position": 4,
        "original_position": 4,
        "commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "original_commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "it was already fixed (differently) in the last commit\n",
        "created_at": "2015-10-03T02:32:01Z",
        "updated_at": "2015-10-03T02:32:01Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41082826",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41082826"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41082826"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41082843",
        "pull_request_review_id": null,
        "id": 41082843,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyODQz",
        "diff_hunk": "@@ -1677,7 +1677,8 @@ void MeshTexture::PoissonBlending(const Image32F3& src, Image32F3& dst, const Im\n \t\t\tconst MatIdx idx(indices(i));\n \t\t\tASSERT(idx != -1);\n \t\t\tcoeffA.AddConstruct(idx, idx, 1.f);\n-\t\t\tcoeffB[idx] = Color(dst(i));\n+\t\t\tColor c = dst(i);",
        "path": "libs/MVS/SceneTexture.cpp",
        "position": 23,
        "original_position": 23,
        "commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "original_commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "There should be a nicer solution to this. Could you please try something different to fix it (without creating a temporary variable)?\n",
        "created_at": "2015-10-03T02:34:44Z",
        "updated_at": "2015-10-03T02:34:44Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41082843",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41082843"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41082843"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41082885",
        "pull_request_review_id": null,
        "id": 41082885,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyODg1",
        "diff_hunk": "@@ -10,8 +10,13 @@\n #ifdef _IMAGE_TIFF\n #include \"ImageTIFF.h\"\n \n+// This corrects a conflict where both libtiff and opencv3 try to redefine uint64 and int64\n extern \"C\" {\n-#include <tiffio.h>",
        "path": "libs/IO/ImageTIFF.cpp",
        "position": 6,
        "original_position": 6,
        "commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "original_commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I like the trick with the defines. However, please do not modify my code just because of a conflict generated by bad libs. If it is not compiling just with the define trick, please fix it by using the same tiff library.\n",
        "created_at": "2015-10-03T02:39:08Z",
        "updated_at": "2015-10-03T02:39:08Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41082885",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/41082885"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r41082885"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/42211189",
        "pull_request_review_id": null,
        "id": 42211189,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjExMTg5",
        "diff_hunk": "@@ -1677,7 +1677,8 @@ void MeshTexture::PoissonBlending(const Image32F3& src, Image32F3& dst, const Im\n \t\t\tconst MatIdx idx(indices(i));\n \t\t\tASSERT(idx != -1);\n \t\t\tcoeffA.AddConstruct(idx, idx, 1.f);\n-\t\t\tcoeffB[idx] = Color(dst(i));\n+\t\t\tColor c = dst(i);",
        "path": "libs/MVS/SceneTexture.cpp",
        "position": 23,
        "original_position": 23,
        "commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "original_commit_id": "bdbbce83099da70c7c123f70d61996da529fe28a",
        "user": {
            "login": "rperrot",
            "id": 6479700,
            "node_id": "MDQ6VXNlcjY0Nzk3MDA=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6479700?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rperrot",
            "html_url": "https://github.com/rperrot",
            "followers_url": "https://api.github.com/users/rperrot/followers",
            "following_url": "https://api.github.com/users/rperrot/following{/other_user}",
            "gists_url": "https://api.github.com/users/rperrot/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rperrot/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rperrot/subscriptions",
            "organizations_url": "https://api.github.com/users/rperrot/orgs",
            "repos_url": "https://api.github.com/users/rperrot/repos",
            "events_url": "https://api.github.com/users/rperrot/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rperrot/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You can just add a cast to a reference (lvalue) to force using copy ctr :\n\n```\ncoeffB[idx] = Color( (Color&)dst(i));\n```\n\nThis compiles fine on OSX using clang.\n",
        "created_at": "2015-10-16T06:06:32Z",
        "updated_at": "2015-10-16T06:06:32Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r42211189",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/42211189"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/15#discussion_r42211189"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/15"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/297257826",
        "pull_request_review_id": 254097102,
        "id": 297257826,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzI1NzgyNg==",
        "diff_hunk": "@@ -78,6 +78,7 @@ class MVS_API Image\n \tuint32_t platformID; // ID of the associated platform\n \tuint32_t cameraID; // ID of the associated camera on the associated platform\n \tuint32_t poseID; // ID of the pose of the associated platform\n+\tuint32_t ID; // Global ID of the image",
        "path": "libs/MVS/Image.h",
        "position": 4,
        "original_position": 4,
        "commit_id": "dc5401b75d2bc121bbaa1a14ea8a4bc605967a37",
        "original_commit_id": "61e4ea4d084162e5cefe06d9ea847f0295c111a4",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "pls initialize it to NO_ID",
        "created_at": "2019-06-25T15:41:53Z",
        "updated_at": "2019-06-26T07:04:41Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/452#discussion_r297257826",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/452",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/297257826"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/452#discussion_r297257826"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/297259518",
        "pull_request_review_id": 254097102,
        "id": 297259518,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzI1OTUxOA==",
        "diff_hunk": "@@ -119,21 +120,28 @@ class MVS_API Image\n \t#ifdef _USE_BOOST\n \t// implement BOOST serialization\n \ttemplate<class Archive>\n-\tvoid save(Archive& ar, const unsigned int /*version*/) const {\n+\tvoid save(Archive& ar, const unsigned int version) const {\n \t\tar & platformID;\n \t\tar & cameraID;\n \t\tar & poseID;\n+\t\tif (version > 2) {",
        "path": "libs/MVS/Image.h",
        "position": null,
        "original_position": 17,
        "commit_id": "dc5401b75d2bc121bbaa1a14ea8a4bc605967a37",
        "original_commit_id": "61e4ea4d084162e5cefe06d9ea847f0295c111a4",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this is not enough, you need to inform boost of the current version, ex:\r\n```\r\nBOOST_CLASS_VERSION(MVS::Image, 3)\r\n```\r\nAlso, current version is 0, so no need to set it to 3, as 1 is enough.\r\n\r\nPls note that `Interface.h` does not use boost, but a custom serialization in order to be portable. So do not confuse the 2, no connection between them.",
        "created_at": "2019-06-25T15:45:21Z",
        "updated_at": "2019-06-26T07:04:41Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/452#discussion_r297259518",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/452",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/297259518"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/452#discussion_r297259518"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/452"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/297380822",
        "pull_request_review_id": 254253632,
        "id": 297380822,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NzM4MDgyMg==",
        "diff_hunk": "@@ -119,21 +120,28 @@ class MVS_API Image\n \t#ifdef _USE_BOOST\n \t// implement BOOST serialization\n \ttemplate<class Archive>\n-\tvoid save(Archive& ar, const unsigned int /*version*/) const {\n+\tvoid save(Archive& ar, const unsigned int version) const {\n \t\tar & platformID;\n \t\tar & cameraID;\n \t\tar & poseID;\n+\t\tif (version > 2) {",
        "path": "libs/MVS/Image.h",
        "position": null,
        "original_position": 17,
        "commit_id": "dc5401b75d2bc121bbaa1a14ea8a4bc605967a37",
        "original_commit_id": "61e4ea4d084162e5cefe06d9ea847f0295c111a4",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "thanks a lot! it should be resolved in the new commit.",
        "created_at": "2019-06-25T20:33:38Z",
        "updated_at": "2019-06-26T07:04:41Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/452#discussion_r297380822",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/452",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/297380822"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/452#discussion_r297380822"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/452"
            }
        },
        "in_reply_to_id": 297259518
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298485964",
        "pull_request_review_id": 255626524,
        "id": 298485964,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ4NTk2NA==",
        "diff_hunk": "@@ -138,7 +138,6 @@ class MVS_API Image\n \t\tar & platformID;\n \t\tar & cameraID;\n \t\tar & poseID;\n-\t\tar & poseID;",
        "path": "libs/MVS/Image.h",
        "position": 4,
        "original_position": 4,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "this mistake was introduced in the previous commit.",
        "created_at": "2019-06-28T07:44:44Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298485964",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298485964"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298485964"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298486177",
        "pull_request_review_id": 255626524,
        "id": 298486177,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ4NjE3Nw==",
        "diff_hunk": "@@ -0,0 +1,13 @@\n+# CHANGES",
        "path": "apps/SceneClustering/domset/CHANGES.md",
        "position": 1,
        "original_position": 1,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "forgot to mention I added overlap",
        "created_at": "2019-06-28T07:45:33Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298486177",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298486177"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298486177"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298486777",
        "pull_request_review_id": 255626524,
        "id": 298486777,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ4Njc3Nw==",
        "diff_hunk": "@@ -0,0 +1,19 @@\n+cmake_minimum_required(VERSION 2.8)",
        "path": "apps/SceneClustering/domset/CMakeLists.txt",
        "position": 1,
        "original_position": 1,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@cdcseacave: I'm not sure you want to have domset lib inside an `app` directory maybe you want it to be integrated into the `libs` one. Please let me know.",
        "created_at": "2019-06-28T07:47:42Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298486777",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298486777"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298486777"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298487633",
        "pull_request_review_id": 255626524,
        "id": 298487633,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ4NzYzMw==",
        "diff_hunk": "@@ -0,0 +1,791 @@\n+// Copyright (c) 2016 nomoko AG, Srivathsan Murali<srivathsan@nomoko.camera>\n+\n+// This Source Code Form is subject to the terms of the Mozilla Public\n+// License, v. 2.0. If a copy of the MPL was not distributed with this\n+// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+\n+#include \"domset.h\"\n+\n+#include <random>\n+\n+#if DOMSET_USE_OPENMP\n+#include <omp.h>\n+#endif\n+\n+#if DOMSET_VISUAL_STUDIO\n+#define for_parallel(i, nIters) for (int i = 0; i < nIters; i++)\n+#else\n+#define for_parallel(i, nIters) for (size_t i = 0; i < nIters; i++)\n+#endif\n+\n+namespace nomoko\n+{\n+void Domset::computeInformation()\n+{\n+  normalizePointCloud();\n+  voxelGridFilter(kVoxelSize, kVoxelSize, kVoxelSize);\n+  getAllDistances();\n+}\n+\n+void Domset::normalizePointCloud()\n+{\n+  // construct a kd-tree index:\n+  typedef KDTreeSingleIndexAdaptor<\n+      L2_Simple_Adaptor<float, Domset>,\n+      Domset,\n+      3 /* dim */>\n+      my_kd_tree_t;\n+\n+  my_kd_tree_t index(3, *this, KDTreeSingleIndexAdaptorParams(10));\n+  index.buildIndex();\n+\n+  const size_t numResults(1);\n+  const size_t numPoints(points.size());\n+  float totalDist = 0.0;\n+  pcCentre.pos = Eigen::Vector3f::Zero();\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    const Point &p = points[i];\n+    const float queryPt[3] = {p.pos(0), p.pos(1), p.pos(2)};\n+\n+    std::vector<size_t> ret_index(2);\n+    std::vector<float> out_dist_sq(2);\n+\n+    index.knnSearch(queryPt, 2, &ret_index[0], &out_dist_sq[0]);\n+#if DOMSET_USE_OPENMP\n+#pragma omp critical(distUpdate)\n+#endif\n+    {\n+      totalDist += std::sqrt(out_dist_sq[1]);\n+      pcCentre.pos += (p.pos / numPoints);\n+    }\n+  }\n+  // calculation the normalization scale\n+  const float avgDist = totalDist / numPoints;\n+  std::cerr << \"Total distance = \" << totalDist << std::endl;\n+  std::cerr << \"Avg distance = \" << avgDist << std::endl;\n+  normScale = 1.f / avgDist;\n+  std::cerr << \"Normalization Scale = \" << normScale << std::endl;\n+\n+// normalizing the distances on points\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    points[i].pos = (points[i].pos - pcCentre.pos) * normScale;\n+  }\n+\n+  // normalizing the camera center positions\n+  const size_t numViews(views.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numViews)\n+  {\n+    views[i].trans = (views[i].trans - pcCentre.pos) * normScale;\n+  }\n+}\n+\n+void Domset::deNormalizePointCloud()\n+{\n+  const size_t numPoints(points.size());\n+// denormalizing points\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    points[i].pos = (points[i].pos / normScale) + pcCentre.pos;\n+  }\n+\n+  const size_t numOldPoints(origPoints.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numOldPoints)\n+  {\n+    origPoints[i].pos = (origPoints[i].pos / normScale) + pcCentre.pos;\n+  }\n+\n+  // denormalizing camera centers\n+  const size_t numViews(views.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numViews)\n+  {\n+    views[i].trans = (views[i].trans / normScale) + pcCentre.pos;\n+  }\n+}\n+\n+void Domset::voxelGridFilter(const float &sizeX, const float &sizeY, const float &sizeZ)\n+{\n+  if (sizeX <= 0.0f || sizeY <= 0.0f || sizeZ <= 0.0f)\n+  {\n+    std::cerr << \"Invalid voxel grid dimensions error.\\n\";\n+    exit(0);\n+  }\n+\n+  Point minPt;\n+  Point maxPt;\n+  const size_t numP = points.size();\n+  // finding the min and max values for the 3 dimensions\n+  const float mi = std::numeric_limits<float>::min();\n+  const float ma = std::numeric_limits<float>::max();\n+  minPt.pos << ma, ma, ma;\n+  maxPt.pos << mi, mi, mi;\n+\n+  for (size_t p = 0; p < numP; p++)\n+  {\n+    const Point newSP = points[p];\n+    if (newSP.pos(0) < minPt.pos(0))\n+      minPt.pos(0) = newSP.pos(0);\n+    if (newSP.pos(1) < minPt.pos(1))\n+      minPt.pos(1) = newSP.pos(1);\n+    if (newSP.pos(2) < minPt.pos(2))\n+      minPt.pos(2) = newSP.pos(2);\n+    if (newSP.pos(0) > maxPt.pos(0))\n+      maxPt.pos(0) = newSP.pos(0);\n+    if (newSP.pos(1) > maxPt.pos(1))\n+      maxPt.pos(1) = newSP.pos(1);\n+    if (newSP.pos(2) > maxPt.pos(2))\n+      maxPt.pos(2) = newSP.pos(2);\n+  }\n+\n+  // finding the number of voxels reqired\n+  size_t numVoxelX = static_cast<size_t>(ceil(maxPt.pos(0) - minPt.pos(0)) / sizeX);\n+  size_t numVoxelY = static_cast<size_t>(ceil(maxPt.pos(1) - minPt.pos(1)) / sizeY);\n+  size_t numVoxelZ = static_cast<size_t>(ceil(maxPt.pos(2) - minPt.pos(2)) / sizeZ);\n+\n+  /* std::cout << \"Max = \" << maxPt.pos.transpose() << std::endl;",
        "path": "apps/SceneClustering/domset/domset.cc",
        "position": null,
        "original_position": 164,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Maybe it could be better if we integrate the bunch of cerr/cout here into your LOG system...",
        "created_at": "2019-06-28T07:50:45Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298487633",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298487633"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298487633"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298488195",
        "pull_request_review_id": 255626524,
        "id": 298488195,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ4ODE5NQ==",
        "diff_hunk": "@@ -0,0 +1,315 @@\n+/*\n+ * SceneClustering.cpp\n+ *\n+ * Copyright (c) 2019 SEACAVE\n+ *\n+ * Author(s):\n+ *      Romain Janvier <romain.janvier@lepatriscope.com>\n+ *      cDc <cdc.seacave@gmail.com>\n+ *\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Additional Terms:\n+ *\n+ *      You are required to preserve legal notices and author attributions in\n+ *      that material or in the Appropriate Legal Notices displayed by works\n+ *      containing it.\n+ */\n+\n+\n+#include \"../../libs/MVS/Common.h\"\n+#include \"../../libs/MVS/Scene.h\"\n+#include \"domset/domset.h\"\n+#include <boost/program_options.hpp>\n+\n+using namespace MVS;\n+\n+\n+// D E F I N E S ///////////////////////////////////////////////////\n+\n+#define APPNAME _T(\"SceneClustering\")\n+\n+\n+// S T R U C T S ///////////////////////////////////////////////////\n+\n+namespace OPT {\n+String strInputFileName;\n+String strOutputDirectory;\n+float fVoxelSize;\n+unsigned nMinClusterSize;\n+unsigned nMaxClusterSize;\n+unsigned nClusterOverlap;\n+bool bDoSVM;\n+unsigned nArchiveType;\n+int nProcessPriority;\n+unsigned nMaxThreads;\n+String strConfigFileName;\n+boost::program_options::variables_map vm;\n+} // namespace OPT\n+\n+// initialize and parse the command line parameters\n+bool Initialize(size_t argc, LPCTSTR* argv)\n+{\n+\t// initialize log and console\n+\tOPEN_LOG();\n+\tOPEN_LOGCONSOLE();\n+\n+\t// group of options allowed only on command line\n+\tboost::program_options::options_description generic(\"Generic options\");\n+\tgeneric.add_options()\n+\t\t(\"help,h\", \"produce this help message\")\n+\t\t(\"working-folder,w\", boost::program_options::value<std::string>(&WORKING_FOLDER), \"working directory (default current directory)\")\n+\t\t(\"config-file,c\", boost::program_options::value<std::string>(&OPT::strConfigFileName)->default_value(APPNAME _T(\".cfg\")), \"file name containing program options\")\n+\t\t(\"archive-type\", boost::program_options::value<unsigned>(&OPT::nArchiveType)->default_value(2), \"project archive type: 0-text, 1-binary, 2-compressed binary\")\n+\t\t(\"process-priority\", boost::program_options::value<int>(&OPT::nProcessPriority)->default_value(-1), \"process priority (below normal by default)\")\n+\t\t(\"max-threads\", boost::program_options::value<unsigned>(&OPT::nMaxThreads)->default_value(0), \"maximum number of threads (0 for using all available cores)\")\n+\t\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t\t(\"verbosity,v\", boost::program_options::value<int>(&g_nVerbosityLevel)->default_value(\n+\t\t\t#if TD_VERBOSE == TD_VERBOSE_DEBUG\n+\t\t\t3\n+\t\t\t#else\n+\t\t\t2\n+\t\t\t#endif\n+\t\t\t), \"verbosity level\")\n+\t\t#endif\n+\t\t;\n+\n+\t// group of options allowed both on command line and in config file\n+\tboost::program_options::options_description config(\"Texture options\");\n+\tconfig.add_options()\n+\t\t(\"input-file,i\", boost::program_options::value<std::string>(&OPT::strInputFileName), \"Input filename containing camera poses and image list\")\n+\t\t(\"voxel-size,x\", boost::program_options::value<float>(&OPT::fVoxelSize)->default_value(5.f), \"Size of a cell in the voxel grid: level of simplification of the original point cloud\")\n+\t\t(\"min-cluster-size,m\", boost::program_options::value<unsigned>(&OPT::nMinClusterSize)->default_value(30), \"Min number of camera in a cluster\" )\n+\t\t(\"max-cluster-size,M\", boost::program_options::value<unsigned>(&OPT::nMaxClusterSize)->default_value(50), \"Max number of camera in a cluster\")\n+\t\t(\"cluster-overlap,o\", boost::program_options::value<unsigned>(&OPT::nClusterOverlap)->default_value(4), \"Number of views in overlap [NOT implemented yet]\" )\n+\t\t//(\"svm-classification,s\", boost::program_options::bool_switch(&OPT::bDoSVM), \"Do the SVM classification [NOT Implemented yet]\" )\n+\t\t;\n+\n+\tboost::program_options::options_description cmdline_options;\n+\tcmdline_options.add(generic).add(config);\n+\n+\tboost::program_options::options_description config_file_options;\n+\tconfig_file_options.add(config);\n+\n+\tboost::program_options::positional_options_description p;\n+\tp.add(\"input-file\", -1);\n+\n+\ttry {\n+\t\t// parse command line options\n+\t\tboost::program_options::store(boost::program_options::command_line_parser((int)argc, argv).options(cmdline_options).positional(p).run(), OPT::vm);\n+\t\tboost::program_options::notify(OPT::vm);\n+\t\tINIT_WORKING_FOLDER;\n+\t\t// parse configuration file\n+\t\tstd::ifstream ifs(MAKE_PATH_SAFE(OPT::strConfigFileName));\n+\t\tif (ifs) {\n+\t\t\tboost::program_options::store(parse_config_file(ifs, config_file_options), OPT::vm);\n+\t\t\tboost::program_options::notify(OPT::vm);\n+\t\t}\n+\t}\n+\tcatch (const std::exception& e) {\n+\t\tLOG(e.what());\n+\t\treturn false;\n+\t}\n+\n+\t// initialize the log file\n+\tOPEN_LOGFILE(MAKE_PATH(APPNAME _T(\"-\")+Util::getUniqueName(0)+_T(\".log\")).c_str());\n+\n+\t// print application details: version and command line\n+\tUtil::LogBuild();\n+\tLOG(_T(\"Command line:%s\"), Util::CommandLineToString(argc, argv).c_str());\n+\n+\t// validate input\n+\tUtil::ensureValidPath(OPT::strInputFileName);\n+\tUtil::ensureUnifySlash(OPT::strInputFileName);\n+\tif (OPT::vm.count(\"help\") || OPT::strInputFileName.IsEmpty()) {\n+\t\tboost::program_options::options_description visible(\"Available options\");\n+\t\tvisible.add(generic).add(config);\n+\t\tGET_LOG() << visible;\n+\t}\n+\n+\tif (OPT::strInputFileName.IsEmpty())\n+\t\treturn false;\n+\t\n+\t// initialize optional options\n+\tUtil::ensureValidPath(OPT::strOutputDirectory);\n+\tUtil::ensureUnifySlash(OPT::strOutputDirectory);\n+\tif (OPT::strOutputDirectory.IsEmpty())\n+\t\tOPT::strOutputDirectory = WORKING_FOLDER;\n+\n+\tif(OPT::nMaxClusterSize < OPT::nMinClusterSize)\n+\t{\n+\t\tLOG(\"max-cluster-size value must be greater than min-cluster-size value\");\n+\t\treturn false;\n+\t}\n+\t// initialize global options\n+\tProcess::setCurrentProcessPriority((Process::Priority)OPT::nProcessPriority);\n+\t#ifdef _USE_OPENMP\n+\tif (OPT::nMaxThreads != 0)\n+\t\tomp_set_num_threads(OPT::nMaxThreads);\n+\t#endif\n+\n+\t#ifdef _USE_BREAKPAD\n+\t// start memory dumper\n+\tMiniDumper::Create(APPNAME, WORKING_FOLDER);\n+\t#endif\n+\n+\tUtil::Init();\n+\treturn true;\n+}\n+\n+// finalize application instance\n+void Finalize()\n+{\n+\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t// print memory statistics\n+\tUtil::LogMemoryInfo();\n+\t#endif\n+\n+\tCLOSE_LOGFILE();\n+\tCLOSE_LOGCONSOLE();\n+\tCLOSE_LOG();\n+}\n+\n+int main(int argc, LPCTSTR* argv)\n+{\n+\t#ifdef _DEBUGINFO\n+\t// set _crtBreakAlloc index to stop in <dbgheap.c> at allocation\n+\t_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);// | _CRTDBG_CHECK_ALWAYS_DF);\n+\t#endif\n+\n+\tif (!Initialize(argc, argv))\n+\t\treturn EXIT_FAILURE;\n+\n+\tScene scene(OPT::nMaxThreads);\n+\t// load and texture the mesh\n+\tif (!scene.Load(MAKE_PATH_SAFE(OPT::strInputFileName)))\n+\t\treturn EXIT_FAILURE;\n+\t\n+\tif (scene.pointcloud.IsEmpty()) {\n+\t\tLOG(\"error: empty initial point-cloud\");\n+\t\treturn EXIT_FAILURE;\n+\t}\n+\n+\n+\tconst String baseFileName(MAKE_PATH_SAFE(Util::getFileFullName(OPT::strInputFileName)));\n+\n+\t{\n+\t// compute clustering\n+\tTD_TIMER_START();\n+\n+\t// set up data\n+\tstd::vector<nomoko::Camera> domset_cameras; // Camera is useless in domset...\n+\tstd::vector<nomoko::View> domset_views;\n+\tstd::vector<nomoko::Point> domset_points; // nomoko::Point is an Eigen::Vec3f...\n+\tstd::map<uint32_t, uint32_t> view_fwd_reindexing; // get continuous indexing\n+\tstd::map<uint32_t, uint32_t> view_bkwd_reindexing; // reverse continuous indexing\n+\n+\tuint32_t curr_ID = 0;\n+\tFOREACH(IdxC, scene.images)\n+\t{\n+\t\tconst auto & curr_image = scene.images[IdxC];\n+\t\tif(curr_image.IsValid())\n+\t\t{\n+\t\t\tview_fwd_reindexing[IdxC] = curr_ID;\n+\t\t\tview_bkwd_reindexing[curr_ID] = IdxC; \n+\t\t\tnomoko::View v;\n+\t\t\tv.rot = Eigen::Matrix<double,3,3,1>(curr_image.camera.R).cast<float>();\n+\t\t\tv.trans = Eigen::Vector3d(curr_image.camera.C).cast<float>();\n+\t\t\tdomset_views.push_back(v);\n+\t\t\t++curr_ID;\n+\t\t}\n+\t}\n+\n+\tFOREACH(IdxP, scene.pointcloud.points)\n+\t{\n+\t\tnomoko::Point p;\n+\t\tp.pos = Eigen::Vector3f(scene.pointcloud.points[IdxP]);\n+\t\tFOREACH(IdxV, scene.pointcloud.pointViews[IdxP])\n+\t\t{\n+\t\t\tauto idx = view_fwd_reindexing[scene.pointcloud.pointViews[IdxP][IdxV]];\n+\t\t\tp.viewList.push_back(idx);\n+\t\t}\n+\t\tdomset_points.push_back(p);\n+\t}\n+\n+\tnomoko::Domset domset_instance(domset_points, domset_views, domset_cameras, OPT::fVoxelSize);\n+\n+\tdomset_instance.clusterViews(OPT::nMinClusterSize, OPT::nMaxClusterSize, OPT::nClusterOverlap);\n+\n+\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\tif (VERBOSITY_LEVEL > 2)\n+\t{\n+\t\tdomset_instance.printClusters();\n+\t\tdomset_instance.exportToPLY(baseFileName + _T(\"_clusters.ply\"));\n+\t}\n+\t#endif\n+\n+\tconst auto domset_clusters = domset_instance.getClusters();\n+\tVERBOSE(\"Clustering completed : %u clusters (%s)\", domset_clusters.size(), TD_TIMER_GET_FMT().c_str());\n+\n+\tfor (int i = 0; i < domset_clusters.size(); ++i) \n+\t{\n+\t\tconst auto & cluster = domset_clusters[i];\n+\n+\t\tScene scene_cluster;\n+\t\tstd::map<uint32_t, uint32_t> map_global_to_local;\n+\t\tstd::vector<uint32_t> global_IDs;\n+\t\tscene_cluster.platforms = scene.platforms; // We copy all the plateforms for now, it's easier and harmless\n+\n+\t\tuint32_t local_ID = 0;\n+\t\tfor (const auto inCluster_ID : cluster)\n+\t\t{\n+\t\t\tconst size_t global_ID = view_bkwd_reindexing[inCluster_ID];\n+\t\t\tauto & image = scene.images[global_ID];\n+\t\t\timage.ID = global_ID; \n+\t\t\tscene_cluster.images.Insert(scene.images[global_ID]);\n+\t\t\tmap_global_to_local[global_ID] = local_ID;\n+\t\t\tglobal_IDs.push_back(global_ID);\n+\t\t\t++local_ID;\n+\t\t}\n+\n+\t\tFOREACH(IdxP, scene.pointcloud.points)\n+\t\t{\n+\t\t\tconst auto & curr_viewArr = scene.pointcloud.pointViews[IdxP];\n+\t\t\tPointCloud::ViewArr new_viewArr;\n+\t\t\t\n+\t\t\tfor(const auto & idxVG: global_IDs)\n+\t\t\t{\n+\t\t\t\tif(curr_viewArr.FindFirst(idxVG) != PointCloud::ViewArr::NO_INDEX)\n+\t\t\t\t\tnew_viewArr.InsertSort(map_global_to_local.at(idxVG));\n+\t\t\t}\n+\n+\t\t\tif(new_viewArr.GetSize() > 1)\n+\t\t\t{\n+\t\t\t\tscene_cluster.pointcloud.points.Insert(scene.pointcloud.points[IdxP]);\n+\t\t\t\tscene_cluster.pointcloud.pointViews.Insert(new_viewArr);\n+\t\t\t\tif(!scene.pointcloud.colors.IsEmpty())\n+\t\t\t\t\tscene_cluster.pointcloud.colors.Insert(scene.pointcloud.colors[IdxP]);\n+\t\t\t\tif(!scene.pointcloud.pointWeights.IsEmpty())\n+\t\t\t\t\tscene_cluster.pointcloud.pointWeights.Insert(scene.pointcloud.pointWeights[IdxP]);\n+\t\t\t}\n+\t\t}\n+\t\tLOG(String::FormatString(\"Saving cluster #%i\", i));\n+\t\tscene_cluster.Save(baseFileName + String::FormatString(\"_cluster_%i.mvs\", i), (ARCHIVE_TYPE)OPT::nArchiveType);",
        "path": "apps/SceneClustering/SceneClustering.cpp",
        "position": null,
        "original_position": 306,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "here I choose convention over configuration. I do not give user the choice of the directory/suffix.",
        "created_at": "2019-06-28T07:52:51Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298488195",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298488195"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298488195"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298492356",
        "pull_request_review_id": 255634840,
        "id": 298492356,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ5MjM1Ng==",
        "diff_hunk": "@@ -0,0 +1,19 @@\n+cmake_minimum_required(VERSION 2.8)",
        "path": "apps/SceneClustering/domset/CMakeLists.txt",
        "position": 1,
        "original_position": 1,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd usually add libs in `libs` folder, for example domset could go in `Math`; however in this case this lib is very probable to be used only for this specific task\r\n\r\nin conclusion feel free to add it where you think is better; just note that is you add it in the app, you can not use it inside MVS lib, so if you think u can do all u need to do outside MVS in app is just fine",
        "created_at": "2019-06-28T08:05:59Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298492356",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298492356"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298492356"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298486777
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298492681",
        "pull_request_review_id": 255635247,
        "id": 298492681,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ5MjY4MQ==",
        "diff_hunk": "@@ -0,0 +1,791 @@\n+// Copyright (c) 2016 nomoko AG, Srivathsan Murali<srivathsan@nomoko.camera>\n+\n+// This Source Code Form is subject to the terms of the Mozilla Public\n+// License, v. 2.0. If a copy of the MPL was not distributed with this\n+// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+\n+#include \"domset.h\"\n+\n+#include <random>\n+\n+#if DOMSET_USE_OPENMP\n+#include <omp.h>\n+#endif\n+\n+#if DOMSET_VISUAL_STUDIO\n+#define for_parallel(i, nIters) for (int i = 0; i < nIters; i++)\n+#else\n+#define for_parallel(i, nIters) for (size_t i = 0; i < nIters; i++)\n+#endif\n+\n+namespace nomoko\n+{\n+void Domset::computeInformation()\n+{\n+  normalizePointCloud();\n+  voxelGridFilter(kVoxelSize, kVoxelSize, kVoxelSize);\n+  getAllDistances();\n+}\n+\n+void Domset::normalizePointCloud()\n+{\n+  // construct a kd-tree index:\n+  typedef KDTreeSingleIndexAdaptor<\n+      L2_Simple_Adaptor<float, Domset>,\n+      Domset,\n+      3 /* dim */>\n+      my_kd_tree_t;\n+\n+  my_kd_tree_t index(3, *this, KDTreeSingleIndexAdaptorParams(10));\n+  index.buildIndex();\n+\n+  const size_t numResults(1);\n+  const size_t numPoints(points.size());\n+  float totalDist = 0.0;\n+  pcCentre.pos = Eigen::Vector3f::Zero();\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    const Point &p = points[i];\n+    const float queryPt[3] = {p.pos(0), p.pos(1), p.pos(2)};\n+\n+    std::vector<size_t> ret_index(2);\n+    std::vector<float> out_dist_sq(2);\n+\n+    index.knnSearch(queryPt, 2, &ret_index[0], &out_dist_sq[0]);\n+#if DOMSET_USE_OPENMP\n+#pragma omp critical(distUpdate)\n+#endif\n+    {\n+      totalDist += std::sqrt(out_dist_sq[1]);\n+      pcCentre.pos += (p.pos / numPoints);\n+    }\n+  }\n+  // calculation the normalization scale\n+  const float avgDist = totalDist / numPoints;\n+  std::cerr << \"Total distance = \" << totalDist << std::endl;\n+  std::cerr << \"Avg distance = \" << avgDist << std::endl;\n+  normScale = 1.f / avgDist;\n+  std::cerr << \"Normalization Scale = \" << normScale << std::endl;\n+\n+// normalizing the distances on points\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    points[i].pos = (points[i].pos - pcCentre.pos) * normScale;\n+  }\n+\n+  // normalizing the camera center positions\n+  const size_t numViews(views.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numViews)\n+  {\n+    views[i].trans = (views[i].trans - pcCentre.pos) * normScale;\n+  }\n+}\n+\n+void Domset::deNormalizePointCloud()\n+{\n+  const size_t numPoints(points.size());\n+// denormalizing points\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    points[i].pos = (points[i].pos / normScale) + pcCentre.pos;\n+  }\n+\n+  const size_t numOldPoints(origPoints.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numOldPoints)\n+  {\n+    origPoints[i].pos = (origPoints[i].pos / normScale) + pcCentre.pos;\n+  }\n+\n+  // denormalizing camera centers\n+  const size_t numViews(views.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numViews)\n+  {\n+    views[i].trans = (views[i].trans / normScale) + pcCentre.pos;\n+  }\n+}\n+\n+void Domset::voxelGridFilter(const float &sizeX, const float &sizeY, const float &sizeZ)\n+{\n+  if (sizeX <= 0.0f || sizeY <= 0.0f || sizeZ <= 0.0f)\n+  {\n+    std::cerr << \"Invalid voxel grid dimensions error.\\n\";\n+    exit(0);\n+  }\n+\n+  Point minPt;\n+  Point maxPt;\n+  const size_t numP = points.size();\n+  // finding the min and max values for the 3 dimensions\n+  const float mi = std::numeric_limits<float>::min();\n+  const float ma = std::numeric_limits<float>::max();\n+  minPt.pos << ma, ma, ma;\n+  maxPt.pos << mi, mi, mi;\n+\n+  for (size_t p = 0; p < numP; p++)\n+  {\n+    const Point newSP = points[p];\n+    if (newSP.pos(0) < minPt.pos(0))\n+      minPt.pos(0) = newSP.pos(0);\n+    if (newSP.pos(1) < minPt.pos(1))\n+      minPt.pos(1) = newSP.pos(1);\n+    if (newSP.pos(2) < minPt.pos(2))\n+      minPt.pos(2) = newSP.pos(2);\n+    if (newSP.pos(0) > maxPt.pos(0))\n+      maxPt.pos(0) = newSP.pos(0);\n+    if (newSP.pos(1) > maxPt.pos(1))\n+      maxPt.pos(1) = newSP.pos(1);\n+    if (newSP.pos(2) > maxPt.pos(2))\n+      maxPt.pos(2) = newSP.pos(2);\n+  }\n+\n+  // finding the number of voxels reqired\n+  size_t numVoxelX = static_cast<size_t>(ceil(maxPt.pos(0) - minPt.pos(0)) / sizeX);\n+  size_t numVoxelY = static_cast<size_t>(ceil(maxPt.pos(1) - minPt.pos(1)) / sizeY);\n+  size_t numVoxelZ = static_cast<size_t>(ceil(maxPt.pos(2) - minPt.pos(2)) / sizeZ);\n+\n+  /* std::cout << \"Max = \" << maxPt.pos.transpose() << std::endl;",
        "path": "apps/SceneClustering/domset/domset.cc",
        "position": null,
        "original_position": 164,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "indeed, for that you just need to include Common/Common.h and use GET_LOG()",
        "created_at": "2019-06-28T08:07:04Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298492681",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298492681"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298492681"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298487633
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298494056",
        "pull_request_review_id": 255637142,
        "id": 298494056,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ5NDA1Ng==",
        "diff_hunk": "@@ -0,0 +1,315 @@\n+/*\n+ * SceneClustering.cpp\n+ *\n+ * Copyright (c) 2019 SEACAVE\n+ *\n+ * Author(s):\n+ *      Romain Janvier <romain.janvier@lepatriscope.com>\n+ *      cDc <cdc.seacave@gmail.com>\n+ *\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Additional Terms:\n+ *\n+ *      You are required to preserve legal notices and author attributions in\n+ *      that material or in the Appropriate Legal Notices displayed by works\n+ *      containing it.\n+ */\n+\n+\n+#include \"../../libs/MVS/Common.h\"\n+#include \"../../libs/MVS/Scene.h\"\n+#include \"domset/domset.h\"\n+#include <boost/program_options.hpp>\n+\n+using namespace MVS;\n+\n+\n+// D E F I N E S ///////////////////////////////////////////////////\n+\n+#define APPNAME _T(\"SceneClustering\")\n+\n+\n+// S T R U C T S ///////////////////////////////////////////////////\n+\n+namespace OPT {\n+String strInputFileName;\n+String strOutputDirectory;\n+float fVoxelSize;\n+unsigned nMinClusterSize;\n+unsigned nMaxClusterSize;\n+unsigned nClusterOverlap;\n+bool bDoSVM;\n+unsigned nArchiveType;\n+int nProcessPriority;\n+unsigned nMaxThreads;\n+String strConfigFileName;\n+boost::program_options::variables_map vm;\n+} // namespace OPT\n+\n+// initialize and parse the command line parameters\n+bool Initialize(size_t argc, LPCTSTR* argv)\n+{\n+\t// initialize log and console\n+\tOPEN_LOG();\n+\tOPEN_LOGCONSOLE();\n+\n+\t// group of options allowed only on command line\n+\tboost::program_options::options_description generic(\"Generic options\");\n+\tgeneric.add_options()\n+\t\t(\"help,h\", \"produce this help message\")\n+\t\t(\"working-folder,w\", boost::program_options::value<std::string>(&WORKING_FOLDER), \"working directory (default current directory)\")\n+\t\t(\"config-file,c\", boost::program_options::value<std::string>(&OPT::strConfigFileName)->default_value(APPNAME _T(\".cfg\")), \"file name containing program options\")\n+\t\t(\"archive-type\", boost::program_options::value<unsigned>(&OPT::nArchiveType)->default_value(2), \"project archive type: 0-text, 1-binary, 2-compressed binary\")\n+\t\t(\"process-priority\", boost::program_options::value<int>(&OPT::nProcessPriority)->default_value(-1), \"process priority (below normal by default)\")\n+\t\t(\"max-threads\", boost::program_options::value<unsigned>(&OPT::nMaxThreads)->default_value(0), \"maximum number of threads (0 for using all available cores)\")\n+\t\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t\t(\"verbosity,v\", boost::program_options::value<int>(&g_nVerbosityLevel)->default_value(\n+\t\t\t#if TD_VERBOSE == TD_VERBOSE_DEBUG\n+\t\t\t3\n+\t\t\t#else\n+\t\t\t2\n+\t\t\t#endif\n+\t\t\t), \"verbosity level\")\n+\t\t#endif\n+\t\t;\n+\n+\t// group of options allowed both on command line and in config file\n+\tboost::program_options::options_description config(\"Texture options\");\n+\tconfig.add_options()\n+\t\t(\"input-file,i\", boost::program_options::value<std::string>(&OPT::strInputFileName), \"Input filename containing camera poses and image list\")\n+\t\t(\"voxel-size,x\", boost::program_options::value<float>(&OPT::fVoxelSize)->default_value(5.f), \"Size of a cell in the voxel grid: level of simplification of the original point cloud\")\n+\t\t(\"min-cluster-size,m\", boost::program_options::value<unsigned>(&OPT::nMinClusterSize)->default_value(30), \"Min number of camera in a cluster\" )\n+\t\t(\"max-cluster-size,M\", boost::program_options::value<unsigned>(&OPT::nMaxClusterSize)->default_value(50), \"Max number of camera in a cluster\")\n+\t\t(\"cluster-overlap,o\", boost::program_options::value<unsigned>(&OPT::nClusterOverlap)->default_value(4), \"Number of views in overlap [NOT implemented yet]\" )\n+\t\t//(\"svm-classification,s\", boost::program_options::bool_switch(&OPT::bDoSVM), \"Do the SVM classification [NOT Implemented yet]\" )\n+\t\t;\n+\n+\tboost::program_options::options_description cmdline_options;\n+\tcmdline_options.add(generic).add(config);\n+\n+\tboost::program_options::options_description config_file_options;\n+\tconfig_file_options.add(config);\n+\n+\tboost::program_options::positional_options_description p;\n+\tp.add(\"input-file\", -1);\n+\n+\ttry {\n+\t\t// parse command line options\n+\t\tboost::program_options::store(boost::program_options::command_line_parser((int)argc, argv).options(cmdline_options).positional(p).run(), OPT::vm);\n+\t\tboost::program_options::notify(OPT::vm);\n+\t\tINIT_WORKING_FOLDER;\n+\t\t// parse configuration file\n+\t\tstd::ifstream ifs(MAKE_PATH_SAFE(OPT::strConfigFileName));\n+\t\tif (ifs) {\n+\t\t\tboost::program_options::store(parse_config_file(ifs, config_file_options), OPT::vm);\n+\t\t\tboost::program_options::notify(OPT::vm);\n+\t\t}\n+\t}\n+\tcatch (const std::exception& e) {\n+\t\tLOG(e.what());\n+\t\treturn false;\n+\t}\n+\n+\t// initialize the log file\n+\tOPEN_LOGFILE(MAKE_PATH(APPNAME _T(\"-\")+Util::getUniqueName(0)+_T(\".log\")).c_str());\n+\n+\t// print application details: version and command line\n+\tUtil::LogBuild();\n+\tLOG(_T(\"Command line:%s\"), Util::CommandLineToString(argc, argv).c_str());\n+\n+\t// validate input\n+\tUtil::ensureValidPath(OPT::strInputFileName);\n+\tUtil::ensureUnifySlash(OPT::strInputFileName);\n+\tif (OPT::vm.count(\"help\") || OPT::strInputFileName.IsEmpty()) {\n+\t\tboost::program_options::options_description visible(\"Available options\");\n+\t\tvisible.add(generic).add(config);\n+\t\tGET_LOG() << visible;\n+\t}\n+\n+\tif (OPT::strInputFileName.IsEmpty())\n+\t\treturn false;\n+\t\n+\t// initialize optional options\n+\tUtil::ensureValidPath(OPT::strOutputDirectory);\n+\tUtil::ensureUnifySlash(OPT::strOutputDirectory);\n+\tif (OPT::strOutputDirectory.IsEmpty())\n+\t\tOPT::strOutputDirectory = WORKING_FOLDER;\n+\n+\tif(OPT::nMaxClusterSize < OPT::nMinClusterSize)\n+\t{\n+\t\tLOG(\"max-cluster-size value must be greater than min-cluster-size value\");\n+\t\treturn false;\n+\t}\n+\t// initialize global options\n+\tProcess::setCurrentProcessPriority((Process::Priority)OPT::nProcessPriority);\n+\t#ifdef _USE_OPENMP\n+\tif (OPT::nMaxThreads != 0)\n+\t\tomp_set_num_threads(OPT::nMaxThreads);\n+\t#endif\n+\n+\t#ifdef _USE_BREAKPAD\n+\t// start memory dumper\n+\tMiniDumper::Create(APPNAME, WORKING_FOLDER);\n+\t#endif\n+\n+\tUtil::Init();\n+\treturn true;\n+}\n+\n+// finalize application instance\n+void Finalize()\n+{\n+\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t// print memory statistics\n+\tUtil::LogMemoryInfo();\n+\t#endif\n+\n+\tCLOSE_LOGFILE();\n+\tCLOSE_LOGCONSOLE();\n+\tCLOSE_LOG();\n+}\n+\n+int main(int argc, LPCTSTR* argv)\n+{\n+\t#ifdef _DEBUGINFO\n+\t// set _crtBreakAlloc index to stop in <dbgheap.c> at allocation\n+\t_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);// | _CRTDBG_CHECK_ALWAYS_DF);\n+\t#endif\n+\n+\tif (!Initialize(argc, argv))\n+\t\treturn EXIT_FAILURE;\n+\n+\tScene scene(OPT::nMaxThreads);\n+\t// load and texture the mesh\n+\tif (!scene.Load(MAKE_PATH_SAFE(OPT::strInputFileName)))\n+\t\treturn EXIT_FAILURE;\n+\t\n+\tif (scene.pointcloud.IsEmpty()) {\n+\t\tLOG(\"error: empty initial point-cloud\");\n+\t\treturn EXIT_FAILURE;\n+\t}\n+\n+\n+\tconst String baseFileName(MAKE_PATH_SAFE(Util::getFileFullName(OPT::strInputFileName)));\n+\n+\t{\n+\t// compute clustering\n+\tTD_TIMER_START();\n+\n+\t// set up data\n+\tstd::vector<nomoko::Camera> domset_cameras; // Camera is useless in domset...\n+\tstd::vector<nomoko::View> domset_views;\n+\tstd::vector<nomoko::Point> domset_points; // nomoko::Point is an Eigen::Vec3f...\n+\tstd::map<uint32_t, uint32_t> view_fwd_reindexing; // get continuous indexing\n+\tstd::map<uint32_t, uint32_t> view_bkwd_reindexing; // reverse continuous indexing\n+\n+\tuint32_t curr_ID = 0;\n+\tFOREACH(IdxC, scene.images)\n+\t{\n+\t\tconst auto & curr_image = scene.images[IdxC];\n+\t\tif(curr_image.IsValid())\n+\t\t{\n+\t\t\tview_fwd_reindexing[IdxC] = curr_ID;\n+\t\t\tview_bkwd_reindexing[curr_ID] = IdxC; \n+\t\t\tnomoko::View v;\n+\t\t\tv.rot = Eigen::Matrix<double,3,3,1>(curr_image.camera.R).cast<float>();\n+\t\t\tv.trans = Eigen::Vector3d(curr_image.camera.C).cast<float>();\n+\t\t\tdomset_views.push_back(v);\n+\t\t\t++curr_ID;\n+\t\t}\n+\t}\n+\n+\tFOREACH(IdxP, scene.pointcloud.points)\n+\t{\n+\t\tnomoko::Point p;\n+\t\tp.pos = Eigen::Vector3f(scene.pointcloud.points[IdxP]);\n+\t\tFOREACH(IdxV, scene.pointcloud.pointViews[IdxP])\n+\t\t{\n+\t\t\tauto idx = view_fwd_reindexing[scene.pointcloud.pointViews[IdxP][IdxV]];\n+\t\t\tp.viewList.push_back(idx);\n+\t\t}\n+\t\tdomset_points.push_back(p);\n+\t}\n+\n+\tnomoko::Domset domset_instance(domset_points, domset_views, domset_cameras, OPT::fVoxelSize);\n+\n+\tdomset_instance.clusterViews(OPT::nMinClusterSize, OPT::nMaxClusterSize, OPT::nClusterOverlap);\n+\n+\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\tif (VERBOSITY_LEVEL > 2)\n+\t{\n+\t\tdomset_instance.printClusters();\n+\t\tdomset_instance.exportToPLY(baseFileName + _T(\"_clusters.ply\"));\n+\t}\n+\t#endif\n+\n+\tconst auto domset_clusters = domset_instance.getClusters();\n+\tVERBOSE(\"Clustering completed : %u clusters (%s)\", domset_clusters.size(), TD_TIMER_GET_FMT().c_str());\n+\n+\tfor (int i = 0; i < domset_clusters.size(); ++i) \n+\t{\n+\t\tconst auto & cluster = domset_clusters[i];\n+\n+\t\tScene scene_cluster;\n+\t\tstd::map<uint32_t, uint32_t> map_global_to_local;\n+\t\tstd::vector<uint32_t> global_IDs;\n+\t\tscene_cluster.platforms = scene.platforms; // We copy all the plateforms for now, it's easier and harmless\n+\n+\t\tuint32_t local_ID = 0;\n+\t\tfor (const auto inCluster_ID : cluster)\n+\t\t{\n+\t\t\tconst size_t global_ID = view_bkwd_reindexing[inCluster_ID];\n+\t\t\tauto & image = scene.images[global_ID];\n+\t\t\timage.ID = global_ID; \n+\t\t\tscene_cluster.images.Insert(scene.images[global_ID]);\n+\t\t\tmap_global_to_local[global_ID] = local_ID;\n+\t\t\tglobal_IDs.push_back(global_ID);\n+\t\t\t++local_ID;\n+\t\t}\n+\n+\t\tFOREACH(IdxP, scene.pointcloud.points)\n+\t\t{\n+\t\t\tconst auto & curr_viewArr = scene.pointcloud.pointViews[IdxP];\n+\t\t\tPointCloud::ViewArr new_viewArr;\n+\t\t\t\n+\t\t\tfor(const auto & idxVG: global_IDs)\n+\t\t\t{\n+\t\t\t\tif(curr_viewArr.FindFirst(idxVG) != PointCloud::ViewArr::NO_INDEX)\n+\t\t\t\t\tnew_viewArr.InsertSort(map_global_to_local.at(idxVG));\n+\t\t\t}\n+\n+\t\t\tif(new_viewArr.GetSize() > 1)\n+\t\t\t{\n+\t\t\t\tscene_cluster.pointcloud.points.Insert(scene.pointcloud.points[IdxP]);\n+\t\t\t\tscene_cluster.pointcloud.pointViews.Insert(new_viewArr);\n+\t\t\t\tif(!scene.pointcloud.colors.IsEmpty())\n+\t\t\t\t\tscene_cluster.pointcloud.colors.Insert(scene.pointcloud.colors[IdxP]);\n+\t\t\t\tif(!scene.pointcloud.pointWeights.IsEmpty())\n+\t\t\t\t\tscene_cluster.pointcloud.pointWeights.Insert(scene.pointcloud.pointWeights[IdxP]);\n+\t\t\t}\n+\t\t}\n+\t\tLOG(String::FormatString(\"Saving cluster #%i\", i));\n+\t\tscene_cluster.Save(baseFileName + String::FormatString(\"_cluster_%i.mvs\", i), (ARCHIVE_TYPE)OPT::nArchiveType);",
        "path": "apps/SceneClustering/SceneClustering.cpp",
        "position": null,
        "original_position": 306,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "it is fine",
        "created_at": "2019-06-28T08:11:44Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298494056",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298494056"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298494056"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298488195
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298497808",
        "pull_request_review_id": 255641832,
        "id": 298497808,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ5NzgwOA==",
        "diff_hunk": "@@ -0,0 +1,315 @@\n+/*\n+ * SceneClustering.cpp\n+ *\n+ * Copyright (c) 2019 SEACAVE\n+ *\n+ * Author(s):\n+ *      Romain Janvier <romain.janvier@lepatriscope.com>\n+ *      cDc <cdc.seacave@gmail.com>\n+ *\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Additional Terms:\n+ *\n+ *      You are required to preserve legal notices and author attributions in\n+ *      that material or in the Appropriate Legal Notices displayed by works\n+ *      containing it.\n+ */\n+\n+\n+#include \"../../libs/MVS/Common.h\"\n+#include \"../../libs/MVS/Scene.h\"\n+#include \"domset/domset.h\"\n+#include <boost/program_options.hpp>\n+\n+using namespace MVS;\n+\n+\n+// D E F I N E S ///////////////////////////////////////////////////\n+\n+#define APPNAME _T(\"SceneClustering\")\n+\n+\n+// S T R U C T S ///////////////////////////////////////////////////\n+\n+namespace OPT {\n+String strInputFileName;\n+String strOutputDirectory;\n+float fVoxelSize;\n+unsigned nMinClusterSize;\n+unsigned nMaxClusterSize;\n+unsigned nClusterOverlap;\n+bool bDoSVM;\n+unsigned nArchiveType;\n+int nProcessPriority;\n+unsigned nMaxThreads;\n+String strConfigFileName;\n+boost::program_options::variables_map vm;\n+} // namespace OPT\n+\n+// initialize and parse the command line parameters\n+bool Initialize(size_t argc, LPCTSTR* argv)\n+{\n+\t// initialize log and console\n+\tOPEN_LOG();\n+\tOPEN_LOGCONSOLE();\n+\n+\t// group of options allowed only on command line\n+\tboost::program_options::options_description generic(\"Generic options\");\n+\tgeneric.add_options()\n+\t\t(\"help,h\", \"produce this help message\")\n+\t\t(\"working-folder,w\", boost::program_options::value<std::string>(&WORKING_FOLDER), \"working directory (default current directory)\")\n+\t\t(\"config-file,c\", boost::program_options::value<std::string>(&OPT::strConfigFileName)->default_value(APPNAME _T(\".cfg\")), \"file name containing program options\")\n+\t\t(\"archive-type\", boost::program_options::value<unsigned>(&OPT::nArchiveType)->default_value(2), \"project archive type: 0-text, 1-binary, 2-compressed binary\")\n+\t\t(\"process-priority\", boost::program_options::value<int>(&OPT::nProcessPriority)->default_value(-1), \"process priority (below normal by default)\")\n+\t\t(\"max-threads\", boost::program_options::value<unsigned>(&OPT::nMaxThreads)->default_value(0), \"maximum number of threads (0 for using all available cores)\")\n+\t\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t\t(\"verbosity,v\", boost::program_options::value<int>(&g_nVerbosityLevel)->default_value(\n+\t\t\t#if TD_VERBOSE == TD_VERBOSE_DEBUG\n+\t\t\t3\n+\t\t\t#else\n+\t\t\t2\n+\t\t\t#endif\n+\t\t\t), \"verbosity level\")\n+\t\t#endif\n+\t\t;\n+\n+\t// group of options allowed both on command line and in config file\n+\tboost::program_options::options_description config(\"Texture options\");\n+\tconfig.add_options()\n+\t\t(\"input-file,i\", boost::program_options::value<std::string>(&OPT::strInputFileName), \"Input filename containing camera poses and image list\")\n+\t\t(\"voxel-size,x\", boost::program_options::value<float>(&OPT::fVoxelSize)->default_value(5.f), \"Size of a cell in the voxel grid: level of simplification of the original point cloud\")\n+\t\t(\"min-cluster-size,m\", boost::program_options::value<unsigned>(&OPT::nMinClusterSize)->default_value(30), \"Min number of camera in a cluster\" )\n+\t\t(\"max-cluster-size,M\", boost::program_options::value<unsigned>(&OPT::nMaxClusterSize)->default_value(50), \"Max number of camera in a cluster\")\n+\t\t(\"cluster-overlap,o\", boost::program_options::value<unsigned>(&OPT::nClusterOverlap)->default_value(4), \"Number of views in overlap [NOT implemented yet]\" )\n+\t\t//(\"svm-classification,s\", boost::program_options::bool_switch(&OPT::bDoSVM), \"Do the SVM classification [NOT Implemented yet]\" )\n+\t\t;\n+\n+\tboost::program_options::options_description cmdline_options;\n+\tcmdline_options.add(generic).add(config);\n+\n+\tboost::program_options::options_description config_file_options;\n+\tconfig_file_options.add(config);\n+\n+\tboost::program_options::positional_options_description p;\n+\tp.add(\"input-file\", -1);\n+\n+\ttry {\n+\t\t// parse command line options\n+\t\tboost::program_options::store(boost::program_options::command_line_parser((int)argc, argv).options(cmdline_options).positional(p).run(), OPT::vm);\n+\t\tboost::program_options::notify(OPT::vm);\n+\t\tINIT_WORKING_FOLDER;\n+\t\t// parse configuration file\n+\t\tstd::ifstream ifs(MAKE_PATH_SAFE(OPT::strConfigFileName));\n+\t\tif (ifs) {\n+\t\t\tboost::program_options::store(parse_config_file(ifs, config_file_options), OPT::vm);\n+\t\t\tboost::program_options::notify(OPT::vm);\n+\t\t}\n+\t}\n+\tcatch (const std::exception& e) {\n+\t\tLOG(e.what());\n+\t\treturn false;\n+\t}\n+\n+\t// initialize the log file\n+\tOPEN_LOGFILE(MAKE_PATH(APPNAME _T(\"-\")+Util::getUniqueName(0)+_T(\".log\")).c_str());\n+\n+\t// print application details: version and command line\n+\tUtil::LogBuild();\n+\tLOG(_T(\"Command line:%s\"), Util::CommandLineToString(argc, argv).c_str());\n+\n+\t// validate input\n+\tUtil::ensureValidPath(OPT::strInputFileName);\n+\tUtil::ensureUnifySlash(OPT::strInputFileName);\n+\tif (OPT::vm.count(\"help\") || OPT::strInputFileName.IsEmpty()) {\n+\t\tboost::program_options::options_description visible(\"Available options\");\n+\t\tvisible.add(generic).add(config);\n+\t\tGET_LOG() << visible;\n+\t}\n+\n+\tif (OPT::strInputFileName.IsEmpty())\n+\t\treturn false;\n+\t\n+\t// initialize optional options\n+\tUtil::ensureValidPath(OPT::strOutputDirectory);\n+\tUtil::ensureUnifySlash(OPT::strOutputDirectory);\n+\tif (OPT::strOutputDirectory.IsEmpty())\n+\t\tOPT::strOutputDirectory = WORKING_FOLDER;\n+\n+\tif(OPT::nMaxClusterSize < OPT::nMinClusterSize)\n+\t{\n+\t\tLOG(\"max-cluster-size value must be greater than min-cluster-size value\");\n+\t\treturn false;\n+\t}\n+\t// initialize global options\n+\tProcess::setCurrentProcessPriority((Process::Priority)OPT::nProcessPriority);\n+\t#ifdef _USE_OPENMP\n+\tif (OPT::nMaxThreads != 0)\n+\t\tomp_set_num_threads(OPT::nMaxThreads);\n+\t#endif\n+\n+\t#ifdef _USE_BREAKPAD\n+\t// start memory dumper\n+\tMiniDumper::Create(APPNAME, WORKING_FOLDER);\n+\t#endif\n+\n+\tUtil::Init();\n+\treturn true;\n+}\n+\n+// finalize application instance\n+void Finalize()\n+{\n+\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t// print memory statistics\n+\tUtil::LogMemoryInfo();\n+\t#endif\n+\n+\tCLOSE_LOGFILE();\n+\tCLOSE_LOGCONSOLE();\n+\tCLOSE_LOG();\n+}\n+\n+int main(int argc, LPCTSTR* argv)\n+{\n+\t#ifdef _DEBUGINFO\n+\t// set _crtBreakAlloc index to stop in <dbgheap.c> at allocation\n+\t_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);// | _CRTDBG_CHECK_ALWAYS_DF);\n+\t#endif\n+\n+\tif (!Initialize(argc, argv))\n+\t\treturn EXIT_FAILURE;\n+\n+\tScene scene(OPT::nMaxThreads);\n+\t// load and texture the mesh\n+\tif (!scene.Load(MAKE_PATH_SAFE(OPT::strInputFileName)))\n+\t\treturn EXIT_FAILURE;\n+\t\n+\tif (scene.pointcloud.IsEmpty()) {\n+\t\tLOG(\"error: empty initial point-cloud\");\n+\t\treturn EXIT_FAILURE;\n+\t}\n+\n+\n+\tconst String baseFileName(MAKE_PATH_SAFE(Util::getFileFullName(OPT::strInputFileName)));\n+\n+\t{\n+\t// compute clustering\n+\tTD_TIMER_START();\n+\n+\t// set up data\n+\tstd::vector<nomoko::Camera> domset_cameras; // Camera is useless in domset...\n+\tstd::vector<nomoko::View> domset_views;\n+\tstd::vector<nomoko::Point> domset_points; // nomoko::Point is an Eigen::Vec3f...\n+\tstd::map<uint32_t, uint32_t> view_fwd_reindexing; // get continuous indexing\n+\tstd::map<uint32_t, uint32_t> view_bkwd_reindexing; // reverse continuous indexing\n+\n+\tuint32_t curr_ID = 0;\n+\tFOREACH(IdxC, scene.images)\n+\t{\n+\t\tconst auto & curr_image = scene.images[IdxC];\n+\t\tif(curr_image.IsValid())\n+\t\t{\n+\t\t\tview_fwd_reindexing[IdxC] = curr_ID;\n+\t\t\tview_bkwd_reindexing[curr_ID] = IdxC; \n+\t\t\tnomoko::View v;\n+\t\t\tv.rot = Eigen::Matrix<double,3,3,1>(curr_image.camera.R).cast<float>();",
        "path": "apps/SceneClustering/SceneClustering.cpp",
        "position": null,
        "original_position": 229,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd use REAL instead of double",
        "created_at": "2019-06-28T08:22:09Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298497808",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298497808"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298497808"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298498994",
        "pull_request_review_id": 255641832,
        "id": 298498994,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ5ODk5NA==",
        "diff_hunk": "@@ -0,0 +1,315 @@\n+/*\n+ * SceneClustering.cpp\n+ *\n+ * Copyright (c) 2019 SEACAVE\n+ *\n+ * Author(s):\n+ *      Romain Janvier <romain.janvier@lepatriscope.com>\n+ *      cDc <cdc.seacave@gmail.com>\n+ *\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Additional Terms:\n+ *\n+ *      You are required to preserve legal notices and author attributions in\n+ *      that material or in the Appropriate Legal Notices displayed by works\n+ *      containing it.\n+ */\n+\n+\n+#include \"../../libs/MVS/Common.h\"\n+#include \"../../libs/MVS/Scene.h\"\n+#include \"domset/domset.h\"\n+#include <boost/program_options.hpp>\n+\n+using namespace MVS;\n+\n+\n+// D E F I N E S ///////////////////////////////////////////////////\n+\n+#define APPNAME _T(\"SceneClustering\")\n+\n+\n+// S T R U C T S ///////////////////////////////////////////////////\n+\n+namespace OPT {\n+String strInputFileName;\n+String strOutputDirectory;\n+float fVoxelSize;\n+unsigned nMinClusterSize;\n+unsigned nMaxClusterSize;\n+unsigned nClusterOverlap;\n+bool bDoSVM;\n+unsigned nArchiveType;\n+int nProcessPriority;\n+unsigned nMaxThreads;\n+String strConfigFileName;\n+boost::program_options::variables_map vm;\n+} // namespace OPT\n+\n+// initialize and parse the command line parameters\n+bool Initialize(size_t argc, LPCTSTR* argv)\n+{\n+\t// initialize log and console\n+\tOPEN_LOG();\n+\tOPEN_LOGCONSOLE();\n+\n+\t// group of options allowed only on command line\n+\tboost::program_options::options_description generic(\"Generic options\");\n+\tgeneric.add_options()\n+\t\t(\"help,h\", \"produce this help message\")\n+\t\t(\"working-folder,w\", boost::program_options::value<std::string>(&WORKING_FOLDER), \"working directory (default current directory)\")\n+\t\t(\"config-file,c\", boost::program_options::value<std::string>(&OPT::strConfigFileName)->default_value(APPNAME _T(\".cfg\")), \"file name containing program options\")\n+\t\t(\"archive-type\", boost::program_options::value<unsigned>(&OPT::nArchiveType)->default_value(2), \"project archive type: 0-text, 1-binary, 2-compressed binary\")\n+\t\t(\"process-priority\", boost::program_options::value<int>(&OPT::nProcessPriority)->default_value(-1), \"process priority (below normal by default)\")\n+\t\t(\"max-threads\", boost::program_options::value<unsigned>(&OPT::nMaxThreads)->default_value(0), \"maximum number of threads (0 for using all available cores)\")\n+\t\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t\t(\"verbosity,v\", boost::program_options::value<int>(&g_nVerbosityLevel)->default_value(\n+\t\t\t#if TD_VERBOSE == TD_VERBOSE_DEBUG\n+\t\t\t3\n+\t\t\t#else\n+\t\t\t2\n+\t\t\t#endif\n+\t\t\t), \"verbosity level\")\n+\t\t#endif\n+\t\t;\n+\n+\t// group of options allowed both on command line and in config file\n+\tboost::program_options::options_description config(\"Texture options\");\n+\tconfig.add_options()\n+\t\t(\"input-file,i\", boost::program_options::value<std::string>(&OPT::strInputFileName), \"Input filename containing camera poses and image list\")\n+\t\t(\"voxel-size,x\", boost::program_options::value<float>(&OPT::fVoxelSize)->default_value(5.f), \"Size of a cell in the voxel grid: level of simplification of the original point cloud\")\n+\t\t(\"min-cluster-size,m\", boost::program_options::value<unsigned>(&OPT::nMinClusterSize)->default_value(30), \"Min number of camera in a cluster\" )\n+\t\t(\"max-cluster-size,M\", boost::program_options::value<unsigned>(&OPT::nMaxClusterSize)->default_value(50), \"Max number of camera in a cluster\")\n+\t\t(\"cluster-overlap,o\", boost::program_options::value<unsigned>(&OPT::nClusterOverlap)->default_value(4), \"Number of views in overlap [NOT implemented yet]\" )",
        "path": "apps/SceneClustering/SceneClustering.cpp",
        "position": null,
        "original_position": 97,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'd rather use a percentage here",
        "created_at": "2019-06-28T08:25:20Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298498994",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298498994"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298498994"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298499892",
        "pull_request_review_id": 255641832,
        "id": 298499892,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODQ5OTg5Mg==",
        "diff_hunk": "@@ -0,0 +1,2039 @@\n+/***********************************************************************",
        "path": "apps/SceneClustering/domset/nanoflann.hpp",
        "position": null,
        "original_position": 1,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "however I would definitely place this file in Math lib, as this can easily be used in many other places",
        "created_at": "2019-06-28T08:27:44Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298499892",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298499892"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298499892"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298588047",
        "pull_request_review_id": 255759869,
        "id": 298588047,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU4ODA0Nw==",
        "diff_hunk": "@@ -0,0 +1,13 @@\n+# CHANGES",
        "path": "apps/SceneClustering/domset/CHANGES.md",
        "position": 1,
        "original_position": 1,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "fixed in 382bc4a16a9a149f37ad1d5c7e8718fb881ec759",
        "created_at": "2019-06-28T13:12:35Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298588047",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298588047"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298588047"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298486177
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298588362",
        "pull_request_review_id": 255760302,
        "id": 298588362,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU4ODM2Mg==",
        "diff_hunk": "@@ -0,0 +1,791 @@\n+// Copyright (c) 2016 nomoko AG, Srivathsan Murali<srivathsan@nomoko.camera>\n+\n+// This Source Code Form is subject to the terms of the Mozilla Public\n+// License, v. 2.0. If a copy of the MPL was not distributed with this\n+// file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+\n+#include \"domset.h\"\n+\n+#include <random>\n+\n+#if DOMSET_USE_OPENMP\n+#include <omp.h>\n+#endif\n+\n+#if DOMSET_VISUAL_STUDIO\n+#define for_parallel(i, nIters) for (int i = 0; i < nIters; i++)\n+#else\n+#define for_parallel(i, nIters) for (size_t i = 0; i < nIters; i++)\n+#endif\n+\n+namespace nomoko\n+{\n+void Domset::computeInformation()\n+{\n+  normalizePointCloud();\n+  voxelGridFilter(kVoxelSize, kVoxelSize, kVoxelSize);\n+  getAllDistances();\n+}\n+\n+void Domset::normalizePointCloud()\n+{\n+  // construct a kd-tree index:\n+  typedef KDTreeSingleIndexAdaptor<\n+      L2_Simple_Adaptor<float, Domset>,\n+      Domset,\n+      3 /* dim */>\n+      my_kd_tree_t;\n+\n+  my_kd_tree_t index(3, *this, KDTreeSingleIndexAdaptorParams(10));\n+  index.buildIndex();\n+\n+  const size_t numResults(1);\n+  const size_t numPoints(points.size());\n+  float totalDist = 0.0;\n+  pcCentre.pos = Eigen::Vector3f::Zero();\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    const Point &p = points[i];\n+    const float queryPt[3] = {p.pos(0), p.pos(1), p.pos(2)};\n+\n+    std::vector<size_t> ret_index(2);\n+    std::vector<float> out_dist_sq(2);\n+\n+    index.knnSearch(queryPt, 2, &ret_index[0], &out_dist_sq[0]);\n+#if DOMSET_USE_OPENMP\n+#pragma omp critical(distUpdate)\n+#endif\n+    {\n+      totalDist += std::sqrt(out_dist_sq[1]);\n+      pcCentre.pos += (p.pos / numPoints);\n+    }\n+  }\n+  // calculation the normalization scale\n+  const float avgDist = totalDist / numPoints;\n+  std::cerr << \"Total distance = \" << totalDist << std::endl;\n+  std::cerr << \"Avg distance = \" << avgDist << std::endl;\n+  normScale = 1.f / avgDist;\n+  std::cerr << \"Normalization Scale = \" << normScale << std::endl;\n+\n+// normalizing the distances on points\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    points[i].pos = (points[i].pos - pcCentre.pos) * normScale;\n+  }\n+\n+  // normalizing the camera center positions\n+  const size_t numViews(views.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numViews)\n+  {\n+    views[i].trans = (views[i].trans - pcCentre.pos) * normScale;\n+  }\n+}\n+\n+void Domset::deNormalizePointCloud()\n+{\n+  const size_t numPoints(points.size());\n+// denormalizing points\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numPoints)\n+  {\n+    points[i].pos = (points[i].pos / normScale) + pcCentre.pos;\n+  }\n+\n+  const size_t numOldPoints(origPoints.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numOldPoints)\n+  {\n+    origPoints[i].pos = (origPoints[i].pos / normScale) + pcCentre.pos;\n+  }\n+\n+  // denormalizing camera centers\n+  const size_t numViews(views.size());\n+#if DOMSET_USE_OPENMP\n+#pragma omp parallel for\n+#endif\n+  for_parallel(i, numViews)\n+  {\n+    views[i].trans = (views[i].trans / normScale) + pcCentre.pos;\n+  }\n+}\n+\n+void Domset::voxelGridFilter(const float &sizeX, const float &sizeY, const float &sizeZ)\n+{\n+  if (sizeX <= 0.0f || sizeY <= 0.0f || sizeZ <= 0.0f)\n+  {\n+    std::cerr << \"Invalid voxel grid dimensions error.\\n\";\n+    exit(0);\n+  }\n+\n+  Point minPt;\n+  Point maxPt;\n+  const size_t numP = points.size();\n+  // finding the min and max values for the 3 dimensions\n+  const float mi = std::numeric_limits<float>::min();\n+  const float ma = std::numeric_limits<float>::max();\n+  minPt.pos << ma, ma, ma;\n+  maxPt.pos << mi, mi, mi;\n+\n+  for (size_t p = 0; p < numP; p++)\n+  {\n+    const Point newSP = points[p];\n+    if (newSP.pos(0) < minPt.pos(0))\n+      minPt.pos(0) = newSP.pos(0);\n+    if (newSP.pos(1) < minPt.pos(1))\n+      minPt.pos(1) = newSP.pos(1);\n+    if (newSP.pos(2) < minPt.pos(2))\n+      minPt.pos(2) = newSP.pos(2);\n+    if (newSP.pos(0) > maxPt.pos(0))\n+      maxPt.pos(0) = newSP.pos(0);\n+    if (newSP.pos(1) > maxPt.pos(1))\n+      maxPt.pos(1) = newSP.pos(1);\n+    if (newSP.pos(2) > maxPt.pos(2))\n+      maxPt.pos(2) = newSP.pos(2);\n+  }\n+\n+  // finding the number of voxels reqired\n+  size_t numVoxelX = static_cast<size_t>(ceil(maxPt.pos(0) - minPt.pos(0)) / sizeX);\n+  size_t numVoxelY = static_cast<size_t>(ceil(maxPt.pos(1) - minPt.pos(1)) / sizeY);\n+  size_t numVoxelZ = static_cast<size_t>(ceil(maxPt.pos(2) - minPt.pos(2)) / sizeZ);\n+\n+  /* std::cout << \"Max = \" << maxPt.pos.transpose() << std::endl;",
        "path": "apps/SceneClustering/domset/domset.cc",
        "position": null,
        "original_position": 164,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "thanks! fixed in 6e431611556137bcec6e3ecdb2f12c2a29b24fd8",
        "created_at": "2019-06-28T13:13:32Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298588362",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298588362"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298588362"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298487633
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298589108",
        "pull_request_review_id": 255761306,
        "id": 298589108,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU4OTEwOA==",
        "diff_hunk": "@@ -0,0 +1,315 @@\n+/*\n+ * SceneClustering.cpp\n+ *\n+ * Copyright (c) 2019 SEACAVE\n+ *\n+ * Author(s):\n+ *      Romain Janvier <romain.janvier@lepatriscope.com>\n+ *      cDc <cdc.seacave@gmail.com>\n+ *\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Additional Terms:\n+ *\n+ *      You are required to preserve legal notices and author attributions in\n+ *      that material or in the Appropriate Legal Notices displayed by works\n+ *      containing it.\n+ */\n+\n+\n+#include \"../../libs/MVS/Common.h\"\n+#include \"../../libs/MVS/Scene.h\"\n+#include \"domset/domset.h\"\n+#include <boost/program_options.hpp>\n+\n+using namespace MVS;\n+\n+\n+// D E F I N E S ///////////////////////////////////////////////////\n+\n+#define APPNAME _T(\"SceneClustering\")\n+\n+\n+// S T R U C T S ///////////////////////////////////////////////////\n+\n+namespace OPT {\n+String strInputFileName;\n+String strOutputDirectory;\n+float fVoxelSize;\n+unsigned nMinClusterSize;\n+unsigned nMaxClusterSize;\n+unsigned nClusterOverlap;\n+bool bDoSVM;\n+unsigned nArchiveType;\n+int nProcessPriority;\n+unsigned nMaxThreads;\n+String strConfigFileName;\n+boost::program_options::variables_map vm;\n+} // namespace OPT\n+\n+// initialize and parse the command line parameters\n+bool Initialize(size_t argc, LPCTSTR* argv)\n+{\n+\t// initialize log and console\n+\tOPEN_LOG();\n+\tOPEN_LOGCONSOLE();\n+\n+\t// group of options allowed only on command line\n+\tboost::program_options::options_description generic(\"Generic options\");\n+\tgeneric.add_options()\n+\t\t(\"help,h\", \"produce this help message\")\n+\t\t(\"working-folder,w\", boost::program_options::value<std::string>(&WORKING_FOLDER), \"working directory (default current directory)\")\n+\t\t(\"config-file,c\", boost::program_options::value<std::string>(&OPT::strConfigFileName)->default_value(APPNAME _T(\".cfg\")), \"file name containing program options\")\n+\t\t(\"archive-type\", boost::program_options::value<unsigned>(&OPT::nArchiveType)->default_value(2), \"project archive type: 0-text, 1-binary, 2-compressed binary\")\n+\t\t(\"process-priority\", boost::program_options::value<int>(&OPT::nProcessPriority)->default_value(-1), \"process priority (below normal by default)\")\n+\t\t(\"max-threads\", boost::program_options::value<unsigned>(&OPT::nMaxThreads)->default_value(0), \"maximum number of threads (0 for using all available cores)\")\n+\t\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t\t(\"verbosity,v\", boost::program_options::value<int>(&g_nVerbosityLevel)->default_value(\n+\t\t\t#if TD_VERBOSE == TD_VERBOSE_DEBUG\n+\t\t\t3\n+\t\t\t#else\n+\t\t\t2\n+\t\t\t#endif\n+\t\t\t), \"verbosity level\")\n+\t\t#endif\n+\t\t;\n+\n+\t// group of options allowed both on command line and in config file\n+\tboost::program_options::options_description config(\"Texture options\");\n+\tconfig.add_options()\n+\t\t(\"input-file,i\", boost::program_options::value<std::string>(&OPT::strInputFileName), \"Input filename containing camera poses and image list\")\n+\t\t(\"voxel-size,x\", boost::program_options::value<float>(&OPT::fVoxelSize)->default_value(5.f), \"Size of a cell in the voxel grid: level of simplification of the original point cloud\")\n+\t\t(\"min-cluster-size,m\", boost::program_options::value<unsigned>(&OPT::nMinClusterSize)->default_value(30), \"Min number of camera in a cluster\" )\n+\t\t(\"max-cluster-size,M\", boost::program_options::value<unsigned>(&OPT::nMaxClusterSize)->default_value(50), \"Max number of camera in a cluster\")\n+\t\t(\"cluster-overlap,o\", boost::program_options::value<unsigned>(&OPT::nClusterOverlap)->default_value(4), \"Number of views in overlap [NOT implemented yet]\" )\n+\t\t//(\"svm-classification,s\", boost::program_options::bool_switch(&OPT::bDoSVM), \"Do the SVM classification [NOT Implemented yet]\" )\n+\t\t;\n+\n+\tboost::program_options::options_description cmdline_options;\n+\tcmdline_options.add(generic).add(config);\n+\n+\tboost::program_options::options_description config_file_options;\n+\tconfig_file_options.add(config);\n+\n+\tboost::program_options::positional_options_description p;\n+\tp.add(\"input-file\", -1);\n+\n+\ttry {\n+\t\t// parse command line options\n+\t\tboost::program_options::store(boost::program_options::command_line_parser((int)argc, argv).options(cmdline_options).positional(p).run(), OPT::vm);\n+\t\tboost::program_options::notify(OPT::vm);\n+\t\tINIT_WORKING_FOLDER;\n+\t\t// parse configuration file\n+\t\tstd::ifstream ifs(MAKE_PATH_SAFE(OPT::strConfigFileName));\n+\t\tif (ifs) {\n+\t\t\tboost::program_options::store(parse_config_file(ifs, config_file_options), OPT::vm);\n+\t\t\tboost::program_options::notify(OPT::vm);\n+\t\t}\n+\t}\n+\tcatch (const std::exception& e) {\n+\t\tLOG(e.what());\n+\t\treturn false;\n+\t}\n+\n+\t// initialize the log file\n+\tOPEN_LOGFILE(MAKE_PATH(APPNAME _T(\"-\")+Util::getUniqueName(0)+_T(\".log\")).c_str());\n+\n+\t// print application details: version and command line\n+\tUtil::LogBuild();\n+\tLOG(_T(\"Command line:%s\"), Util::CommandLineToString(argc, argv).c_str());\n+\n+\t// validate input\n+\tUtil::ensureValidPath(OPT::strInputFileName);\n+\tUtil::ensureUnifySlash(OPT::strInputFileName);\n+\tif (OPT::vm.count(\"help\") || OPT::strInputFileName.IsEmpty()) {\n+\t\tboost::program_options::options_description visible(\"Available options\");\n+\t\tvisible.add(generic).add(config);\n+\t\tGET_LOG() << visible;\n+\t}\n+\n+\tif (OPT::strInputFileName.IsEmpty())\n+\t\treturn false;\n+\t\n+\t// initialize optional options\n+\tUtil::ensureValidPath(OPT::strOutputDirectory);\n+\tUtil::ensureUnifySlash(OPT::strOutputDirectory);\n+\tif (OPT::strOutputDirectory.IsEmpty())\n+\t\tOPT::strOutputDirectory = WORKING_FOLDER;\n+\n+\tif(OPT::nMaxClusterSize < OPT::nMinClusterSize)\n+\t{\n+\t\tLOG(\"max-cluster-size value must be greater than min-cluster-size value\");\n+\t\treturn false;\n+\t}\n+\t// initialize global options\n+\tProcess::setCurrentProcessPriority((Process::Priority)OPT::nProcessPriority);\n+\t#ifdef _USE_OPENMP\n+\tif (OPT::nMaxThreads != 0)\n+\t\tomp_set_num_threads(OPT::nMaxThreads);\n+\t#endif\n+\n+\t#ifdef _USE_BREAKPAD\n+\t// start memory dumper\n+\tMiniDumper::Create(APPNAME, WORKING_FOLDER);\n+\t#endif\n+\n+\tUtil::Init();\n+\treturn true;\n+}\n+\n+// finalize application instance\n+void Finalize()\n+{\n+\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t// print memory statistics\n+\tUtil::LogMemoryInfo();\n+\t#endif\n+\n+\tCLOSE_LOGFILE();\n+\tCLOSE_LOGCONSOLE();\n+\tCLOSE_LOG();\n+}\n+\n+int main(int argc, LPCTSTR* argv)\n+{\n+\t#ifdef _DEBUGINFO\n+\t// set _crtBreakAlloc index to stop in <dbgheap.c> at allocation\n+\t_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);// | _CRTDBG_CHECK_ALWAYS_DF);\n+\t#endif\n+\n+\tif (!Initialize(argc, argv))\n+\t\treturn EXIT_FAILURE;\n+\n+\tScene scene(OPT::nMaxThreads);\n+\t// load and texture the mesh\n+\tif (!scene.Load(MAKE_PATH_SAFE(OPT::strInputFileName)))\n+\t\treturn EXIT_FAILURE;\n+\t\n+\tif (scene.pointcloud.IsEmpty()) {\n+\t\tLOG(\"error: empty initial point-cloud\");\n+\t\treturn EXIT_FAILURE;\n+\t}\n+\n+\n+\tconst String baseFileName(MAKE_PATH_SAFE(Util::getFileFullName(OPT::strInputFileName)));\n+\n+\t{\n+\t// compute clustering\n+\tTD_TIMER_START();\n+\n+\t// set up data\n+\tstd::vector<nomoko::Camera> domset_cameras; // Camera is useless in domset...\n+\tstd::vector<nomoko::View> domset_views;\n+\tstd::vector<nomoko::Point> domset_points; // nomoko::Point is an Eigen::Vec3f...\n+\tstd::map<uint32_t, uint32_t> view_fwd_reindexing; // get continuous indexing\n+\tstd::map<uint32_t, uint32_t> view_bkwd_reindexing; // reverse continuous indexing\n+\n+\tuint32_t curr_ID = 0;\n+\tFOREACH(IdxC, scene.images)\n+\t{\n+\t\tconst auto & curr_image = scene.images[IdxC];\n+\t\tif(curr_image.IsValid())\n+\t\t{\n+\t\t\tview_fwd_reindexing[IdxC] = curr_ID;\n+\t\t\tview_bkwd_reindexing[curr_ID] = IdxC; \n+\t\t\tnomoko::View v;\n+\t\t\tv.rot = Eigen::Matrix<double,3,3,1>(curr_image.camera.R).cast<float>();",
        "path": "apps/SceneClustering/SceneClustering.cpp",
        "position": null,
        "original_position": 229,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "thanks! fixed in 9e84c2fcc0f16d451483c30359da754c5eab2286",
        "created_at": "2019-06-28T13:15:34Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298589108",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298589108"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298589108"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298497808
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298589268",
        "pull_request_review_id": 255761531,
        "id": 298589268,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU4OTI2OA==",
        "diff_hunk": "@@ -0,0 +1,315 @@\n+/*\n+ * SceneClustering.cpp\n+ *\n+ * Copyright (c) 2019 SEACAVE\n+ *\n+ * Author(s):\n+ *      Romain Janvier <romain.janvier@lepatriscope.com>\n+ *      cDc <cdc.seacave@gmail.com>\n+ *\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Additional Terms:\n+ *\n+ *      You are required to preserve legal notices and author attributions in\n+ *      that material or in the Appropriate Legal Notices displayed by works\n+ *      containing it.\n+ */\n+\n+\n+#include \"../../libs/MVS/Common.h\"\n+#include \"../../libs/MVS/Scene.h\"\n+#include \"domset/domset.h\"\n+#include <boost/program_options.hpp>\n+\n+using namespace MVS;\n+\n+\n+// D E F I N E S ///////////////////////////////////////////////////\n+\n+#define APPNAME _T(\"SceneClustering\")\n+\n+\n+// S T R U C T S ///////////////////////////////////////////////////\n+\n+namespace OPT {\n+String strInputFileName;\n+String strOutputDirectory;\n+float fVoxelSize;\n+unsigned nMinClusterSize;\n+unsigned nMaxClusterSize;\n+unsigned nClusterOverlap;\n+bool bDoSVM;\n+unsigned nArchiveType;\n+int nProcessPriority;\n+unsigned nMaxThreads;\n+String strConfigFileName;\n+boost::program_options::variables_map vm;\n+} // namespace OPT\n+\n+// initialize and parse the command line parameters\n+bool Initialize(size_t argc, LPCTSTR* argv)\n+{\n+\t// initialize log and console\n+\tOPEN_LOG();\n+\tOPEN_LOGCONSOLE();\n+\n+\t// group of options allowed only on command line\n+\tboost::program_options::options_description generic(\"Generic options\");\n+\tgeneric.add_options()\n+\t\t(\"help,h\", \"produce this help message\")\n+\t\t(\"working-folder,w\", boost::program_options::value<std::string>(&WORKING_FOLDER), \"working directory (default current directory)\")\n+\t\t(\"config-file,c\", boost::program_options::value<std::string>(&OPT::strConfigFileName)->default_value(APPNAME _T(\".cfg\")), \"file name containing program options\")\n+\t\t(\"archive-type\", boost::program_options::value<unsigned>(&OPT::nArchiveType)->default_value(2), \"project archive type: 0-text, 1-binary, 2-compressed binary\")\n+\t\t(\"process-priority\", boost::program_options::value<int>(&OPT::nProcessPriority)->default_value(-1), \"process priority (below normal by default)\")\n+\t\t(\"max-threads\", boost::program_options::value<unsigned>(&OPT::nMaxThreads)->default_value(0), \"maximum number of threads (0 for using all available cores)\")\n+\t\t#if TD_VERBOSE != TD_VERBOSE_OFF\n+\t\t(\"verbosity,v\", boost::program_options::value<int>(&g_nVerbosityLevel)->default_value(\n+\t\t\t#if TD_VERBOSE == TD_VERBOSE_DEBUG\n+\t\t\t3\n+\t\t\t#else\n+\t\t\t2\n+\t\t\t#endif\n+\t\t\t), \"verbosity level\")\n+\t\t#endif\n+\t\t;\n+\n+\t// group of options allowed both on command line and in config file\n+\tboost::program_options::options_description config(\"Texture options\");\n+\tconfig.add_options()\n+\t\t(\"input-file,i\", boost::program_options::value<std::string>(&OPT::strInputFileName), \"Input filename containing camera poses and image list\")\n+\t\t(\"voxel-size,x\", boost::program_options::value<float>(&OPT::fVoxelSize)->default_value(5.f), \"Size of a cell in the voxel grid: level of simplification of the original point cloud\")\n+\t\t(\"min-cluster-size,m\", boost::program_options::value<unsigned>(&OPT::nMinClusterSize)->default_value(30), \"Min number of camera in a cluster\" )\n+\t\t(\"max-cluster-size,M\", boost::program_options::value<unsigned>(&OPT::nMaxClusterSize)->default_value(50), \"Max number of camera in a cluster\")\n+\t\t(\"cluster-overlap,o\", boost::program_options::value<unsigned>(&OPT::nClusterOverlap)->default_value(4), \"Number of views in overlap [NOT implemented yet]\" )",
        "path": "apps/SceneClustering/SceneClustering.cpp",
        "position": null,
        "original_position": 97,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "handled in 382bc4a16a9a149f37ad1d5c7e8718fb881ec759",
        "created_at": "2019-06-28T13:15:57Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298589268",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298589268"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298589268"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298498994
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298589416",
        "pull_request_review_id": 255761707,
        "id": 298589416,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODU4OTQxNg==",
        "diff_hunk": "@@ -0,0 +1,2039 @@\n+/***********************************************************************",
        "path": "apps/SceneClustering/domset/nanoflann.hpp",
        "position": null,
        "original_position": 1,
        "commit_id": "8d996209ef9d0d7a9b98c587427bb121de781ddb",
        "original_commit_id": "a6532598bb0186a089aead3e48339a4567f64e99",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "resolved by bccdbe40c9e9a7eeb84811bb484d56eed82fd51d",
        "created_at": "2019-06-28T13:16:21Z",
        "updated_at": "2019-06-28T17:56:00Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298589416",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298589416"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/453#discussion_r298589416"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/453"
            }
        },
        "in_reply_to_id": 298499892
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298819554",
        "pull_request_review_id": 256059839,
        "id": 298819554,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgxOTU1NA==",
        "diff_hunk": "@@ -1737,37 +1737,42 @@ bool Scene::DenseReconstruction()\n \t\tdata.progress.Release();\n \t}\n \n-\t// fuse all depth-maps\n-\tpointcloud.Release();\n-\tdata.detphMaps.FuseDepthMaps(pointcloud, OPTDENSE::nEstimateColors == 2, OPTDENSE::nEstimateNormals == 2);\n-\t#if TD_VERBOSE != TD_VERBOSE_OFF\n-\tif (g_nVerbosityLevel > 2) {\n-\t\t// print number of points with 3+ views\n-\t\tsize_t nPoints1m(0), nPoints2(0), nPoints3p(0);\n-\t\tFOREACHPTR(pViews, pointcloud.pointViews) {\n-\t\t\tswitch (pViews->GetSize())\n-\t\t\t{\n-\t\t\tcase 0:\n-\t\t\tcase 1:\n-\t\t\t\t++nPoints1m;\n-\t\t\t\tbreak;\n-\t\t\tcase 2:\n-\t\t\t\t++nPoints2;\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\t++nPoints3p;\n+\t// fuse all depth-maps if needed\n+\tif(OPTDENSE::bFuse)",
        "path": "libs/MVS/SceneDensify.cpp",
        "position": null,
        "original_position": 24,
        "commit_id": "813bde73b5b3ff04a149671c811a498e64611ebd",
        "original_commit_id": "3e4cb633460cfa604e224e2b130473f3b375037c",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I think it will look more clean if let the code as it was, and just add `return true` after if",
        "created_at": "2019-06-30T06:22:40Z",
        "updated_at": "2019-07-04T19:58:17Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298819554",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298819554"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298819554"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298819562",
        "pull_request_review_id": 256059839,
        "id": 298819562,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgxOTU2Mg==",
        "diff_hunk": "@@ -72,6 +72,7 @@ MDEFVAR_OPTDENSE_uint32(nMinViewsFilterAdjust, \"Min Views Filter Adjust\", \"minim\n MDEFVAR_OPTDENSE_uint32(nMinViewsTrustPoint, \"Min Views Trust Point\", \"min-number of views so that the point is considered for approximating the depth-maps (<2 - random initialization)\", \"2\")\n MDEFVAR_OPTDENSE_uint32(nNumViews, \"Num Views\", \"Number of views used for depth-map estimation (0 - all views available)\", \"0\", \"1\", \"4\")\n MDEFVAR_OPTDENSE_bool(bFilterAdjust, \"Filter Adjust\", \"adjust depth estimates during filtering\", \"1\")\n+MDEFVAR_OPTDENSE_bool(bFuse, \"Fuse\", \"fuse depth maps into a point cloud\", \"1\")",
        "path": "libs/MVS/DepthMap.cpp",
        "position": null,
        "original_position": 4,
        "commit_id": "813bde73b5b3ff04a149671c811a498e64611ebd",
        "original_commit_id": "3e4cb633460cfa604e224e2b130473f3b375037c",
        "user": {
            "login": "cdcseacave",
            "id": 2802670,
            "node_id": "MDQ6VXNlcjI4MDI2NzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/2802670?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cdcseacave",
            "html_url": "https://github.com/cdcseacave",
            "followers_url": "https://api.github.com/users/cdcseacave/followers",
            "following_url": "https://api.github.com/users/cdcseacave/following{/other_user}",
            "gists_url": "https://api.github.com/users/cdcseacave/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cdcseacave/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cdcseacave/subscriptions",
            "organizations_url": "https://api.github.com/users/cdcseacave/orgs",
            "repos_url": "https://api.github.com/users/cdcseacave/repos",
            "events_url": "https://api.github.com/users/cdcseacave/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cdcseacave/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "if you add a command line param for fusion, no need to add it also as a INI param, simply pass it as a variable to densification fucntion",
        "created_at": "2019-06-30T06:22:56Z",
        "updated_at": "2019-07-04T19:58:17Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298819562",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298819562"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298819562"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298822505",
        "pull_request_review_id": 256063009,
        "id": 298822505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgyMjUwNQ==",
        "diff_hunk": "@@ -1737,37 +1737,42 @@ bool Scene::DenseReconstruction()\n \t\tdata.progress.Release();\n \t}\n \n-\t// fuse all depth-maps\n-\tpointcloud.Release();\n-\tdata.detphMaps.FuseDepthMaps(pointcloud, OPTDENSE::nEstimateColors == 2, OPTDENSE::nEstimateNormals == 2);\n-\t#if TD_VERBOSE != TD_VERBOSE_OFF\n-\tif (g_nVerbosityLevel > 2) {\n-\t\t// print number of points with 3+ views\n-\t\tsize_t nPoints1m(0), nPoints2(0), nPoints3p(0);\n-\t\tFOREACHPTR(pViews, pointcloud.pointViews) {\n-\t\t\tswitch (pViews->GetSize())\n-\t\t\t{\n-\t\t\tcase 0:\n-\t\t\tcase 1:\n-\t\t\t\t++nPoints1m;\n-\t\t\t\tbreak;\n-\t\t\tcase 2:\n-\t\t\t\t++nPoints2;\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\t++nPoints3p;\n+\t// fuse all depth-maps if needed\n+\tif(OPTDENSE::bFuse)",
        "path": "libs/MVS/SceneDensify.cpp",
        "position": null,
        "original_position": 24,
        "commit_id": "813bde73b5b3ff04a149671c811a498e64611ebd",
        "original_commit_id": "3e4cb633460cfa604e224e2b130473f3b375037c",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Thanks, agree!",
        "created_at": "2019-06-30T08:06:07Z",
        "updated_at": "2019-07-04T19:58:17Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298822505",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298822505"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298822505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454"
            }
        },
        "in_reply_to_id": 298819554
    },
    {
        "url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298822543",
        "pull_request_review_id": 256063047,
        "id": 298822543,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5ODgyMjU0Mw==",
        "diff_hunk": "@@ -72,6 +72,7 @@ MDEFVAR_OPTDENSE_uint32(nMinViewsFilterAdjust, \"Min Views Filter Adjust\", \"minim\n MDEFVAR_OPTDENSE_uint32(nMinViewsTrustPoint, \"Min Views Trust Point\", \"min-number of views so that the point is considered for approximating the depth-maps (<2 - random initialization)\", \"2\")\n MDEFVAR_OPTDENSE_uint32(nNumViews, \"Num Views\", \"Number of views used for depth-map estimation (0 - all views available)\", \"0\", \"1\", \"4\")\n MDEFVAR_OPTDENSE_bool(bFilterAdjust, \"Filter Adjust\", \"adjust depth estimates during filtering\", \"1\")\n+MDEFVAR_OPTDENSE_bool(bFuse, \"Fuse\", \"fuse depth maps into a point cloud\", \"1\")",
        "path": "libs/MVS/DepthMap.cpp",
        "position": null,
        "original_position": 4,
        "commit_id": "813bde73b5b3ff04a149671c811a498e64611ebd",
        "original_commit_id": "3e4cb633460cfa604e224e2b130473f3b375037c",
        "user": {
            "login": "rjanvier",
            "id": 1537100,
            "node_id": "MDQ6VXNlcjE1MzcxMDA=",
            "avatar_url": "https://avatars3.githubusercontent.com/u/1537100?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/rjanvier",
            "html_url": "https://github.com/rjanvier",
            "followers_url": "https://api.github.com/users/rjanvier/followers",
            "following_url": "https://api.github.com/users/rjanvier/following{/other_user}",
            "gists_url": "https://api.github.com/users/rjanvier/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/rjanvier/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/rjanvier/subscriptions",
            "organizations_url": "https://api.github.com/users/rjanvier/orgs",
            "repos_url": "https://api.github.com/users/rjanvier/repos",
            "events_url": "https://api.github.com/users/rjanvier/events{/privacy}",
            "received_events_url": "https://api.github.com/users/rjanvier/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok thank you. I was not sure. I was just trying to be exhaustive here.",
        "created_at": "2019-06-30T08:07:15Z",
        "updated_at": "2019-07-04T19:58:17Z",
        "html_url": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298822543",
        "pull_request_url": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/comments/298822543"
            },
            "html": {
                "href": "https://github.com/cdcseacave/openMVS/pull/454#discussion_r298822543"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/cdcseacave/openMVS/pulls/454"
            }
        },
        "in_reply_to_id": 298819562
    }
]