[
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50623286",
        "pull_request_review_id": null,
        "id": 50623286,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMjg2",
        "diff_hunk": "@@ -0,0 +1,100 @@\n+//! There are multiple different requests that may be made to a driver. The\n+//! `Request` enum contains all such requests. This module only contains the\n+//! `Request` enum.\n+\n+use selection::*;\n+use structure::Collection;\n+use document::Document;\n+\n+/// Any driver request. All requests will return an array of documents.\n+pub enum Request {\n+  /// The create request. Designed after a [SQL `INSERT` statmenet][1].\n+  ///\n+  /// Must return an array of all the created documents with any automatically\n+  /// generated columns with values.\n+  ///\n+  /// [1]: http://www.postgresql.org/docs/current/static/sql-insert.html\n+  Create {\n+    /// The collection to create the documents in.\n+    collection: Collection,\n+\n+    /// The documents to be created in the database.\n+    documents: [Document],\n+\n+    /// The properties to be returned of the created documents.\n+    returning: ReturnSet,\n+  },\n+\n+  /// The read request. Designed after a [SQL `SELECT` statement][1]. Also, a\n+  /// read request (after much thought) is not recursive/join capable. Instead\n+  /// join decomposition should be preferred. For more information, see \u201c[big\n+  /// query v. small query][2]\u201d.\n+  ///\n+  /// Must return an array of documents containing the set of documents\n+  /// described in this request.\n+  ///\n+  /// [1]: http://www.postgresql.org/docs/current/static/sql-select.html\n+  /// [2]: http://dba.stackexchange.com/questions/76973\n+  Read {\n+    /// The collection of which to read.\n+    collection: Collection,\n+\n+    /// The filter with which to narrow the documents returned.\n+    filter: Filter,\n+\n+    /// The order in which to return the documents.\n+    order: [Ordering],\n+\n+    /// A specific range of documents to be read.\n+    range: Range,\n+\n+    /// The properties to be returned of the read documents.\n+    returning: ReturnSet\n+  },\n+\n+  /// The update request. Designed after a [SQL `UPDATE` statement][1].\n+  ///\n+  /// Must return an array of all the documents that were updated with this\n+  /// request.\n+  ///\n+  /// [1]: http://www.postgresql.org/docs/current/static/sql-update.html\n+  Update {\n+    /// The collection in which to update documents.\n+    collection: Collection,\n+\n+    /// A filter limiting the number of documents to be updated.\n+    filter: Filter,\n+\n+    /// The patches to be applied to the set of documents.\n+    patches: [Patch],\n+\n+    /// The properties to be returned of the updated documents.\n+    returning: ReturnSet\n+  },\n+\n+  /// The delete request. Desinged after a [SQL `DELETE` statement][1].\n+  ///\n+  /// Must return an array of all documents that were deleted with this\n+  /// request.\n+  ///\n+  /// [1]: http://www.postgresql.org/docs/current/static/sql-delete.html\n+  Delete {\n+    /// The collection to delete documents from.\n+    collection: Collection,\n+\n+    /// A filter limiting the number of documents deleted.\n+    filter: Filter,\n+\n+    /// What properties to be returned of the deleted documents.\n+    returning: ReturnSet\n+  }\n+}\n+\n+/// Defines what the request expects to be returned.\n+pub enum ReturnSet {",
        "path": "src/request.rs",
        "position": null,
        "original_position": 94,
        "commit_id": "4118e1d15dd6996089b60c2f596ef7dd22b4213e",
        "original_commit_id": "f61a4072f2a01e30fce9f241c3e94cf9022e7303",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can you think of a better name? For both `ReturnSet` and `ReturnSet::Some`.\n",
        "created_at": "2016-01-23T18:05:55Z",
        "updated_at": "2016-01-29T21:51:52Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/1#discussion_r50623286",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50623286"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/1#discussion_r50623286"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50693347",
        "pull_request_review_id": null,
        "id": 50693347,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzMzQ3",
        "diff_hunk": "@@ -0,0 +1,35 @@\n+//! This module contains the common driver code. Specific implementations for\n+//! different databases exist elsewhere.\n+\n+use error::Error;\n+use values::Value;\n+use structure::Structure;\n+use request::Request;\n+\n+/// The trait to be implemented by all drivers.\n+pub trait Driver {\n+  /// Get\u2018s the structure of the underlying database. This will run whenever a\n+  /// service is starting up.\n+  fn get_structure() -> Result<Structure, Error>;\n+\n+  /// Send a request to the database.\n+  fn request(request: Request) -> Result<Vec<Value>, Error>;\n+\n+  /// Send a request to the database and guarantee it only ever effects a\n+  /// single document.\n+  fn request_one(request: Request) -> Result<Value, Error> {\n+    // TODO: default implementation which verifies that the request is only\n+    // affecting a single thing. This may be done by checking if the collection\n+    // primary key is specified in a filter.\n+    unimplemented!()\n+  }\n+\n+  /// Send multiple requests at once. If one request fails, **all other\n+  /// requests must also fail**. If a driver author wishes they may also\n+  /// optimize these requests.\n+  fn requests(requests: Vec<Request>) -> Result<Vec<Vec<Value>>, Error> {",
        "path": "src/driver.rs",
        "position": null,
        "original_position": 30,
        "commit_id": "4118e1d15dd6996089b60c2f596ef7dd22b4213e",
        "original_commit_id": "3d9fe2d2b95141c48a99e389c26b7eb0ead753fb",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This isn't actually useful. `request_one` is though.\n",
        "created_at": "2016-01-25T13:35:34Z",
        "updated_at": "2016-01-29T21:51:52Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/1#discussion_r50693347",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50693347"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/1#discussion_r50693347"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50693484",
        "pull_request_review_id": null,
        "id": 50693484,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzNDg0",
        "diff_hunk": "@@ -0,0 +1,68 @@\n+//! Types representing for data which will be retrieved from the database.\n+//! Currently this data is expected to look like a JSON object but this may be\n+//! changed in the future. Driver authors must cast the data they retrieve from\n+//! the database to these types.\n+\n+use std::collections::BTreeMap;\n+use structure::Collection;\n+\n+/// Represents a JSON pointer to a document property.\n+pub type Pointer = Vec<String>;\n+\n+/// Various value types. Based on types in the [JSON standard][1] (see section\n+/// 5).\n+///\n+/// [1]: http://ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\n+pub enum Value {\n+  /// The abscense of any value.\n+  Null,\n+  /// True or false.\n+  Boolean(bool),\n+  /// A numeric value, float, integer, whatever.\n+  Number(f64),\n+  /// A list of characters.\n+  String(String),\n+  /// A list of values.\n+  Array(Vec<Value>),\n+  /// A map of key/value pairs.\n+  Object(BTreeMap<String, Value>),",
        "path": "src/values.rs",
        "position": null,
        "original_position": 28,
        "commit_id": "4118e1d15dd6996089b60c2f596ef7dd22b4213e",
        "original_commit_id": "3d9fe2d2b95141c48a99e389c26b7eb0ead753fb",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`BTreeMap` probably isn't performant enough for our case. We should try `Vec<(String, Value)>`\n",
        "created_at": "2016-01-25T13:36:56Z",
        "updated_at": "2016-01-29T21:51:52Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/1#discussion_r50693484",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50693484"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/1#discussion_r50693484"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50693563",
        "pull_request_review_id": null,
        "id": 50693563,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzNTYz",
        "diff_hunk": "@@ -0,0 +1,68 @@\n+//! Types representing for data which will be retrieved from the database.\n+//! Currently this data is expected to look like a JSON object but this may be\n+//! changed in the future. Driver authors must cast the data they retrieve from\n+//! the database to these types.\n+\n+use std::collections::BTreeMap;\n+use structure::Collection;\n+\n+/// Represents a JSON pointer to a document property.\n+pub type Pointer = Vec<String>;\n+\n+/// Various value types. Based on types in the [JSON standard][1] (see section\n+/// 5).\n+///\n+/// [1]: http://ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\n+pub enum Value {\n+  /// The abscense of any value.\n+  Null,\n+  /// True or false.\n+  Boolean(bool),\n+  /// A numeric value, float, integer, whatever.\n+  Number(f64),\n+  /// A list of characters.\n+  String(String),\n+  /// A list of values.\n+  Array(Vec<Value>),\n+  /// A map of key/value pairs.\n+  Object(BTreeMap<String, Value>),\n+  /// A reference to a document in another collection.\n+  Reference(Collection, Box<Value>)\n+}\n+\n+/// Different database collection property updates.\n+pub enum Patch {\n+  /// Set a property to a new value.\n+  Set(Pointer, Value),\n+  /// Reset a property to its default value.\n+  Reset(Pointer),\n+  /// Remove a property from the database entirely.\n+  Remove(Pointer)\n+}\n+\n+/// A recursive filter condition for a `Value`.\n+pub enum Filter {\n+  /// Combine multiple filters with an \u201cand\u201d operator.\n+  And(Vec<Box<Filter>>),\n+  /// Combine multiple filters with an \u201cor\u201d operator.\n+  Or(Vec<Box<Filter>>),",
        "path": "src/values.rs",
        "position": null,
        "original_position": 48,
        "commit_id": "4118e1d15dd6996089b60c2f596ef7dd22b4213e",
        "original_commit_id": "3d9fe2d2b95141c48a99e389c26b7eb0ead753fb",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It shouldn't need `Box` within a `Vec` I think?\n",
        "created_at": "2016-01-25T13:37:42Z",
        "updated_at": "2016-01-29T21:51:52Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/1#discussion_r50693563",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50693563"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/1#discussion_r50693563"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50723931",
        "pull_request_review_id": null,
        "id": 50723931,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzOTMx",
        "diff_hunk": "@@ -0,0 +1,35 @@\n+//! This module contains the common driver code. Specific implementations for\n+//! different databases exist elsewhere.\n+\n+use error::Error;\n+use values::Value;\n+use structure::Structure;\n+use request::Request;\n+\n+/// The trait to be implemented by all drivers.\n+pub trait Driver {\n+  /// Get\u2018s the structure of the underlying database. This will run whenever a\n+  /// service is starting up.\n+  fn get_structure() -> Result<Structure, Error>;\n+\n+  /// Send a request to the database.\n+  fn request(request: Request) -> Result<Vec<Value>, Error>;\n+\n+  /// Send a request to the database and guarantee it only ever effects a\n+  /// single document.\n+  fn request_one(request: Request) -> Result<Value, Error> {\n+    // TODO: default implementation which verifies that the request is only\n+    // affecting a single thing. This may be done by checking if the collection\n+    // primary key is specified in a filter.\n+    unimplemented!()\n+  }\n+\n+  /// Send multiple requests at once. If one request fails, **all other\n+  /// requests must also fail**. If a driver author wishes they may also\n+  /// optimize these requests.\n+  fn requests(requests: Vec<Request>) -> Result<Vec<Vec<Value>>, Error> {",
        "path": "src/driver.rs",
        "position": null,
        "original_position": 30,
        "commit_id": "4118e1d15dd6996089b60c2f596ef7dd22b4213e",
        "original_commit_id": "3d9fe2d2b95141c48a99e389c26b7eb0ead753fb",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "so remove it?\n",
        "created_at": "2016-01-25T17:14:24Z",
        "updated_at": "2016-01-29T21:51:52Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/1#discussion_r50723931",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50723931"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/1#discussion_r50723931"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50749807",
        "pull_request_review_id": null,
        "id": 50749807,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5ODA3",
        "diff_hunk": "@@ -0,0 +1,35 @@\n+//! This module contains the common driver code. Specific implementations for\n+//! different databases exist elsewhere.\n+\n+use error::Error;\n+use values::Value;\n+use structure::Structure;\n+use request::Request;\n+\n+/// The trait to be implemented by all drivers.\n+pub trait Driver {\n+  /// Get\u2018s the structure of the underlying database. This will run whenever a\n+  /// service is starting up.\n+  fn get_structure() -> Result<Structure, Error>;\n+\n+  /// Send a request to the database.\n+  fn request(request: Request) -> Result<Vec<Value>, Error>;\n+\n+  /// Send a request to the database and guarantee it only ever effects a\n+  /// single document.\n+  fn request_one(request: Request) -> Result<Value, Error> {\n+    // TODO: default implementation which verifies that the request is only\n+    // affecting a single thing. This may be done by checking if the collection\n+    // primary key is specified in a filter.\n+    unimplemented!()\n+  }\n+\n+  /// Send multiple requests at once. If one request fails, **all other\n+  /// requests must also fail**. If a driver author wishes they may also\n+  /// optimize these requests.\n+  fn requests(requests: Vec<Request>) -> Result<Vec<Vec<Value>>, Error> {",
        "path": "src/driver.rs",
        "position": null,
        "original_position": 30,
        "commit_id": "4118e1d15dd6996089b60c2f596ef7dd22b4213e",
        "original_commit_id": "3d9fe2d2b95141c48a99e389c26b7eb0ead753fb",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, think so.\n",
        "created_at": "2016-01-25T20:20:03Z",
        "updated_at": "2016-01-29T21:51:52Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/1#discussion_r50749807",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/50749807"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/1#discussion_r50749807"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368310",
        "pull_request_review_id": null,
        "id": 51368310,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4MzEw",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Theoretically there will be more than these two traits. Like `DriverAccelerate` if we want to take that direction.\n",
        "created_at": "2016-01-31T22:00:19Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368310",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368310"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368310"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368339",
        "pull_request_review_id": null,
        "id": 51368339,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4MzM5",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;\n+}\n+\n+pub struct Loader {\n+  names: HashMap<String, String>,\n+  libs: HashMap<String, Library>,\n+  drivers: HashMap<String, Box<DriverLoader>>\n+}\n+\n+impl Loader {\n+  pub fn new() -> Self {\n+    Loader {\n+      names: HashMap::new(),\n+      libs: HashMap::new(),\n+      drivers: HashMap::new()\n+    }\n+  }\n+\n+  fn get_loc(&self, name: String) -> String {\n+    self.names.get(&name).unwrap().clone()",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 30,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should we not use `unwrap` here?\n",
        "created_at": "2016-01-31T22:02:29Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368339",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368339"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368339"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368370",
        "pull_request_review_id": null,
        "id": 51368370,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mzcw",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I know, I don't like it but from what I see we would have to add every possible trait there.\nAlso this is being re-written if you have not seen that none of the boxes are checked\n",
        "created_at": "2016-01-31T22:03:58Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368370",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368370"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368370"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368384",
        "pull_request_review_id": null,
        "id": 51368384,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mzg0",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;\n+}\n+\n+pub struct Loader {\n+  names: HashMap<String, String>,\n+  libs: HashMap<String, Library>,\n+  drivers: HashMap<String, Box<DriverLoader>>\n+}\n+\n+impl Loader {\n+  pub fn new() -> Self {\n+    Loader {\n+      names: HashMap::new(),\n+      libs: HashMap::new(),\n+      drivers: HashMap::new()\n+    }\n+  }\n+\n+  fn get_loc(&self, name: String) -> String {\n+    self.names.get(&name).unwrap().clone()",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 30,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I can guarantee that it is only called with something that was loaded (Maybe, being re-written anyways) \n",
        "created_at": "2016-01-31T22:04:49Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368384",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368384"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368384"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368386",
        "pull_request_review_id": null,
        "id": 51368386,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mzg2",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;\n+}\n+\n+pub struct Loader {\n+  names: HashMap<String, String>,\n+  libs: HashMap<String, Library>,\n+  drivers: HashMap<String, Box<DriverLoader>>\n+}\n+\n+impl Loader {\n+  pub fn new() -> Self {\n+    Loader {\n+      names: HashMap::new(),\n+      libs: HashMap::new(),\n+      drivers: HashMap::new()\n+    }\n+  }\n+\n+  fn get_loc(&self, name: String) -> String {\n+    self.names.get(&name).unwrap().clone()\n+  }\n+\n+  fn load_lib(&mut self, loc: String) {\n+    let lib = match Library::new(loc.clone()) {\n+      Ok(lib) => lib,\n+      Err(e)  => panic!(\"Failed to load lib '{}' due to:\\n{}\", loc, e)",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 36,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What do you think about returning `Result` and handling errors in a root function vs. random `panic!`s? (`try!` may help here)\n\nI'm not sure which is the better pattern.\n",
        "created_at": "2016-01-31T22:04:54Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368386",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368386"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368386"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368399",
        "pull_request_review_id": null,
        "id": 51368399,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4Mzk5",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;\n+}\n+\n+pub struct Loader {\n+  names: HashMap<String, String>,\n+  libs: HashMap<String, Library>,\n+  drivers: HashMap<String, Box<DriverLoader>>\n+}\n+\n+impl Loader {\n+  pub fn new() -> Self {\n+    Loader {\n+      names: HashMap::new(),\n+      libs: HashMap::new(),\n+      drivers: HashMap::new()\n+    }\n+  }\n+\n+  fn get_loc(&self, name: String) -> String {\n+    self.names.get(&name).unwrap().clone()\n+  }\n+\n+  fn load_lib(&mut self, loc: String) {\n+    let lib = match Library::new(loc.clone()) {\n+      Ok(lib) => lib,\n+      Err(e)  => panic!(\"Failed to load lib '{}' due to:\\n{}\", loc, e)",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 36,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "read the tasks\n",
        "created_at": "2016-01-31T22:05:57Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368399",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368399"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368399"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368406",
        "pull_request_review_id": null,
        "id": 51368406,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDA2",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;\n+}\n+\n+pub struct Loader {\n+  names: HashMap<String, String>,\n+  libs: HashMap<String, Library>,\n+  drivers: HashMap<String, Box<DriverLoader>>\n+}\n+\n+impl Loader {\n+  pub fn new() -> Self {\n+    Loader {\n+      names: HashMap::new(),\n+      libs: HashMap::new(),\n+      drivers: HashMap::new()\n+    }\n+  }\n+\n+  fn get_loc(&self, name: String) -> String {\n+    self.names.get(&name).unwrap().clone()\n+  }\n+\n+  fn load_lib(&mut self, loc: String) {\n+    let lib = match Library::new(loc.clone()) {\n+      Ok(lib) => lib,\n+      Err(e)  => panic!(\"Failed to load lib '{}' due to:\\n{}\", loc, e)\n+    };\n+\n+    self.libs.insert(loc, lib);\n+  }\n+\n+  fn load_driver(&mut self, loc: String) {\n+    if !self.libs.contains_key(&loc) {\n+      self.load_lib(loc.clone());\n+    }\n+\n+    let lib = self.libs.get(&loc).unwrap();\n+\n+    let get_loader: Symbol<extern fn() -> Box<DriverLoader>> = match unsafe { lib.get(b\"get_loader\\0\") } {",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 49,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh no. The dark arts! \ud83d\ude0a\n",
        "created_at": "2016-01-31T22:06:00Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368406",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368406"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368406"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368412",
        "pull_request_review_id": null,
        "id": 51368412,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDEy",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;\n+}\n+\n+pub struct Loader {\n+  names: HashMap<String, String>,\n+  libs: HashMap<String, Library>,\n+  drivers: HashMap<String, Box<DriverLoader>>\n+}\n+\n+impl Loader {\n+  pub fn new() -> Self {\n+    Loader {\n+      names: HashMap::new(),\n+      libs: HashMap::new(),\n+      drivers: HashMap::new()\n+    }\n+  }\n+\n+  fn get_loc(&self, name: String) -> String {\n+    self.names.get(&name).unwrap().clone()\n+  }\n+\n+  fn load_lib(&mut self, loc: String) {\n+    let lib = match Library::new(loc.clone()) {\n+      Ok(lib) => lib,\n+      Err(e)  => panic!(\"Failed to load lib '{}' due to:\\n{}\", loc, e)",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 36,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good idea.\n",
        "created_at": "2016-01-31T22:06:21Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368412",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368412"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368412"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368428",
        "pull_request_review_id": null,
        "id": 51368428,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDI4",
        "diff_hunk": "@@ -0,0 +1,87 @@\n+extern crate libloading;\n+use self::libloading::{Library, Symbol};\n+use super::driver::{Driver, DriverSchema};\n+use std::collections::HashMap;\n+\n+pub type Result<T> = ::std::io::Result<T>;\n+\n+/// Trait implemented by anthing that wishes to load a driver at runtime.\n+pub trait DriverLoader {\n+  fn get_driver<'a>(&self) -> Option<&'a Driver>;\n+  fn get_schema<'a>(&self) -> Option<&'a DriverSchema>;",
        "path": "src/loader.rs",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll think if there's a better way to model multiple features. Any suggestions? Hopefully we can find a good solution for this part of the code and the driver bits.\n",
        "created_at": "2016-01-31T22:08:02Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368428",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368428"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368428"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368450",
        "pull_request_review_id": null,
        "id": 51368450,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDUw",
        "diff_hunk": "@@ -16,5 +16,5 @@ pub struct Structure<C: Collection> {\n pub trait Collection {\n   /// Get the public name of the collection. In a PostgreSQL database, this\n   /// would be the table name without the schema name.\n-  fn get_name() -> String;\n+  fn get_name(&self) -> String;",
        "path": "src/structure.rs",
        "position": null,
        "original_position": 5,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes. My bad. \n",
        "created_at": "2016-01-31T22:09:32Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368450",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368450"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368450"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368472",
        "pull_request_review_id": null,
        "id": 51368472,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDcy",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+# Windows Files\n+Desktop.ini\n+\n+# Mac Files\n+.DS_Store\n+\n+# Compiled files\n+*.o\n+*.so\n+*.rlib\n+*.dll",
        "path": "test-libs/good/.gitignore",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Do we really need all the `.gitignore`s?\n",
        "created_at": "2016-01-31T22:11:26Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368472",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368472"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368472"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368479",
        "pull_request_review_id": null,
        "id": 51368479,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NDc5",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+# Windows Files\n+Desktop.ini\n+\n+# Mac Files\n+.DS_Store\n+\n+# Compiled files\n+*.o\n+*.so\n+*.rlib\n+*.dll",
        "path": "test-libs/good/.gitignore",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "try it without them.\n",
        "created_at": "2016-01-31T22:11:54Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368479",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368479"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368479"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368509",
        "pull_request_review_id": null,
        "id": 51368509,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NTA5",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+# Windows Files\n+Desktop.ini\n+\n+# Mac Files\n+.DS_Store\n+\n+# Compiled files\n+*.o\n+*.so\n+*.rlib\n+*.dll",
        "path": "test-libs/good/.gitignore",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "`target` isn't ignored right? That's because you have `/target/` in the `.gitignore`.\n",
        "created_at": "2016-01-31T22:13:11Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368509",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368509"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368509"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368530",
        "pull_request_review_id": null,
        "id": 51368530,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NTMw",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+# Windows Files\n+Desktop.ini\n+\n+# Mac Files\n+.DS_Store\n+\n+# Compiled files\n+*.o\n+*.so\n+*.rlib\n+*.dll",
        "path": "test-libs/good/.gitignore",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll test but it was adding all those files\n",
        "created_at": "2016-01-31T22:13:46Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368530",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368530"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368530"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368553",
        "pull_request_review_id": null,
        "id": 51368553,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NTUz",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+# Windows Files\n+Desktop.ini\n+\n+# Mac Files\n+.DS_Store\n+\n+# Compiled files\n+*.o\n+*.so\n+*.rlib\n+*.dll",
        "path": "test-libs/good/.gitignore",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah. Try just `target` without the slashes.\n",
        "created_at": "2016-01-31T22:14:49Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368553",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368553"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368553"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368565",
        "pull_request_review_id": null,
        "id": 51368565,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NTY1",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+# Windows Files\n+Desktop.ini\n+\n+# Mac Files\n+.DS_Store\n+\n+# Compiled files\n+*.o\n+*.so\n+*.rlib\n+*.dll",
        "path": "test-libs/good/.gitignore",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "nope, once I remove the .gitignore it adds all the files\n",
        "created_at": "2016-01-31T22:15:36Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368565",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368565"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368565"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368668",
        "pull_request_review_id": null,
        "id": 51368668,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NjY4",
        "diff_hunk": "@@ -0,0 +1,18 @@\n+# Windows Files\n+Desktop.ini\n+\n+# Mac Files\n+.DS_Store\n+\n+# Compiled files\n+*.o\n+*.so\n+*.rlib\n+*.dll",
        "path": "test-libs/good/.gitignore",
        "position": null,
        "original_position": 11,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "423a04999e779c43297413b0b401debe86a09d4e",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "That's ok. I fixed it.\n",
        "created_at": "2016-01-31T22:21:44Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368668",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368668"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368668"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368718",
        "pull_request_review_id": null,
        "id": 51368718,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NzE4",
        "diff_hunk": "@@ -0,0 +1,29 @@\n+extern crate ardite_core;\n+use ardite_core::loader::DriverLoader;\n+use ardite_core::driver::{Driver, DriverSchema};\n+\n+#[no_mangle]\n+pub extern fn get_loader() -> Box<DriverLoader> {\n+  println!(\"GETTING LOADER!\");\n+  Box::new(Loader {s: \"test\".to_string()})\n+}\n+\n+#[no_mangle]\n+pub extern fn eat_loader(driver: Box<DriverLoader>) {",
        "path": "test-libs/good/src/lib.rs",
        "position": null,
        "original_position": 12,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "17bb7d7cdda487c04e0d37400dabcb9602bce0c1",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Eat loader \ud83d\ude0a\n",
        "created_at": "2016-01-31T22:25:58Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368718",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368718"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368718"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368741",
        "pull_request_review_id": null,
        "id": 51368741,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY4NzQx",
        "diff_hunk": "@@ -0,0 +1,29 @@\n+extern crate ardite_core;\n+use ardite_core::loader::DriverLoader;\n+use ardite_core::driver::{Driver, DriverSchema};\n+\n+#[no_mangle]\n+pub extern fn get_loader() -> Box<DriverLoader> {\n+  println!(\"GETTING LOADER!\");\n+  Box::new(Loader {s: \"test\".to_string()})\n+}\n+\n+#[no_mangle]\n+pub extern fn eat_loader(driver: Box<DriverLoader>) {",
        "path": "test-libs/good/src/lib.rs",
        "position": null,
        "original_position": 12,
        "commit_id": "a502b74d55507e4662ff95a040a98158687c3fe4",
        "original_commit_id": "17bb7d7cdda487c04e0d37400dabcb9602bce0c1",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "sorry tis gone. I think I fixed the seg fault tho :grinning:\n",
        "created_at": "2016-01-31T22:27:38Z",
        "updated_at": "2016-02-06T23:16:32Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368741",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/51368741"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/3#discussion_r51368741"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52108312",
        "pull_request_review_id": null,
        "id": 52108312,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4MzEy",
        "diff_hunk": "@@ -4,14 +4,24 @@\n /// Any error generated by Ardite or it\u2018s drivers should be output using this\n /// type. This allows for a comprehensive display of the error when a service\n /// reports it to the user.\n-pub struct Error {\n+pub struct Error<'a> {\n   /// A specific error code which describes the error.\n   code: ErrorCode,\n   /// A message providing more detail beyond the error code.\n-  message: String,\n+  message: &'a str,\n   /// A hint to the user on what to do next to try and avoid the error\n   /// happening again. This is optional.\n-  hint: Option<String>\n+  hint: Option<&'a str>\n+}\n+\n+impl<'a> Error<'a> {",
        "path": "src/error.rs",
        "position": 17,
        "original_position": 17,
        "commit_id": "24388eb5d411ea0d2a0c98c6ea099622089e6dd6",
        "original_commit_id": "21e96de09e48001fcaaf13c61f8a125f4a38a5f5",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "impl Error for Error\n",
        "created_at": "2016-02-06T22:21:11Z",
        "updated_at": "2016-02-06T23:32:51Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/5#discussion_r52108312",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/5",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52108312"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/5#discussion_r52108312"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/5"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52108491",
        "pull_request_review_id": null,
        "id": 52108491,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA4NDkx",
        "diff_hunk": "@@ -4,14 +4,24 @@\n /// Any error generated by Ardite or it\u2018s drivers should be output using this\n /// type. This allows for a comprehensive display of the error when a service\n /// reports it to the user.\n-pub struct Error {\n+pub struct Error<'a> {\n   /// A specific error code which describes the error.\n   code: ErrorCode,\n   /// A message providing more detail beyond the error code.\n-  message: String,\n+  message: &'a str,\n   /// A hint to the user on what to do next to try and avoid the error\n   /// happening again. This is optional.\n-  hint: Option<String>\n+  hint: Option<&'a str>\n+}\n+\n+impl<'a> Error<'a> {",
        "path": "src/error.rs",
        "position": 17,
        "original_position": 17,
        "commit_id": "24388eb5d411ea0d2a0c98c6ea099622089e6dd6",
        "original_commit_id": "21e96de09e48001fcaaf13c61f8a125f4a38a5f5",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'll do that in a new branch. Eventually \ud83d\ude0a\n",
        "created_at": "2016-02-06T22:36:11Z",
        "updated_at": "2016-02-06T23:32:51Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/5#discussion_r52108491",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/5",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52108491"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/5#discussion_r52108491"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/5"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52109087",
        "pull_request_review_id": null,
        "id": 52109087,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MDg3",
        "diff_hunk": "@@ -4,14 +4,24 @@\n /// Any error generated by Ardite or it\u2018s drivers should be output using this\n /// type. This allows for a comprehensive display of the error when a service\n /// reports it to the user.\n-pub struct Error {\n+pub struct Error<'a> {\n   /// A specific error code which describes the error.\n   code: ErrorCode,\n   /// A message providing more detail beyond the error code.\n-  message: String,\n+  message: &'a str,\n   /// A hint to the user on what to do next to try and avoid the error\n   /// happening again. This is optional.\n-  hint: Option<String>\n+  hint: Option<&'a str>\n+}\n+\n+impl<'a> Error<'a> {\n+  pub fn unimplemented(message: &'a str) -> Self {",
        "path": "src/error.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "24388eb5d411ea0d2a0c98c6ea099622089e6dd6",
        "original_commit_id": "b79104af7519b0b01a93024400ab0e1a5bd6e38d",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "cant this fn just take the ErrorCode so that it is more generic?\n",
        "created_at": "2016-02-06T23:30:19Z",
        "updated_at": "2016-02-06T23:32:51Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/5#discussion_r52109087",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/5",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52109087"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/5#discussion_r52109087"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/5"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52109102",
        "pull_request_review_id": null,
        "id": 52109102,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5MTAy",
        "diff_hunk": "@@ -4,14 +4,24 @@\n /// Any error generated by Ardite or it\u2018s drivers should be output using this\n /// type. This allows for a comprehensive display of the error when a service\n /// reports it to the user.\n-pub struct Error {\n+pub struct Error<'a> {\n   /// A specific error code which describes the error.\n   code: ErrorCode,\n   /// A message providing more detail beyond the error code.\n-  message: String,\n+  message: &'a str,\n   /// A hint to the user on what to do next to try and avoid the error\n   /// happening again. This is optional.\n-  hint: Option<String>\n+  hint: Option<&'a str>\n+}\n+\n+impl<'a> Error<'a> {\n+  pub fn unimplemented(message: &'a str) -> Self {",
        "path": "src/error.rs",
        "position": null,
        "original_position": 18,
        "commit_id": "24388eb5d411ea0d2a0c98c6ea099622089e6dd6",
        "original_commit_id": "b79104af7519b0b01a93024400ab0e1a5bd6e38d",
        "user": {
            "login": "calebmer",
            "id": 8282507,
            "node_id": "MDQ6VXNlcjgyODI1MDc=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/8282507?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/calebmer",
            "html_url": "https://github.com/calebmer",
            "followers_url": "https://api.github.com/users/calebmer/followers",
            "following_url": "https://api.github.com/users/calebmer/following{/other_user}",
            "gists_url": "https://api.github.com/users/calebmer/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/calebmer/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/calebmer/subscriptions",
            "organizations_url": "https://api.github.com/users/calebmer/orgs",
            "repos_url": "https://api.github.com/users/calebmer/repos",
            "events_url": "https://api.github.com/users/calebmer/events{/privacy}",
            "received_events_url": "https://api.github.com/users/calebmer/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We can add another function, I just wanted a convenience function for writing unimplemented errors.\n",
        "created_at": "2016-02-06T23:31:09Z",
        "updated_at": "2016-02-06T23:32:51Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/5#discussion_r52109102",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/5",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/52109102"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/5#discussion_r52109102"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/5"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/54343313",
        "pull_request_review_id": null,
        "id": 54343313,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQzMzEz",
        "diff_hunk": "@@ -11,7 +11,9 @@ use query::Query;\n /// exist in the file system, and then return an instance initialized with the\n /// `connect` static trait function.\n pub fn get_driver<D: Driver>(url: &str) -> D {\n-  // TODO: implement\n+  // TODO: implement.\n+  // Used to quiet warnings.",
        "path": "src/driver.rs",
        "position": null,
        "original_position": 6,
        "commit_id": "3cc71ed96ddb2ce53de4deeaf92ef739993279e3",
        "original_commit_id": "ddcc22ebb9da2e4c2ff713ad80705319c67adf9c",
        "user": {
            "login": "svmnotn",
            "id": 12618337,
            "node_id": "MDQ6VXNlcjEyNjE4MzM3",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12618337?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/svmnotn",
            "html_url": "https://github.com/svmnotn",
            "followers_url": "https://api.github.com/users/svmnotn/followers",
            "following_url": "https://api.github.com/users/svmnotn/following{/other_user}",
            "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions",
            "organizations_url": "https://api.github.com/users/svmnotn/orgs",
            "repos_url": "https://api.github.com/users/svmnotn/repos",
            "events_url": "https://api.github.com/users/svmnotn/events{/privacy}",
            "received_events_url": "https://api.github.com/users/svmnotn/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You know you can just quiet the warnings directly with a #[allow(...)]\n",
        "created_at": "2016-02-28T02:42:36Z",
        "updated_at": "2016-02-28T12:28:05Z",
        "html_url": "https://github.com/ardite/ardite-core/pull/9#discussion_r54343313",
        "pull_request_url": "https://api.github.com/repos/ardite/ardite-core/pulls/9",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/comments/54343313"
            },
            "html": {
                "href": "https://github.com/ardite/ardite-core/pull/9#discussion_r54343313"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/ardite/ardite-core/pulls/9"
            }
        }
    }
]