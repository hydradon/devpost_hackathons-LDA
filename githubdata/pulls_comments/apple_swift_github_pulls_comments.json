[
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/302811038",
        "pull_request_review_id": 261039037,
        "id": 302811038,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjgxMTAzOA==",
        "diff_hunk": "@@ -47,6 +47,24 @@ Optional<PlatformConditionKind> getPlatformConditionKind(StringRef Name) {\n     .Default(None);\n }\n \n+/// Get platform condition name from PlatformConditionKind.\n+static StringRef getPlatformConditionName(PlatformConditionKind Kind) {",
        "path": "lib/Parse/ParseIfConfig.cpp",
        "position": 17,
        "original_position": 5,
        "commit_id": "cf9bb325276faee223a7278cc8c8ad04edddab64",
        "original_commit_id": "b1ee2d4c05ce4484223d3baf6ad7a0c2a50f1d31",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, got it.",
        "created_at": "2019-07-12T02:56:29Z",
        "updated_at": "2019-08-21T20:45:00Z",
        "html_url": "https://github.com/apple/swift/pull/25977#discussion_r302811038",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/25977",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/302811038"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/25977#discussion_r302811038"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/25977"
            }
        },
        "in_reply_to_id": 302330524
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/302815021",
        "pull_request_review_id": 261043871,
        "id": 302815021,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMjgxNTAyMQ==",
        "diff_hunk": "@@ -85,28 +143,21 @@ bool contains(const StringRef (&Array)[N], const StringRef &V,\n     if (distance == minDistance)\n       suggestions.emplace_back(candidate);\n   }\n+  suggestedKind = suggestedPlatformConditionKind(Kind, V, suggestions);\n   return false;\n }\n \n bool LangOptions::\n checkPlatformConditionSupported(PlatformConditionKind Kind, StringRef Value,\n-                                std::vector<StringRef> &suggestions) {\n+                                PlatformConditionKind &suggestedKind,\n+                                std::vector<StringRef> &suggestedValues) {",
        "path": "lib/Basic/LangOptions.cpp",
        "position": 76,
        "original_position": 89,
        "commit_id": "cf9bb325276faee223a7278cc8c8ad04edddab64",
        "original_commit_id": "b1ee2d4c05ce4484223d3baf6ad7a0c2a50f1d31",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I don't think **[(PlatformConditionKind, StringRef)]** would fit well here. Sometimes, we want multiple value suggestions for the same PlatformConditionKind (for e.g. `#if os(chaos)` should suggest multiple closest-edit-distance-matching values for the \"os\" kind), and sometimes, we want no value suggestions for a PlatformConditionKind (for e.g. `#if os(simulator)` should suggest only a kind change, not a value change).\r\n\r\nAre you saying that maybe in the future, we might want to return multiple PlatformConditionKind suggestions? In that case, maybe **[(PlatformConditionKind, [StringRef])]** would be more appropriate, because we can have 0..<n value suggestions for a given kind. Nevertheless, I don't think that change should be made now -- it should rather be done when we do start returning multiple PlatformConditionKind suggestions. What do you think?",
        "created_at": "2019-07-12T03:25:34Z",
        "updated_at": "2019-08-21T20:45:00Z",
        "html_url": "https://github.com/apple/swift/pull/25977#discussion_r302815021",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/25977",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/302815021"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/25977#discussion_r302815021"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/25977"
            }
        },
        "in_reply_to_id": 302331084
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/304238603",
        "pull_request_review_id": 262824773,
        "id": 304238603,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDIzODYwMw==",
        "diff_hunk": "@@ -139,6 +139,24 @@ func undefinedFunc() // ignored.\n #endif\n undefinedFunc() // expected-error {{use of unresolved identifier 'undefinedFunc'}}\n \n+#if os(simulator) // expected-warning {{unknown operating system for build configuration 'os'}} expected-note {{did you mean 'targetEnvironment'}} {{5-7=targetEnvironment}}\n+#endif\n+\n+#if arch(iOS) // expected-warning {{unknown architecture for build configuration 'arch'}} expected-note {{did you mean 'os'}} {{5-9=os}}\n+#endif\n+\n+#if _endian(arm64) // expected-warning {{unknown endianness for build configuration '_endian'}} expected-note {{did you mean 'arch'}} {{5-12=arch}}\n+#endif\n+\n+#if targetEnvironment(_ObjC) // expected-warning {{unknown target environment for build configuration 'targetEnvironment'}} expected-note {{did you mean '_runtime'}} {{5-22=_runtime}}",
        "path": "test/Parse/ConditionalCompilation/basicParseErrors.swift",
        "position": null,
        "original_position": 13,
        "commit_id": "cf9bb325276faee223a7278cc8c8ad04edddab64",
        "original_commit_id": "b1ee2d4c05ce4484223d3baf6ad7a0c2a50f1d31",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Makes sense. This is addressed in commit [e44a458](https://github.com/apple/swift/pull/25977/commits/e44a458ec8df83275426b1db4c828439b53325c1).",
        "created_at": "2019-07-17T06:34:00Z",
        "updated_at": "2019-08-21T20:45:00Z",
        "html_url": "https://github.com/apple/swift/pull/25977#discussion_r304238603",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/25977",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/304238603"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/25977#discussion_r304238603"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/25977"
            }
        },
        "in_reply_to_id": 302331465
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/305031859",
        "pull_request_review_id": 263801428,
        "id": 305031859,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTAzMTg1OQ==",
        "diff_hunk": "@@ -0,0 +1,33 @@\n+//===--- ObjCSelectorFamily.def - Objective-C Selector Families - C++ ---*-===//",
        "path": "include/swift/AST/PlatformConditionKinds.def",
        "position": null,
        "original_position": 1,
        "commit_id": "cf9bb325276faee223a7278cc8c8ad04edddab64",
        "original_commit_id": "e44a458ec8df83275426b1db4c828439b53325c1",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Sorry about that. :(",
        "created_at": "2019-07-18T17:26:13Z",
        "updated_at": "2019-08-21T20:45:00Z",
        "html_url": "https://github.com/apple/swift/pull/25977#discussion_r305031859",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/25977",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/305031859"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/25977#discussion_r305031859"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/25977"
            }
        },
        "in_reply_to_id": 304672333
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/305723975",
        "pull_request_review_id": 264662577,
        "id": 305723975,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNTcyMzk3NQ==",
        "diff_hunk": "@@ -1091,3 +1091,18 @@ struct InvalidPropertyDelegateUse {\n     self.x.foo() // expected-error {{value of type 'Int' has no member 'foo'}}\n   }\n }\n+\n+// SR-11060\n+\n+class SR_11060_Class {\n+  @SR_11060_Wrapper var property: Int = 1234 // expected-error {{missing argument for parameter 'string' in call}}{{20-20=(string: <#String#>)}}",
        "path": "test/decl/var/property_wrappers.swift",
        "position": null,
        "original_position": 8,
        "commit_id": "ab1f059e8ba5737246f34494cbd3913fbca4c867",
        "original_commit_id": "1d18a3b668a84ca3a7bbfb06d241aec1f7c7657f",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "> I think it would be fine for now just make it so diagnostic doesn't produce any fix-its, since fix-it has to mention all of the arguments, correct one would be to remove `= 123` and make add `(wrappedValue: 123, string: <#String#>)` after attribute.\r\n\r\n@xedin I agree with your decision to get rid of the fix-it. I however had a couple of questions on the fix-it, if it were present:\r\n- The fix-it for simple functions reports only one missing argument at a time, so why wouldn't it be okay here too?\r\n- Wouldn't the correct fix-it be to keep the `= 123` and add `(string: <#String#>)` after the `@SR_11060_Wrapper`, which would be the recommended use of property wrappers?",
        "created_at": "2019-07-22T08:21:43Z",
        "updated_at": "2019-07-22T08:21:44Z",
        "html_url": "https://github.com/apple/swift/pull/26219#discussion_r305723975",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26219",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/305723975"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26219#discussion_r305723975"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26219"
            }
        },
        "in_reply_to_id": 305106757
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/312420979",
        "pull_request_review_id": 273062784,
        "id": 312420979,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQyMDk3OQ==",
        "diff_hunk": "@@ -5599,6 +5599,53 @@ bool VarDecl::isPropertyMemberwiseInitializedWithWrappedType() const {\n       this, /*checkDefaultInit=*/false);\n }\n \n+static bool isInitFirstParamEscapingClosure(const ConstructorDecl *init) {\n+  Type initTy = init->getInterfaceType();\n+  if (!initTy || !initTy->is<AnyFunctionType>())",
        "path": "lib/AST/Decl.cpp",
        "position": null,
        "original_position": 6,
        "commit_id": "54572fb9db12d4747bad1e72aa6ad96efe257a6b",
        "original_commit_id": "e679a1a755474ea30ff86ad1673aa8c3b709e75f",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Okay. Removed the check in 1bc9dbd.",
        "created_at": "2019-08-09T10:30:12Z",
        "updated_at": "2020-01-10T02:46:02Z",
        "html_url": "https://github.com/apple/swift/pull/26572#discussion_r312420979",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26572",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/312420979"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26572#discussion_r312420979"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26572"
            }
        },
        "in_reply_to_id": 312284135
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/312421035",
        "pull_request_review_id": 273062855,
        "id": 312421035,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQyMTAzNQ==",
        "diff_hunk": "@@ -5599,6 +5599,53 @@ bool VarDecl::isPropertyMemberwiseInitializedWithWrappedType() const {\n       this, /*checkDefaultInit=*/false);\n }\n \n+static bool isInitFirstParamEscapingClosure(const ConstructorDecl *init) {\n+  Type initTy = init->getInterfaceType();\n+  if (!initTy || !initTy->is<AnyFunctionType>())\n+    return false;\n+\n+  Type resultTy = initTy->castTo<AnyFunctionType>()->getResult();\n+  if (!resultTy || !resultTy->is<FunctionType>())",
        "path": "lib/AST/Decl.cpp",
        "position": null,
        "original_position": 10,
        "commit_id": "54572fb9db12d4747bad1e72aa6ad96efe257a6b",
        "original_commit_id": "e679a1a755474ea30ff86ad1673aa8c3b709e75f",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Got it. Okay. Removed the check in 1bc9dbd.",
        "created_at": "2019-08-09T10:30:27Z",
        "updated_at": "2020-01-10T02:46:02Z",
        "html_url": "https://github.com/apple/swift/pull/26572#discussion_r312421035",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26572",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/312421035"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26572#discussion_r312421035"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26572"
            }
        },
        "in_reply_to_id": 312284194
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/312421330",
        "pull_request_review_id": 273063254,
        "id": 312421330,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQyMTMzMA==",
        "diff_hunk": "@@ -228,8 +228,8 @@ struct UseLazy<T: DefaultInit> {\n   @Lazy var bar = T()\n   @Lazy var wibble = [1, 2, 3]\n \n-  // CHECK-LABEL: sil hidden [ossa] @$s17property_wrappers7UseLazyV3foo3bar6wibbleACyxGSi_xSaySiGtcfC : $@convention(method) <T where T : DefaultInit> (Int, @in T, @owned Array<Int>, @thin UseLazy<T>.Type) -> @out UseLazy<T>\n-  // CHECK: function_ref @$s17property_wrappers7UseLazyV4_foo33_{{.*}}AA0D0OySiGvpfiSiycfu_ : $@convention(thin) (@owned Int) -> Int\n+  // CHECK-LABEL: sil hidden [ossa] @$s17property_wrappers7UseLazyV3foo3bar6wibbleACyxGSiyXA_xyXASaySiGyXAtcfC : $@convention(method) <T where T : DefaultInit> (@owned @callee_guaranteed () -> Int, @owned @callee_guaranteed () -> @out T, @owned @callee_guaranteed () -> @owned Array<Int>, @thin UseLazy<T>.Type) -> @out UseLazy<T> {\n+  // CHECK: function_ref @$sSiIegd_SiIegr_TR : $@convention(thin) (@guaranteed @callee_guaranteed () -> Int) -> @out Int",
        "path": "test/SILGen/property_wrappers.swift",
        "position": null,
        "original_position": 7,
        "commit_id": "54572fb9db12d4747bad1e72aa6ad96efe257a6b",
        "original_commit_id": "e679a1a755474ea30ff86ad1673aa8c3b709e75f",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Got it. Added some tests in 1a5f57a. Do they look okay?",
        "created_at": "2019-08-09T10:31:33Z",
        "updated_at": "2020-01-10T02:46:02Z",
        "html_url": "https://github.com/apple/swift/pull/26572#discussion_r312421330",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26572",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/312421330"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26572#discussion_r312421330"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26572"
            }
        },
        "in_reply_to_id": 312284345
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/313032323",
        "pull_request_review_id": 273830555,
        "id": 313032323,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzAzMjMyMw==",
        "diff_hunk": "@@ -228,8 +228,8 @@ struct UseLazy<T: DefaultInit> {\n   @Lazy var bar = T()\n   @Lazy var wibble = [1, 2, 3]\n \n-  // CHECK-LABEL: sil hidden [ossa] @$s17property_wrappers7UseLazyV3foo3bar6wibbleACyxGSi_xSaySiGtcfC : $@convention(method) <T where T : DefaultInit> (Int, @in T, @owned Array<Int>, @thin UseLazy<T>.Type) -> @out UseLazy<T>\n-  // CHECK: function_ref @$s17property_wrappers7UseLazyV4_foo33_{{.*}}AA0D0OySiGvpfiSiycfu_ : $@convention(thin) (@owned Int) -> Int\n+  // CHECK-LABEL: sil hidden [ossa] @$s17property_wrappers7UseLazyV3foo3bar6wibbleACyxGSiyXA_xyXASaySiGyXAtcfC : $@convention(method) <T where T : DefaultInit> (@owned @callee_guaranteed () -> Int, @owned @callee_guaranteed () -> @out T, @owned @callee_guaranteed () -> @owned Array<Int>, @thin UseLazy<T>.Type) -> @out UseLazy<T> {\n+  // CHECK: function_ref @$sSiIegd_SiIegr_TR : $@convention(thin) (@guaranteed @callee_guaranteed () -> Int) -> @out Int",
        "path": "test/SILGen/property_wrappers.swift",
        "position": null,
        "original_position": 7,
        "commit_id": "54572fb9db12d4747bad1e72aa6ad96efe257a6b",
        "original_commit_id": "e679a1a755474ea30ff86ad1673aa8c3b709e75f",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also, I think there should be tests to ensure that:\r\n\r\n 1. Only the innermost wrapper is considered \r\n 2. Only escaping closures are considered \r\n\r\nI\u2019ll add them tomorrow. ",
        "created_at": "2019-08-12T17:13:34Z",
        "updated_at": "2020-01-10T02:46:02Z",
        "html_url": "https://github.com/apple/swift/pull/26572#discussion_r313032323",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26572",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/313032323"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26572#discussion_r313032323"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26572"
            }
        },
        "in_reply_to_id": 312284345
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/313694169",
        "pull_request_review_id": 274655782,
        "id": 313694169,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzY5NDE2OQ==",
        "diff_hunk": "@@ -5599,6 +5599,53 @@ bool VarDecl::isPropertyMemberwiseInitializedWithWrappedType() const {\n       this, /*checkDefaultInit=*/false);\n }\n \n+static bool isInitFirstParamEscapingClosure(const ConstructorDecl *init) {\n+  Type initTy = init->getInterfaceType();\n+  if (!initTy->is<AnyFunctionType>())\n+    return false;\n+\n+  Type resultTy = initTy->castTo<AnyFunctionType>()->getResult();\n+  if (!resultTy->is<FunctionType>())\n+    return false;\n+\n+  auto funcTy = resultTy->castTo<FunctionType>();\n+  if (funcTy->getNumParams() == 0)\n+    return false;\n+\n+  Type firstParamTy = funcTy->getParams()[0].getPlainType();\n+  if (!firstParamTy->is<FunctionType>())\n+    return false;\n+\n+  return (!firstParamTy->castTo<FunctionType>()->isNoEscape());\n+}\n+\n+bool VarDecl::isInnermostPropertyWrapperInitUsesEscapingAutoClosure() const {\n+  auto customAttrs = getAttachedPropertyWrappers();\n+  if (customAttrs.empty())\n+    return false;\n+\n+  unsigned innermostWrapperIndex = customAttrs.size() - 1;\n+  auto wrappedValueInit = getAttachedPropertyWrapperTypeInfo(\n+      innermostWrapperIndex).wrappedValueInit;\n+  if (!wrappedValueInit)\n+    return false;\n+\n+  auto wrappedValueInitParams = wrappedValueInit->getParameters();\n+  if (wrappedValueInitParams->size() == 0)\n+    return false;\n+\n+  auto firstParam = wrappedValueInitParams->get(0);\n+  auto firstParamName = firstParam->getName();\n+\n+  ASTContext &ctx = getASTContext();\n+  if (firstParamName != ctx.Id_wrappedValue &&",
        "path": "lib/AST/Decl.cpp",
        "position": null,
        "original_position": 43,
        "commit_id": "54572fb9db12d4747bad1e72aa6ad96efe257a6b",
        "original_commit_id": "1a5f57ab23a49803cd1e61517d8f06a9bbd30acf",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Why do you say that? As it stands, it reads: If the firstParamName is neither \"wrappedValue\" nor \"initialValue\", return false, which looks correct to me.",
        "created_at": "2019-08-14T03:45:56Z",
        "updated_at": "2020-01-10T02:46:02Z",
        "html_url": "https://github.com/apple/swift/pull/26572#discussion_r313694169",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26572",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/313694169"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26572#discussion_r313694169"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26572"
            }
        },
        "in_reply_to_id": 313480469
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/315807040",
        "pull_request_review_id": 277316363,
        "id": 315807040,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNTgwNzA0MA==",
        "diff_hunk": "@@ -65,15 +65,70 @@ static const StringRef SupportedConditionalCompilationTargetEnvironments[] = {\n   \"simulator\",\n };\n \n+static const PlatformConditionKind AllPublicPlatformConditionKinds[] = {\n+#define PLATFORM_CONDITION(LABEL, IDENTIFIER) PlatformConditionKind::LABEL,\n+#define PLATFORM_CONDITION_(LABEL, IDENTIFIER)\n+#include \"swift/AST/PlatformConditionKinds.def\"\n+};\n+\n template <size_t N>\n-bool contains(const StringRef (&Array)[N], const StringRef &V,\n-              std::vector<StringRef> &suggestions) {\n+constexpr int count(const StringRef (&)[N]) {\n+  return N;\n+}\n+\n+std::pair<const StringRef*, size_t> getSupportedConditionalCompilationValues(const PlatformConditionKind &Kind) {",
        "path": "lib/Basic/LangOptions.cpp",
        "position": null,
        "original_position": 17,
        "commit_id": "cf9bb325276faee223a7278cc8c8ad04edddab64",
        "original_commit_id": "fb0c2e733412937fd0bcf4fea73145654e6a278b",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Makes sense (I didn\u2019t know about ArrayRef). No worries. Will make these changes tomorrow.",
        "created_at": "2019-08-20T17:15:08Z",
        "updated_at": "2019-08-21T20:45:00Z",
        "html_url": "https://github.com/apple/swift/pull/25977#discussion_r315807040",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/25977",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/315807040"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/25977#discussion_r315807040"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/25977"
            }
        },
        "in_reply_to_id": 315410772
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/323898028",
        "pull_request_review_id": 287636407,
        "id": 323898028,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMzg5ODAyOA==",
        "diff_hunk": "@@ -2357,9 +2357,37 @@ RValue RValueEmitter::visitCaptureListExpr(CaptureListExpr *E, SGFContext C) {\n   return visit(E->getClosureBody(), C);\n }\n \n+static OpaqueValueExpr *opaqueValueExprToSubstituteForAutoClosure(\n+    const AbstractClosureExpr *e) {\n+  // When we find an autoclosure that just calls an opaque closure,\n+  // this is a case where we've created the opaque closure as a\n+  // stand-in for the autoclosure itself. Such an opaque closure is\n+  // created when we have a property wrapper's 'init(wrappedValue:)'\n+  // taking an autoclosure argument.\n+  if (auto ace = dyn_cast<AutoClosureExpr>(e)) {\n+    if (auto ce = dyn_cast<CallExpr>(ace->getSingleExpressionBody())) {\n+      if (auto ove = dyn_cast<OpaqueValueExpr>(ce->getFn())) {\n+        if (!ace->isImplicit() || !ove->isImplicit() || !ove->isPlaceholder())\n+          return nullptr;\n+\n+        Type aceType = ace->getType();\n+        Type oveType = ove->getType();\n+        if (!aceType || !oveType)\n+          return nullptr;\n+\n+        if (aceType->getCanonicalType() == oveType->getCanonicalType())\n+          return ove;\n+      }\n+    }\n+  }\n+  return nullptr;\n+}\n \n RValue RValueEmitter::visitAbstractClosureExpr(AbstractClosureExpr *e,\n                                                SGFContext C) {\n+  if (auto ove = opaqueValueExprToSubstituteForAutoClosure(e))\n+    return visitOpaqueValueExpr(ove, C);",
        "path": "lib/SILGen/SILGenExpr.cpp",
        "position": 28,
        "original_position": 33,
        "commit_id": "54572fb9db12d4747bad1e72aa6ad96efe257a6b",
        "original_commit_id": "62b21e487dfd968d532dd148e9e42b288153581c",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "It has semantic effect.\r\n\r\nI wasn't comfortable adding a big comment at the start of `visitAbstractClosureExpr`, so the explanation for this is in a comment in the static helper function `opaqueValueExprToSubstituteForAutoClosure`, which reads:\r\n\r\n``` C++\r\nstatic OpaqueValueExpr *opaqueValueExprToSubstituteForAutoClosure(\r\n    const AbstractClosureExpr *e) {\r\n  // When we find an autoclosure that just calls an opaque closure,\r\n  // this is a case where we've created the opaque closure as a\r\n  // stand-in for the autoclosure itself. Such an opaque closure is\r\n  // created when we have a property wrapper's 'init(wrappedValue:)'\r\n  // taking an autoclosure argument.\r\n```",
        "created_at": "2019-09-12T18:53:27Z",
        "updated_at": "2020-01-10T02:46:02Z",
        "html_url": "https://github.com/apple/swift/pull/26572#discussion_r323898028",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26572",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/323898028"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26572#discussion_r323898028"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26572"
            }
        },
        "in_reply_to_id": 323417437
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/324654478",
        "pull_request_review_id": 288601860,
        "id": 324654478,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDY1NDQ3OA==",
        "diff_hunk": "@@ -650,16 +678,25 @@ Expr *swift::buildPropertyWrapperInitialValueCall(\n \n     SourceLoc startLoc = wrapperAttrs[i]->getTypeLoc().getSourceRange().Start;\n \n+    auto init = var->getAttachedPropertyWrapperTypeInfo(i).wrappedValueInit;\n+    if (init && resultTy) {\n+      auto paramsList = init->getParameters();\n+      if (paramsList->size() > 0 && paramsList->get(0)->isAutoClosure()) {\n+        auto fnTy = FunctionType::get({}, resultTy);\n+        initializer = new (ctx) AutoClosureExpr(initializer, fnTy,",
        "path": "lib/Sema/TypeCheckPropertyWrapper.cpp",
        "position": null,
        "original_position": 51,
        "commit_id": "54572fb9db12d4747bad1e72aa6ad96efe257a6b",
        "original_commit_id": "1c1888348c381766fb619233736a417ab5a97036",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Indeed, it appears that we don't need this code. I'll remove it. (I didn't know it would be taken care of by the type checker.)",
        "created_at": "2019-09-16T12:50:08Z",
        "updated_at": "2020-01-10T02:46:02Z",
        "html_url": "https://github.com/apple/swift/pull/26572#discussion_r324654478",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26572",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/324654478"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26572#discussion_r324654478"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26572"
            }
        },
        "in_reply_to_id": 324390674
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/352389955",
        "pull_request_review_id": 324980697,
        "id": 352389955,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4OTk1NQ==",
        "diff_hunk": "@@ -1572,6 +1570,19 @@ synthesizeCoroutineAccessorBody(AccessorDecl *accessor, ASTContext &ctx) {\n                    ? TargetImpl::Ordinary\n                    : TargetImpl::Implementation);\n \n+  // If this is a variable with an attached property wrapper, then\n+  // the accessors need to yield the wrappedValue or projectedValue.\n+  if (auto var = dyn_cast<VarDecl>(storage)) {\n+    if (var->hasAttachedPropertyWrapper()) {\n+      target = TargetImpl::Wrapper;\n+    }\n+\n+    if (var->getOriginalWrappedProperty(\n+            PropertyWrapperSynthesizedPropertyKind::StorageWrapper)) {\n+      target = TargetImpl::WrapperStorage;\n+    }\n+  }\n+",
        "path": "lib/Sema/TypeCheckStorage.cpp",
        "position": 34,
        "original_position": 34,
        "commit_id": "6d9644774d7ad54d47a751feb6193ffbe1362e0f",
        "original_commit_id": "6d9644774d7ad54d47a751feb6193ffbe1362e0f",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@theblixguy I don't understand why this is required.\r\n\r\nGiven a property like:\r\n~~~\r\nstruct Foo {\r\n  @Wrap var bar: Int\r\n}\r\n~~~\r\n\r\nBefore this PR, the synthesized modify in SIL looked like:\r\n~~~\r\nFoo.bar.modify:\r\n  var tmp = call Foo.bar.getter(self)\r\n  yield &tmp\r\n  call Foo.bar.setter(tmp, &self)\r\n~~~\r\n\r\nwhere the Foo.text.getter calls Wrap.wrappedValue.getter, and Foo.text.setter calls Wrap.wrappvedValue.setter.\r\n\r\nAfter this PR, it looks like:\r\n~~~\r\nFoo.bar.modify:\r\n  var tmp = call Wrap.wrappedValue.getter(self._text)\r\n  yield &tmp\r\n  call Wrap.wrappedValue.setter(tmp)\r\n~~~\r\n\r\nThese are equivalent, but I thought it was cleaner that Foo.bar.modify calls into Foo.bar.getter/setter instead of doing something special for property wrappers. Why is it being done the latter way?",
        "created_at": "2019-12-02T01:12:04Z",
        "updated_at": "2019-12-02T01:18:37Z",
        "html_url": "https://github.com/apple/swift/pull/28216#discussion_r352389955",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/28216",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/352389955"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/28216#discussion_r352389955"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/28216"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/352392102",
        "pull_request_review_id": 324983193,
        "id": 352392102,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM5MjEwMg==",
        "diff_hunk": "@@ -1585,6 +1669,12 @@ synthesizeCoroutineAccessorBody(AccessorDecl *accessor, ASTContext &ctx) {\n \n   bool isLValue = accessor->getAccessorKind() == AccessorKind::Modify;\n \n+  if (isLValue &&\n+      (storageReadWriteImpl == ReadWriteImplKind::StoredWithSimpleDidSet ||\n+       storageReadWriteImpl == ReadWriteImplKind::InheritedWithSimpleDidSet)) {\n+    return synthesizeModifyCoroutineBodyWithSimpleDidSet(accessor, ctx);",
        "path": "lib/Sema/TypeCheckStorage.cpp",
        "position": 153,
        "original_position": 173,
        "commit_id": "defeca62ffb190c5ea08a552aa23afe29332e064",
        "original_commit_id": "28b437f19a7652215a4fdfc7dbd64333c57ac6b2",
        "user": {
            "login": "roop",
            "id": 554,
            "node_id": "MDQ6VXNlcjU1NA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/554?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/roop",
            "html_url": "https://github.com/roop",
            "followers_url": "https://api.github.com/users/roop/followers",
            "following_url": "https://api.github.com/users/roop/following{/other_user}",
            "gists_url": "https://api.github.com/users/roop/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/roop/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/roop/subscriptions",
            "organizations_url": "https://api.github.com/users/roop/orgs",
            "repos_url": "https://api.github.com/users/roop/repos",
            "events_url": "https://api.github.com/users/roop/events{/privacy}",
            "received_events_url": "https://api.github.com/users/roop/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "@theblixguy Should we be checking for property wrappers / `@objc`, and avoid using `synthesizeModifyCoroutineBodyWithSimpleDidSet()` in those cases?",
        "created_at": "2019-12-02T01:31:32Z",
        "updated_at": "2019-12-19T21:37:07Z",
        "html_url": "https://github.com/apple/swift/pull/26632#discussion_r352392102",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/26632",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/352392102"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/26632#discussion_r352392102"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/26632"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/191039012",
        "pull_request_review_id": 123546651,
        "id": 191039012,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzOTAxMg==",
        "diff_hunk": "@@ -28,6 +28,18 @@\n @_frozen\n public enum Never {}\n \n+extension Never: Equatable {\n+  public static func == (lhs: Never, rhs: Never) -> Bool {\n+    switch (lhs, rhs) {",
        "path": "stdlib/public/core/Policy.swift",
        "position": null,
        "original_position": 6,
        "commit_id": "e0dae8e2ae1a4b576d1cd8cbb40bcf7444b611c4",
        "original_commit_id": "9a8da862f21340d96ed9e3fbc7f271bbf451c5b6",
        "user": {
            "login": "stephencelis",
            "id": 658,
            "node_id": "MDQ6VXNlcjY1OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/658?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephencelis",
            "html_url": "https://github.com/stephencelis",
            "followers_url": "https://api.github.com/users/stephencelis/followers",
            "following_url": "https://api.github.com/users/stephencelis/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephencelis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephencelis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephencelis/subscriptions",
            "organizations_url": "https://api.github.com/users/stephencelis/orgs",
            "repos_url": "https://api.github.com/users/stephencelis/repos",
            "events_url": "https://api.github.com/users/stephencelis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephencelis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "The switch is required by the compiler right now, no?",
        "created_at": "2018-05-26T04:09:05Z",
        "updated_at": "2018-07-18T00:44:18Z",
        "html_url": "https://github.com/apple/swift/pull/16857#discussion_r191039012",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/16857",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/191039012"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/16857#discussion_r191039012"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/16857"
            }
        },
        "in_reply_to_id": 191036122
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/191039593",
        "pull_request_review_id": 123547310,
        "id": 191039593,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5MTAzOTU5Mw==",
        "diff_hunk": "@@ -28,6 +28,18 @@\n @_frozen\n public enum Never {}\n \n+extension Never: Equatable {\n+  public static func == (lhs: Never, rhs: Never) -> Bool {\n+    switch (lhs, rhs) {",
        "path": "stdlib/public/core/Policy.swift",
        "position": null,
        "original_position": 6,
        "commit_id": "e0dae8e2ae1a4b576d1cd8cbb40bcf7444b611c4",
        "original_commit_id": "9a8da862f21340d96ed9e3fbc7f271bbf451c5b6",
        "user": {
            "login": "stephencelis",
            "id": 658,
            "node_id": "MDQ6VXNlcjY1OA==",
            "avatar_url": "https://avatars0.githubusercontent.com/u/658?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/stephencelis",
            "html_url": "https://github.com/stephencelis",
            "followers_url": "https://api.github.com/users/stephencelis/followers",
            "following_url": "https://api.github.com/users/stephencelis/following{/other_user}",
            "gists_url": "https://api.github.com/users/stephencelis/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/stephencelis/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/stephencelis/subscriptions",
            "organizations_url": "https://api.github.com/users/stephencelis/orgs",
            "repos_url": "https://api.github.com/users/stephencelis/repos",
            "events_url": "https://api.github.com/users/stephencelis/events{/privacy}",
            "received_events_url": "https://api.github.com/users/stephencelis/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oh, ha. Even did that here: https://github.com/pointfreeco/swift-prelude/blob/master/Sources/Prelude/Equatable.swift#L3 I suppose the switch is only required for `absurd`.",
        "created_at": "2018-05-26T04:38:55Z",
        "updated_at": "2018-07-18T00:44:18Z",
        "html_url": "https://github.com/apple/swift/pull/16857#discussion_r191039593",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/16857",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/191039593"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/16857#discussion_r191039593"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/16857"
            }
        },
        "in_reply_to_id": 191036122
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/46768067",
        "pull_request_review_id": null,
        "id": 46768067,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY4MDY3",
        "diff_hunk": "@@ -146,3 +146,96 @@ StaticStringTestSuite.test(\"UnicodeScalarRepresentation/byteSize\")\n \n runAllTests()\n \n+StaticStringTestSuite.test(\"UnicodeScalarView/round-trip/UTF8\") {",
        "path": "test/1_stdlib/StaticString.swift",
        "position": null,
        "original_position": 4,
        "commit_id": "9500d877fb64c64c6c467d45b4923d4c245eab9c",
        "original_commit_id": "13ce8c21f0f4a847a4ff707741de121c9b9d56f3",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Oops.\n",
        "created_at": "2015-12-06T08:47:58Z",
        "updated_at": "2015-12-06T09:24:49Z",
        "html_url": "https://github.com/apple/swift/pull/277#discussion_r46768067",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/277",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/46768067"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/277#discussion_r46768067"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/277"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/47302607",
        "pull_request_review_id": null,
        "id": 47302607,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyNjA3",
        "diff_hunk": "@@ -0,0 +1,45 @@\n+//===----------------------------------------------------------------------===//\n+//\n+// This source file is part of the Swift.org open source project\n+//\n+// Copyright (c) 2014 - 2015 Apple Inc. and the Swift project authors\n+// Licensed under Apache License v2.0 with Runtime Library Exception\n+//\n+// See http://swift.org/LICENSE.txt for license information\n+// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors\n+//\n+//===----------------------------------------------------------------------===//\n+\n+// Generate comparison functions for tuples up to some reasonable arity.\n+\n+% for arity in range(2,7):\n+%   typeParams = [chr(ord(\"A\")+i) for i in range(arity)]\n+%   tupleT = \"({})\".format(\",\".join(typeParams))\n+\n+%   equatableTypeParams = \", \".join([\"{}: Equatable\".format(c) for c in typeParams])\n+\n+@warn_unused_result\n+public func == <${equatableTypeParams}>(lhs: ${tupleT}, rhs: ${tupleT}) -> Bool {\n+%   ops = [\"lhs.{} == rhs.{}\".format(i,i) for i in range(arity)]\n+  return ${\" && \".join(ops)}\n+}\n+\n+@warn_unused_result\n+public func != <${equatableTypeParams}>(lhs: ${tupleT}, rhs: ${tupleT}) -> Bool {\n+%   ops = [\"lhs.{} != rhs.{}\".format(i,i) for i in range(arity)]\n+  return ${\" || \".join(ops)}\n+}\n+\n+%   comparableTypeParams = \", \".join([\"{}: Comparable\".format(c) for c in typeParams])\n+%   for op in [\"<\", \">\"]:\n+%     for opeq in [\"\", \"=\"]:\n+@warn_unused_result\n+public func ${op}${opeq} <${comparableTypeParams}>(lhs: ${tupleT}, rhs: ${tupleT}) -> Bool {\n+%   for i in range(arity-1):\n+  if lhs.${i} != rhs.${i} { return lhs.${i} ${op} rhs.${i} }\n+%   end\n+  return lhs.${arity-1} ${op}${opeq} rhs.${arity-1}",
        "path": "stdlib/public/core/Tuple.swift.gyb",
        "position": 51,
        "original_position": 41,
        "commit_id": "b61c7a5004af132d9e7cf903c8dca7a56d00655d",
        "original_commit_id": "41bd040effb727b56d17d5c079a530bacd6dccbb",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I tried defining `!=` in terms of `=` and it actually _increased_ code size. I didn't do any further investigation.\n",
        "created_at": "2015-12-10T23:26:56Z",
        "updated_at": "2015-12-24T02:25:42Z",
        "html_url": "https://github.com/apple/swift/pull/408#discussion_r47302607",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/408",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/47302607"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/408#discussion_r47302607"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/408"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/47302932",
        "pull_request_review_id": null,
        "id": 47302932,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAyOTMy",
        "diff_hunk": "@@ -0,0 +1,110 @@\n+// RUN: %target-run-simple-swift\n+// REQUIRES: executable_test\n+\n+import StdlibUnittest\n+\n+var TupleTestSuite = TestSuite(\"Tuple\")\n+\n+// Test tuple comparison operators\n+// all the tuple types use the same basic implementation for the operators\n+// so testing any arity tests them all\n+\n+func testEquality<A: Equatable, B: Equatable, C: Equatable>(\n+  lhs: (A,B,C), equal: Bool, to rhs: (A,B,C),\n+  file: String = __FILE__, line: UInt = __LINE__\n+) {\n+  if equal {\n+    expectTrue(lhs == rhs, file: file, line: line)\n+    expectFalse(lhs != rhs, file: file, line: line)\n+  } else {\n+    expectFalse(lhs == rhs, file: file, line: line)\n+    expectTrue(lhs != rhs, file: file, line: line)\n+  }\n+}\n+\n+TupleTestSuite.test(\"Tuple/equality\") {",
        "path": "test/1_stdlib/Tuple.swift",
        "position": null,
        "original_position": 25,
        "commit_id": "b61c7a5004af132d9e7cf903c8dca7a56d00655d",
        "original_commit_id": "41bd040effb727b56d17d5c079a530bacd6dccbb",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yeah, that would be nice. Though FWIW `checkComparable` doesn't handle the case of NaN (which is reasonable in that `Comparable` is strict total order which NaN violates, but still good to check).\n",
        "created_at": "2015-12-10T23:30:27Z",
        "updated_at": "2015-12-24T02:25:42Z",
        "html_url": "https://github.com/apple/swift/pull/408#discussion_r47302932",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/408",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/47302932"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/408#discussion_r47302932"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/408"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/47426217",
        "pull_request_review_id": null,
        "id": 47426217,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI2MjE3",
        "diff_hunk": "@@ -27,27 +27,45 @@ func testTupleNoDot1() {\n   var t = (1, 2.0)\n   t#^TUPLE_NO_DOT_1^#\n }\n-// TUPLE_NO_DOT_1: Begin completions, 2 items\n+// TUPLE_NO_DOT_1: Begin completions, 8 items\n // TUPLE_NO_DOT_1-NEXT: Pattern/CurrNominal: .0[#Int#]{{; name=.+$}}\n // TUPLE_NO_DOT_1-NEXT: Pattern/CurrNominal: .1[#Double#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: == {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: <= {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: >= {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: < {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: != {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: > {#(Int, Double)#}[#Bool#]{{; name=.+$}}",
        "path": "test/IDE/complete_expr_tuple.swift",
        "position": null,
        "original_position": 13,
        "commit_id": "b61c7a5004af132d9e7cf903c8dca7a56d00655d",
        "original_commit_id": "150dea8c6e0c1a1b15722e6a393505914835653a",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "How are code completions sorted? I tried looking through the code but it's not immediately obvious. I did find code that appears to sort them based on some definition of a name (which I'd assume is like `\"==\"` but I don't actually know), but the output here doesn't appear to be sorted in any way I can figure out. If it was sorted by name I'd expect to see the ordering be `!=`, `<`, `<=`, `==`, `>`, `>=`, and it's not. Heck, `!=` should show up before `.0` then (and in fact when tab-completing in the integrated REPL it does sort it like that). So the ordering here must be based on something else, and I'm worried that this \"something else\" might not be stable.\n\nI'm also not sure if we really want to match the full Decl[...]/OtherModule[..] prefix, but I'm not as concerned about that.\n\nIdeally I'd actually switch to using `-DAG` patterns to make it unordered, but that loses the property of ensuring there's no lines before the `End completions` that don't match one of the expected completions. I don't know how important that is.\n",
        "created_at": "2015-12-12T03:23:41Z",
        "updated_at": "2015-12-24T02:25:42Z",
        "html_url": "https://github.com/apple/swift/pull/408#discussion_r47426217",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/408",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/47426217"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/408#discussion_r47426217"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/408"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/47427894",
        "pull_request_review_id": null,
        "id": 47427894,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3ODk0",
        "diff_hunk": "@@ -27,27 +27,45 @@ func testTupleNoDot1() {\n   var t = (1, 2.0)\n   t#^TUPLE_NO_DOT_1^#\n }\n-// TUPLE_NO_DOT_1: Begin completions, 2 items\n+// TUPLE_NO_DOT_1: Begin completions, 8 items\n // TUPLE_NO_DOT_1-NEXT: Pattern/CurrNominal: .0[#Int#]{{; name=.+$}}\n // TUPLE_NO_DOT_1-NEXT: Pattern/CurrNominal: .1[#Double#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: == {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: <= {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: >= {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: < {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: != {#(Int, Double)#}[#Bool#]{{; name=.+$}}\n+// TUPLE_NO_DOT_1-NEXT: Decl[InfixOperatorFunction]/OtherModule[Swift]: > {#(Int, Double)#}[#Bool#]{{; name=.+$}}",
        "path": "test/IDE/complete_expr_tuple.swift",
        "position": null,
        "original_position": 13,
        "commit_id": "b61c7a5004af132d9e7cf903c8dca7a56d00655d",
        "original_commit_id": "150dea8c6e0c1a1b15722e6a393505914835653a",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok. Should I switch them all to `-DAG`, under the assumption that they may plausibly show up before the tuple fields? The existing tests were already relying on the order of the tuple fields, and I don't know if that's something they need to preserve (but preserving that requires assuming they show up first).\n",
        "created_at": "2015-12-12T05:56:10Z",
        "updated_at": "2015-12-24T02:25:42Z",
        "html_url": "https://github.com/apple/swift/pull/408#discussion_r47427894",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/408",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/47427894"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/408#discussion_r47427894"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/408"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/47880838",
        "pull_request_review_id": null,
        "id": 47880838,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwODM4",
        "diff_hunk": "@@ -0,0 +1,12 @@\n+// FIXME: @objc(Renamed) enums should work\n+// XFAIL: *\n+\n+// RUN: %target-swift-frontend -emit-sil %s -import-objc-header %S/Inputs/enum-objc.h -verify",
        "path": "test/ClangModules/enum-objc.swift",
        "position": null,
        "original_position": 4,
        "commit_id": "1dc44b2133e6bcf35b0436cd5de8f68b6fa33388",
        "original_commit_id": "6863263f1c858ac2dfb6c2e829541d7eadafa71e",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I wasn't sure if this sort of test is the right way to do this, but I was using the `test/ClangModules/enum-new.swift` test as a prototype.\n",
        "created_at": "2015-12-17T08:41:50Z",
        "updated_at": "2015-12-24T00:08:14Z",
        "html_url": "https://github.com/apple/swift/pull/618#discussion_r47880838",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/618",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/47880838"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/618#discussion_r47880838"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/618"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/48390991",
        "pull_request_review_id": null,
        "id": 48390991,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkwOTkx",
        "diff_hunk": "@@ -0,0 +1,172 @@\n+// RUN: rm -f %t.swift %t.out\n+\n+// RUN: %S/../../utils/gyb %s -o %t.swift\n+// RUN: %S/../../utils/line-directive %t.swift -- %target-build-swift %t.swift -o %t.out\n+// RUN: %S/../../utils/line-directive %t.swift -- %target-run %t.out\n+// REQUIRES: executable_test\n+\n+import StdlibUnittest\n+\n+var TupleTestSuite = TestSuite(\"Tuple\")\n+\n+// Test tuple comparison operators\n+// all the tuple types use the same basic implementation for the operators\n+// so testing any arity tests the logic for them all.\n+// Include at least one invocation for all arities as a sanity check.\n+\n+% maxArity = 6 # the highest arity the operators are defined for\n+\n+func testEquality<A : Equatable, B : Equatable, C : Equatable>(\n+  lhs: (A,B,C), equal: Bool, to rhs: (A,B,C),\n+  //===--- TRACE boilerplate ----------------------------------------------===//\n+  @autoclosure _ message: ()->String = \"\",\n+  showFrame: Bool = true,\n+  stackTrace: SourceLocStack = SourceLocStack(),  \n+  file: String = __FILE__, line: UInt = __LINE__\n+) {\n+  let trace = stackTrace.pushIf(showFrame, file: file, line: line)\n+  expectEqual(equal, lhs == rhs, stackTrace: trace)\n+  expectEqual(equal, rhs == lhs, stackTrace: trace)\n+  expectEqual(!equal, lhs != rhs, stackTrace: trace)\n+  expectEqual(!equal, rhs != lhs, stackTrace: trace)\n+}\n+\n+TupleTestSuite.test(\"Tuple/equality\") {\n+  testEquality((1,2,3), equal: true, to: (1,2,3))\n+  testEquality((1,2,3), equal: false, to: (1,2,4))\n+  testEquality((1,2,3), equal: false, to: (1,3,3))\n+  testEquality((1,2,3), equal: false, to: (2,2,3))\n+  testEquality((1,\"2\",3), equal: true, to: (1,\"2\",3))\n+  testEquality((1,\"2\",3), equal: false, to: (1,\"3\",3))\n+  testEquality((\"one\", 2.2, 3..<5), equal: true, to: (\"one\", 2.2, 3..<5))\n+\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (1.0, 2.0, .NaN))\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (1.0, .NaN, 3.0))\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (.NaN, 2.0, 3.0))\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (.NaN, .NaN, .NaN))\n+  testEquality((1.0, 2.0, Float.NaN), equal: false, to: (1.0, 2.0, 3.0))\n+  testEquality((1.0, 2.0, Float.NaN), equal: false, to: (1.0, 2.0, Float.NaN))\n+  testEquality((Float.NaN, Float.NaN, Float.NaN), equal: false, to: (.NaN, .NaN, .NaN))\n+  testEquality((Float.NaN, Float.NaN, Float.NaN), equal: false, to: (1.0, 2.0, 3.0))\n+\n+  expectTrue((1,2) == (1,2))\n+  expectTrue((1,2) != (1,3))\n+  expectTrue((1,2,3,4) == (1,2,3,4))\n+  expectTrue((1,2,3,4) != (1,2,3,3))\n+  expectTrue((1,2,3,4,5) == (1,2,3,4,5))\n+  expectTrue((1,2,3,4,5) != (1,2,3,4,4))\n+  expectTrue((1,2,3,4,5,6) == (1,2,3,4,5,6))\n+  expectTrue((1,2,3,4,5,6) != (1,2,3,4,5,5))\n+}\n+\n+TupleTestSuite.test(\"Tuple/equality/sanity-check\") {\n+  // sanity check all arities\n+% for arity in range(2,maxArity+1):\n+%   a = str(tuple(range(1, arity+1)))\n+%   b = \"({}, 0)\".format(\", \".join([str(i) for i in range(1,arity)]))\n+%   c = \"(0, {})\".format(\", \".join([str(i) for i in range(2,arity+1)]))\n+  expectTrue(${a} == ${a})\n+  expectTrue(${a} != ${b})\n+  expectTrue(${b} != ${a})\n+  expectTrue(${a} != ${c})\n+  expectTrue(${c} != ${a})\n+% end\n+}\n+\n+enum Ordering : Equatable {\n+  case LessThan\n+  case EqualTo\n+  case GreaterThan\n+  case UnorderedWith // Comparable defines strict total order, but Float disobeys that with NaN\n+\n+  func flip() -> Ordering {\n+    switch self {\n+    case .LessThan: return .GreaterThan\n+    case .EqualTo: return .EqualTo\n+    case .GreaterThan: return .LessThan\n+    case .UnorderedWith: return .UnorderedWith\n+    }\n+  }",
        "path": "test/1_stdlib/Tuple.swift.gyb",
        "position": null,
        "original_position": 89,
        "commit_id": "b61c7a5004af132d9e7cf903c8dca7a56d00655d",
        "original_commit_id": "55d40941c91f60220d28a6f34f0a7da7235212a2",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "You're right. I created it because I was using existing floating-point tests as inspiration, but didn't end up using it because there was no reason to do so.\n",
        "created_at": "2015-12-24T01:29:51Z",
        "updated_at": "2015-12-24T02:25:42Z",
        "html_url": "https://github.com/apple/swift/pull/408#discussion_r48390991",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/408",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/48390991"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/408#discussion_r48390991"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/408"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/48391007",
        "pull_request_review_id": null,
        "id": 48391007,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkxMDA3",
        "diff_hunk": "@@ -0,0 +1,172 @@\n+// RUN: rm -f %t.swift %t.out\n+\n+// RUN: %S/../../utils/gyb %s -o %t.swift\n+// RUN: %S/../../utils/line-directive %t.swift -- %target-build-swift %t.swift -o %t.out\n+// RUN: %S/../../utils/line-directive %t.swift -- %target-run %t.out\n+// REQUIRES: executable_test\n+\n+import StdlibUnittest\n+\n+var TupleTestSuite = TestSuite(\"Tuple\")\n+\n+// Test tuple comparison operators\n+// all the tuple types use the same basic implementation for the operators\n+// so testing any arity tests the logic for them all.\n+// Include at least one invocation for all arities as a sanity check.\n+\n+% maxArity = 6 # the highest arity the operators are defined for\n+\n+func testEquality<A : Equatable, B : Equatable, C : Equatable>(\n+  lhs: (A,B,C), equal: Bool, to rhs: (A,B,C),\n+  //===--- TRACE boilerplate ----------------------------------------------===//\n+  @autoclosure _ message: ()->String = \"\",\n+  showFrame: Bool = true,\n+  stackTrace: SourceLocStack = SourceLocStack(),  \n+  file: String = __FILE__, line: UInt = __LINE__\n+) {\n+  let trace = stackTrace.pushIf(showFrame, file: file, line: line)\n+  expectEqual(equal, lhs == rhs, stackTrace: trace)\n+  expectEqual(equal, rhs == lhs, stackTrace: trace)\n+  expectEqual(!equal, lhs != rhs, stackTrace: trace)\n+  expectEqual(!equal, rhs != lhs, stackTrace: trace)\n+}\n+\n+TupleTestSuite.test(\"Tuple/equality\") {\n+  testEquality((1,2,3), equal: true, to: (1,2,3))\n+  testEquality((1,2,3), equal: false, to: (1,2,4))\n+  testEquality((1,2,3), equal: false, to: (1,3,3))\n+  testEquality((1,2,3), equal: false, to: (2,2,3))\n+  testEquality((1,\"2\",3), equal: true, to: (1,\"2\",3))\n+  testEquality((1,\"2\",3), equal: false, to: (1,\"3\",3))\n+  testEquality((\"one\", 2.2, 3..<5), equal: true, to: (\"one\", 2.2, 3..<5))\n+\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (1.0, 2.0, .NaN))\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (1.0, .NaN, 3.0))\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (.NaN, 2.0, 3.0))\n+  testEquality((1.0, 2.0, 3.0), equal: false, to: (.NaN, .NaN, .NaN))\n+  testEquality((1.0, 2.0, Float.NaN), equal: false, to: (1.0, 2.0, 3.0))\n+  testEquality((1.0, 2.0, Float.NaN), equal: false, to: (1.0, 2.0, Float.NaN))\n+  testEquality((Float.NaN, Float.NaN, Float.NaN), equal: false, to: (.NaN, .NaN, .NaN))\n+  testEquality((Float.NaN, Float.NaN, Float.NaN), equal: false, to: (1.0, 2.0, 3.0))\n+\n+  expectTrue((1,2) == (1,2))\n+  expectTrue((1,2) != (1,3))\n+  expectTrue((1,2,3,4) == (1,2,3,4))\n+  expectTrue((1,2,3,4) != (1,2,3,3))\n+  expectTrue((1,2,3,4,5) == (1,2,3,4,5))\n+  expectTrue((1,2,3,4,5) != (1,2,3,4,4))\n+  expectTrue((1,2,3,4,5,6) == (1,2,3,4,5,6))\n+  expectTrue((1,2,3,4,5,6) != (1,2,3,4,5,5))\n+}\n+\n+TupleTestSuite.test(\"Tuple/equality/sanity-check\") {\n+  // sanity check all arities\n+% for arity in range(2,maxArity+1):\n+%   a = str(tuple(range(1, arity+1)))\n+%   b = \"({}, 0)\".format(\", \".join([str(i) for i in range(1,arity)]))\n+%   c = \"(0, {})\".format(\", \".join([str(i) for i in range(2,arity+1)]))\n+  expectTrue(${a} == ${a})\n+  expectTrue(${a} != ${b})\n+  expectTrue(${b} != ${a})\n+  expectTrue(${a} != ${c})\n+  expectTrue(${c} != ${a})\n+% end\n+}\n+\n+enum Ordering : Equatable {\n+  case LessThan\n+  case EqualTo\n+  case GreaterThan\n+  case UnorderedWith // Comparable defines strict total order, but Float disobeys that with NaN\n+\n+  func flip() -> Ordering {\n+    switch self {\n+    case .LessThan: return .GreaterThan\n+    case .EqualTo: return .EqualTo\n+    case .GreaterThan: return .LessThan\n+    case .UnorderedWith: return .UnorderedWith\n+    }\n+  }\n+\n+  var isLT: Bool {\n+    if case .LessThan = self {\n+      return true\n+    }\n+    return false",
        "path": "test/1_stdlib/Tuple.swift.gyb",
        "position": null,
        "original_position": 95,
        "commit_id": "b61c7a5004af132d9e7cf903c8dca7a56d00655d",
        "original_commit_id": "55d40941c91f60220d28a6f34f0a7da7235212a2",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Good point.\n",
        "created_at": "2015-12-24T01:30:16Z",
        "updated_at": "2015-12-24T02:25:42Z",
        "html_url": "https://github.com/apple/swift/pull/408#discussion_r48391007",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/408",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/48391007"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/408#discussion_r48391007"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/408"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/48641265",
        "pull_request_review_id": null,
        "id": 48641265,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQxMjY1",
        "diff_hunk": "@@ -260,9 +260,10 @@ extension CollectionType {\n \n   /// Returns the first element of `self`, or `nil` if `self` is empty.\n   ///\n-  /// - Complexity: O(1)\n+  /// - Complexity: O(1) in most cases, possibly O(N) for lazy collections.\n   public var first: Generator.Element? {\n-    return isEmpty ? nil : self[startIndex]\n+    var gen = generate()\n+    return gen.next()",
        "path": "stdlib/public/core/Collection.swift",
        "position": null,
        "original_position": 9,
        "commit_id": "6ae85cea26c3c449157ba0315d888cdf58cb8369",
        "original_commit_id": "e02d50b14f4602f7d178238ada96f713ae5acb37",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "An alternative implementation looks like\n\n``` swift\nlet start = startIndex\nreturn start == endIndex ? nil : self[start]\n```\n\nThis basically just reimplements `isEmpty` locally without throwing away the start index. The generator approach seems slightly more straightforward though (and with my proposal to add `var first` to `SequenceType`, this is how it would be implemented there anyway).\n",
        "created_at": "2015-12-31T00:24:17Z",
        "updated_at": "2015-12-31T21:31:03Z",
        "html_url": "https://github.com/apple/swift/pull/825#discussion_r48641265",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/825",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/48641265"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/825#discussion_r48641265"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/825"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/48643090",
        "pull_request_review_id": null,
        "id": 48643090,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzMDkw",
        "diff_hunk": "@@ -260,9 +260,10 @@ extension CollectionType {\n \n   /// Returns the first element of `self`, or `nil` if `self` is empty.\n   ///\n-  /// - Complexity: O(1)\n+  /// - Complexity: O(1) in most cases, possibly O(N) for lazy collections.\n   public var first: Generator.Element? {\n-    return isEmpty ? nil : self[startIndex]\n+    var gen = generate()\n+    return gen.next()",
        "path": "stdlib/public/core/Collection.swift",
        "position": null,
        "original_position": 9,
        "commit_id": "6ae85cea26c3c449157ba0315d888cdf58cb8369",
        "original_commit_id": "e02d50b14f4602f7d178238ada96f713ae5acb37",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm also very mildly concerned that, despite `endIndex` being documented as O(1), it's possible for some collection to implement it more expensively (although they really shouldn't do that). Conversely, it's possible for a collection to implement a generator such that the creation of the generator is expensive, but they shouldn't do that either. Since iteration of sequences (and therefore generators) is so prevalent and therefore a prime target for optimization, I'm assuming that the generator approach (as used in my PR) is more reliably efficient than the index approach.\n",
        "created_at": "2015-12-31T01:22:33Z",
        "updated_at": "2015-12-31T21:31:03Z",
        "html_url": "https://github.com/apple/swift/pull/825#discussion_r48643090",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/825",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/48643090"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/825#discussion_r48643090"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/825"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/48650802",
        "pull_request_review_id": null,
        "id": 48650802,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwODAy",
        "diff_hunk": "@@ -260,9 +260,10 @@ extension CollectionType {\n \n   /// Returns the first element of `self`, or `nil` if `self` is empty.\n   ///\n-  /// - Complexity: O(1)\n+  /// - Complexity: O(1) in most cases, possibly O(N) for lazy collections.\n   public var first: Generator.Element? {\n-    return isEmpty ? nil : self[startIndex]\n+    var gen = generate()\n+    return gen.next()",
        "path": "stdlib/public/core/Collection.swift",
        "position": null,
        "original_position": 9,
        "commit_id": "6ae85cea26c3c449157ba0315d888cdf58cb8369",
        "original_commit_id": "e02d50b14f4602f7d178238ada96f713ae5acb37",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I'm not proposing that isEmpty be changed to use a generator. This is just the `first` property which, by definition, has to access the first element anyway.\n",
        "created_at": "2015-12-31T08:58:08Z",
        "updated_at": "2015-12-31T21:31:03Z",
        "html_url": "https://github.com/apple/swift/pull/825#discussion_r48650802",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/825",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/48650802"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/825#discussion_r48650802"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/825"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/48650980",
        "pull_request_review_id": null,
        "id": 48650980,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwOTgw",
        "diff_hunk": "@@ -260,9 +260,10 @@ extension CollectionType {\n \n   /// Returns the first element of `self`, or `nil` if `self` is empty.\n   ///\n-  /// - Complexity: O(1)\n+  /// - Complexity: O(1) in most cases, possibly O(N) for lazy collections.\n   public var first: Generator.Element? {\n-    return isEmpty ? nil : self[startIndex]\n+    var gen = generate()\n+    return gen.next()",
        "path": "stdlib/public/core/Collection.swift",
        "position": null,
        "original_position": 9,
        "commit_id": "6ae85cea26c3c449157ba0315d888cdf58cb8369",
        "original_commit_id": "e02d50b14f4602f7d178238ada96f713ae5acb37",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "I believe I ran the regular test suite but not the validation suite. I'd check but I'm not at my computer right now. If you don't merge it tonight then I'll make sure to re-run it tomorrow just to be sure.\n",
        "created_at": "2015-12-31T09:06:04Z",
        "updated_at": "2015-12-31T21:31:03Z",
        "html_url": "https://github.com/apple/swift/pull/825#discussion_r48650980",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/825",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/48650980"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/825#discussion_r48650980"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/825"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/apple/swift/pulls/comments/48671837",
        "pull_request_review_id": null,
        "id": 48671837,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxODM3",
        "diff_hunk": "@@ -20,6 +20,11 @@\n /// methods that return lazy wrappers that are themselves\n /// `LazyCollectionType`s.\n ///\n+/// - Note: Many lazy collections may not offer the usual performance given by\n+///   `CollectionType`, `ForwardIndexType`, or `BidirectionalIndexType`. Be\n+///   aware, therefore, that general operations on `LazyCollectionType`\n+///   instances may not have the documented complexity.",
        "path": "stdlib/public/core/LazyCollection.swift",
        "position": null,
        "original_position": 7,
        "commit_id": "dee1c7a05c38f8bdc26583394d88513acd4f62f3",
        "original_commit_id": "9edcca01d37d3fffe7d568e03b526793380a192e",
        "user": {
            "login": "lilyball",
            "id": 714,
            "node_id": "MDQ6VXNlcjcxNA==",
            "avatar_url": "https://avatars3.githubusercontent.com/u/714?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/lilyball",
            "html_url": "https://github.com/lilyball",
            "followers_url": "https://api.github.com/users/lilyball/followers",
            "following_url": "https://api.github.com/users/lilyball/following{/other_user}",
            "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions",
            "organizations_url": "https://api.github.com/users/lilyball/orgs",
            "repos_url": "https://api.github.com/users/lilyball/repos",
            "events_url": "https://api.github.com/users/lilyball/events{/privacy}",
            "received_events_url": "https://api.github.com/users/lilyball/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok. I put it here because I figured any newly-added lazy collections have a decent chance of also having unpredictable performance, but you're right, with only one actual instance of a `LazyCollectionType` with that performance, it's probably not worth having this note here.\n",
        "created_at": "2015-12-31T21:34:40Z",
        "updated_at": "2015-12-31T21:36:07Z",
        "html_url": "https://github.com/apple/swift/pull/829#discussion_r48671837",
        "pull_request_url": "https://api.github.com/repos/apple/swift/pulls/829",
        "author_association": "COLLABORATOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/apple/swift/pulls/comments/48671837"
            },
            "html": {
                "href": "https://github.com/apple/swift/pull/829#discussion_r48671837"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/apple/swift/pulls/829"
            }
        }
    }
]