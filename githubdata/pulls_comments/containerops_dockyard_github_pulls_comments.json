[
    {
        "url": "https://api.github.com/repos/Huawei/dockyard/pulls/comments/46982482",
        "pull_request_review_id": null,
        "id": 46982482,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyNDgy",
        "diff_hunk": "@@ -0,0 +1,209 @@\n+package clair\n+\n+import (\n+\t\"os\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/Sirupsen/logrus\"\n+\t\"github.com/containerops/wrench/setting\"\n+\t\"github.com/coreos/clair/database\"\n+\t\"github.com/coreos/clair/updater\"\n+\t\"github.com/coreos/clair/utils\"\n+\t\"github.com/coreos/clair/utils/types\"\n+\t\"github.com/coreos/clair/worker\"\n+\t\"github.com/coreos/pkg/capnslog\"\n+\n+\t_ \"github.com/coreos/clair/updater/fetchers\"\n+\t_ \"github.com/coreos/clair/worker/detectors/os\"\n+\t_ \"github.com/coreos/clair/worker/detectors/packages\"\n+)",
        "path": "clair/clair.go",
        "position": null,
        "original_position": 20,
        "commit_id": "d96efcd62c01dfdc297998cf71b23040d77022cf",
        "original_commit_id": "60d05ecbea6d79a9c0374cd65949981bb709b6a5",
        "user": {
            "login": "MabinGo",
            "id": 10934340,
            "node_id": "MDQ6VXNlcjEwOTM0MzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/10934340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MabinGo",
            "html_url": "https://github.com/MabinGo",
            "followers_url": "https://api.github.com/users/MabinGo/followers",
            "following_url": "https://api.github.com/users/MabinGo/following{/other_user}",
            "gists_url": "https://api.github.com/users/MabinGo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MabinGo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MabinGo/subscriptions",
            "organizations_url": "https://api.github.com/users/MabinGo/orgs",
            "repos_url": "https://api.github.com/users/MabinGo/repos",
            "events_url": "https://api.github.com/users/MabinGo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MabinGo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "package import should follow the format as below,please update it.\neg.\nimport(\n\n```\n\"os\"  //go packages\n\n\"github.com/Sirupsen/logrus\"  //the third packages\n\n\"github.com/containerops/wrench/setting\"  //dockyard packages\n```\n\n)\n",
        "created_at": "2015-12-08T17:12:11Z",
        "updated_at": "2015-12-10T10:05:41Z",
        "html_url": "https://github.com/Huawei/dockyard/pull/71#discussion_r46982482",
        "pull_request_url": "https://api.github.com/repos/Huawei/dockyard/pulls/71",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Huawei/dockyard/pulls/comments/46982482"
            },
            "html": {
                "href": "https://github.com/Huawei/dockyard/pull/71#discussion_r46982482"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Huawei/dockyard/pulls/71"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Huawei/dockyard/pulls/comments/46985887",
        "pull_request_review_id": null,
        "id": 46985887,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1ODg3",
        "diff_hunk": "@@ -0,0 +1,209 @@\n+package clair\n+\n+import (\n+\t\"os\"\n+\t\"strings\"\n+\t\"time\"\n+\n+\t\"github.com/Sirupsen/logrus\"\n+\t\"github.com/containerops/wrench/setting\"\n+\t\"github.com/coreos/clair/database\"\n+\t\"github.com/coreos/clair/updater\"\n+\t\"github.com/coreos/clair/utils\"\n+\t\"github.com/coreos/clair/utils/types\"\n+\t\"github.com/coreos/clair/worker\"\n+\t\"github.com/coreos/pkg/capnslog\"\n+\n+\t_ \"github.com/coreos/clair/updater/fetchers\"\n+\t_ \"github.com/coreos/clair/worker/detectors/os\"\n+\t_ \"github.com/coreos/clair/worker/detectors/packages\"\n+)\n+\n+type ClairConfig struct {\n+\tKeepDB       bool\n+\tDBPath       string\n+\tLogLevel     string\n+\tDuration     string\n+\tVulnPriority string\n+}\n+\n+const (\n+\tDefaultClairUpdateDuration = \"1h0m0s\"\n+\tDefaultClairLogLevel       = \"info\"\n+\tDefaultClairDBPath         = \"/db\"\n+\tDefaultClairVulnPriority   = \"Low\"\n+)\n+\n+var (\n+\tclairConf    ClairConfig\n+\tclairStopper *utils.Stopper\n+)\n+\n+func init() {\n+\tvar conf ClairConfig\n+\t// Load database setting\n+\tif setting.ClairDBPath != \"\" {",
        "path": "clair/clair.go",
        "position": null,
        "original_position": 45,
        "commit_id": "d96efcd62c01dfdc297998cf71b23040d77022cf",
        "original_commit_id": "60d05ecbea6d79a9c0374cd65949981bb709b6a5",
        "user": {
            "login": "MabinGo",
            "id": 10934340,
            "node_id": "MDQ6VXNlcjEwOTM0MzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/10934340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MabinGo",
            "html_url": "https://github.com/MabinGo",
            "followers_url": "https://api.github.com/users/MabinGo/followers",
            "following_url": "https://api.github.com/users/MabinGo/following{/other_user}",
            "gists_url": "https://api.github.com/users/MabinGo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MabinGo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MabinGo/subscriptions",
            "organizations_url": "https://api.github.com/users/MabinGo/orgs",
            "repos_url": "https://api.github.com/users/MabinGo/repos",
            "events_url": "https://api.github.com/users/MabinGo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MabinGo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "some problem occured because init function will be called before reading config file,please check it.\n",
        "created_at": "2015-12-08T17:38:08Z",
        "updated_at": "2015-12-10T10:05:41Z",
        "html_url": "https://github.com/Huawei/dockyard/pull/71#discussion_r46985887",
        "pull_request_url": "https://api.github.com/repos/Huawei/dockyard/pulls/71",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Huawei/dockyard/pulls/comments/46985887"
            },
            "html": {
                "href": "https://github.com/Huawei/dockyard/pull/71#discussion_r46985887"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Huawei/dockyard/pulls/71"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/Huawei/dockyard/pulls/comments/48445431",
        "pull_request_review_id": null,
        "id": 48445431,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NDMx",
        "diff_hunk": "@@ -0,0 +1,243 @@\n+package oss\n+\n+import (\n+\t\"bytes\"\n+\t\"crypto/md5\"\n+\t\"encoding/json\"\n+\t\"fmt\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"runtime\"\n+\t\"sync\"\n+\n+\t\"github.com/containerops/dockyard/backend/drivers\"\n+\t\"github.com/containerops/wrench/setting\"\n+)\n+\n+type Fileinfo struct {\n+\tIndex   int    `json:\"index\"`\n+\tStart   int    `json:\"start\"`\n+\tEnd     int    `json:\"end\"`\n+\tIslast  bool   `json:\"isLast\"`\n+\tModtime string `json:\"modTime\"`\n+}\n+\n+func init() {\n+\tdrivers.Register(\"oss\", InitFunc)\n+}\n+\n+func InitFunc() {\n+\tdrivers.InjectReflect.Bind(\"osssave\", osssave)\n+}\n+\n+func osssave(filepath string) error {\n+\t//TODO: define the naming rules of path\n+\tpath := filepath\n+\tpartSize := setting.PartSizeMB * 1024 * 1024\n+\n+\t//calculate the fragment number according to settings\n+\tfile, err := os.Open(filepath)\n+\tdefer file.Close()\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"open file %s err: %v \\n\", filepath, err)\n+\t}\n+\tfileinfo, err := file.Stat()\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"get file %s info err: %v \\n\", filepath, err)\n+\t}\n+\tfileSize := fileinfo.Size()\n+\tfileBody := make([]byte, fileSize)\n+\tnread, err := file.Read(fileBody)\n+\tif err != nil || int64(nread) != fileSize {\n+\t\treturn fmt.Errorf(\"[oss save] read %s nread: %v, fileSize: %v, err: %v\", filepath, nread, fileSize, err)\n+\t}\n+\tpartCount := int(fileSize / int64(partSize))\n+\tpartial := int(fileSize % int64(partSize))\n+\n+\tif partCount == 0 && partial == 0 {\n+\t\treturn nil\n+\t}\n+\n+\t// if data divide into only one fragment\n+\tif partCount == 0 && partial != 0 {\n+\t\terr := postFile(path, fileBody[0:partial], 0, 0, int64(partial), true)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"oss save file error: %v\", err)\n+\t\t}\n+\t\treturn nil\n+\t}\n+\n+\t//if data divide into more than one fragment\n+\tvar wg sync.WaitGroup\n+\twg.Add(partCount)\n+\tresult := make([]int, partCount)\n+\tbegin := 0\n+\tend := 0\n+\tfor k := 0; k < partCount; k++ {\n+\t\tgo func(k int) {\n+\t\t\tdefer wg.Done()\n+\t\t\tbegin = k * partSize\n+\t\t\tend = (k + 1) * partSize\n+\t\t\terr := postFile(path, fileBody[begin:end], k, int64(begin), int64(end), false)\n+\t\t\tif err != nil {\n+\t\t\t\tfmt.Errorf(\"oss save file error: %v \\n\", err)\n+\t\t\t}\n+\t\t\tresult[k] = 1\n+\t\t}(k)\n+\t\truntime.Gosched()\n+\t}\n+\twg.Wait()\n+\tk := partCount\n+\tbegin = k * partSize\n+\tif partial != 0 {\n+\t\tend = begin + partial\n+\t}\n+\terr = postFile(path, fileBody[begin:end], k, int64(begin), int64(end), true)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"oss save file error: %v\", err)\n+\t}\n+\t//check if all fragments successfully saved\n+\tfor i := 0; i < partCount; i++ {\n+\t\tif result[i] != 1 {\n+\t\t\treturn fmt.Errorf(\"oss save file error, fragment %d error\", i)\n+\t\t}\n+\t}\n+\tfmt.Printf(\"oss save file %v finish\", filepath)\n+\treturn nil\n+}\n+\n+func ossgetfileinfo(filepath string) error {\n+\tapiserveraddr := fmt.Sprintf(\"http://0.0.0.0:%v\", setting.APIPort)\n+\theader := make(map[string][]string, 0)\n+\theader[\"Path\"] = []string{filepath}\n+\tresult, statusCode, err := call(\"GET\", apiserveraddr, \"/api/v1/fileinfo\", nil, header)\n+\tif statusCode != http.StatusOK {\n+\t\treturn fmt.Errorf(\"statusCode error: %d\", statusCode, \", error: \", err)\n+\t}\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"error: \", err)\n+\t}\n+\tfmt.Printf(\"fileinfo: %s\\n\", string(result))\n+\treturn nil\n+}\n+\n+func ossdownload(tag string, path string) error {\n+\tapiserveraddr := fmt.Sprintf(\"http://0.0.0.0:%v\", setting.APIPort)\n+\t// get file information\n+\theader := make(map[string][]string, 0)\n+\theader[\"Path\"] = []string{tag}\n+\tresult, statusCode, err := call(\"GET\", apiserveraddr, \"/api/v1/fileinfo\", nil, header)\n+\tif statusCode != http.StatusOK {\n+\t\treturn fmt.Errorf(\"statusCode error: %d\", statusCode, \", error: \", err)\n+\t}\n+\tresult = bytes.TrimPrefix(result, []byte(\"{\\\"fragment-info\\\":\"))\n+\tresult = bytes.TrimSuffix(result, []byte(\"}\"))\n+\n+\t// tranform fileinfo data from json format to Fileinfo struct\n+\tvar files []Fileinfo\n+\tjson.Unmarshal([]byte(result), &files)\n+\tfragNum := len(files)\n+\tdata_frag := make(map[int][]byte)\n+\n+\tfor _, file := range files {\n+\t\t// transform fileinfo to header\n+\t\theaderfile := make(map[string][]string, 0)\n+\t\theaderfile[\"Path\"] = []string{tag}\n+\t\tindex := fmt.Sprintf(\"%v\", file.Index)\n+\t\theaderfile[\"Fragment-Index\"] = []string{index}\n+\t\tfragrange := fmt.Sprintf(\"%v-%v\", file.Start, file.End)\n+\t\theaderfile[\"Bytes-Range\"] = []string{fragrange}\n+\t\tislast := fmt.Sprintf(\"%v\", file.Islast)\n+\t\theaderfile[\"Is-Last\"] = []string{islast}\n+\t\t// sent http request and get data\n+\t\tdata, statusCode, err := call(\"GET\", apiserveraddr, \"/api/v1/file\", nil, headerfile)\n+\t\tif statusCode != http.StatusOK {\n+\t\t\treturn fmt.Errorf(\"statusCode error: %d\", statusCode, \", error: \", err)\n+\t\t}\n+\t\tdata_frag[file.Index] = data\n+\t}\n+\n+\t// write data into local file\n+\tlocalfile, err := os.OpenFile(path, os.O_RDWR|os.O_APPEND|os.O_CREATE, os.ModeType)\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"open local file error:%v\", err.Error())\n+\t}\n+\tdefer localfile.Close()\n+\tvar data []byte\n+\tfor i := 0; i < fragNum; i++ {\n+\t\tdata = append(data, data_frag[i]...)\n+\t}\n+\tif err = ioutil.WriteFile(path, data, 0777); err != nil {\n+\t\treturn fmt.Errorf(\"write local file error:%v\", err.Error())\n+\t}\n+\n+\t//md5 generate\n+\tmd5 := md5.Sum(data)\n+\tfmt.Printf(\"md5=%x \\n\", md5)\n+\treturn nil\n+}\n+\n+func ossdel(filepath string) error {\n+\tapiserveraddr := fmt.Sprintf(\"http://0.0.0.0:%v\", setting.APIPort)\n+\theader := make(map[string][]string, 0)\n+\theader[\"Path\"] = []string{filepath}\n+\n+\t_, statusCode, err := call(\"DELETE\", apiserveraddr, \"/api/v1/file\", nil, header)\n+\n+\tif statusCode != http.StatusNoContent {\n+\t\treturn fmt.Errorf(\"statusCode error: %d\", statusCode, \", error: \", err)\n+\t}\n+\tif err != nil {\n+\t\treturn fmt.Errorf(\"error: \", err)\n+\t}\n+\treturn nil\n+}\n+\n+// Call func for http request\n+func call(method, baseUrl, path string, body io.Reader, headers map[string][]string) ([]byte, int, error) {\n+\tclient := &http.Client{}\n+\treq, err := http.NewRequest(method, baseUrl+path, body)\n+\tif err != nil {\n+\t\treturn nil, 408, err\n+\t}\n+\tif method == \"POST\" {\n+\t\treq.Header.Set(\"Content-Type\", \"application/json\")\n+\t}\n+\n+\tif headers != nil {\n+\t\tfor k, v := range headers {\n+\t\t\treq.Header[k] = v\n+\t\t}\n+\t}\n+\tresp, err := client.Do(req)\n+\tif err != nil {\n+\t\tif resp != nil {\n+\t\t\treturn nil, resp.StatusCode, err\n+\t\t}\n+\t\treturn nil, http.StatusNotFound, err\n+\t}\n+\n+\tdataBody, err := ioutil.ReadAll(resp.Body)\n+\tdefer resp.Body.Close()\n+\tif err != nil {\n+\t\treturn nil, resp.StatusCode, err\n+\t}\n+\treturn dataBody, resp.StatusCode, nil\n+}\n+\n+func postFile(path string, data []byte, index int, begin int64, end int64, isLast bool) error {\n+\tapiserveraddr := fmt.Sprintf(\"http://0.0.0.0:%v\", setting.APIPort)",
        "path": "backend/drivers/oss/oss.go",
        "position": null,
        "original_position": 231,
        "commit_id": "064497cf4b329e2ff9fac2657f30b569cb0ebb96",
        "original_commit_id": "9d0c2b5afb23f3d49a10a9bededaf9caf53c7657",
        "user": {
            "login": "MabinGo",
            "id": 10934340,
            "node_id": "MDQ6VXNlcjEwOTM0MzQw",
            "avatar_url": "https://avatars1.githubusercontent.com/u/10934340?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MabinGo",
            "html_url": "https://github.com/MabinGo",
            "followers_url": "https://api.github.com/users/MabinGo/followers",
            "following_url": "https://api.github.com/users/MabinGo/following{/other_user}",
            "gists_url": "https://api.github.com/users/MabinGo/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MabinGo/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MabinGo/subscriptions",
            "organizations_url": "https://api.github.com/users/MabinGo/orgs",
            "repos_url": "https://api.github.com/users/MabinGo/repos",
            "events_url": "https://api.github.com/users/MabinGo/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MabinGo/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "apiserveraddr should be generated by config,support http and https\n",
        "created_at": "2015-12-26T07:15:48Z",
        "updated_at": "2015-12-31T08:28:39Z",
        "html_url": "https://github.com/Huawei/dockyard/pull/80#discussion_r48445431",
        "pull_request_url": "https://api.github.com/repos/Huawei/dockyard/pulls/80",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/Huawei/dockyard/pulls/comments/48445431"
            },
            "html": {
                "href": "https://github.com/Huawei/dockyard/pull/80#discussion_r48445431"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/Huawei/dockyard/pulls/80"
            }
        }
    }
]