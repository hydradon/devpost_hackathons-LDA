[
    {
        "url": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/comments/326569003",
        "pull_request_review_id": 291082007,
        "id": 326569003,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjU2OTAwMw==",
        "diff_hunk": "@@ -1,303 +1,405 @@\n {\n- \"cells\": [\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"## Activation maximization\\n\",\n-    \"\\n\",\n-    \"---\\n\",\n-    \"\\n\",\n-    \"A quick demo of activation maximization with [FlashTorch \ud83d\udd26](https://github.com/MisaOgura/flashtorch), using the pre-trained VGG16 model.\\n\",\n-    \"\\n\",\n-    \"\\n\",\n-    \"\u2757This notebook is for those who are using this notebook in **Google Colab**.\\n\",\n-    \"\\n\",\n-    \"If you aren't on Google Colab already, please head to the Colab version of this notebook **[here](https://colab.research.google.com/github/MisaOgura/flashtorch/blob/master/examples/activation_maximization_colab.ipynb)** to execute.\\n\",\n-    \"\\n\",\n-    \"---\\n\",\n-    \"\\n\",\n-    \"[Activation maximization](https://pdfs.semanticscholar.org/65d9/94fb778a8d9e0f632659fb33a082949a50d3.pdf) is one form of feature visualization that allows us to visualize what CNN filters are \\\"looking for\\\", by applying each filter to an input image and updating the input image so as to maximize the activation of the filter of interest (i.e. treating it as a gradient ascent task with filter activation values as the loss).\\n\",\n-    \"\\n\",\n-    \"The optimization and visualization is available via `flashtorch.activmax.GradientAscent`. The implementation is inspired by [this demo](https://blog.keras.io/category/demo.html) by Francois Chollet.\"\n-   ]\n+  \"nbformat\": 4,\n+  \"nbformat_minor\": 0,\n+  \"metadata\": {\n+    \"kernelspec\": {\n+      \"display_name\": \"Python 3\",\n+      \"language\": \"python\",\n+      \"name\": \"python3\"\n+    },\n+    \"language_info\": {\n+      \"codemirror_mode\": {\n+        \"name\": \"ipython\",\n+        \"version\": 3\n+      },\n+      \"file_extension\": \".py\",\n+      \"mimetype\": \"text/x-python\",\n+      \"name\": \"python\",\n+      \"nbconvert_exporter\": \"python\",\n+      \"pygments_lexer\": \"ipython3\",\n+      \"version\": \"3.7.4\"\n+    },\n+    \"colab\": {\n+      \"name\": \"activation_maximization_colab.ipynb\",\n+      \"provenance\": [],\n+      \"include_colab_link\": true\n+    }\n   },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 0. Set up\\n\",\n-    \"\\n\",\n-    \"A GPU runtime is available on Colab for free, from the `Runtime` tab on the top menu bar.\\n\",\n-    \"\\n\",\n-    \"It is **highly recommended to use GPU** as a runtime for the enhanced speed of computation.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"# Install flashtorch\\n\",\n-    \"\\n\",\n-    \"!pip install flashtorch\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"%matplotlib inline\\n\",\n-    \"%config InlineBackend.figure_format = 'retina'\\n\",\n-    \"\\n\",\n-    \"import torchvision.models as models\\n\",\n-    \"\\n\",\n-    \"from flashtorch.activmax import GradientAscent\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 1. Load a pre-trained Model\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"model = models.vgg16(pretrained=True)\\n\",\n-    \"\\n\",\n-    \"# Print layers and corresponding indicies\\n\",\n-    \"\\n\",\n-    \"list(model.features.named_children())\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 2. Specify layers and filters\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"conv1_2 = model.features[2]\\n\",\n-    \"conv1_2_filters = [17, 33, 34, 57]\\n\",\n-    \"\\n\",\n-    \"conv2_1 = model.features[5]\\n\",\n-    \"conv2_1_filters = [27, 40, 68, 73]\\n\",\n-    \"\\n\",\n-    \"conv3_1 = model.features[10]\\n\",\n-    \"conv3_1_filters = [31, 61, 147, 182]\\n\",\n-    \"\\n\",\n-    \"conv4_1 = model.features[17]\\n\",\n-    \"conv4_1_filters = [238, 251, 338, 495]\\n\",\n-    \"\\n\",\n-    \"conv5_1 = model.features[24]\\n\",\n-    \"conv5_1_filters = [45, 271, 363, 409]\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 3. Optimize and visualize filters\\n\",\n-    \"\\n\",\n-    \"Creating an instance of `GradientAscent` class with the model _without fully-connected layers_ allows us to use flexible input image sizes.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent = GradientAscent(model.features)\\n\",\n-    \"\\n\",\n-    \"g_ascent.use_gpu = True\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"By calling the `visualize` method and passing in the layer and filter indeciies defined above, it performs optimization and visualization.\\n\",\n-    \"\\n\",\n-    \"This is perhaps the most common way to use the `GradientAscent` class, but there are other APIs available according to your use cases (see section 4).\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.visualize(conv1_2, conv1_2_filters, title='conv1_2');\\n\",\n-    \"g_ascent.visualize(conv2_1, conv2_1_filters, title='conv2_1');\\n\",\n-    \"g_ascent.visualize(conv3_1, conv3_1_filters, title='conv3_1');\\n\",\n-    \"g_ascent.visualize(conv4_1, conv4_1_filters, title='conv4_1');\\n\",\n-    \"g_ascent.visualize(conv5_1, conv5_1_filters, title='conv5_1');\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"We can see that, in the earlier layers (conv1_2, conv2_1), filters get activated by colors and simple patterns such as virtical, horisontal and diagonal lines.\\n\",\n-    \"\\n\",\n-    \"In the intermediate layers (conv3_1, conv4_1), we start to see more complex patterns.\\n\",\n-    \"\\n\",\n-    \"Then oncepts like 'eye' (filter 45) and 'entrance (?)' (filter 271) seem to appear in the last layer (conv5_1).\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 4. Other ways to use `GradientAscent`\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-1. `GradientAscent.visualize`: randomly select filters\\n\",\n-    \"\\n\",\n-    \"If you have a convolutional layer you want to vizualise, but you don't know which filters to choose, you can just pass in the layer to `visualize` without `filter_idxs`. It will randomly choose filters. You can adjust the number of filters chosen by passing `num_subplots` (default=4).\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.visualize(conv5_1, title='Randomly selected filters from conv5_1');\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-2. `GradientAscent.visualize`: plot one filter\\n\",\n-    \"\\n\",\n-    \"If you just want to visualize one filter, you can do so by specifying the filter index as an integer, not a list.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.visualize(conv5_1, 3, title='conv5_1 filter 3');\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-3. `GradientAscent.visualize`: return image tensor\\n\",\n-    \"\\n\",\n-    \"If you want to grab the optimized image data, set `return_output` to `True`.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"output = g_ascent.visualize(conv5_1, 3, title='conv5_1 filter 3', return_output=True);\\n\",\n-    \"\\n\",\n-    \"print('num_iter:', len(output))\\n\",\n-    \"print('optimized image:', output[-1].shape)\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-4. `GradientAscent.deepdream`: create DeepDream\\n\",\n-    \"\\n\",\n-    \"You can create a [DeepDream](https://ai.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html) by supplying a path to your own image.\\n\",\n-    \"\\n\",\n-    \"This will optimize the supplied image, instead of a random input noise, with regards to the filter specidied.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"# Download the example image\\n\",\n-    \"\\n\",\n-    \"!mkdir -p images\\n\",\n-    \"\\n\",\n-    \"!wget https://github.com/MisaOgura/flashtorch/raw/master/examples/images/jay.jpg -P /content/images\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.deepdream('/content/images/jay.jpg', conv5_1, 33)\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-5. `GradientAscent.optimize`: perform optimization only (no visualization)\\n\",\n-    \"\\n\",\n-    \"If no visualization is needed, or if you want to futher customize visualization, you can call the `optimize` method directly.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"output = g_ascent.optimize(conv5_1, 3)\\n\",\n-    \"\\n\",\n-    \"print('num_iter:', len(output))\\n\",\n-    \"print('optimized image:', output[-1].shape)\"\n-   ]\n-  }\n- ],\n- \"metadata\": {\n-  \"kernelspec\": {\n-   \"display_name\": \"Python 3\",\n-   \"language\": \"python\",\n-   \"name\": \"python3\"\n-  },\n-  \"language_info\": {\n-   \"codemirror_mode\": {\n-    \"name\": \"ipython\",\n-    \"version\": 3\n-   },\n-   \"file_extension\": \".py\",\n-   \"mimetype\": \"text/x-python\",\n-   \"name\": \"python\",\n-   \"nbconvert_exporter\": \"python\",\n-   \"pygments_lexer\": \"ipython3\",\n-   \"version\": \"3.7.4\"\n-  }\n- },\n- \"nbformat\": 4,\n- \"nbformat_minor\": 2\n-}\n+  \"cells\": [\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"id\": \"view-in-github\",\n+        \"colab_type\": \"text\"\n+      },\n+      \"source\": [\n+        \"<a href=\\\"https://colab.research.google.com/github/vainaijr/flashtorch/blob/master/examples/activation_maximization_colab.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"",
        "path": "examples/activation_maximization_colab.ipynb",
        "position": null,
        "original_position": 337,
        "commit_id": "9d74361e9e6ea4c6a471977b398e4d8816b9771e",
        "original_commit_id": "f7299aef1b47a0311cdf6d9fc441d532417407f8",
        "user": {
            "login": "MisaOgura",
            "id": 16384171,
            "node_id": "MDQ6VXNlcjE2Mzg0MTcx",
            "avatar_url": "https://avatars1.githubusercontent.com/u/16384171?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/MisaOgura",
            "html_url": "https://github.com/MisaOgura",
            "followers_url": "https://api.github.com/users/MisaOgura/followers",
            "following_url": "https://api.github.com/users/MisaOgura/following{/other_user}",
            "gists_url": "https://api.github.com/users/MisaOgura/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/MisaOgura/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/MisaOgura/subscriptions",
            "organizations_url": "https://api.github.com/users/MisaOgura/orgs",
            "repos_url": "https://api.github.com/users/MisaOgura/repos",
            "events_url": "https://api.github.com/users/MisaOgura/events{/privacy}",
            "received_events_url": "https://api.github.com/users/MisaOgura/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hi @vainaijr,\r\n\r\nPlease change the link to point to `https://colab.research.google.com/github/MisaOgura/flashtorch/blob/master/examples/activation_maximization_colab.ipynb` as discussed.\r\n\r\nMany thanks,\r\nMisa",
        "created_at": "2019-09-20T10:30:04Z",
        "updated_at": "2019-09-20T10:35:19Z",
        "html_url": "https://github.com/MisaOgura/flashtorch/pull/11#discussion_r326569003",
        "pull_request_url": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/11",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/comments/326569003"
            },
            "html": {
                "href": "https://github.com/MisaOgura/flashtorch/pull/11#discussion_r326569003"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/11"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/comments/326571355",
        "pull_request_review_id": 291085115,
        "id": 326571355,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNjU3MTM1NQ==",
        "diff_hunk": "@@ -1,303 +1,405 @@\n {\n- \"cells\": [\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"## Activation maximization\\n\",\n-    \"\\n\",\n-    \"---\\n\",\n-    \"\\n\",\n-    \"A quick demo of activation maximization with [FlashTorch \ud83d\udd26](https://github.com/MisaOgura/flashtorch), using the pre-trained VGG16 model.\\n\",\n-    \"\\n\",\n-    \"\\n\",\n-    \"\u2757This notebook is for those who are using this notebook in **Google Colab**.\\n\",\n-    \"\\n\",\n-    \"If you aren't on Google Colab already, please head to the Colab version of this notebook **[here](https://colab.research.google.com/github/MisaOgura/flashtorch/blob/master/examples/activation_maximization_colab.ipynb)** to execute.\\n\",\n-    \"\\n\",\n-    \"---\\n\",\n-    \"\\n\",\n-    \"[Activation maximization](https://pdfs.semanticscholar.org/65d9/94fb778a8d9e0f632659fb33a082949a50d3.pdf) is one form of feature visualization that allows us to visualize what CNN filters are \\\"looking for\\\", by applying each filter to an input image and updating the input image so as to maximize the activation of the filter of interest (i.e. treating it as a gradient ascent task with filter activation values as the loss).\\n\",\n-    \"\\n\",\n-    \"The optimization and visualization is available via `flashtorch.activmax.GradientAscent`. The implementation is inspired by [this demo](https://blog.keras.io/category/demo.html) by Francois Chollet.\"\n-   ]\n+  \"nbformat\": 4,\n+  \"nbformat_minor\": 0,\n+  \"metadata\": {\n+    \"kernelspec\": {\n+      \"display_name\": \"Python 3\",\n+      \"language\": \"python\",\n+      \"name\": \"python3\"\n+    },\n+    \"language_info\": {\n+      \"codemirror_mode\": {\n+        \"name\": \"ipython\",\n+        \"version\": 3\n+      },\n+      \"file_extension\": \".py\",\n+      \"mimetype\": \"text/x-python\",\n+      \"name\": \"python\",\n+      \"nbconvert_exporter\": \"python\",\n+      \"pygments_lexer\": \"ipython3\",\n+      \"version\": \"3.7.4\"\n+    },\n+    \"colab\": {\n+      \"name\": \"activation_maximization_colab.ipynb\",\n+      \"provenance\": [],\n+      \"include_colab_link\": true\n+    }\n   },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 0. Set up\\n\",\n-    \"\\n\",\n-    \"A GPU runtime is available on Colab for free, from the `Runtime` tab on the top menu bar.\\n\",\n-    \"\\n\",\n-    \"It is **highly recommended to use GPU** as a runtime for the enhanced speed of computation.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"# Install flashtorch\\n\",\n-    \"\\n\",\n-    \"!pip install flashtorch\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"%matplotlib inline\\n\",\n-    \"%config InlineBackend.figure_format = 'retina'\\n\",\n-    \"\\n\",\n-    \"import torchvision.models as models\\n\",\n-    \"\\n\",\n-    \"from flashtorch.activmax import GradientAscent\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 1. Load a pre-trained Model\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"model = models.vgg16(pretrained=True)\\n\",\n-    \"\\n\",\n-    \"# Print layers and corresponding indicies\\n\",\n-    \"\\n\",\n-    \"list(model.features.named_children())\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 2. Specify layers and filters\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"conv1_2 = model.features[2]\\n\",\n-    \"conv1_2_filters = [17, 33, 34, 57]\\n\",\n-    \"\\n\",\n-    \"conv2_1 = model.features[5]\\n\",\n-    \"conv2_1_filters = [27, 40, 68, 73]\\n\",\n-    \"\\n\",\n-    \"conv3_1 = model.features[10]\\n\",\n-    \"conv3_1_filters = [31, 61, 147, 182]\\n\",\n-    \"\\n\",\n-    \"conv4_1 = model.features[17]\\n\",\n-    \"conv4_1_filters = [238, 251, 338, 495]\\n\",\n-    \"\\n\",\n-    \"conv5_1 = model.features[24]\\n\",\n-    \"conv5_1_filters = [45, 271, 363, 409]\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 3. Optimize and visualize filters\\n\",\n-    \"\\n\",\n-    \"Creating an instance of `GradientAscent` class with the model _without fully-connected layers_ allows us to use flexible input image sizes.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent = GradientAscent(model.features)\\n\",\n-    \"\\n\",\n-    \"g_ascent.use_gpu = True\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"By calling the `visualize` method and passing in the layer and filter indeciies defined above, it performs optimization and visualization.\\n\",\n-    \"\\n\",\n-    \"This is perhaps the most common way to use the `GradientAscent` class, but there are other APIs available according to your use cases (see section 4).\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.visualize(conv1_2, conv1_2_filters, title='conv1_2');\\n\",\n-    \"g_ascent.visualize(conv2_1, conv2_1_filters, title='conv2_1');\\n\",\n-    \"g_ascent.visualize(conv3_1, conv3_1_filters, title='conv3_1');\\n\",\n-    \"g_ascent.visualize(conv4_1, conv4_1_filters, title='conv4_1');\\n\",\n-    \"g_ascent.visualize(conv5_1, conv5_1_filters, title='conv5_1');\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"We can see that, in the earlier layers (conv1_2, conv2_1), filters get activated by colors and simple patterns such as virtical, horisontal and diagonal lines.\\n\",\n-    \"\\n\",\n-    \"In the intermediate layers (conv3_1, conv4_1), we start to see more complex patterns.\\n\",\n-    \"\\n\",\n-    \"Then oncepts like 'eye' (filter 45) and 'entrance (?)' (filter 271) seem to appear in the last layer (conv5_1).\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"### 4. Other ways to use `GradientAscent`\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-1. `GradientAscent.visualize`: randomly select filters\\n\",\n-    \"\\n\",\n-    \"If you have a convolutional layer you want to vizualise, but you don't know which filters to choose, you can just pass in the layer to `visualize` without `filter_idxs`. It will randomly choose filters. You can adjust the number of filters chosen by passing `num_subplots` (default=4).\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.visualize(conv5_1, title='Randomly selected filters from conv5_1');\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-2. `GradientAscent.visualize`: plot one filter\\n\",\n-    \"\\n\",\n-    \"If you just want to visualize one filter, you can do so by specifying the filter index as an integer, not a list.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.visualize(conv5_1, 3, title='conv5_1 filter 3');\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-3. `GradientAscent.visualize`: return image tensor\\n\",\n-    \"\\n\",\n-    \"If you want to grab the optimized image data, set `return_output` to `True`.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"output = g_ascent.visualize(conv5_1, 3, title='conv5_1 filter 3', return_output=True);\\n\",\n-    \"\\n\",\n-    \"print('num_iter:', len(output))\\n\",\n-    \"print('optimized image:', output[-1].shape)\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-4. `GradientAscent.deepdream`: create DeepDream\\n\",\n-    \"\\n\",\n-    \"You can create a [DeepDream](https://ai.googleblog.com/2015/06/inceptionism-going-deeper-into-neural.html) by supplying a path to your own image.\\n\",\n-    \"\\n\",\n-    \"This will optimize the supplied image, instead of a random input noise, with regards to the filter specidied.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"# Download the example image\\n\",\n-    \"\\n\",\n-    \"!mkdir -p images\\n\",\n-    \"\\n\",\n-    \"!wget https://github.com/MisaOgura/flashtorch/raw/master/examples/images/jay.jpg -P /content/images\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"g_ascent.deepdream('/content/images/jay.jpg', conv5_1, 33)\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"#### 4-5. `GradientAscent.optimize`: perform optimization only (no visualization)\\n\",\n-    \"\\n\",\n-    \"If no visualization is needed, or if you want to futher customize visualization, you can call the `optimize` method directly.\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": null,\n-   \"metadata\": {},\n-   \"outputs\": [],\n-   \"source\": [\n-    \"output = g_ascent.optimize(conv5_1, 3)\\n\",\n-    \"\\n\",\n-    \"print('num_iter:', len(output))\\n\",\n-    \"print('optimized image:', output[-1].shape)\"\n-   ]\n-  }\n- ],\n- \"metadata\": {\n-  \"kernelspec\": {\n-   \"display_name\": \"Python 3\",\n-   \"language\": \"python\",\n-   \"name\": \"python3\"\n-  },\n-  \"language_info\": {\n-   \"codemirror_mode\": {\n-    \"name\": \"ipython\",\n-    \"version\": 3\n-   },\n-   \"file_extension\": \".py\",\n-   \"mimetype\": \"text/x-python\",\n-   \"name\": \"python\",\n-   \"nbconvert_exporter\": \"python\",\n-   \"pygments_lexer\": \"ipython3\",\n-   \"version\": \"3.7.4\"\n-  }\n- },\n- \"nbformat\": 4,\n- \"nbformat_minor\": 2\n-}\n+  \"cells\": [\n+    {\n+      \"cell_type\": \"markdown\",\n+      \"metadata\": {\n+        \"id\": \"view-in-github\",\n+        \"colab_type\": \"text\"\n+      },\n+      \"source\": [\n+        \"<a href=\\\"https://colab.research.google.com/github/vainaijr/flashtorch/blob/master/examples/activation_maximization_colab.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"",
        "path": "examples/activation_maximization_colab.ipynb",
        "position": null,
        "original_position": 337,
        "commit_id": "9d74361e9e6ea4c6a471977b398e4d8816b9771e",
        "original_commit_id": "f7299aef1b47a0311cdf6d9fc441d532417407f8",
        "user": {
            "login": "vainaijr",
            "id": 43755000,
            "node_id": "MDQ6VXNlcjQzNzU1MDAw",
            "avatar_url": "https://avatars0.githubusercontent.com/u/43755000?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vainaijr",
            "html_url": "https://github.com/vainaijr",
            "followers_url": "https://api.github.com/users/vainaijr/followers",
            "following_url": "https://api.github.com/users/vainaijr/following{/other_user}",
            "gists_url": "https://api.github.com/users/vainaijr/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vainaijr/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vainaijr/subscriptions",
            "organizations_url": "https://api.github.com/users/vainaijr/orgs",
            "repos_url": "https://api.github.com/users/vainaijr/repos",
            "events_url": "https://api.github.com/users/vainaijr/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vainaijr/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the default colab generated notebook, adds a open in colab button linking to file in my repo, so I changed both files from jupyter notebook., I added link to activation_maximization_colab in both",
        "created_at": "2019-09-20T10:37:35Z",
        "updated_at": "2019-09-20T10:37:35Z",
        "html_url": "https://github.com/MisaOgura/flashtorch/pull/11#discussion_r326571355",
        "pull_request_url": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/11",
        "author_association": "CONTRIBUTOR",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/comments/326571355"
            },
            "html": {
                "href": "https://github.com/MisaOgura/flashtorch/pull/11#discussion_r326571355"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/MisaOgura/flashtorch/pulls/11"
            }
        },
        "in_reply_to_id": 326569003
    }
]