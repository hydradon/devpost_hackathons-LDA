[
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/63466981",
        "pull_request_review_id": null,
        "id": 63466981,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDY2OTgx",
        "diff_hunk": "@@ -0,0 +1,88 @@\n+package cceclipseplugin.editor.listeners;\n+\n+import java.net.ConnectException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jface.text.DocumentEvent;\n+import org.eclipse.jface.text.IDocumentListener;\n+\n+import cceclipseplugin.core.PluginManager;\n+import cceclipseplugin.editor.DocumentManager;\n+import clientcore.models.FileChangeRequest;\n+import clientcore.models.NewRequest;\n+import patching.Diff;\n+import patching.Patch;\n+\n+public class DocumentChangeListener implements IDocumentListener {\n+\n+\t@Override\n+\tpublic void documentAboutToBeChanged(DocumentEvent event) {\n+\n+\t\tList<Diff> diffs = new ArrayList<>();\n+\t\tString currDocument = event.getDocument().get();\n+\n+\t\tif (event.getLength() > 0) {\n+\t\t\tDiff diff = new Diff(false, event.getOffset(),\n+\t\t\t\t\tcurrDocument.substring(event.getOffset(), event.getOffset() + event.getLength()));\n+\t\t\tdiffs.add(diff);\n+\t\t}\n+\t\tif (!event.getText().isEmpty()) {\n+\t\t\tDiff patch = new Diff(true, event.getOffset(), event.getText());\n+\t\t\tdiffs.add(patch);\n+\t\t}\n+\n+\t\t// If diffs were incoming, applied diffs, early-out\n+\t\tDocumentManager docMgr = DocumentManager.getInstance();\n+\t\tfor (int i = 0; i < diffs.size(); i++) {\n+\t\t\twhile (!docMgr.getAppliedDiffs().isEmpty()) {\n+\t\t\t\tif (diffs.get(i).equals(docMgr.getAppliedDiffs().poll())) {\n+\t\t\t\t\tdiffs.remove(i);\n+\t\t\t\t\ti--;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (diffs.isEmpty()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tList<Diff> newDiffs = new ArrayList<>();\n+\t\tfor (Diff diff : diffs) {\n+\t\t\tnewDiffs.add(diff.convertToLF(currDocument));\n+\t\t}\n+\n+\t\tPatch patch = new Patch(0, newDiffs);\n+\n+\t\t// Send to server\n+\t\tFileChangeRequest changeRequest = new FileChangeRequest(12345, Arrays.asList(patch.toString()), 0);\n+\n+\t\tSystem.out.println(patch.toString());\n+\n+\t\t// TODO: move this functionality to the client core\n+\t\tNewRequest req = changeRequest.getRequest();\n+\t\ttry {\n+\t\t\tPluginManager.getInstance().getWSManager().sendRequest(req);\n+\t\t} catch (ConnectException e) {\n+\t\t\tSystem.out.println(\"Failed to send change request.\");\n+\t\t\te.printStackTrace();\n+\t\t}\n+\n+\t\t/*\n+\t\t * Example application of a patch without triggering the listener.\n+\t\t */",
        "path": "src/main/java/cceclipseplugin/editor/listeners/DocumentChangeListener.java",
        "position": 85,
        "original_position": 73,
        "commit_id": "c8e16514b4226c32039d30ed9efa98c911d3f1a5",
        "original_commit_id": "d13dc5d489f9df5457d9ad298ace8979e3e622cd",
        "user": {
            "login": "fahslaj",
            "id": 6913035,
            "node_id": "MDQ6VXNlcjY5MTMwMzU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6913035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fahslaj",
            "html_url": "https://github.com/fahslaj",
            "followers_url": "https://api.github.com/users/fahslaj/followers",
            "following_url": "https://api.github.com/users/fahslaj/following{/other_user}",
            "gists_url": "https://api.github.com/users/fahslaj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fahslaj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fahslaj/subscriptions",
            "organizations_url": "https://api.github.com/users/fahslaj/orgs",
            "repos_url": "https://api.github.com/users/fahslaj/repos",
            "events_url": "https://api.github.com/users/fahslaj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fahslaj/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should this comment still be here?\n",
        "created_at": "2016-05-17T05:42:04Z",
        "updated_at": "2016-05-17T18:00:27Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/1#discussion_r63466981",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/1",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/63466981"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/1#discussion_r63466981"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/1"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80304085",
        "pull_request_review_id": 1384305,
        "id": 80304085,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwMzA0MDg1",
        "diff_hunk": "@@ -49,30 +61,124 @@ public static PluginManager getInstance() {\n \t}\n \n \tprivate PluginManager() {\n-\t\tdocumentManager = DocumentManager.getInstance();\n+\t\tdocumentManager = new DocumentManager();\n \t\tmetadataManager = new MetadataManager();\n+\t\tdataManager = DataManager.getInstance();\n \t\twsManager = new WSManager(new ConnectionConfig(WS_ADDRESS, RECONNECT, MAX_RETRY_COUNT));\n \n+\t\twsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\ttry {\n+\t\t\t\twebsocketLogin();\n+\t\t\t} catch (ConnectException | InterruptedException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Failed to run login\", e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tnew Thread(() -> {\n+\t\t\ttry {\n+\t\t\t\twsManager.connect();\n+\t\t\t} catch (ConnectException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}).start();\n+\n \t\tregisterNotificationHooks();\n \n-\t\t// Start listeners\n+\t\t// Start editor & document listeners\n \t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n-\t\t\t\teditorChangeListener = EditorChangeListener.getInstance();\n+\t\t\t\teditorChangeListener = new EditorChangeListener();\n \t\t\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService()\n \t\t\t\t\t\t.addPartListener(editorChangeListener);\n \t\t\t}\n \t\t});\n+\n+\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n+\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n+\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n+\t\t//\n+\t\t// FileMetadata fileMeta = new FileMetadata();\n+\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n+\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n+\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// fileMeta.setVersion(5);\n+\t\t//\n+\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n+\t\t//\n+\t\t// metadataManager.writeProjectMetadata(projMeta,\n+\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\n+\t\tSystem.out.println(\"PROJECT_METADATA: \" + metadataManager\n+\t\t\t\t.getProjectMetadata(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \"/\"));\n \t}\n \n \tpublic WSManager getWSManager() {\n \t\treturn wsManager;\n \t}\n \n+\tpublic DocumentManager getDocumentManager() {\n+\t\treturn documentManager;\n+\t}\n+\n+\tpublic MetadataManager getMetadataManager() {\n+\t\treturn metadataManager;\n+\t}\n+\n+\tpublic DataManager getDataManager() {\n+\t\treturn dataManager;\n+\t}\n+\n \tprivate void registerNotificationHooks() {\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n-\t\t\t\t(Notification n) -> DocumentManager.getInstance().handleNotification(n));\n+\t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n \n+\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n+\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n+\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n+\n+\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n+\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n+\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n+\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n+\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(StringConstants.PROJ_ID)\n+\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 153,
        "original_position": 153,
        "commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "original_commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "user": {
            "login": "loganga",
            "id": 12075896,
            "node_id": "MDQ6VXNlcjEyMDc1ODk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12075896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/loganga",
            "html_url": "https://github.com/loganga",
            "followers_url": "https://api.github.com/users/loganga/followers",
            "following_url": "https://api.github.com/users/loganga/following{/other_user}",
            "gists_url": "https://api.github.com/users/loganga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/loganga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/loganga/subscriptions",
            "organizations_url": "https://api.github.com/users/loganga/orgs",
            "repos_url": "https://api.github.com/users/loganga/repos",
            "events_url": "https://api.github.com/users/loganga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/loganga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Shouldn't we have response and error handlers here? There's no way of knowing if it failed.\n",
        "created_at": "2016-09-23T18:47:16Z",
        "updated_at": "2016-09-23T18:47:16Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80304085",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80304085"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80304085"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80304214",
        "pull_request_review_id": 1384418,
        "id": 80304214,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwMzA0MjE0",
        "diff_hunk": "@@ -49,30 +61,124 @@ public static PluginManager getInstance() {\n \t}\n \n \tprivate PluginManager() {\n-\t\tdocumentManager = DocumentManager.getInstance();\n+\t\tdocumentManager = new DocumentManager();\n \t\tmetadataManager = new MetadataManager();\n+\t\tdataManager = DataManager.getInstance();\n \t\twsManager = new WSManager(new ConnectionConfig(WS_ADDRESS, RECONNECT, MAX_RETRY_COUNT));\n \n+\t\twsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\ttry {\n+\t\t\t\twebsocketLogin();\n+\t\t\t} catch (ConnectException | InterruptedException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Failed to run login\", e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tnew Thread(() -> {\n+\t\t\ttry {\n+\t\t\t\twsManager.connect();\n+\t\t\t} catch (ConnectException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}).start();\n+\n \t\tregisterNotificationHooks();\n \n-\t\t// Start listeners\n+\t\t// Start editor & document listeners\n \t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n-\t\t\t\teditorChangeListener = EditorChangeListener.getInstance();\n+\t\t\t\teditorChangeListener = new EditorChangeListener();\n \t\t\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService()\n \t\t\t\t\t\t.addPartListener(editorChangeListener);\n \t\t\t}\n \t\t});\n+\n+\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n+\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n+\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n+\t\t//\n+\t\t// FileMetadata fileMeta = new FileMetadata();\n+\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n+\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n+\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// fileMeta.setVersion(5);\n+\t\t//\n+\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n+\t\t//\n+\t\t// metadataManager.writeProjectMetadata(projMeta,\n+\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\n+\t\tSystem.out.println(\"PROJECT_METADATA: \" + metadataManager\n+\t\t\t\t.getProjectMetadata(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \"/\"));\n \t}\n \n \tpublic WSManager getWSManager() {\n \t\treturn wsManager;\n \t}\n \n+\tpublic DocumentManager getDocumentManager() {\n+\t\treturn documentManager;\n+\t}\n+\n+\tpublic MetadataManager getMetadataManager() {\n+\t\treturn metadataManager;\n+\t}\n+\n+\tpublic DataManager getDataManager() {\n+\t\treturn dataManager;\n+\t}\n+\n \tprivate void registerNotificationHooks() {\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n-\t\t\t\t(Notification n) -> DocumentManager.getInstance().handleNotification(n));\n+\t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n \n+\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n+\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n+\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n+\n+\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n+\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n+\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n+\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n+\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(StringConstants.PROJ_ID)\n+\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));\n+\t\t\t\t\t\t\t\t} catch (ConnectException e) {\n+\t\t\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t// For creating new file\n+\t\t\t\t\t\t\t\t// IRequestData data = new\n+\t\t\t\t\t\t\t\t// FileCreateRequest(StringConstants.FILE_NAME,\n+\t\t\t\t\t\t\t\t// StringConstants.FILE_PATH,\n+\t\t\t\t\t\t\t\t// StringConstants.PROJ_ID,\n+\t\t\t\t\t\t\t\t// (\"package testPkg1;\\n\" + \"\\n\" + \"public class\n+\t\t\t\t\t\t\t\t// TestClass1 {\\n\"\n+\t\t\t\t\t\t\t\t// + \"\\n\" + \"}\").getBytes());\n+\t\t\t\t\t\t\t\t// try {\n+\t\t\t\t\t\t\t\t// getWSManager().sendRequest(data.getRequest());\n+\t\t\t\t\t\t\t\t// } catch (ConnectException e) {\n+\t\t\t\t\t\t\t\t// // TODO Auto-generated catch block\n+\t\t\t\t\t\t\t\t// e.printStackTrace();\n+\t\t\t\t\t\t\t\t// }\n+\t\t\t\t\t\t\t}, null);",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 172,
        "original_position": 172,
        "commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "original_commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "user": {
            "login": "loganga",
            "id": 12075896,
            "node_id": "MDQ6VXNlcjEyMDc1ODk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12075896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/loganga",
            "html_url": "https://github.com/loganga",
            "followers_url": "https://api.github.com/users/loganga/followers",
            "following_url": "https://api.github.com/users/loganga/following{/other_user}",
            "gists_url": "https://api.github.com/users/loganga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/loganga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/loganga/subscriptions",
            "organizations_url": "https://api.github.com/users/loganga/orgs",
            "repos_url": "https://api.github.com/users/loganga/repos",
            "events_url": "https://api.github.com/users/loganga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/loganga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same here, no error handler\n",
        "created_at": "2016-09-23T18:47:58Z",
        "updated_at": "2016-09-23T18:47:58Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80304214",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80304214"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80304214"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80304427",
        "pull_request_review_id": 1384620,
        "id": 80304427,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwMzA0NDI3",
        "diff_hunk": "@@ -49,30 +61,124 @@ public static PluginManager getInstance() {\n \t}\n \n \tprivate PluginManager() {\n-\t\tdocumentManager = DocumentManager.getInstance();\n+\t\tdocumentManager = new DocumentManager();\n \t\tmetadataManager = new MetadataManager();\n+\t\tdataManager = DataManager.getInstance();\n \t\twsManager = new WSManager(new ConnectionConfig(WS_ADDRESS, RECONNECT, MAX_RETRY_COUNT));\n \n+\t\twsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\ttry {\n+\t\t\t\twebsocketLogin();\n+\t\t\t} catch (ConnectException | InterruptedException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Failed to run login\", e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tnew Thread(() -> {\n+\t\t\ttry {\n+\t\t\t\twsManager.connect();\n+\t\t\t} catch (ConnectException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}).start();\n+\n \t\tregisterNotificationHooks();\n \n-\t\t// Start listeners\n+\t\t// Start editor & document listeners\n \t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n-\t\t\t\teditorChangeListener = EditorChangeListener.getInstance();\n+\t\t\t\teditorChangeListener = new EditorChangeListener();\n \t\t\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService()\n \t\t\t\t\t\t.addPartListener(editorChangeListener);\n \t\t\t}\n \t\t});\n+\n+\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n+\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n+\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n+\t\t//\n+\t\t// FileMetadata fileMeta = new FileMetadata();\n+\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n+\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n+\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// fileMeta.setVersion(5);\n+\t\t//\n+\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n+\t\t//\n+\t\t// metadataManager.writeProjectMetadata(projMeta,\n+\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\n+\t\tSystem.out.println(\"PROJECT_METADATA: \" + metadataManager\n+\t\t\t\t.getProjectMetadata(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \"/\"));\n \t}\n \n \tpublic WSManager getWSManager() {\n \t\treturn wsManager;\n \t}\n \n+\tpublic DocumentManager getDocumentManager() {\n+\t\treturn documentManager;\n+\t}\n+\n+\tpublic MetadataManager getMetadataManager() {\n+\t\treturn metadataManager;\n+\t}\n+\n+\tpublic DataManager getDataManager() {\n+\t\treturn dataManager;\n+\t}\n+\n \tprivate void registerNotificationHooks() {\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n-\t\t\t\t(Notification n) -> DocumentManager.getInstance().handleNotification(n));\n+\t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n \n+\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n+\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n+\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n+\n+\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n+\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n+\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n+\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n+\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(StringConstants.PROJ_ID)\n+\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));\n+\t\t\t\t\t\t\t\t} catch (ConnectException e) {\n+\t\t\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t// For creating new file\n+\t\t\t\t\t\t\t\t// IRequestData data = new\n+\t\t\t\t\t\t\t\t// FileCreateRequest(StringConstants.FILE_NAME,\n+\t\t\t\t\t\t\t\t// StringConstants.FILE_PATH,\n+\t\t\t\t\t\t\t\t// StringConstants.PROJ_ID,\n+\t\t\t\t\t\t\t\t// (\"package testPkg1;\\n\" + \"\\n\" + \"public class\n+\t\t\t\t\t\t\t\t// TestClass1 {\\n\"\n+\t\t\t\t\t\t\t\t// + \"\\n\" + \"}\").getBytes());\n+\t\t\t\t\t\t\t\t// try {\n+\t\t\t\t\t\t\t\t// getWSManager().sendRequest(data.getRequest());\n+\t\t\t\t\t\t\t\t// } catch (ConnectException e) {\n+\t\t\t\t\t\t\t\t// // TODO Auto-generated catch block\n+\t\t\t\t\t\t\t\t// e.printStackTrace();\n+\t\t\t\t\t\t\t\t// }\n+\t\t\t\t\t\t\t}, null);",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 172,
        "original_position": 172,
        "commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "original_commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "user": {
            "login": "loganga",
            "id": 12075896,
            "node_id": "MDQ6VXNlcjEyMDc1ODk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12075896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/loganga",
            "html_url": "https://github.com/loganga",
            "followers_url": "https://api.github.com/users/loganga/followers",
            "following_url": "https://api.github.com/users/loganga/following{/other_user}",
            "gists_url": "https://api.github.com/users/loganga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/loganga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/loganga/subscriptions",
            "organizations_url": "https://api.github.com/users/loganga/orgs",
            "repos_url": "https://api.github.com/users/loganga/repos",
            "events_url": "https://api.github.com/users/loganga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/loganga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Also on line 180\n",
        "created_at": "2016-09-23T18:49:01Z",
        "updated_at": "2016-09-23T18:49:01Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80304427",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80304427"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80304427"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2"
            }
        },
        "in_reply_to_id": 80304214
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80313149",
        "pull_request_review_id": 1392539,
        "id": 80313149,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwMzEzMTQ5",
        "diff_hunk": "@@ -49,30 +61,124 @@ public static PluginManager getInstance() {\n \t}\n \n \tprivate PluginManager() {\n-\t\tdocumentManager = DocumentManager.getInstance();\n+\t\tdocumentManager = new DocumentManager();\n \t\tmetadataManager = new MetadataManager();\n+\t\tdataManager = DataManager.getInstance();\n \t\twsManager = new WSManager(new ConnectionConfig(WS_ADDRESS, RECONNECT, MAX_RETRY_COUNT));\n \n+\t\twsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\ttry {\n+\t\t\t\twebsocketLogin();\n+\t\t\t} catch (ConnectException | InterruptedException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Failed to run login\", e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tnew Thread(() -> {\n+\t\t\ttry {\n+\t\t\t\twsManager.connect();\n+\t\t\t} catch (ConnectException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}).start();\n+\n \t\tregisterNotificationHooks();\n \n-\t\t// Start listeners\n+\t\t// Start editor & document listeners\n \t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n-\t\t\t\teditorChangeListener = EditorChangeListener.getInstance();\n+\t\t\t\teditorChangeListener = new EditorChangeListener();\n \t\t\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService()\n \t\t\t\t\t\t.addPartListener(editorChangeListener);\n \t\t\t}\n \t\t});\n+\n+\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n+\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n+\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n+\t\t//\n+\t\t// FileMetadata fileMeta = new FileMetadata();\n+\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n+\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n+\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// fileMeta.setVersion(5);\n+\t\t//\n+\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n+\t\t//\n+\t\t// metadataManager.writeProjectMetadata(projMeta,\n+\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\n+\t\tSystem.out.println(\"PROJECT_METADATA: \" + metadataManager\n+\t\t\t\t.getProjectMetadata(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \"/\"));\n \t}\n \n \tpublic WSManager getWSManager() {\n \t\treturn wsManager;\n \t}\n \n+\tpublic DocumentManager getDocumentManager() {\n+\t\treturn documentManager;\n+\t}\n+\n+\tpublic MetadataManager getMetadataManager() {\n+\t\treturn metadataManager;\n+\t}\n+\n+\tpublic DataManager getDataManager() {\n+\t\treturn dataManager;\n+\t}\n+\n \tprivate void registerNotificationHooks() {\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n-\t\t\t\t(Notification n) -> DocumentManager.getInstance().handleNotification(n));\n+\t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n \n+\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n+\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n+\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n+\n+\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n+\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n+\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n+\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n+\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(StringConstants.PROJ_ID)\n+\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));\n+\t\t\t\t\t\t\t\t} catch (ConnectException e) {\n+\t\t\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t// For creating new file\n+\t\t\t\t\t\t\t\t// IRequestData data = new\n+\t\t\t\t\t\t\t\t// FileCreateRequest(StringConstants.FILE_NAME,\n+\t\t\t\t\t\t\t\t// StringConstants.FILE_PATH,\n+\t\t\t\t\t\t\t\t// StringConstants.PROJ_ID,\n+\t\t\t\t\t\t\t\t// (\"package testPkg1;\\n\" + \"\\n\" + \"public class\n+\t\t\t\t\t\t\t\t// TestClass1 {\\n\"\n+\t\t\t\t\t\t\t\t// + \"\\n\" + \"}\").getBytes());\n+\t\t\t\t\t\t\t\t// try {\n+\t\t\t\t\t\t\t\t// getWSManager().sendRequest(data.getRequest());\n+\t\t\t\t\t\t\t\t// } catch (ConnectException e) {\n+\t\t\t\t\t\t\t\t// // TODO Auto-generated catch block\n+\t\t\t\t\t\t\t\t// e.printStackTrace();\n+\t\t\t\t\t\t\t\t// }\n+\t\t\t\t\t\t\t}, null);",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 172,
        "original_position": 172,
        "commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "original_commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Same as above\n",
        "created_at": "2016-09-23T19:39:13Z",
        "updated_at": "2016-09-23T19:39:13Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80313149",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80313149"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80313149"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2"
            }
        },
        "in_reply_to_id": 80304214
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80313133",
        "pull_request_review_id": 1392523,
        "id": 80313133,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwMzEzMTMz",
        "diff_hunk": "@@ -49,30 +61,124 @@ public static PluginManager getInstance() {\n \t}\n \n \tprivate PluginManager() {\n-\t\tdocumentManager = DocumentManager.getInstance();\n+\t\tdocumentManager = new DocumentManager();\n \t\tmetadataManager = new MetadataManager();\n+\t\tdataManager = DataManager.getInstance();\n \t\twsManager = new WSManager(new ConnectionConfig(WS_ADDRESS, RECONNECT, MAX_RETRY_COUNT));\n \n+\t\twsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\ttry {\n+\t\t\t\twebsocketLogin();\n+\t\t\t} catch (ConnectException | InterruptedException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Failed to run login\", e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tnew Thread(() -> {\n+\t\t\ttry {\n+\t\t\t\twsManager.connect();\n+\t\t\t} catch (ConnectException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}).start();\n+\n \t\tregisterNotificationHooks();\n \n-\t\t// Start listeners\n+\t\t// Start editor & document listeners\n \t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n-\t\t\t\teditorChangeListener = EditorChangeListener.getInstance();\n+\t\t\t\teditorChangeListener = new EditorChangeListener();\n \t\t\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService()\n \t\t\t\t\t\t.addPartListener(editorChangeListener);\n \t\t\t}\n \t\t});\n+\n+\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n+\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n+\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n+\t\t//\n+\t\t// FileMetadata fileMeta = new FileMetadata();\n+\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n+\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n+\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// fileMeta.setVersion(5);\n+\t\t//\n+\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n+\t\t//\n+\t\t// metadataManager.writeProjectMetadata(projMeta,\n+\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\n+\t\tSystem.out.println(\"PROJECT_METADATA: \" + metadataManager\n+\t\t\t\t.getProjectMetadata(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \"/\"));\n \t}\n \n \tpublic WSManager getWSManager() {\n \t\treturn wsManager;\n \t}\n \n+\tpublic DocumentManager getDocumentManager() {\n+\t\treturn documentManager;\n+\t}\n+\n+\tpublic MetadataManager getMetadataManager() {\n+\t\treturn metadataManager;\n+\t}\n+\n+\tpublic DataManager getDataManager() {\n+\t\treturn dataManager;\n+\t}\n+\n \tprivate void registerNotificationHooks() {\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n-\t\t\t\t(Notification n) -> DocumentManager.getInstance().handleNotification(n));\n+\t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n \n+\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n+\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n+\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n+\n+\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n+\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n+\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n+\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n+\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(StringConstants.PROJ_ID)\n+\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 153,
        "original_position": 153,
        "commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "original_commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yep. these were there to allow it to function while waiting for our GUI to be functional. This is a temporary measure that should be removed once GUI is integrated.\n\nAll of the hardcoding in this should disappear once we can get a GUI, and pass the values dynamically.\n",
        "created_at": "2016-09-23T19:39:06Z",
        "updated_at": "2016-09-23T19:40:22Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80313133",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80313133"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80313133"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2"
            }
        },
        "in_reply_to_id": 80304085
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80322196",
        "pull_request_review_id": 1400805,
        "id": 80322196,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgwMzIyMTk2",
        "diff_hunk": "@@ -49,30 +61,124 @@ public static PluginManager getInstance() {\n \t}\n \n \tprivate PluginManager() {\n-\t\tdocumentManager = DocumentManager.getInstance();\n+\t\tdocumentManager = new DocumentManager();\n \t\tmetadataManager = new MetadataManager();\n+\t\tdataManager = DataManager.getInstance();\n \t\twsManager = new WSManager(new ConnectionConfig(WS_ADDRESS, RECONNECT, MAX_RETRY_COUNT));\n \n+\t\twsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\ttry {\n+\t\t\t\twebsocketLogin();\n+\t\t\t} catch (ConnectException | InterruptedException e) {\n+\t\t\t\tthrow new IllegalStateException(\"Failed to run login\", e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tnew Thread(() -> {\n+\t\t\ttry {\n+\t\t\t\twsManager.connect();\n+\t\t\t} catch (ConnectException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t}\n+\t\t}).start();\n+\n \t\tregisterNotificationHooks();\n \n-\t\t// Start listeners\n+\t\t// Start editor & document listeners\n \t\tPlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n-\t\t\t\teditorChangeListener = EditorChangeListener.getInstance();\n+\t\t\t\teditorChangeListener = new EditorChangeListener();\n \t\t\t\tPlatformUI.getWorkbench().getActiveWorkbenchWindow().getPartService()\n \t\t\t\t\t\t.addPartListener(editorChangeListener);\n \t\t\t}\n \t\t});\n+\n+\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n+\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n+\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n+\t\t//\n+\t\t// FileMetadata fileMeta = new FileMetadata();\n+\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n+\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n+\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n+\t\t// fileMeta.setVersion(5);\n+\t\t//\n+\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n+\t\t//\n+\t\t// metadataManager.writeProjectMetadata(projMeta,\n+\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\n+\t\tSystem.out.println(\"PROJECT_METADATA: \" + metadataManager\n+\t\t\t\t.getProjectMetadata(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \"/\"));\n \t}\n \n \tpublic WSManager getWSManager() {\n \t\treturn wsManager;\n \t}\n \n+\tpublic DocumentManager getDocumentManager() {\n+\t\treturn documentManager;\n+\t}\n+\n+\tpublic MetadataManager getMetadataManager() {\n+\t\treturn metadataManager;\n+\t}\n+\n+\tpublic DataManager getDataManager() {\n+\t\treturn dataManager;\n+\t}\n+\n \tprivate void registerNotificationHooks() {\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n-\t\t\t\t(Notification n) -> DocumentManager.getInstance().handleNotification(n));\n+\t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n \n+\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n+\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n+\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n+\n+\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n+\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n+\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n+\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n+\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n+\n+\t\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(StringConstants.PROJ_ID)\n+\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 153,
        "original_position": 153,
        "commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "original_commit_id": "a0435a0317e4fe941776b1746eeae7d52adffe21",
        "user": {
            "login": "loganga",
            "id": 12075896,
            "node_id": "MDQ6VXNlcjEyMDc1ODk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12075896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/loganga",
            "html_url": "https://github.com/loganga",
            "followers_url": "https://api.github.com/users/loganga/followers",
            "following_url": "https://api.github.com/users/loganga/following{/other_user}",
            "gists_url": "https://api.github.com/users/loganga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/loganga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/loganga/subscriptions",
            "organizations_url": "https://api.github.com/users/loganga/orgs",
            "repos_url": "https://api.github.com/users/loganga/repos",
            "events_url": "https://api.github.com/users/loganga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/loganga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Ok, just making sure. I've got a couple of classes that are just generic response and error handlers that open up dialogs, so it should be a really simple change once those are merged.\n",
        "created_at": "2016-09-23T20:36:00Z",
        "updated_at": "2016-09-23T20:36:00Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80322196",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/80322196"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/2#discussion_r80322196"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/2"
            }
        },
        "in_reply_to_id": 80304085
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/83561424",
        "pull_request_review_id": 4397743,
        "id": 83561424,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYxNDI0",
        "diff_hunk": "@@ -94,24 +83,47 @@ public void run() {\n \t\t\t}\n \t\t});\n \n-\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n-\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n-\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n-\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n-\t\t//\n-\t\t// FileMetadata fileMeta = new FileMetadata();\n-\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n-\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n-\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n-\t\t// fileMeta.setVersion(5);\n-\t\t//\n-\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n-\t\t//\n-\t\t// metadataManager.writeProjectMetadata(projMeta,\n-\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tIProject[] projects = workspaceRoot.getProjects();\n+\t\tfor (int i = 0; i < projects.length; i++) {\n+\t\t\tIProject project = projects[i];",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 67,
        "original_position": 67,
        "commit_id": "b687790551a71a8a59d3b7b6b63bc7228d4667b5",
        "original_commit_id": "b687790551a71a8a59d3b7b6b63bc7228d4667b5",
        "user": {
            "login": "fahslaj",
            "id": 6913035,
            "node_id": "MDQ6VXNlcjY5MTMwMzU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6913035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fahslaj",
            "html_url": "https://github.com/fahslaj",
            "followers_url": "https://api.github.com/users/fahslaj/followers",
            "following_url": "https://api.github.com/users/fahslaj/following{/other_user}",
            "gists_url": "https://api.github.com/users/fahslaj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fahslaj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fahslaj/subscriptions",
            "organizations_url": "https://api.github.com/users/fahslaj/orgs",
            "repos_url": "https://api.github.com/users/fahslaj/repos",
            "events_url": "https://api.github.com/users/fahslaj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fahslaj/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Move this to a private function. It looks weird in the constructor.\n",
        "created_at": "2016-10-16T22:05:06Z",
        "updated_at": "2016-10-16T22:05:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/3#discussion_r83561424",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/3",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/83561424"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/3#discussion_r83561424"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/83561432",
        "pull_request_review_id": 4397749,
        "id": 83561432,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzNTYxNDMy",
        "diff_hunk": "@@ -94,24 +83,47 @@ public void run() {\n \t\t\t}\n \t\t});\n \n-\t\t// ProjectMetadata projMeta = new ProjectMetadata();\n-\t\t// projMeta.setName(StringConstants.PROJ_NAME);\n-\t\t// projMeta.setProjectId(StringConstants.PROJ_ID);\n-\t\t// projMeta.setOwner(StringConstants.PREFERENCES_USERNAME);\n-\t\t//\n-\t\t// FileMetadata fileMeta = new FileMetadata();\n-\t\t// fileMeta.setFileId(StringConstants.FILE_ID);\n-\t\t// fileMeta.setFilePath(StringConstants.FILE_PATH);\n-\t\t// fileMeta.setProjectId(StringConstants.PROJ_ID);\n-\t\t// fileMeta.setVersion(5);\n-\t\t//\n-\t\t// projMeta.setFiles(new FileMetadata[] { fileMeta });\n-\t\t//\n-\t\t// metadataManager.writeProjectMetadata(projMeta,\n-\t\t// ResourcesPlugin.getWorkspace().getRoot().getLocation().toString());\n+\t\tIWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tIProject[] projects = workspaceRoot.getProjects();\n+\t\tfor (int i = 0; i < projects.length; i++) {\n+\t\t\tIProject project = projects[i];\n+\t\t\tif (project.isOpen()) {\n+\t\t\t\tif (project.getName().equalsIgnoreCase(\"RemoteSystemsTempFiles\")) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tString projRoot = project.getLocation().toString();\n+\t\t\t\ttry {\n+\t\t\t\t\tmetadataManager.readProjectMetadataFromFile(projRoot, CoreStringConstants.CONFIG_FILE_NAME);\n+\t\t\t\t\tSystem.out.println(\"Loaded metadata from \"\n+\t\t\t\t\t\t\t+ Paths.get(projRoot, CoreStringConstants.CONFIG_FILE_NAME).toString());\n+\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\tSystem.out.println(\"No such config file: \"\n+\t\t\t\t\t\t\t+ Paths.get(projRoot, CoreStringConstants.CONFIG_FILE_NAME).toString());\n+\t\t\t\t} catch (IllegalStateException e) {\n+\t\t\t\t\tSystem.out.println(\"Incorrect config file format: \"\n+\t\t\t\t\t\t\t+ Paths.get(projRoot, CoreStringConstants.CONFIG_FILE_NAME).toString());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n \n-\t\tSystem.out.println(\"PROJECT_METADATA: \" + metadataManager\n-\t\t\t\t.getProjectMetadata(ResourcesPlugin.getWorkspace().getRoot().getLocation().toString() + \"/\"));\n+\t\tSystem.out.println(\"Enumerated all files\");\n+\t\t\n+\t\t// wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, ()\n+\t\t// -> {\n+\t\t// try {\n+\t\t// websocketLogin();",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 94,
        "original_position": 94,
        "commit_id": "b687790551a71a8a59d3b7b6b63bc7228d4667b5",
        "original_commit_id": "b687790551a71a8a59d3b7b6b63bc7228d4667b5",
        "user": {
            "login": "fahslaj",
            "id": 6913035,
            "node_id": "MDQ6VXNlcjY5MTMwMzU=",
            "avatar_url": "https://avatars0.githubusercontent.com/u/6913035?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/fahslaj",
            "html_url": "https://github.com/fahslaj",
            "followers_url": "https://api.github.com/users/fahslaj/followers",
            "following_url": "https://api.github.com/users/fahslaj/following{/other_user}",
            "gists_url": "https://api.github.com/users/fahslaj/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/fahslaj/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/fahslaj/subscriptions",
            "organizations_url": "https://api.github.com/users/fahslaj/orgs",
            "repos_url": "https://api.github.com/users/fahslaj/repos",
            "events_url": "https://api.github.com/users/fahslaj/events{/privacy}",
            "received_events_url": "https://api.github.com/users/fahslaj/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Unimportant comment needs to die.\n",
        "created_at": "2016-10-16T22:05:36Z",
        "updated_at": "2016-10-16T22:05:36Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/3#discussion_r83561432",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/3",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/83561432"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/3#discussion_r83561432"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631603",
        "pull_request_review_id": 6339821,
        "id": 85631603,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjMxNjAz",
        "diff_hunk": "@@ -34,14 +35,17 @@ public void start(BundleContext context) throws Exception {\n \t\tsuper.start(context);\n \t\tplugin = this;\n \t\t\n-\t\tPluginManager.getInstance();;\t\t\n+\t\tPluginManager.getInstance();\n+\t\t",
        "path": "src/main/java/cceclipseplugin/Activator.java",
        "position": null,
        "original_position": 25,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Extra empty lines\n",
        "created_at": "2016-10-29T01:56:10Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631603",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631603"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631603"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631618",
        "pull_request_review_id": 6339821,
        "id": 85631618,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjMxNjE4",
        "diff_hunk": "@@ -2,6 +2,18 @@\n \n public class StringConstants {\t\n \tpublic static final String PREFERENCES_HOSTNAME = \"localhost:8000\";\n+\t\n+\tpublic static final long PROJ_ID = 2;\n+\tpublic static final String PROJ_NAME = \"TestProj1\";\n+\t\n+\tpublic static final long FILE_ID = 3;\n+\tpublic static final String FILE_NAME = \"TestClass1.java\";\n+\tpublic static final String FILE_PATH = \"src/testPkg1\";",
        "path": "src/main/java/cceclipseplugin/constants/StringConstants.java",
        "position": null,
        "original_position": 10,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Is there any purpose of these hard coded test values?\n",
        "created_at": "2016-10-29T01:57:00Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631618",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631618"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631618"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631658",
        "pull_request_review_id": 6339821,
        "id": 85631658,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjMxNjU4",
        "diff_hunk": "@@ -0,0 +1,201 @@\n+package cceclipseplugin.core;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.swt.widgets.Display;\n+\n+import cceclipseplugin.ui.UIRequestErrorHandler;\n+import cceclipseplugin.ui.dialogs.DialogStrings;\n+import cceclipseplugin.ui.dialogs.MessageDialog;\n+import dataMgmt.DataManager;\n+import dataMgmt.models.FileMetadata;\n+import dataMgmt.models.ProjectMetadata;\n+import requestMgmt.IInvalidResponseHandler;\n+import requestMgmt.RequestManager;\n+import websocket.IRequestSendErrorHandler;\n+import websocket.WSManager;\n+import websocket.models.File;\n+import websocket.models.Project;\n+import websocket.models.Request;\n+import websocket.models.requests.FileCreateRequest;\n+import websocket.models.requests.FilePullRequest;\n+import websocket.models.responses.FileCreateResponse;\n+import websocket.models.responses.FilePullResponse;\n+\n+public class EclipseRequestManager extends RequestManager {\n+\n+\tpublic EclipseRequestManager(DataManager dataManager, WSManager wsManager,\n+\t\t\tIRequestSendErrorHandler requestSendErrorHandler, IInvalidResponseHandler invalidResponseHandler) {\n+\t\tsuper(dataManager, wsManager, requestSendErrorHandler, invalidResponseHandler);\n+\t}\n+\t\n+\t@Override\n+\tpublic void finishSubscribeToProject(long id, File[] files) {\n+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tProject p = PluginManager.getInstance().getDataManager().getSessionStorage().getProjectById(id);\n+\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\tProjectMetadata meta =  new ProjectMetadata();\n+\t\tmeta.setName(p.getName());\n+\t\tmeta.setProjectID(id);\n+\t\tPluginManager.getInstance().getMetadataManager().putProjectMetadata(eclipseProject.getFullPath().toString(), meta);\n+\t\ttry {\n+\t\t\tif (eclipseProject.exists()) {\n+\t\t\t\teclipseProject.delete(true, true, new NullProgressMonitor());",
        "path": "src/main/java/cceclipseplugin/core/EclipseRequestManager.java",
        "position": null,
        "original_position": 59,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Does this have a dialog to make sure that the user knows it will remove all local changes?\n",
        "created_at": "2016-10-29T01:58:33Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631658",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631658"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631658"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631678",
        "pull_request_review_id": 6339821,
        "id": 85631678,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjMxNjc4",
        "diff_hunk": "@@ -0,0 +1,201 @@\n+package cceclipseplugin.core;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.swt.widgets.Display;\n+\n+import cceclipseplugin.ui.UIRequestErrorHandler;\n+import cceclipseplugin.ui.dialogs.DialogStrings;\n+import cceclipseplugin.ui.dialogs.MessageDialog;\n+import dataMgmt.DataManager;\n+import dataMgmt.models.FileMetadata;\n+import dataMgmt.models.ProjectMetadata;\n+import requestMgmt.IInvalidResponseHandler;\n+import requestMgmt.RequestManager;\n+import websocket.IRequestSendErrorHandler;\n+import websocket.WSManager;\n+import websocket.models.File;\n+import websocket.models.Project;\n+import websocket.models.Request;\n+import websocket.models.requests.FileCreateRequest;\n+import websocket.models.requests.FilePullRequest;\n+import websocket.models.responses.FileCreateResponse;\n+import websocket.models.responses.FilePullResponse;\n+\n+public class EclipseRequestManager extends RequestManager {\n+\n+\tpublic EclipseRequestManager(DataManager dataManager, WSManager wsManager,\n+\t\t\tIRequestSendErrorHandler requestSendErrorHandler, IInvalidResponseHandler invalidResponseHandler) {\n+\t\tsuper(dataManager, wsManager, requestSendErrorHandler, invalidResponseHandler);\n+\t}\n+\t\n+\t@Override\n+\tpublic void finishSubscribeToProject(long id, File[] files) {\n+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tProject p = PluginManager.getInstance().getDataManager().getSessionStorage().getProjectById(id);\n+\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\tProjectMetadata meta =  new ProjectMetadata();\n+\t\tmeta.setName(p.getName());\n+\t\tmeta.setProjectID(id);\n+\t\tPluginManager.getInstance().getMetadataManager().putProjectMetadata(eclipseProject.getFullPath().toString(), meta);\n+\t\ttry {\n+\t\t\tif (eclipseProject.exists()) {\n+\t\t\t\teclipseProject.delete(true, true, new NullProgressMonitor());\n+\t\t\t}\n+\t\t\teclipseProject.create(new NullProgressMonitor());\n+\t\t\teclipseProject.open(new NullProgressMonitor());",
        "path": "src/main/java/cceclipseplugin/core/EclipseRequestManager.java",
        "position": null,
        "original_position": 62,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Are we supposed to be opening a different NullProgressMonitor from the one that was created?\n",
        "created_at": "2016-10-29T01:59:38Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631678",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631678"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631678"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631711",
        "pull_request_review_id": 6339821,
        "id": 85631711,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjMxNzEx",
        "diff_hunk": "@@ -0,0 +1,201 @@\n+package cceclipseplugin.core;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.swt.widgets.Display;\n+\n+import cceclipseplugin.ui.UIRequestErrorHandler;\n+import cceclipseplugin.ui.dialogs.DialogStrings;\n+import cceclipseplugin.ui.dialogs.MessageDialog;\n+import dataMgmt.DataManager;\n+import dataMgmt.models.FileMetadata;\n+import dataMgmt.models.ProjectMetadata;\n+import requestMgmt.IInvalidResponseHandler;\n+import requestMgmt.RequestManager;\n+import websocket.IRequestSendErrorHandler;\n+import websocket.WSManager;\n+import websocket.models.File;\n+import websocket.models.Project;\n+import websocket.models.Request;\n+import websocket.models.requests.FileCreateRequest;\n+import websocket.models.requests.FilePullRequest;\n+import websocket.models.responses.FileCreateResponse;\n+import websocket.models.responses.FilePullResponse;\n+\n+public class EclipseRequestManager extends RequestManager {\n+\n+\tpublic EclipseRequestManager(DataManager dataManager, WSManager wsManager,\n+\t\t\tIRequestSendErrorHandler requestSendErrorHandler, IInvalidResponseHandler invalidResponseHandler) {\n+\t\tsuper(dataManager, wsManager, requestSendErrorHandler, invalidResponseHandler);\n+\t}\n+\t\n+\t@Override\n+\tpublic void finishSubscribeToProject(long id, File[] files) {\n+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tProject p = PluginManager.getInstance().getDataManager().getSessionStorage().getProjectById(id);\n+\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\tProjectMetadata meta =  new ProjectMetadata();\n+\t\tmeta.setName(p.getName());\n+\t\tmeta.setProjectID(id);\n+\t\tPluginManager.getInstance().getMetadataManager().putProjectMetadata(eclipseProject.getFullPath().toString(), meta);\n+\t\ttry {\n+\t\t\tif (eclipseProject.exists()) {\n+\t\t\t\teclipseProject.delete(true, true, new NullProgressMonitor());\n+\t\t\t}\n+\t\t\teclipseProject.create(new NullProgressMonitor());\n+\t\t\teclipseProject.open(new NullProgressMonitor());\n+\t\t\tfor (File f : files) {\n+\t\t\t\tpullFileAndCreate(eclipseProject, p, f, new NullProgressMonitor());\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\t\n+\tprivate byte[] fileBytes;\n+\t\n+\tpublic void pullFileAndCreate(IProject p, Project ccp, File file, IProgressMonitor progressMonitor) {\n+\t\tRequest req = (new FilePullRequest(file.getFileID())).getRequest(response -> {\n+\t\t\t\tif (response.getStatus() == 200) {\n+\t\t\t\t\tfileBytes = ((FilePullResponse) response.getData()).getFileBytes();\n+\t\t\t\t\t\n+\t\t\t\t\tString path = file.getRelativePath();\n+\t\t\t\t\tPath relPath = new Path(path);\n+\t\t\t\t\tif (!path.equals(\"\") && !path.equals(\".\")) {\n+\t\t\t\t\t\tString currentFolder = \"\";\n+\t\t\t\t\t\tfor (int i = 0; i < relPath.segmentCount(); i++) {\n+\t\t\t\t\t\t\t// iterate through path segments and create if they don't exist\n+\t\t\t\t\t\t\tcurrentFolder += \"/\" + relPath.segment(i);",
        "path": "src/main/java/cceclipseplugin/core/EclipseRequestManager.java",
        "position": null,
        "original_position": 84,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Should we be using Paths.get instead of building it ourselves?\n",
        "created_at": "2016-10-29T02:02:05Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631711",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631711"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631711"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631744",
        "pull_request_review_id": 6339821,
        "id": 85631744,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjMxNzQ0",
        "diff_hunk": "@@ -0,0 +1,201 @@\n+package cceclipseplugin.core;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.swt.widgets.Display;\n+\n+import cceclipseplugin.ui.UIRequestErrorHandler;\n+import cceclipseplugin.ui.dialogs.DialogStrings;\n+import cceclipseplugin.ui.dialogs.MessageDialog;\n+import dataMgmt.DataManager;\n+import dataMgmt.models.FileMetadata;\n+import dataMgmt.models.ProjectMetadata;\n+import requestMgmt.IInvalidResponseHandler;\n+import requestMgmt.RequestManager;\n+import websocket.IRequestSendErrorHandler;\n+import websocket.WSManager;\n+import websocket.models.File;\n+import websocket.models.Project;\n+import websocket.models.Request;\n+import websocket.models.requests.FileCreateRequest;\n+import websocket.models.requests.FilePullRequest;\n+import websocket.models.responses.FileCreateResponse;\n+import websocket.models.responses.FilePullResponse;\n+\n+public class EclipseRequestManager extends RequestManager {\n+\n+\tpublic EclipseRequestManager(DataManager dataManager, WSManager wsManager,\n+\t\t\tIRequestSendErrorHandler requestSendErrorHandler, IInvalidResponseHandler invalidResponseHandler) {\n+\t\tsuper(dataManager, wsManager, requestSendErrorHandler, invalidResponseHandler);\n+\t}\n+\t\n+\t@Override\n+\tpublic void finishSubscribeToProject(long id, File[] files) {\n+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tProject p = PluginManager.getInstance().getDataManager().getSessionStorage().getProjectById(id);\n+\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\tProjectMetadata meta =  new ProjectMetadata();\n+\t\tmeta.setName(p.getName());\n+\t\tmeta.setProjectID(id);\n+\t\tPluginManager.getInstance().getMetadataManager().putProjectMetadata(eclipseProject.getFullPath().toString(), meta);\n+\t\ttry {\n+\t\t\tif (eclipseProject.exists()) {\n+\t\t\t\teclipseProject.delete(true, true, new NullProgressMonitor());\n+\t\t\t}\n+\t\t\teclipseProject.create(new NullProgressMonitor());\n+\t\t\teclipseProject.open(new NullProgressMonitor());\n+\t\t\tfor (File f : files) {\n+\t\t\t\tpullFileAndCreate(eclipseProject, p, f, new NullProgressMonitor());\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\t\n+\tprivate byte[] fileBytes;\n+\t\n+\tpublic void pullFileAndCreate(IProject p, Project ccp, File file, IProgressMonitor progressMonitor) {\n+\t\tRequest req = (new FilePullRequest(file.getFileID())).getRequest(response -> {\n+\t\t\t\tif (response.getStatus() == 200) {\n+\t\t\t\t\tfileBytes = ((FilePullResponse) response.getData()).getFileBytes();\n+\t\t\t\t\t\n+\t\t\t\t\tString path = file.getRelativePath();\n+\t\t\t\t\tPath relPath = new Path(path);\n+\t\t\t\t\tif (!path.equals(\"\") && !path.equals(\".\")) {\n+\t\t\t\t\t\tString currentFolder = \"\";\n+\t\t\t\t\t\tfor (int i = 0; i < relPath.segmentCount(); i++) {\n+\t\t\t\t\t\t\t// iterate through path segments and create if they don't exist\n+\t\t\t\t\t\t\tcurrentFolder += \"/\" + relPath.segment(i);\n+\t\t\t\t\t\t\tPath currentPath = new Path(currentFolder);\n+\t\t\t\t\t\t\tSystem.out.println(\"Making folder \" + currentPath.toString());",
        "path": "src/main/java/cceclipseplugin/core/EclipseRequestManager.java",
        "position": null,
        "original_position": 86,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Can we add a todo to make sure we convert this to use a logger? I don't know where plugins print to for stdout\n",
        "created_at": "2016-10-29T02:04:00Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631744",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631744"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631744"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631935",
        "pull_request_review_id": 6339821,
        "id": 85631935,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjMxOTM1",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 178,
        "original_position": 175,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "can the PrefStore have a auto_connect flag set to true, but not have usernames and password?\n",
        "created_at": "2016-10-29T02:15:55Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631935",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85631935"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85631935"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641439",
        "pull_request_review_id": 6339821,
        "id": 85641439,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNDM5",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": 226,
        "original_position": 223,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "This doesn't remove it from disk, correct?\n",
        "created_at": "2016-10-29T14:36:22Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641439",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641439"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641439"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641450",
        "pull_request_review_id": 6339821,
        "id": 85641450,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNDUw",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 233,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "We should always remove it in the same order. Storage -> MetadataMgr, or the other way around. That'll help debugging if we run into any concurrency issues in the future.\n",
        "created_at": "2016-10-29T14:37:31Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641450",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641450"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641450"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641505",
        "pull_request_review_id": 6339821,
        "id": 85641505,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNTA1",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);\n+\t\t});\n+\t\t\n+\t\t// ~~~ file hooks ~~~\n+\t\t// File.Create\n+\t\twsManager.registerNotificationHandler(\"File\", \"Create\", (notification) -> {\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectMetadata pmeta = mm.getProjectMetadata(resId);\n+\t\t\tif (pmeta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Create notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileCreateNotification n = ((FileCreateNotification) notification.getData());\n+\t\t\tFileMetadata meta = mm.getFileMetadata(n.file.getFileID());\n+\t\t\tif (meta != null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tProject p = dataManager.getSessionStorage().getProjectById(pmeta.getProjectID());\n+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\t\tIProgressMonitor monitor = new NullProgressMonitor();\n+\t\t\trequestManager.pullFileAndCreate(eclipseProject, p, n.file, monitor);\n+\t\t});\n+\t\t// File.Rename\n+\t\twsManager.registerNotificationHandler(\"File\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Rename notification for unfound file project.\");",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 264,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What does \"unfound file project\" mean?\n",
        "created_at": "2016-10-29T14:40:54Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641505",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641505"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641505"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641518",
        "pull_request_review_id": 6339821,
        "id": 85641518,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNTE4",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);\n+\t\t});\n+\t\t\n+\t\t// ~~~ file hooks ~~~\n+\t\t// File.Create\n+\t\twsManager.registerNotificationHandler(\"File\", \"Create\", (notification) -> {\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectMetadata pmeta = mm.getProjectMetadata(resId);\n+\t\t\tif (pmeta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Create notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileCreateNotification n = ((FileCreateNotification) notification.getData());\n+\t\t\tFileMetadata meta = mm.getFileMetadata(n.file.getFileID());\n+\t\t\tif (meta != null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tProject p = dataManager.getSessionStorage().getProjectById(pmeta.getProjectID());\n+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\t\tIProgressMonitor monitor = new NullProgressMonitor();\n+\t\t\trequestManager.pullFileAndCreate(eclipseProject, p, n.file, monitor);\n+\t\t});\n+\t\t// File.Rename\n+\t\twsManager.registerNotificationHandler(\"File\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Rename notification for unfound file project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileRenameNotification n = ((FileRenameNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 270,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Any reason this todo is still here?\n",
        "created_at": "2016-10-29T14:41:50Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641518",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641518"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641518"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641523",
        "pull_request_review_id": 6339821,
        "id": 85641523,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNTIz",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);\n+\t\t});\n+\t\t\n+\t\t// ~~~ file hooks ~~~\n+\t\t// File.Create\n+\t\twsManager.registerNotificationHandler(\"File\", \"Create\", (notification) -> {\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectMetadata pmeta = mm.getProjectMetadata(resId);\n+\t\t\tif (pmeta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Create notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileCreateNotification n = ((FileCreateNotification) notification.getData());\n+\t\t\tFileMetadata meta = mm.getFileMetadata(n.file.getFileID());\n+\t\t\tif (meta != null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tProject p = dataManager.getSessionStorage().getProjectById(pmeta.getProjectID());\n+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\t\tIProgressMonitor monitor = new NullProgressMonitor();\n+\t\t\trequestManager.pullFileAndCreate(eclipseProject, p, n.file, monitor);\n+\t\t});\n+\t\t// File.Rename\n+\t\twsManager.registerNotificationHandler(\"File\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Rename notification for unfound file project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileRenameNotification n = ((FileRenameNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(meta.getRelativePath());\n+//\t\t\tnewPathBuilder.append(n.newName);\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setFilename(n.newName);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to rename file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Move\n+\t\twsManager.registerNotificationHandler(\"File\", \"Move\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Move notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileMoveNotification n = ((FileMoveNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 302,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Todo again?\n",
        "created_at": "2016-10-29T14:42:05Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641523",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641523"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641523"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641539",
        "pull_request_review_id": 6339821,
        "id": 85641539,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNTM5",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);\n+\t\t});\n+\t\t\n+\t\t// ~~~ file hooks ~~~\n+\t\t// File.Create\n+\t\twsManager.registerNotificationHandler(\"File\", \"Create\", (notification) -> {\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectMetadata pmeta = mm.getProjectMetadata(resId);\n+\t\t\tif (pmeta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Create notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileCreateNotification n = ((FileCreateNotification) notification.getData());\n+\t\t\tFileMetadata meta = mm.getFileMetadata(n.file.getFileID());\n+\t\t\tif (meta != null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tProject p = dataManager.getSessionStorage().getProjectById(pmeta.getProjectID());\n+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\t\tIProgressMonitor monitor = new NullProgressMonitor();\n+\t\t\trequestManager.pullFileAndCreate(eclipseProject, p, n.file, monitor);\n+\t\t});\n+\t\t// File.Rename\n+\t\twsManager.registerNotificationHandler(\"File\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Rename notification for unfound file project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileRenameNotification n = ((FileRenameNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(meta.getRelativePath());\n+//\t\t\tnewPathBuilder.append(n.newName);\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setFilename(n.newName);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to rename file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Move\n+\t\twsManager.registerNotificationHandler(\"File\", \"Move\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Move notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileMoveNotification n = ((FileMoveNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(n.newPath);\n+//\t\t\tnewPathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setRelativePath(n.newPath);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to move file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Delete\n+\t\twsManager.registerNotificationHandler(\"File\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Delete notification for unsubscribed project or file that does not exist.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 333,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "All the TODOS! You get a TODO! You get a TODO! Everyone gets a TODO! :D\n",
        "created_at": "2016-10-29T14:42:43Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641539",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641539"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641539"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641624",
        "pull_request_review_id": 6339821,
        "id": 85641624,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNjI0",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);\n+\t\t});\n+\t\t\n+\t\t// ~~~ file hooks ~~~\n+\t\t// File.Create\n+\t\twsManager.registerNotificationHandler(\"File\", \"Create\", (notification) -> {\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectMetadata pmeta = mm.getProjectMetadata(resId);\n+\t\t\tif (pmeta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Create notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileCreateNotification n = ((FileCreateNotification) notification.getData());\n+\t\t\tFileMetadata meta = mm.getFileMetadata(n.file.getFileID());\n+\t\t\tif (meta != null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tProject p = dataManager.getSessionStorage().getProjectById(pmeta.getProjectID());\n+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\t\tIProgressMonitor monitor = new NullProgressMonitor();\n+\t\t\trequestManager.pullFileAndCreate(eclipseProject, p, n.file, monitor);\n+\t\t});\n+\t\t// File.Rename\n+\t\twsManager.registerNotificationHandler(\"File\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Rename notification for unfound file project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileRenameNotification n = ((FileRenameNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(meta.getRelativePath());\n+//\t\t\tnewPathBuilder.append(n.newName);\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setFilename(n.newName);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to rename file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Move\n+\t\twsManager.registerNotificationHandler(\"File\", \"Move\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Move notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileMoveNotification n = ((FileMoveNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(n.newPath);\n+//\t\t\tnewPathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setRelativePath(n.newPath);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to move file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Delete\n+\t\twsManager.registerNotificationHandler(\"File\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Delete notification for unsubscribed project or file that does not exist.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.delete();\n+//\t\t\t\tmm.fileDeleted(resId);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to delete file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Change\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n \t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n-\n-\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n-\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n-\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n-\n-\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n-\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n-\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n-\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n-\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t// Subscribe to all projects that are CCProjects\n-\t\t\t\t\t\t\t\t\tfor(ProjectMetadata metadata : metadataManager.getAllProjects()){\n-\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(metadata.getProjectId())\n-\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (ConnectException e) {\n-\t\t\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t// For creating new file\n-\t\t\t\t\t\t\t\t// IRequestData data = new\n-\t\t\t\t\t\t\t\t// FileCreateRequest(StringConstants.FILE_NAME,\n-\t\t\t\t\t\t\t\t// StringConstants.FILE_PATH,\n-\t\t\t\t\t\t\t\t// StringConstants.PROJ_ID,\n-\t\t\t\t\t\t\t\t// (\"package testPkg1;\\n\" + \"\\n\" + \"public class\n-\t\t\t\t\t\t\t\t// TestClass1 {\\n\"\n-\t\t\t\t\t\t\t\t// + \"\\n\" + \"}\").getBytes());\n-\t\t\t\t\t\t\t\t// try {\n-\t\t\t\t\t\t\t\t// getWSManager().sendRequest(data.getRequest());\n-\t\t\t\t\t\t\t\t// } catch (ConnectException e) {\n-\t\t\t\t\t\t\t\t// // TODO Auto-generated catch block\n-\t\t\t\t\t\t\t\t// e.printStackTrace();\n-\t\t\t\t\t\t\t\t// }\n-\t\t\t\t\t\t\t}, null);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetWSManager().sendRequest(req2, -1);\n-\t\t\t\t\t} catch (ConnectException e) {\n-\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to connect while attempting to log in\", e);\n+\t\n+\tprivate void initPropertyListeners() {\t\t\n+\t\tdataManager.getSessionStorage().addPropertyChangeListener((event) -> {\n+\t\t\tif (event.getPropertyName().equals(SessionStorage.USERNAME)) {\n+\t\t\t\trequestManager.fetchProjects();\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> {\n+\t\t\t\t\tif (event.getOldValue() == null || !event.getOldValue().equals(event.getNewValue())) {\n+\t\t\t\t\t\tif (Window.OK == OkCancelDialog.createDialog(\"Do you want to auto-subscribe to subscribed projets from the last session?\\n\"\n+\t\t\t\t\t\t\t\t+ \"This will overwrite any local changes made since the last online session.\").open()) {\n+\t\t\t\t\t\t\tautoSubscribeForSession = true;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tautoSubscribeForSession = false;\n+\t\t\t\t\t\t\tsetAllSubscribedPrefs(false);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}, null);\n-\t\tgetWSManager().sendRequest(req1, -1);\n-\n+\t\t\t\t});\n+\t\t\t} else if (event.getPropertyName().equals(SessionStorage.PROJECT_LIST)) {\n+\t\t\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t\t\tList<Long> subscribedIdsFromPrefs = getSubscribedProjectIds();\n+\t\t\t\tSet<Long> subscribedIds = storage.getSubscribedIds();\n+\t\t\t\tif (autoSubscribeForSession) {\n+\t\t\t\t\tfor (Long id : subscribedIdsFromPrefs) {\n+\t\t\t\t\t\tProject p = storage.getProjectById(id);\n+\t\t\t\t\t\tif (p == null) {\n+\t\t\t\t\t\t\tremoveProjectIdFromPrefs(id);\n+\t\t\t\t\t\t} else if (!subscribedIds.contains(id)) {\n+\t\t\t\t\t\t\trequestManager.subscribeToProject(id);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\t\n+\tpublic void removeProjectIdFromPrefs(long id) {",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 434,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "What is this function supposed to do? Javadoc would help, perhaps?\n",
        "created_at": "2016-10-29T14:46:23Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641624",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641624"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641624"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641651",
        "pull_request_review_id": 6339821,
        "id": 85641651,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNjUx",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);\n+\t\t});\n+\t\t\n+\t\t// ~~~ file hooks ~~~\n+\t\t// File.Create\n+\t\twsManager.registerNotificationHandler(\"File\", \"Create\", (notification) -> {\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectMetadata pmeta = mm.getProjectMetadata(resId);\n+\t\t\tif (pmeta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Create notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileCreateNotification n = ((FileCreateNotification) notification.getData());\n+\t\t\tFileMetadata meta = mm.getFileMetadata(n.file.getFileID());\n+\t\t\tif (meta != null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tProject p = dataManager.getSessionStorage().getProjectById(pmeta.getProjectID());\n+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\t\tIProgressMonitor monitor = new NullProgressMonitor();\n+\t\t\trequestManager.pullFileAndCreate(eclipseProject, p, n.file, monitor);\n+\t\t});\n+\t\t// File.Rename\n+\t\twsManager.registerNotificationHandler(\"File\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Rename notification for unfound file project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileRenameNotification n = ((FileRenameNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(meta.getRelativePath());\n+//\t\t\tnewPathBuilder.append(n.newName);\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setFilename(n.newName);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to rename file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Move\n+\t\twsManager.registerNotificationHandler(\"File\", \"Move\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Move notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileMoveNotification n = ((FileMoveNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(n.newPath);\n+//\t\t\tnewPathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setRelativePath(n.newPath);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to move file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Delete\n+\t\twsManager.registerNotificationHandler(\"File\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Delete notification for unsubscribed project or file that does not exist.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.delete();\n+//\t\t\t\tmm.fileDeleted(resId);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to delete file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Change\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n \t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n-\n-\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n-\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n-\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n-\n-\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n-\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n-\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n-\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n-\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t// Subscribe to all projects that are CCProjects\n-\t\t\t\t\t\t\t\t\tfor(ProjectMetadata metadata : metadataManager.getAllProjects()){\n-\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(metadata.getProjectId())\n-\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (ConnectException e) {\n-\t\t\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t// For creating new file\n-\t\t\t\t\t\t\t\t// IRequestData data = new\n-\t\t\t\t\t\t\t\t// FileCreateRequest(StringConstants.FILE_NAME,\n-\t\t\t\t\t\t\t\t// StringConstants.FILE_PATH,\n-\t\t\t\t\t\t\t\t// StringConstants.PROJ_ID,\n-\t\t\t\t\t\t\t\t// (\"package testPkg1;\\n\" + \"\\n\" + \"public class\n-\t\t\t\t\t\t\t\t// TestClass1 {\\n\"\n-\t\t\t\t\t\t\t\t// + \"\\n\" + \"}\").getBytes());\n-\t\t\t\t\t\t\t\t// try {\n-\t\t\t\t\t\t\t\t// getWSManager().sendRequest(data.getRequest());\n-\t\t\t\t\t\t\t\t// } catch (ConnectException e) {\n-\t\t\t\t\t\t\t\t// // TODO Auto-generated catch block\n-\t\t\t\t\t\t\t\t// e.printStackTrace();\n-\t\t\t\t\t\t\t\t// }\n-\t\t\t\t\t\t\t}, null);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetWSManager().sendRequest(req2, -1);\n-\t\t\t\t\t} catch (ConnectException e) {\n-\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to connect while attempting to log in\", e);\n+\t\n+\tprivate void initPropertyListeners() {\t\t\n+\t\tdataManager.getSessionStorage().addPropertyChangeListener((event) -> {\n+\t\t\tif (event.getPropertyName().equals(SessionStorage.USERNAME)) {\n+\t\t\t\trequestManager.fetchProjects();\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> {\n+\t\t\t\t\tif (event.getOldValue() == null || !event.getOldValue().equals(event.getNewValue())) {\n+\t\t\t\t\t\tif (Window.OK == OkCancelDialog.createDialog(\"Do you want to auto-subscribe to subscribed projets from the last session?\\n\"\n+\t\t\t\t\t\t\t\t+ \"This will overwrite any local changes made since the last online session.\").open()) {\n+\t\t\t\t\t\t\tautoSubscribeForSession = true;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tautoSubscribeForSession = false;\n+\t\t\t\t\t\t\tsetAllSubscribedPrefs(false);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}, null);\n-\t\tgetWSManager().sendRequest(req1, -1);\n-\n+\t\t\t\t});\n+\t\t\t} else if (event.getPropertyName().equals(SessionStorage.PROJECT_LIST)) {\n+\t\t\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t\t\tList<Long> subscribedIdsFromPrefs = getSubscribedProjectIds();\n+\t\t\t\tSet<Long> subscribedIds = storage.getSubscribedIds();\n+\t\t\t\tif (autoSubscribeForSession) {\n+\t\t\t\t\tfor (Long id : subscribedIdsFromPrefs) {\n+\t\t\t\t\t\tProject p = storage.getProjectById(id);\n+\t\t\t\t\t\tif (p == null) {\n+\t\t\t\t\t\t\tremoveProjectIdFromPrefs(id);\n+\t\t\t\t\t\t} else if (!subscribedIds.contains(id)) {\n+\t\t\t\t\t\t\trequestManager.subscribeToProject(id);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\t\n+\tpublic void removeProjectIdFromPrefs(long id) {\n+\t\tPreferences pluginPrefs = InstanceScope.INSTANCE.getNode(Activator.PLUGIN_ID);\n+\t\tPreferences projectPrefs = pluginPrefs.node(PreferenceConstants.NODE_PROJECTS);\n+\t\tString[] projectIDs;\n+\t\ttry {\n+\t\t\tprojectIDs = projectPrefs.childrenNames();\n+\t\t\tfor (int i = 0; i < projectIDs.length; i++) {\n+\t\t\t\tif (id == Long.parseLong(projectIDs[i])) {\n+\t\t\t\t\tPreferences thisProjectPrefs = projectPrefs.node(projectIDs[i]);\n+\t\t\t\t\tthisProjectPrefs.removeNode();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (BackingStoreException e) {\n+\t\t\tMessageDialog.createDialog(\"Could not remove project from subscribe preferences.\").open();\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\tpublic List<Long> getSubscribedProjectIds() {",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 453,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Javadoc?\n",
        "created_at": "2016-10-29T14:47:34Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641651",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641651"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641651"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641655",
        "pull_request_review_id": 6339821,
        "id": 85641655,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNjU1",
        "diff_hunk": "@@ -135,65 +165,286 @@ public DocumentManager getDocumentManager() {\n \t}\n \n \tpublic MetadataManager getMetadataManager() {\n-\t\treturn metadataManager;\n+\t\treturn dataManager.getMetadataManager();\n \t}\n \n \tpublic DataManager getDataManager() {\n \t\treturn dataManager;\n \t}\n-\n+\t\n+\tprivate void registerWSHooks() {\n+\t\t wsManager.registerEventHandler(WSConnection.EventType.ON_CONNECT, () -> {\n+\t\t\tIPreferenceStore prefStore = Activator.getDefault().getPreferenceStore();\n+\t\t\tString username = prefStore.getString(PreferenceConstants.USERNAME);\n+\t\t\tString password = prefStore.getString(PreferenceConstants.PASSWORD);\n+\t\t\tboolean showWelcomeDialog = (username == null || username.equals(\"\") || password == null || password.equals(\"\"));\n+\t\t\tif (showWelcomeDialog) {\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> new WelcomeDialog(new Shell(), prefStore).open());\n+\t\t\t} else {\n+\t\t\t\tif (prefStore.getBoolean(PreferenceConstants.AUTO_CONNECT)) {\n+\t\t\t\t\tnew Thread(() -> {\n+\t\t\t\t\t\trequestManager.login(username, password);\n+\t\t\t\t\t}).start();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t });\n+\t}\n+\t\n \tprivate void registerNotificationHooks() {\n+\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t// ~~~ project hooks ~~~\n+\t\t// Project.Rename\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tString newName = (((ProjectRenameNotification) notification.getData()).newName);\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tproject.setName(newName);\n+\t\t\tProjectMetadata meta = getMetadataManager().getProjectMetadata(resId);\n+\t\t\tmeta.setName(newName);\n+\t\t\tstorage.setProject(project);\n+\t\t});\n+\t\t// Project.GrantPermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"GrantPermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tArrayList<Long> projects = new ArrayList<>();\n+\t\t\tprojects.add(resId);\n+\t\t\tRequest projectLookupRequest = new ProjectLookupRequest(projects).getRequest(response -> {\n+\t        \tProjectLookupResponse r = (ProjectLookupResponse) response.getData();\n+\t        \tif (r.getProjects() == null || r.getProjects().length != 1) {\n+\t        \t\tSystem.out.println(\"Couldn't read projects from lookup\");\n+\t        \t} else {\n+\t        \t\tProject p = r.getProjects()[0];\n+\t    \t\t\tstorage.setProject(p);\n+\t        \t}\n+\t        }, new UIRequestErrorHandler(\"Couldn't send Project Lookup Request.\"));\n+\t        wsManager.sendAuthenticatedRequest(projectLookupRequest);\n+\t\t});\n+\t\t// Project.RevokePermissions\n+\t\twsManager.registerNotificationHandler(\"Project\", \"RevokePermissions\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectRevokePermissionsNotification n = ((ProjectRevokePermissionsNotification) notification.getData());\n+\t\t\tProject project = storage.getProjectById(resId);\n+\t\t\tif (project.getPermissions() == null) {\n+\t\t\t\tproject.setPermissions(new HashMap<>());\n+\t\t\t}\n+\t\t\tproject.getPermissions().remove(n.revokeUsername);\n+\t\t\tif (storage.getUsername().equals(n.revokeUsername)) {\n+\t\t\t\tstorage.removeProjectById(resId);\n+\t\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\t} else {\n+\t\t\t\tstorage.setProject(project);\n+\t\t\t}\n+\t\t});\n+\t\t// Project.Delete\n+\t\twsManager.registerNotificationHandler(\"Project\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tgetMetadataManager().projectDeleted(resId);\n+\t\t\tstorage.removeProjectById(resId);\n+\t\t});\n+\t\t\n+\t\t// ~~~ file hooks ~~~\n+\t\t// File.Create\n+\t\twsManager.registerNotificationHandler(\"File\", \"Create\", (notification) -> {\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tProjectMetadata pmeta = mm.getProjectMetadata(resId);\n+\t\t\tif (pmeta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Create notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileCreateNotification n = ((FileCreateNotification) notification.getData());\n+\t\t\tFileMetadata meta = mm.getFileMetadata(n.file.getFileID());\n+\t\t\tif (meta != null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\tProject p = dataManager.getSessionStorage().getProjectById(pmeta.getProjectID());\n+\t\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\t\tIProgressMonitor monitor = new NullProgressMonitor();\n+\t\t\trequestManager.pullFileAndCreate(eclipseProject, p, n.file, monitor);\n+\t\t});\n+\t\t// File.Rename\n+\t\twsManager.registerNotificationHandler(\"File\", \"Rename\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Rename notification for unfound file project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileRenameNotification n = ((FileRenameNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(meta.getRelativePath());\n+//\t\t\tnewPathBuilder.append(n.newName);\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setFilename(n.newName);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to rename file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Move\n+\t\twsManager.registerNotificationHandler(\"File\", \"Move\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Move notification for unsubscribed project.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tFileMoveNotification n = ((FileMoveNotification) notification.getData());\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tStringBuilder newPathBuilder = new StringBuilder();\n+//\t\t\tnewPathBuilder.append(projectLocation);\n+//\t\t\tnewPathBuilder.append(n.newPath);\n+//\t\t\tnewPathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.renameTo(new File(newPathBuilder.toString()));\n+//\t\t\t\tmeta.setRelativePath(n.newPath);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to move file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Delete\n+\t\twsManager.registerNotificationHandler(\"File\", \"Delete\", (notification) -> {\n+\t\t\tlong resId = notification.getResourceID();\n+\t\t\tMetadataManager mm = dataManager.getMetadataManager();\n+\t\t\tFileMetadata meta = mm.getFileMetadata(resId);\n+\t\t\tif (meta == null) {\n+\t\t\t\tSystem.out.println(\"Received File.Delete notification for unsubscribed project or file that does not exist.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString projectLocation = mm.getProjectLocation(mm.getProjectIDForFileID(resId));\n+\t\t\t\n+\t\t\t// TODO: have gene look at the path building\n+//\t\t\tStringBuilder pathBuilder = new StringBuilder();\n+//\t\t\tpathBuilder.append(projectLocation);\n+//\t\t\tpathBuilder.append(meta.getRelativePath());\n+//\t\t\tpathBuilder.append(meta.getFilename());\n+//\t\t\t\n+//\t\t\tFile file = new File(pathBuilder.toString());\n+//\t\t\tif (file.exists()) {\n+//\t\t\t\tfile.delete();\n+//\t\t\t\tmm.fileDeleted(resId);\n+//\t\t\t} else {\n+//\t\t\t\tSystem.out.println(\"Tried to delete file that does not exist: \" + pathBuilder.toString());\n+//\t\t\t\treturn;\n+//\t\t\t}\n+\t\t});\n+\t\t// File.Change\n \t\twsManager.registerNotificationHandler(\"File\", \"Change\",\n \t\t\t\t(Notification n) -> documentManager.handleNotification(n));\n \t}\n-\n-\tprivate void websocketLogin() throws ConnectException, InterruptedException {\n-\t\tRequest req1 = new UserRegisterRequest(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\tStringConstants.PREFERENCES_FIRSTNAME, StringConstants.PREFERENCES_LASTNAME,\n-\t\t\t\tStringConstants.PREFERENCES_EMAIL, StringConstants.PREFERENCES_PASSWORD).getRequest(resp -> {\n-\n-\t\t\t\t\tRequest req2 = new UserLoginRequest(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\t\t\t\tStringConstants.PREFERENCES_PASSWORD).getRequest(response -> {\n-\t\t\t\t\t\t\t\t// TODO(wongb) Add login logic for server\n-\t\t\t\t\t\t\t\tif (response.getStatus() != 200) {\n-\t\t\t\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to log in\");\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tgetWSManager().setAuthInfo(StringConstants.PREFERENCES_USERNAME,\n-\t\t\t\t\t\t\t\t\t\t((UserLoginResponse) response.getData()).getToken());\n-\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\t// Subscribe to all projects that are CCProjects\n-\t\t\t\t\t\t\t\t\tfor(ProjectMetadata metadata : metadataManager.getAllProjects()){\n-\t\t\t\t\t\t\t\t\twsManager.sendRequest(new ProjectSubscribeRequest(metadata.getProjectId())\n-\t\t\t\t\t\t\t\t\t\t\t.getRequest(null, null));\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t} catch (ConnectException e) {\n-\t\t\t\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t// For creating new file\n-\t\t\t\t\t\t\t\t// IRequestData data = new\n-\t\t\t\t\t\t\t\t// FileCreateRequest(StringConstants.FILE_NAME,\n-\t\t\t\t\t\t\t\t// StringConstants.FILE_PATH,\n-\t\t\t\t\t\t\t\t// StringConstants.PROJ_ID,\n-\t\t\t\t\t\t\t\t// (\"package testPkg1;\\n\" + \"\\n\" + \"public class\n-\t\t\t\t\t\t\t\t// TestClass1 {\\n\"\n-\t\t\t\t\t\t\t\t// + \"\\n\" + \"}\").getBytes());\n-\t\t\t\t\t\t\t\t// try {\n-\t\t\t\t\t\t\t\t// getWSManager().sendRequest(data.getRequest());\n-\t\t\t\t\t\t\t\t// } catch (ConnectException e) {\n-\t\t\t\t\t\t\t\t// // TODO Auto-generated catch block\n-\t\t\t\t\t\t\t\t// e.printStackTrace();\n-\t\t\t\t\t\t\t\t// }\n-\t\t\t\t\t\t\t}, null);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetWSManager().sendRequest(req2, -1);\n-\t\t\t\t\t} catch (ConnectException e) {\n-\t\t\t\t\t\tthrow new IllegalStateException(\"Failed to connect while attempting to log in\", e);\n+\t\n+\tprivate void initPropertyListeners() {\t\t\n+\t\tdataManager.getSessionStorage().addPropertyChangeListener((event) -> {\n+\t\t\tif (event.getPropertyName().equals(SessionStorage.USERNAME)) {\n+\t\t\t\trequestManager.fetchProjects();\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> {\n+\t\t\t\t\tif (event.getOldValue() == null || !event.getOldValue().equals(event.getNewValue())) {\n+\t\t\t\t\t\tif (Window.OK == OkCancelDialog.createDialog(\"Do you want to auto-subscribe to subscribed projets from the last session?\\n\"\n+\t\t\t\t\t\t\t\t+ \"This will overwrite any local changes made since the last online session.\").open()) {\n+\t\t\t\t\t\t\tautoSubscribeForSession = true;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tautoSubscribeForSession = false;\n+\t\t\t\t\t\t\tsetAllSubscribedPrefs(false);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}, null);\n-\t\tgetWSManager().sendRequest(req1, -1);\n-\n+\t\t\t\t});\n+\t\t\t} else if (event.getPropertyName().equals(SessionStorage.PROJECT_LIST)) {\n+\t\t\t\tSessionStorage storage = dataManager.getSessionStorage();\n+\t\t\t\tList<Long> subscribedIdsFromPrefs = getSubscribedProjectIds();\n+\t\t\t\tSet<Long> subscribedIds = storage.getSubscribedIds();\n+\t\t\t\tif (autoSubscribeForSession) {\n+\t\t\t\t\tfor (Long id : subscribedIdsFromPrefs) {\n+\t\t\t\t\t\tProject p = storage.getProjectById(id);\n+\t\t\t\t\t\tif (p == null) {\n+\t\t\t\t\t\t\tremoveProjectIdFromPrefs(id);\n+\t\t\t\t\t\t} else if (!subscribedIds.contains(id)) {\n+\t\t\t\t\t\t\trequestManager.subscribeToProject(id);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\t\n+\tpublic void removeProjectIdFromPrefs(long id) {\n+\t\tPreferences pluginPrefs = InstanceScope.INSTANCE.getNode(Activator.PLUGIN_ID);\n+\t\tPreferences projectPrefs = pluginPrefs.node(PreferenceConstants.NODE_PROJECTS);\n+\t\tString[] projectIDs;\n+\t\ttry {\n+\t\t\tprojectIDs = projectPrefs.childrenNames();\n+\t\t\tfor (int i = 0; i < projectIDs.length; i++) {\n+\t\t\t\tif (id == Long.parseLong(projectIDs[i])) {\n+\t\t\t\t\tPreferences thisProjectPrefs = projectPrefs.node(projectIDs[i]);\n+\t\t\t\t\tthisProjectPrefs.removeNode();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (BackingStoreException e) {\n+\t\t\tMessageDialog.createDialog(\"Could not remove project from subscribe preferences.\").open();\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t\n+\t}\n+\t\n+\tpublic List<Long> getSubscribedProjectIds() {\n+\t\tList<Long> subscribedProjectIds = new ArrayList<>();\n+\t\tPreferences pluginPrefs = InstanceScope.INSTANCE.getNode(Activator.PLUGIN_ID);\n+\t\tPreferences projectPrefs = pluginPrefs.node(PreferenceConstants.NODE_PROJECTS);\n+\t\tString[] projectIDs;\n+\t\ttry {\n+\t\t\tprojectIDs = projectPrefs.childrenNames();\n+\t\t\tfor (int i = 0; i < projectIDs.length; i++) {\n+\t\t\t\tPreferences thisProjectPrefs = projectPrefs.node(projectIDs[i]);\n+\t\t\t\tboolean subscribed = thisProjectPrefs.getBoolean(PreferenceConstants.VAR_SUBSCRIBED, false);\n+\t\t\t\tif (subscribed) {\n+\t\t\t\t\tsubscribedProjectIds.add(Long.parseLong(projectIDs[i]));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (BackingStoreException e) {\n+\t\t\tMessageDialog.createDialog(\"Could not read subscribed projects from preferences.\").open();\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\treturn subscribedProjectIds;\n+\t}\n+\t\n+\tpublic void setAllSubscribedPrefs(boolean b) {",
        "path": "src/main/java/cceclipseplugin/core/PluginManager.java",
        "position": null,
        "original_position": 474,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Javadoc\n",
        "created_at": "2016-10-29T14:47:58Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641655",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641655"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641655"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641680",
        "pull_request_review_id": 6339821,
        "id": 85641680,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQxNjgw",
        "diff_hunk": "@@ -65,10 +78,6 @@ public void documentAboutToBeChanged(DocumentEvent event) {\n \t\t\t}\n \t\t}\n \n-\t\tITextEditor editor = docMgr.getEditor(docMgr.getCurrFile());\n-\t\tIFile file = editor.getEditorInput().getAdapter(IFile.class);\n-\t\tIProject proj = file.getProject();\n-\n \t\tproj.getName();",
        "path": "src/main/java/cceclipseplugin/editor/listeners/DocumentChangeListener.java",
        "position": null,
        "original_position": 44,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Hmm. this appears to have no purpose. Can we delete it? (Out-of-scope-change)\n",
        "created_at": "2016-10-29T14:49:42Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641680",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85641680"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85641680"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85642588",
        "pull_request_review_id": 6339821,
        "id": 85642588,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQyNTg4",
        "diff_hunk": "@@ -0,0 +1,24 @@\n+package cceclipseplugin.ui;\n+\n+import com.google.common.collect.BiMap;\n+import com.google.common.collect.HashBiMap;\n+\n+/**\n+ * Hard-coded permission map. Only to be used until the server is capable of",
        "path": "src/main/java/cceclipseplugin/ui/PermissionMap.java",
        "position": null,
        "original_position": 7,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Now that the server has permissions constants, does this still need to be here?\n",
        "created_at": "2016-10-29T15:31:59Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85642588",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85642588"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85642588"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85643088",
        "pull_request_review_id": 6339821,
        "id": 85643088,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjQzMDg4",
        "diff_hunk": "@@ -0,0 +1,447 @@\n+/*******************************************************************************\n+ * Copyright (c) 2011 Google, Inc.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *    Google, Inc. - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.wb.swt;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.graphics.Color;\n+import org.eclipse.swt.graphics.Cursor;\n+import org.eclipse.swt.graphics.Font;\n+import org.eclipse.swt.graphics.FontData;\n+import org.eclipse.swt.graphics.GC;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.ImageData;\n+import org.eclipse.swt.graphics.RGB;\n+import org.eclipse.swt.graphics.Rectangle;\n+import org.eclipse.swt.widgets.Display;\n+\n+/**\n+ * Utility class for managing OS resources associated with SWT controls such as colors, fonts, images, etc.\n+ * <p>\n+ * !!! IMPORTANT !!! Application code must explicitly invoke the <code>dispose()</code> method to release the\n+ * operating system resources managed by cached objects when those objects and OS resources are no longer\n+ * needed (e.g. on application shutdown)\n+ * <p>\n+ * This class may be freely distributed as part of any application or plugin.\n+ * <p>\n+ * @author scheglov_ke\n+ * @author Dan Rubel\n+ */\n+public class SWTResourceManager {\n+\t////////////////////////////////////////////////////////////////////////////\n+\t//\n+\t// Color\n+\t//\n+\t////////////////////////////////////////////////////////////////////////////\n+\tprivate static Map<RGB, Color> m_colorMap = new HashMap<RGB, Color>();\n+\t/**\n+\t * Returns the system {@link Color} matching the specific ID.\n+\t * \n+\t * @param systemColorID\n+\t *            the ID value for the color\n+\t * @return the system {@link Color} matching the specific ID\n+\t */\n+\tpublic static Color getColor(int systemColorID) {\n+\t\tDisplay display = Display.getCurrent();\n+\t\treturn display.getSystemColor(systemColorID);\n+\t}\n+\t/**\n+\t * Returns a {@link Color} given its red, green and blue component values.\n+\t * \n+\t * @param r\n+\t *            the red component of the color\n+\t * @param g\n+\t *            the green component of the color\n+\t * @param b\n+\t *            the blue component of the color\n+\t * @return the {@link Color} matching the given red, green and blue component values\n+\t */\n+\tpublic static Color getColor(int r, int g, int b) {\n+\t\treturn getColor(new RGB(r, g, b));\n+\t}\n+\t/**\n+\t * Returns a {@link Color} given its RGB value.\n+\t * \n+\t * @param rgb\n+\t *            the {@link RGB} value of the color\n+\t * @return the {@link Color} matching the RGB value\n+\t */\n+\tpublic static Color getColor(RGB rgb) {\n+\t\tColor color = m_colorMap.get(rgb);\n+\t\tif (color == null) {\n+\t\t\tDisplay display = Display.getCurrent();\n+\t\t\tcolor = new Color(display, rgb);\n+\t\t\tm_colorMap.put(rgb, color);\n+\t\t}\n+\t\treturn color;\n+\t}\n+\t/**\n+\t * Dispose of all the cached {@link Color}'s.\n+\t */\n+\tpublic static void disposeColors() {\n+\t\tfor (Color color : m_colorMap.values()) {\n+\t\t\tcolor.dispose();\n+\t\t}\n+\t\tm_colorMap.clear();\n+\t}\n+\t////////////////////////////////////////////////////////////////////////////\n+\t//\n+\t// Image\n+\t//\n+\t////////////////////////////////////////////////////////////////////////////\n+\t/**\n+\t * Maps image paths to images.\n+\t */\n+\tprivate static Map<String, Image> m_imageMap = new HashMap<String, Image>();\n+\t/**\n+\t * Returns an {@link Image} encoded by the specified {@link InputStream}.\n+\t * \n+\t * @param stream\n+\t *            the {@link InputStream} encoding the image data\n+\t * @return the {@link Image} encoded by the specified input stream\n+\t */\n+\tprotected static Image getImage(InputStream stream) throws IOException {\n+\t\ttry {\n+\t\t\tDisplay display = Display.getCurrent();\n+\t\t\tImageData data = new ImageData(stream);\n+\t\t\tif (data.transparentPixel > 0) {\n+\t\t\t\treturn new Image(display, data, data.getTransparencyMask());\n+\t\t\t}\n+\t\t\treturn new Image(display, data);\n+\t\t} finally {\n+\t\t\tstream.close();\n+\t\t}\n+\t}\n+\t/**\n+\t * Returns an {@link Image} stored in the file at the specified path.\n+\t * \n+\t * @param path\n+\t *            the path to the image file\n+\t * @return the {@link Image} stored in the file at the specified path\n+\t */\n+\tpublic static Image getImage(String path) {\n+\t\tImage image = m_imageMap.get(path);\n+\t\tif (image == null) {\n+\t\t\ttry {\n+\t\t\t\timage = getImage(new FileInputStream(path));\n+\t\t\t\tm_imageMap.put(path, image);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\timage = getMissingImage();\n+\t\t\t\tm_imageMap.put(path, image);\n+\t\t\t}\n+\t\t}\n+\t\treturn image;\n+\t}\n+\t/**\n+\t * Returns an {@link Image} stored in the file at the specified path relative to the specified class.\n+\t * \n+\t * @param clazz\n+\t *            the {@link Class} relative to which to find the image\n+\t * @param path\n+\t *            the path to the image file, if starts with <code>'/'</code>\n+\t * @return the {@link Image} stored in the file at the specified path\n+\t */\n+\tpublic static Image getImage(Class<?> clazz, String path) {\n+\t\tString key = clazz.getName() + '|' + path;\n+\t\tImage image = m_imageMap.get(key);\n+\t\tif (image == null) {\n+\t\t\ttry {\n+\t\t\t\timage = getImage(clazz.getResourceAsStream(path));\n+\t\t\t\tm_imageMap.put(key, image);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\timage = getMissingImage();\n+\t\t\t\tm_imageMap.put(key, image);\n+\t\t\t}\n+\t\t}\n+\t\treturn image;\n+\t}\n+\tprivate static final int MISSING_IMAGE_SIZE = 10;\n+\t/**\n+\t * @return the small {@link Image} that can be used as placeholder for missing image.\n+\t */\n+\tprivate static Image getMissingImage() {\n+\t\tImage image = new Image(Display.getCurrent(), MISSING_IMAGE_SIZE, MISSING_IMAGE_SIZE);\n+\t\t//\n+\t\tGC gc = new GC(image);\n+\t\tgc.setBackground(getColor(SWT.COLOR_RED));\n+\t\tgc.fillRectangle(0, 0, MISSING_IMAGE_SIZE, MISSING_IMAGE_SIZE);\n+\t\tgc.dispose();\n+\t\t//\n+\t\treturn image;\n+\t}\n+\t/**\n+\t * Style constant for placing decorator image in top left corner of base image.\n+\t */\n+\tpublic static final int TOP_LEFT = 1;\n+\t/**\n+\t * Style constant for placing decorator image in top right corner of base image.\n+\t */\n+\tpublic static final int TOP_RIGHT = 2;\n+\t/**\n+\t * Style constant for placing decorator image in bottom left corner of base image.\n+\t */\n+\tpublic static final int BOTTOM_LEFT = 3;\n+\t/**\n+\t * Style constant for placing decorator image in bottom right corner of base image.\n+\t */\n+\tpublic static final int BOTTOM_RIGHT = 4;\n+\t/**\n+\t * Internal value.\n+\t */\n+\tprotected static final int LAST_CORNER_KEY = 5;\n+\t/**\n+\t * Maps images to decorated images.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate static Map<Image, Map<Image, Image>>[] m_decoratedImageMap = new Map[LAST_CORNER_KEY];\n+\t/**\n+\t * Returns an {@link Image} composed of a base image decorated by another image.\n+\t * \n+\t * @param baseImage\n+\t *            the base {@link Image} that should be decorated\n+\t * @param decorator\n+\t *            the {@link Image} to decorate the base image\n+\t * @return {@link Image} The resulting decorated image\n+\t */\n+\tpublic static Image decorateImage(Image baseImage, Image decorator) {\n+\t\treturn decorateImage(baseImage, decorator, BOTTOM_RIGHT);\n+\t}\n+\t/**\n+\t * Returns an {@link Image} composed of a base image decorated by another image.\n+\t * \n+\t * @param baseImage\n+\t *            the base {@link Image} that should be decorated\n+\t * @param decorator\n+\t *            the {@link Image} to decorate the base image\n+\t * @param corner\n+\t *            the corner to place decorator image\n+\t * @return the resulting decorated {@link Image}\n+\t */\n+\tpublic static Image decorateImage(final Image baseImage, final Image decorator, final int corner) {\n+\t\tif (corner <= 0 || corner >= LAST_CORNER_KEY) {\n+\t\t\tthrow new IllegalArgumentException(\"Wrong decorate corner\");\n+\t\t}\n+\t\tMap<Image, Map<Image, Image>> cornerDecoratedImageMap = m_decoratedImageMap[corner];\n+\t\tif (cornerDecoratedImageMap == null) {\n+\t\t\tcornerDecoratedImageMap = new HashMap<Image, Map<Image, Image>>();\n+\t\t\tm_decoratedImageMap[corner] = cornerDecoratedImageMap;\n+\t\t}\n+\t\tMap<Image, Image> decoratedMap = cornerDecoratedImageMap.get(baseImage);\n+\t\tif (decoratedMap == null) {\n+\t\t\tdecoratedMap = new HashMap<Image, Image>();\n+\t\t\tcornerDecoratedImageMap.put(baseImage, decoratedMap);\n+\t\t}\n+\t\t//\n+\t\tImage result = decoratedMap.get(decorator);\n+\t\tif (result == null) {\n+\t\t\tRectangle bib = baseImage.getBounds();\n+\t\t\tRectangle dib = decorator.getBounds();\n+\t\t\t//\n+\t\t\tresult = new Image(Display.getCurrent(), bib.width, bib.height);\n+\t\t\t//\n+\t\t\tGC gc = new GC(result);\n+\t\t\tgc.drawImage(baseImage, 0, 0);\n+\t\t\tif (corner == TOP_LEFT) {\n+\t\t\t\tgc.drawImage(decorator, 0, 0);\n+\t\t\t} else if (corner == TOP_RIGHT) {\n+\t\t\t\tgc.drawImage(decorator, bib.width - dib.width, 0);\n+\t\t\t} else if (corner == BOTTOM_LEFT) {\n+\t\t\t\tgc.drawImage(decorator, 0, bib.height - dib.height);\n+\t\t\t} else if (corner == BOTTOM_RIGHT) {\n+\t\t\t\tgc.drawImage(decorator, bib.width - dib.width, bib.height - dib.height);\n+\t\t\t}\n+\t\t\tgc.dispose();\n+\t\t\t//\n+\t\t\tdecoratedMap.put(decorator, result);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\t/**\n+\t * Dispose all of the cached {@link Image}'s.\n+\t */\n+\tpublic static void disposeImages() {\n+\t\t// dispose loaded images\n+\t\t{\n+\t\t\tfor (Image image : m_imageMap.values()) {\n+\t\t\t\timage.dispose();\n+\t\t\t}\n+\t\t\tm_imageMap.clear();\n+\t\t}\n+\t\t// dispose decorated images\n+\t\tfor (int i = 0; i < m_decoratedImageMap.length; i++) {\n+\t\t\tMap<Image, Map<Image, Image>> cornerDecoratedImageMap = m_decoratedImageMap[i];\n+\t\t\tif (cornerDecoratedImageMap != null) {\n+\t\t\t\tfor (Map<Image, Image> decoratedMap : cornerDecoratedImageMap.values()) {\n+\t\t\t\t\tfor (Image image : decoratedMap.values()) {\n+\t\t\t\t\t\timage.dispose();\n+\t\t\t\t\t}\n+\t\t\t\t\tdecoratedMap.clear();\n+\t\t\t\t}\n+\t\t\t\tcornerDecoratedImageMap.clear();\n+\t\t\t}\n+\t\t}\n+\t}\n+\t////////////////////////////////////////////////////////////////////////////\n+\t//\n+\t// Font\n+\t//\n+\t////////////////////////////////////////////////////////////////////////////\n+\t/**\n+\t * Maps font names to fonts.\n+\t */\n+\tprivate static Map<String, Font> m_fontMap = new HashMap<String, Font>();\n+\t/**\n+\t * Maps fonts to their bold versions.\n+\t */\n+\tprivate static Map<Font, Font> m_fontToBoldFontMap = new HashMap<Font, Font>();\n+\t/**\n+\t * Returns a {@link Font} based on its name, height and style.\n+\t * \n+\t * @param name\n+\t *            the name of the font\n+\t * @param height\n+\t *            the height of the font\n+\t * @param style\n+\t *            the style of the font\n+\t * @return {@link Font} The font matching the name, height and style\n+\t */\n+\tpublic static Font getFont(String name, int height, int style) {\n+\t\treturn getFont(name, height, style, false, false);\n+\t}\n+\t/**\n+\t * Returns a {@link Font} based on its name, height and style. Windows-specific strikeout and underline\n+\t * flags are also supported.\n+\t * \n+\t * @param name\n+\t *            the name of the font\n+\t * @param size\n+\t *            the size of the font\n+\t * @param style\n+\t *            the style of the font\n+\t * @param strikeout\n+\t *            the strikeout flag (warning: Windows only)\n+\t * @param underline\n+\t *            the underline flag (warning: Windows only)\n+\t * @return {@link Font} The font matching the name, height, style, strikeout and underline\n+\t */\n+\tpublic static Font getFont(String name, int size, int style, boolean strikeout, boolean underline) {\n+\t\tString fontName = name + '|' + size + '|' + style + '|' + strikeout + '|' + underline;\n+\t\tFont font = m_fontMap.get(fontName);\n+\t\tif (font == null) {\n+\t\t\tFontData fontData = new FontData(name, size, style);\n+\t\t\tif (strikeout || underline) {\n+\t\t\t\ttry {\n+\t\t\t\t\tClass<?> logFontClass = Class.forName(\"org.eclipse.swt.internal.win32.LOGFONT\"); //$NON-NLS-1$\n+\t\t\t\t\tObject logFont = FontData.class.getField(\"data\").get(fontData); //$NON-NLS-1$\n+\t\t\t\t\tif (logFont != null && logFontClass != null) {\n+\t\t\t\t\t\tif (strikeout) {\n+\t\t\t\t\t\t\tlogFontClass.getField(\"lfStrikeOut\").set(logFont, Byte.valueOf((byte) 1)); //$NON-NLS-1$\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (underline) {\n+\t\t\t\t\t\t\tlogFontClass.getField(\"lfUnderline\").set(logFont, Byte.valueOf((byte) 1)); //$NON-NLS-1$\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} catch (Throwable e) {\n+\t\t\t\t\tSystem.err.println(\"Unable to set underline or strikeout\" + \" (probably on a non-Windows platform). \" + e); //$NON-NLS-1$ //$NON-NLS-2$\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfont = new Font(Display.getCurrent(), fontData);\n+\t\t\tm_fontMap.put(fontName, font);\n+\t\t}\n+\t\treturn font;\n+\t}\n+\t/**\n+\t * Returns a bold version of the given {@link Font}.\n+\t * \n+\t * @param baseFont\n+\t *            the {@link Font} for which a bold version is desired\n+\t * @return the bold version of the given {@link Font}\n+\t */\n+\tpublic static Font getBoldFont(Font baseFont) {\n+\t\tFont font = m_fontToBoldFontMap.get(baseFont);\n+\t\tif (font == null) {\n+\t\t\tFontData fontDatas[] = baseFont.getFontData();\n+\t\t\tFontData data = fontDatas[0];\n+\t\t\tfont = new Font(Display.getCurrent(), data.getName(), data.getHeight(), SWT.BOLD);\n+\t\t\tm_fontToBoldFontMap.put(baseFont, font);\n+\t\t}\n+\t\treturn font;\n+\t}\n+\t/**\n+\t * Dispose all of the cached {@link Font}'s.\n+\t */\n+\tpublic static void disposeFonts() {\n+\t\t// clear fonts\n+\t\tfor (Font font : m_fontMap.values()) {\n+\t\t\tfont.dispose();\n+\t\t}\n+\t\tm_fontMap.clear();\n+\t\t// clear bold fonts\n+\t\tfor (Font font : m_fontToBoldFontMap.values()) {\n+\t\t\tfont.dispose();\n+\t\t}\n+\t\tm_fontToBoldFontMap.clear();\n+\t}\n+\t////////////////////////////////////////////////////////////////////////////\n+\t//\n+\t// Cursor\n+\t//\n+\t////////////////////////////////////////////////////////////////////////////\n+\t/**\n+\t * Maps IDs to cursors.\n+\t */\n+\tprivate static Map<Integer, Cursor> m_idToCursorMap = new HashMap<Integer, Cursor>();\n+\t/**\n+\t * Returns the system cursor matching the specific ID.\n+\t * \n+\t * @param id\n+\t *            int The ID value for the cursor\n+\t * @return Cursor The system cursor matching the specific ID\n+\t */\n+\tpublic static Cursor getCursor(int id) {\n+\t\tInteger key = Integer.valueOf(id);\n+\t\tCursor cursor = m_idToCursorMap.get(key);\n+\t\tif (cursor == null) {\n+\t\t\tcursor = new Cursor(Display.getDefault(), id);\n+\t\t\tm_idToCursorMap.put(key, cursor);\n+\t\t}\n+\t\treturn cursor;\n+\t}\n+\t/**\n+\t * Dispose all of the cached cursors.\n+\t */\n+\tpublic static void disposeCursors() {\n+\t\tfor (Cursor cursor : m_idToCursorMap.values()) {\n+\t\t\tcursor.dispose();\n+\t\t}\n+\t\tm_idToCursorMap.clear();\n+\t}\n+\t////////////////////////////////////////////////////////////////////////////\n+\t//\n+\t// General\n+\t//\n+\t////////////////////////////////////////////////////////////////////////////\n+\t/**\n+\t * Dispose of cached objects and their underlying OS resources. This should only be called when the cached\n+\t * objects are no longer needed (e.g. on application shutdown).\n+\t */\n+\tpublic static void dispose() {\n+\t\tdisposeColors();\n+\t\tdisposeImages();\n+\t\tdisposeFonts();\n+\t\tdisposeCursors();\n+\t}\n+}",
        "path": "src/main/java/org/eclipse/wb/swt/SWTResourceManager.java",
        "position": 447,
        "original_position": 447,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "ObsessiveOrange",
            "id": 6174404,
            "node_id": "MDQ6VXNlcjYxNzQ0MDQ=",
            "avatar_url": "https://avatars2.githubusercontent.com/u/6174404?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/ObsessiveOrange",
            "html_url": "https://github.com/ObsessiveOrange",
            "followers_url": "https://api.github.com/users/ObsessiveOrange/followers",
            "following_url": "https://api.github.com/users/ObsessiveOrange/following{/other_user}",
            "gists_url": "https://api.github.com/users/ObsessiveOrange/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/ObsessiveOrange/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/ObsessiveOrange/subscriptions",
            "organizations_url": "https://api.github.com/users/ObsessiveOrange/orgs",
            "repos_url": "https://api.github.com/users/ObsessiveOrange/repos",
            "events_url": "https://api.github.com/users/ObsessiveOrange/events{/privacy}",
            "received_events_url": "https://api.github.com/users/ObsessiveOrange/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Newline\n",
        "created_at": "2016-10-29T15:59:16Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85643088",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "MEMBER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85643088"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85643088"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85668105",
        "pull_request_review_id": 6370679,
        "id": 85668105,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjY4MTA1",
        "diff_hunk": "@@ -0,0 +1,201 @@\n+package cceclipseplugin.core;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.swt.widgets.Display;\n+\n+import cceclipseplugin.ui.UIRequestErrorHandler;\n+import cceclipseplugin.ui.dialogs.DialogStrings;\n+import cceclipseplugin.ui.dialogs.MessageDialog;\n+import dataMgmt.DataManager;\n+import dataMgmt.models.FileMetadata;\n+import dataMgmt.models.ProjectMetadata;\n+import requestMgmt.IInvalidResponseHandler;\n+import requestMgmt.RequestManager;\n+import websocket.IRequestSendErrorHandler;\n+import websocket.WSManager;\n+import websocket.models.File;\n+import websocket.models.Project;\n+import websocket.models.Request;\n+import websocket.models.requests.FileCreateRequest;\n+import websocket.models.requests.FilePullRequest;\n+import websocket.models.responses.FileCreateResponse;\n+import websocket.models.responses.FilePullResponse;\n+\n+public class EclipseRequestManager extends RequestManager {\n+\n+\tpublic EclipseRequestManager(DataManager dataManager, WSManager wsManager,\n+\t\t\tIRequestSendErrorHandler requestSendErrorHandler, IInvalidResponseHandler invalidResponseHandler) {\n+\t\tsuper(dataManager, wsManager, requestSendErrorHandler, invalidResponseHandler);\n+\t}\n+\t\n+\t@Override\n+\tpublic void finishSubscribeToProject(long id, File[] files) {\n+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tProject p = PluginManager.getInstance().getDataManager().getSessionStorage().getProjectById(id);\n+\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\tProjectMetadata meta =  new ProjectMetadata();\n+\t\tmeta.setName(p.getName());\n+\t\tmeta.setProjectID(id);\n+\t\tPluginManager.getInstance().getMetadataManager().putProjectMetadata(eclipseProject.getFullPath().toString(), meta);\n+\t\ttry {\n+\t\t\tif (eclipseProject.exists()) {\n+\t\t\t\teclipseProject.delete(true, true, new NullProgressMonitor());",
        "path": "src/main/java/cceclipseplugin/core/EclipseRequestManager.java",
        "position": null,
        "original_position": 59,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "loganga",
            "id": 12075896,
            "node_id": "MDQ6VXNlcjEyMDc1ODk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12075896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/loganga",
            "html_url": "https://github.com/loganga",
            "followers_url": "https://api.github.com/users/loganga/followers",
            "following_url": "https://api.github.com/users/loganga/following{/other_user}",
            "gists_url": "https://api.github.com/users/loganga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/loganga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/loganga/subscriptions",
            "organizations_url": "https://api.github.com/users/loganga/orgs",
            "repos_url": "https://api.github.com/users/loganga/repos",
            "events_url": "https://api.github.com/users/loganga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/loganga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "Yes, there's a dialog right before auto-subscribing on startup and also every time you subscribe through the right-click menu.\n",
        "created_at": "2016-10-30T20:12:01Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85668105",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85668105"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85668105"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        },
        "in_reply_to_id": 85631658
    },
    {
        "url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85668200",
        "pull_request_review_id": 6370763,
        "id": 85668200,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NjY4MjAw",
        "diff_hunk": "@@ -0,0 +1,201 @@\n+package cceclipseplugin.core;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IContainer;\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.resources.IWorkspaceRoot;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.swt.widgets.Display;\n+\n+import cceclipseplugin.ui.UIRequestErrorHandler;\n+import cceclipseplugin.ui.dialogs.DialogStrings;\n+import cceclipseplugin.ui.dialogs.MessageDialog;\n+import dataMgmt.DataManager;\n+import dataMgmt.models.FileMetadata;\n+import dataMgmt.models.ProjectMetadata;\n+import requestMgmt.IInvalidResponseHandler;\n+import requestMgmt.RequestManager;\n+import websocket.IRequestSendErrorHandler;\n+import websocket.WSManager;\n+import websocket.models.File;\n+import websocket.models.Project;\n+import websocket.models.Request;\n+import websocket.models.requests.FileCreateRequest;\n+import websocket.models.requests.FilePullRequest;\n+import websocket.models.responses.FileCreateResponse;\n+import websocket.models.responses.FilePullResponse;\n+\n+public class EclipseRequestManager extends RequestManager {\n+\n+\tpublic EclipseRequestManager(DataManager dataManager, WSManager wsManager,\n+\t\t\tIRequestSendErrorHandler requestSendErrorHandler, IInvalidResponseHandler invalidResponseHandler) {\n+\t\tsuper(dataManager, wsManager, requestSendErrorHandler, invalidResponseHandler);\n+\t}\n+\t\n+\t@Override\n+\tpublic void finishSubscribeToProject(long id, File[] files) {\n+\t\tIWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();\n+\t\tProject p = PluginManager.getInstance().getDataManager().getSessionStorage().getProjectById(id);\n+\t\tIProject eclipseProject = root.getProject(p.getName());\n+\t\tProjectMetadata meta =  new ProjectMetadata();\n+\t\tmeta.setName(p.getName());\n+\t\tmeta.setProjectID(id);\n+\t\tPluginManager.getInstance().getMetadataManager().putProjectMetadata(eclipseProject.getFullPath().toString(), meta);\n+\t\ttry {\n+\t\t\tif (eclipseProject.exists()) {\n+\t\t\t\teclipseProject.delete(true, true, new NullProgressMonitor());\n+\t\t\t}\n+\t\t\teclipseProject.create(new NullProgressMonitor());\n+\t\t\teclipseProject.open(new NullProgressMonitor());",
        "path": "src/main/java/cceclipseplugin/core/EclipseRequestManager.java",
        "position": null,
        "original_position": 62,
        "commit_id": "5a8ef56bfdd9833c85684dd9491081e7e6bf41c9",
        "original_commit_id": "a81e6ae35ef306f2fbd96cb209c5999fe36baea7",
        "user": {
            "login": "loganga",
            "id": 12075896,
            "node_id": "MDQ6VXNlcjEyMDc1ODk2",
            "avatar_url": "https://avatars0.githubusercontent.com/u/12075896?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/loganga",
            "html_url": "https://github.com/loganga",
            "followers_url": "https://api.github.com/users/loganga/followers",
            "following_url": "https://api.github.com/users/loganga/following{/other_user}",
            "gists_url": "https://api.github.com/users/loganga/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/loganga/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/loganga/subscriptions",
            "organizations_url": "https://api.github.com/users/loganga/orgs",
            "repos_url": "https://api.github.com/users/loganga/repos",
            "events_url": "https://api.github.com/users/loganga/events{/privacy}",
            "received_events_url": "https://api.github.com/users/loganga/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "At the moment it doesn't matter because we're not doing anything with the progress monitor. The purpose of the progress monitor is to provide an reference for some sort of corresponding UI element to know about the progress of a certain task, and we don't have anything that would need to use it for now (i.e. a progress bar)\n",
        "created_at": "2016-10-30T20:16:24Z",
        "updated_at": "2016-11-06T21:11:06Z",
        "html_url": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85668200",
        "pull_request_url": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4",
        "author_association": "NONE",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/comments/85668200"
            },
            "html": {
                "href": "https://github.com/CodeCollaborate/EclipsePlugin/pull/4#discussion_r85668200"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/CodeCollaborate/EclipsePlugin/pulls/4"
            }
        },
        "in_reply_to_id": 85631678
    }
]