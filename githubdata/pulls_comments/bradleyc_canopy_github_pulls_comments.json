[
    {
        "url": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240003862",
        "pull_request_review_id": 182943134,
        "id": 240003862,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAwMzg2Mg==",
        "diff_hunk": "@@ -161,31 +161,73 @@ contract Canopy {\n     \n     function rankPosts() internal {}\n \n-    // @dev read from mapping\n-    function getPostsByTime() external {}\n+    // @dev read from mapping - show 100 of the most recent\n+    function getMostRecentPost() external {\n+        //since IDs are sequential, length of array = most recent post id\n+        return posts.length;\n+    }\n \n     // @dev read from mapping\n-    function getScoreById() internal {}\n+    function getScoreById(uint _postID) internal {\n+        return posts[_postID].score;\n+    }\n \n     // @dev user can choose when to cash out, make sure to check address\n-    function cashOut() external payable onlyPoster {}\n+    function cashOut(uint _postId) external payable onlyPoster {\n+        //check that payout is to posterAddress with onlyPoster\n+        //Setting the Variables required\n+        uint _paymentToPoster;\n+        uint _bonusPayout;\n+        uint _bonusPayoutVoters;\n+        uint _totalBonus;\n+        uint _totalValue;\n+        uint _totalPayout;\n+\n+        _totalValue = p.valuePositive + p.valueNegative;",
        "path": "contracts/Canopy.sol",
        "position": null,
        "original_position": 30,
        "commit_id": "4d500344db55babb557d8b5562ab6189b234bf88",
        "original_commit_id": "fbc88c6265428b73d541ed65e9c8374bfc77fd03",
        "user": {
            "login": "BradleyC",
            "id": 1714980,
            "node_id": "MDQ6VXNlcjE3MTQ5ODA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1714980?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/BradleyC",
            "html_url": "https://github.com/BradleyC",
            "followers_url": "https://api.github.com/users/BradleyC/followers",
            "following_url": "https://api.github.com/users/BradleyC/following{/other_user}",
            "gists_url": "https://api.github.com/users/BradleyC/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/BradleyC/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BradleyC/subscriptions",
            "organizations_url": "https://api.github.com/users/BradleyC/orgs",
            "repos_url": "https://api.github.com/users/BradleyC/repos",
            "events_url": "https://api.github.com/users/BradleyC/events{/privacy}",
            "received_events_url": "https://api.github.com/users/BradleyC/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "you're using `p` before you define it in the next line! D:",
        "created_at": "2018-12-08T12:42:56Z",
        "updated_at": "2018-12-08T12:54:35Z",
        "html_url": "https://github.com/BradleyC/canopy/pull/3#discussion_r240003862",
        "pull_request_url": "https://api.github.com/repos/BradleyC/canopy/pulls/3",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240003862"
            },
            "html": {
                "href": "https://github.com/BradleyC/canopy/pull/3#discussion_r240003862"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240003916",
        "pull_request_review_id": 182943134,
        "id": 240003916,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAwMzkxNg==",
        "diff_hunk": "@@ -161,31 +161,73 @@ contract Canopy {\n     \n     function rankPosts() internal {}\n \n-    // @dev read from mapping\n-    function getPostsByTime() external {}\n+    // @dev read from mapping - show 100 of the most recent\n+    function getMostRecentPost() external {\n+        //since IDs are sequential, length of array = most recent post id\n+        return posts.length;\n+    }\n \n     // @dev read from mapping\n-    function getScoreById() internal {}\n+    function getScoreById(uint _postID) internal {\n+        return posts[_postID].score;\n+    }\n \n     // @dev user can choose when to cash out, make sure to check address\n-    function cashOut() external payable onlyPoster {}\n+    function cashOut(uint _postId) external payable onlyPoster {\n+        //check that payout is to posterAddress with onlyPoster\n+        //Setting the Variables required\n+        uint _paymentToPoster;\n+        uint _bonusPayout;\n+        uint _bonusPayoutVoters;\n+        uint _totalBonus;\n+        uint _totalValue;\n+        uint _totalPayout;\n+\n+        _totalValue = p.valuePositive + p.valueNegative;\n+        Post memory p = posts[_postId];\n+        _paymentToPoster = p.stake * (p.valuePositive / totalValue) + p.valuePositive;",
        "path": "contracts/Canopy.sol",
        "position": 32,
        "original_position": 32,
        "commit_id": "4d500344db55babb557d8b5562ab6189b234bf88",
        "original_commit_id": "fbc88c6265428b73d541ed65e9c8374bfc77fd03",
        "user": {
            "login": "BradleyC",
            "id": 1714980,
            "node_id": "MDQ6VXNlcjE3MTQ5ODA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1714980?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/BradleyC",
            "html_url": "https://github.com/BradleyC",
            "followers_url": "https://api.github.com/users/BradleyC/followers",
            "following_url": "https://api.github.com/users/BradleyC/following{/other_user}",
            "gists_url": "https://api.github.com/users/BradleyC/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/BradleyC/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BradleyC/subscriptions",
            "organizations_url": "https://api.github.com/users/BradleyC/orgs",
            "repos_url": "https://api.github.com/users/BradleyC/repos",
            "events_url": "https://api.github.com/users/BradleyC/events{/privacy}",
            "received_events_url": "https://api.github.com/users/BradleyC/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "we should probably make `ratio` its own variable and define it on a new line using the sqrt value so that this doesn't get gamed.\r\n\r\n-> I will add this since the sqrt function is on my branch.",
        "created_at": "2018-12-08T12:45:03Z",
        "updated_at": "2018-12-08T12:54:35Z",
        "html_url": "https://github.com/BradleyC/canopy/pull/3#discussion_r240003916",
        "pull_request_url": "https://api.github.com/repos/BradleyC/canopy/pulls/3",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240003916"
            },
            "html": {
                "href": "https://github.com/BradleyC/canopy/pull/3#discussion_r240003916"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240004009",
        "pull_request_review_id": 182943134,
        "id": 240004009,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAwNDAwOQ==",
        "diff_hunk": "@@ -161,31 +161,73 @@ contract Canopy {\n     \n     function rankPosts() internal {}\n \n-    // @dev read from mapping\n-    function getPostsByTime() external {}\n+    // @dev read from mapping - show 100 of the most recent\n+    function getMostRecentPost() external {\n+        //since IDs are sequential, length of array = most recent post id\n+        return posts.length;\n+    }\n \n     // @dev read from mapping\n-    function getScoreById() internal {}\n+    function getScoreById(uint _postID) internal {\n+        return posts[_postID].score;\n+    }\n \n     // @dev user can choose when to cash out, make sure to check address\n-    function cashOut() external payable onlyPoster {}\n+    function cashOut(uint _postId) external payable onlyPoster {\n+        //check that payout is to posterAddress with onlyPoster\n+        //Setting the Variables required\n+        uint _paymentToPoster;\n+        uint _bonusPayout;\n+        uint _bonusPayoutVoters;\n+        uint _totalBonus;\n+        uint _totalValue;\n+        uint _totalPayout;\n+\n+        _totalValue = p.valuePositive + p.valueNegative;\n+        Post memory p = posts[_postId];\n+        _paymentToPoster = p.stake * (p.valuePositive / totalValue) + p.valuePositive;\n+        //check that payout is not more than 50% pool balance and stake amount\n+        if(poolValue * 0.50 > p.stake) {",
        "path": "contracts/Canopy.sol",
        "position": 34,
        "original_position": 34,
        "commit_id": "4d500344db55babb557d8b5562ab6189b234bf88",
        "original_commit_id": "fbc88c6265428b73d541ed65e9c8374bfc77fd03",
        "user": {
            "login": "BradleyC",
            "id": 1714980,
            "node_id": "MDQ6VXNlcjE3MTQ5ODA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1714980?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/BradleyC",
            "html_url": "https://github.com/BradleyC",
            "followers_url": "https://api.github.com/users/BradleyC/followers",
            "following_url": "https://api.github.com/users/BradleyC/following{/other_user}",
            "gists_url": "https://api.github.com/users/BradleyC/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/BradleyC/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BradleyC/subscriptions",
            "organizations_url": "https://api.github.com/users/BradleyC/orgs",
            "repos_url": "https://api.github.com/users/BradleyC/repos",
            "events_url": "https://api.github.com/users/BradleyC/events{/privacy}",
            "received_events_url": "https://api.github.com/users/BradleyC/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "the stake should always be safe to return, since it's funds the user deposited.\r\n\r\nI think we really want to be careful with the bonus only. Probably best to figure out what the absolute value of the bonus is first, then check to make sure it's less than 50% of pool value. If it's less, we award the full bonus, if it's higher, we award the 50% value.",
        "created_at": "2018-12-08T12:50:16Z",
        "updated_at": "2018-12-08T12:54:35Z",
        "html_url": "https://github.com/BradleyC/canopy/pull/3#discussion_r240004009",
        "pull_request_url": "https://api.github.com/repos/BradleyC/canopy/pulls/3",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240004009"
            },
            "html": {
                "href": "https://github.com/BradleyC/canopy/pull/3#discussion_r240004009"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/3"
            }
        }
    },
    {
        "url": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240004044",
        "pull_request_review_id": 182943134,
        "id": 240004044,
        "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAwNDA0NA==",
        "diff_hunk": "@@ -161,31 +161,73 @@ contract Canopy {\n     \n     function rankPosts() internal {}\n \n-    // @dev read from mapping\n-    function getPostsByTime() external {}\n+    // @dev read from mapping - show 100 of the most recent\n+    function getMostRecentPost() external {\n+        //since IDs are sequential, length of array = most recent post id\n+        return posts.length;\n+    }\n \n     // @dev read from mapping\n-    function getScoreById() internal {}\n+    function getScoreById(uint _postID) internal {\n+        return posts[_postID].score;\n+    }\n \n     // @dev user can choose when to cash out, make sure to check address\n-    function cashOut() external payable onlyPoster {}\n+    function cashOut(uint _postId) external payable onlyPoster {\n+        //check that payout is to posterAddress with onlyPoster\n+        //Setting the Variables required\n+        uint _paymentToPoster;\n+        uint _bonusPayout;\n+        uint _bonusPayoutVoters;\n+        uint _totalBonus;\n+        uint _totalValue;\n+        uint _totalPayout;\n+\n+        _totalValue = p.valuePositive + p.valueNegative;\n+        Post memory p = posts[_postId];\n+        _paymentToPoster = p.stake * (p.valuePositive / totalValue) + p.valuePositive;\n+        //check that payout is not more than 50% pool balance and stake amount\n+        if(poolValue * 0.50 > p.stake) {\n+            _bonusPayout = (p.stake * 0.50);\n+            _bonusPayoutVoters = (p.stake * 0.50);\n+            _totalBonus = _bonusPayout + _bonusPayoutVoters;\n+            return _totalBonus;\n+        } else if (poolValue * 0.50 <= p.stake) {\n+            _totalBonus = 0;\n+            return _totalBonus;\n+        }  \n+        \n+        _totalPayout = _paymentToPoster + _totalBonus;\n+\n+        //check valuePositive is greater than 0.75 of TotalValue\n+        require(p.valuePositive >= (0.75*totalValue), \"Not a good post\");\n+        //check that poolValue is positive\n+            if(poolValue.balance > 0) {",
        "path": "contracts/Canopy.sol",
        "position": 49,
        "original_position": 49,
        "commit_id": "4d500344db55babb557d8b5562ab6189b234bf88",
        "original_commit_id": "fbc88c6265428b73d541ed65e9c8374bfc77fd03",
        "user": {
            "login": "BradleyC",
            "id": 1714980,
            "node_id": "MDQ6VXNlcjE3MTQ5ODA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1714980?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/BradleyC",
            "html_url": "https://github.com/BradleyC",
            "followers_url": "https://api.github.com/users/BradleyC/followers",
            "following_url": "https://api.github.com/users/BradleyC/following{/other_user}",
            "gists_url": "https://api.github.com/users/BradleyC/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/BradleyC/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/BradleyC/subscriptions",
            "organizations_url": "https://api.github.com/users/BradleyC/orgs",
            "repos_url": "https://api.github.com/users/BradleyC/repos",
            "events_url": "https://api.github.com/users/BradleyC/events{/privacy}",
            "received_events_url": "https://api.github.com/users/BradleyC/received_events",
            "type": "User",
            "site_admin": false
        },
        "body": "if there's no money in the contract then the rest of this is pointless! let's do this before we start any payment logic (so we don't waste gas), and let's make _this_ a require statement.",
        "created_at": "2018-12-08T12:51:38Z",
        "updated_at": "2018-12-08T12:54:35Z",
        "html_url": "https://github.com/BradleyC/canopy/pull/3#discussion_r240004044",
        "pull_request_url": "https://api.github.com/repos/BradleyC/canopy/pulls/3",
        "author_association": "OWNER",
        "_links": {
            "self": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/comments/240004044"
            },
            "html": {
                "href": "https://github.com/BradleyC/canopy/pull/3#discussion_r240004044"
            },
            "pull_request": {
                "href": "https://api.github.com/repos/BradleyC/canopy/pulls/3"
            }
        }
    }
]