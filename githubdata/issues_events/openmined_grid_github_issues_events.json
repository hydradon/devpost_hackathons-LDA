[
    {
        "id": 3036258661,
        "node_id": "MDEzOkFzc2lnbmVkRXZlbnQzMDM2MjU4NjYx",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3036258661",
        "actor": {
            "login": "javanlacerda",
            "id": 23180089,
            "node_id": "MDQ6VXNlcjIzMTgwMDg5",
            "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/javanlacerda",
            "html_url": "https://github.com/javanlacerda",
            "followers_url": "https://api.github.com/users/javanlacerda/followers",
            "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
            "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
            "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
            "repos_url": "https://api.github.com/users/javanlacerda/repos",
            "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
            "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "assigned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-13T19:38:19Z",
        "assignee": {
            "login": "javanlacerda",
            "id": 23180089,
            "node_id": "MDQ6VXNlcjIzMTgwMDg5",
            "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/javanlacerda",
            "html_url": "https://github.com/javanlacerda",
            "followers_url": "https://api.github.com/users/javanlacerda/followers",
            "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
            "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
            "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
            "repos_url": "https://api.github.com/users/javanlacerda/repos",
            "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
            "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
            "type": "User",
            "site_admin": false
        },
        "assigner": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/407",
            "id": 531983388,
            "node_id": "MDU6SXNzdWU1MzE5ODMzODg=",
            "number": 407,
            "title": "Create PyGrid ANSIBLE playbook ",
            "user": {
                "login": "IonesioJunior",
                "id": 26658472,
                "node_id": "MDQ6VXNlcjI2NjU4NDcy",
                "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/IonesioJunior",
                "html_url": "https://github.com/IonesioJunior",
                "followers_url": "https://api.github.com/users/IonesioJunior/followers",
                "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
                "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
                "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
                "repos_url": "https://api.github.com/users/IonesioJunior/repos",
                "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
                "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1645294002,
                    "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                    "name": "PyGrid",
                    "color": "d93f0b",
                    "default": false,
                    "description": ""
                },
                {
                    "id": 817798109,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMDk=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/enhancement",
                    "name": "enhancement",
                    "color": "a2eeef",
                    "default": true,
                    "description": "New feature or request"
                },
                {
                    "id": 817798111,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                    "name": "good first issue",
                    "color": "7057ff",
                    "default": true,
                    "description": "Good for newcomers"
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
                "login": "javanlacerda",
                "id": 23180089,
                "node_id": "MDQ6VXNlcjIzMTgwMDg5",
                "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/javanlacerda",
                "html_url": "https://github.com/javanlacerda",
                "followers_url": "https://api.github.com/users/javanlacerda/followers",
                "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
                "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
                "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
                "repos_url": "https://api.github.com/users/javanlacerda/repos",
                "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
                "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
                "type": "User",
                "site_admin": false
            },
            "assignees": [
                {
                    "login": "javanlacerda",
                    "id": 23180089,
                    "node_id": "MDQ6VXNlcjIzMTgwMDg5",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/javanlacerda",
                    "html_url": "https://github.com/javanlacerda",
                    "followers_url": "https://api.github.com/users/javanlacerda/followers",
                    "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
                    "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
                    "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
                    "repos_url": "https://api.github.com/users/javanlacerda/repos",
                    "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
                    "type": "User",
                    "site_admin": false
                }
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2019-12-03T13:25:57Z",
            "updated_at": "2020-02-13T19:38:19Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "**Is your feature request related to a problem? Please describe.**\r\nWe want to create an easy way to deploy our platform on cloud providers.\r\n\r\n\r\n**Describe the solution you'd like**\r\nCreate PyGrid **ANSIBLE playbook** to automatic deployment on cloud platforms ( AWS / GCP )"
        }
    },
    {
        "id": 3036225768,
        "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMzYyMjU3Njg=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3036225768",
        "actor": {
            "login": "javanlacerda",
            "id": 23180089,
            "node_id": "MDQ6VXNlcjIzMTgwMDg5",
            "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/javanlacerda",
            "html_url": "https://github.com/javanlacerda",
            "followers_url": "https://api.github.com/users/javanlacerda/followers",
            "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
            "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
            "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
            "repos_url": "https://api.github.com/users/javanlacerda/repos",
            "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
            "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "subscribed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-13T19:30:48Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/407",
            "id": 531983388,
            "node_id": "MDU6SXNzdWU1MzE5ODMzODg=",
            "number": 407,
            "title": "Create PyGrid ANSIBLE playbook ",
            "user": {
                "login": "IonesioJunior",
                "id": 26658472,
                "node_id": "MDQ6VXNlcjI2NjU4NDcy",
                "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/IonesioJunior",
                "html_url": "https://github.com/IonesioJunior",
                "followers_url": "https://api.github.com/users/IonesioJunior/followers",
                "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
                "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
                "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
                "repos_url": "https://api.github.com/users/IonesioJunior/repos",
                "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
                "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1645294002,
                    "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                    "name": "PyGrid",
                    "color": "d93f0b",
                    "default": false,
                    "description": ""
                },
                {
                    "id": 817798109,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMDk=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/enhancement",
                    "name": "enhancement",
                    "color": "a2eeef",
                    "default": true,
                    "description": "New feature or request"
                },
                {
                    "id": 817798111,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                    "name": "good first issue",
                    "color": "7057ff",
                    "default": true,
                    "description": "Good for newcomers"
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
                "login": "javanlacerda",
                "id": 23180089,
                "node_id": "MDQ6VXNlcjIzMTgwMDg5",
                "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/javanlacerda",
                "html_url": "https://github.com/javanlacerda",
                "followers_url": "https://api.github.com/users/javanlacerda/followers",
                "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
                "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
                "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
                "repos_url": "https://api.github.com/users/javanlacerda/repos",
                "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
                "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
                "type": "User",
                "site_admin": false
            },
            "assignees": [
                {
                    "login": "javanlacerda",
                    "id": 23180089,
                    "node_id": "MDQ6VXNlcjIzMTgwMDg5",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/javanlacerda",
                    "html_url": "https://github.com/javanlacerda",
                    "followers_url": "https://api.github.com/users/javanlacerda/followers",
                    "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
                    "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
                    "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
                    "repos_url": "https://api.github.com/users/javanlacerda/repos",
                    "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
                    "type": "User",
                    "site_admin": false
                }
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2019-12-03T13:25:57Z",
            "updated_at": "2020-02-13T19:38:19Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "**Is your feature request related to a problem? Please describe.**\r\nWe want to create an easy way to deploy our platform on cloud providers.\r\n\r\n\r\n**Describe the solution you'd like**\r\nCreate PyGrid **ANSIBLE playbook** to automatic deployment on cloud platforms ( AWS / GCP )"
        }
    },
    {
        "id": 3036225765,
        "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAzNjIyNTc2NQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3036225765",
        "actor": {
            "login": "javanlacerda",
            "id": 23180089,
            "node_id": "MDQ6VXNlcjIzMTgwMDg5",
            "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/javanlacerda",
            "html_url": "https://github.com/javanlacerda",
            "followers_url": "https://api.github.com/users/javanlacerda/followers",
            "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
            "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
            "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
            "repos_url": "https://api.github.com/users/javanlacerda/repos",
            "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
            "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "mentioned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-13T19:30:48Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/407/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/407",
            "id": 531983388,
            "node_id": "MDU6SXNzdWU1MzE5ODMzODg=",
            "number": 407,
            "title": "Create PyGrid ANSIBLE playbook ",
            "user": {
                "login": "IonesioJunior",
                "id": 26658472,
                "node_id": "MDQ6VXNlcjI2NjU4NDcy",
                "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/IonesioJunior",
                "html_url": "https://github.com/IonesioJunior",
                "followers_url": "https://api.github.com/users/IonesioJunior/followers",
                "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
                "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
                "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
                "repos_url": "https://api.github.com/users/IonesioJunior/repos",
                "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
                "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1645294002,
                    "node_id": "MDU6TGFiZWwxNjQ1Mjk0MDAy",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/PyGrid",
                    "name": "PyGrid",
                    "color": "d93f0b",
                    "default": false,
                    "description": ""
                },
                {
                    "id": 817798109,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMDk=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/enhancement",
                    "name": "enhancement",
                    "color": "a2eeef",
                    "default": true,
                    "description": "New feature or request"
                },
                {
                    "id": 817798111,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                    "name": "good first issue",
                    "color": "7057ff",
                    "default": true,
                    "description": "Good for newcomers"
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": {
                "login": "javanlacerda",
                "id": 23180089,
                "node_id": "MDQ6VXNlcjIzMTgwMDg5",
                "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/javanlacerda",
                "html_url": "https://github.com/javanlacerda",
                "followers_url": "https://api.github.com/users/javanlacerda/followers",
                "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
                "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
                "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
                "repos_url": "https://api.github.com/users/javanlacerda/repos",
                "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
                "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
                "type": "User",
                "site_admin": false
            },
            "assignees": [
                {
                    "login": "javanlacerda",
                    "id": 23180089,
                    "node_id": "MDQ6VXNlcjIzMTgwMDg5",
                    "avatar_url": "https://avatars0.githubusercontent.com/u/23180089?v=4",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/javanlacerda",
                    "html_url": "https://github.com/javanlacerda",
                    "followers_url": "https://api.github.com/users/javanlacerda/followers",
                    "following_url": "https://api.github.com/users/javanlacerda/following{/other_user}",
                    "gists_url": "https://api.github.com/users/javanlacerda/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/javanlacerda/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/javanlacerda/subscriptions",
                    "organizations_url": "https://api.github.com/users/javanlacerda/orgs",
                    "repos_url": "https://api.github.com/users/javanlacerda/repos",
                    "events_url": "https://api.github.com/users/javanlacerda/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/javanlacerda/received_events",
                    "type": "User",
                    "site_admin": false
                }
            ],
            "milestone": null,
            "comments": 5,
            "created_at": "2019-12-03T13:25:57Z",
            "updated_at": "2020-02-13T19:38:19Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "**Is your feature request related to a problem? Please describe.**\r\nWe want to create an easy way to deploy our platform on cloud providers.\r\n\r\n\r\n**Describe the solution you'd like**\r\nCreate PyGrid **ANSIBLE playbook** to automatic deployment on cloud platforms ( AWS / GCP )"
        }
    },
    {
        "id": 3026369943,
        "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMjYzNjk5NDM=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3026369943",
        "actor": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "subscribed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-11T12:37:05Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3026369941,
        "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAyNjM2OTk0MQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3026369941",
        "actor": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "mentioned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-11T12:37:05Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3026369939,
        "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMjYzNjk5Mzk=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3026369939",
        "actor": {
            "login": "vvmnnnkv",
            "id": 12518480,
            "node_id": "MDQ6VXNlcjEyNTE4NDgw",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12518480?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vvmnnnkv",
            "html_url": "https://github.com/vvmnnnkv",
            "followers_url": "https://api.github.com/users/vvmnnnkv/followers",
            "following_url": "https://api.github.com/users/vvmnnnkv/following{/other_user}",
            "gists_url": "https://api.github.com/users/vvmnnnkv/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vvmnnnkv/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vvmnnnkv/subscriptions",
            "organizations_url": "https://api.github.com/users/vvmnnnkv/orgs",
            "repos_url": "https://api.github.com/users/vvmnnnkv/repos",
            "events_url": "https://api.github.com/users/vvmnnnkv/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vvmnnnkv/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "subscribed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-11T12:37:05Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3026369935,
        "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAyNjM2OTkzNQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3026369935",
        "actor": {
            "login": "vvmnnnkv",
            "id": 12518480,
            "node_id": "MDQ6VXNlcjEyNTE4NDgw",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12518480?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vvmnnnkv",
            "html_url": "https://github.com/vvmnnnkv",
            "followers_url": "https://api.github.com/users/vvmnnnkv/followers",
            "following_url": "https://api.github.com/users/vvmnnnkv/following{/other_user}",
            "gists_url": "https://api.github.com/users/vvmnnnkv/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vvmnnnkv/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vvmnnnkv/subscriptions",
            "organizations_url": "https://api.github.com/users/vvmnnnkv/orgs",
            "repos_url": "https://api.github.com/users/vvmnnnkv/repos",
            "events_url": "https://api.github.com/users/vvmnnnkv/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vvmnnnkv/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "mentioned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-11T12:37:05Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3025074767,
        "node_id": "MDExOkNsb3NlZEV2ZW50MzAyNTA3NDc2Nw==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3025074767",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "closed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-11T02:48:33Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
            "id": 562500306,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzczMDgzODM5",
            "number": 450,
            "title": "Consistent Model Hosts",
            "user": {
                "login": "matthiaslau",
                "id": 574305,
                "node_id": "MDQ6VXNlcjU3NDMwNQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/574305?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/matthiaslau",
                "html_url": "https://github.com/matthiaslau",
                "followers_url": "https://api.github.com/users/matthiaslau/followers",
                "following_url": "https://api.github.com/users/matthiaslau/following{/other_user}",
                "gists_url": "https://api.github.com/users/matthiaslau/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/matthiaslau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matthiaslau/subscriptions",
                "organizations_url": "https://api.github.com/users/matthiaslau/orgs",
                "repos_url": "https://api.github.com/users/matthiaslau/repos",
                "events_url": "https://api.github.com/users/matthiaslau/events{/privacy}",
                "received_events_url": "https://api.github.com/users/matthiaslau/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-10T11:30:28Z",
            "updated_at": "2020-02-11T02:48:33Z",
            "closed_at": "2020-02-11T02:48:33Z",
            "author_association": "CONTRIBUTOR",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/450",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/450.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/450.patch"
            },
            "body": "# Consistent Model Hosts\r\n\r\n## Description\r\n\r\nCurrently the model hosts / nodes are always randomly selected when serving an unencrypted model. When updating the model it could happen that some nodes are still hosting the old version of the model and some other received the new one.\r\n\r\nWith this PR the gateway could search the nodes for the model and return these nodes instead. If no model id is given or no nodes were found the model host is still selected randomly.\r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3025074761,
        "node_id": "MDExOk1lcmdlZEV2ZW50MzAyNTA3NDc2MQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3025074761",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "merged",
        "commit_id": "5a3cb497e08c165f61d0257bb87c12866f690741",
        "commit_url": "https://api.github.com/repos/OpenMined/PyGrid/commits/5a3cb497e08c165f61d0257bb87c12866f690741",
        "created_at": "2020-02-11T02:48:33Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
            "id": 562500306,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzczMDgzODM5",
            "number": 450,
            "title": "Consistent Model Hosts",
            "user": {
                "login": "matthiaslau",
                "id": 574305,
                "node_id": "MDQ6VXNlcjU3NDMwNQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/574305?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/matthiaslau",
                "html_url": "https://github.com/matthiaslau",
                "followers_url": "https://api.github.com/users/matthiaslau/followers",
                "following_url": "https://api.github.com/users/matthiaslau/following{/other_user}",
                "gists_url": "https://api.github.com/users/matthiaslau/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/matthiaslau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matthiaslau/subscriptions",
                "organizations_url": "https://api.github.com/users/matthiaslau/orgs",
                "repos_url": "https://api.github.com/users/matthiaslau/repos",
                "events_url": "https://api.github.com/users/matthiaslau/events{/privacy}",
                "received_events_url": "https://api.github.com/users/matthiaslau/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-10T11:30:28Z",
            "updated_at": "2020-02-11T02:48:33Z",
            "closed_at": "2020-02-11T02:48:33Z",
            "author_association": "CONTRIBUTOR",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/450",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/450.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/450.patch"
            },
            "body": "# Consistent Model Hosts\r\n\r\n## Description\r\n\r\nCurrently the model hosts / nodes are always randomly selected when serving an unencrypted model. When updating the model it could happen that some nodes are still hosting the old version of the model and some other received the new one.\r\n\r\nWith this PR the gateway could search the nodes for the model and return these nodes instead. If no model id is given or no nodes were found the model host is still selected randomly.\r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3025074758,
        "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwMjUwNzQ3NTg=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3025074758",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "referenced",
        "commit_id": "5a3cb497e08c165f61d0257bb87c12866f690741",
        "commit_url": "https://api.github.com/repos/OpenMined/PyGrid/commits/5a3cb497e08c165f61d0257bb87c12866f690741",
        "created_at": "2020-02-11T02:48:33Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
            "id": 562500306,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzczMDgzODM5",
            "number": 450,
            "title": "Consistent Model Hosts",
            "user": {
                "login": "matthiaslau",
                "id": 574305,
                "node_id": "MDQ6VXNlcjU3NDMwNQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/574305?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/matthiaslau",
                "html_url": "https://github.com/matthiaslau",
                "followers_url": "https://api.github.com/users/matthiaslau/followers",
                "following_url": "https://api.github.com/users/matthiaslau/following{/other_user}",
                "gists_url": "https://api.github.com/users/matthiaslau/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/matthiaslau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matthiaslau/subscriptions",
                "organizations_url": "https://api.github.com/users/matthiaslau/orgs",
                "repos_url": "https://api.github.com/users/matthiaslau/repos",
                "events_url": "https://api.github.com/users/matthiaslau/events{/privacy}",
                "received_events_url": "https://api.github.com/users/matthiaslau/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-10T11:30:28Z",
            "updated_at": "2020-02-11T02:48:33Z",
            "closed_at": "2020-02-11T02:48:33Z",
            "author_association": "CONTRIBUTOR",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/450",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/450.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/450.patch"
            },
            "body": "# Consistent Model Hosts\r\n\r\n## Description\r\n\r\nCurrently the model hosts / nodes are always randomly selected when serving an unencrypted model. When updating the model it could happen that some nodes are still hosting the old version of the model and some other received the new one.\r\n\r\nWith this PR the gateway could search the nodes for the model and return these nodes instead. If no model id is given or no nodes were found the model host is still selected randomly.\r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3025071471,
        "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50MzAyNTA3MTQ3MQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3025071471",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "review_requested",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-11T02:45:56Z",
        "review_requester": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "requested_reviewer": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/450/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
            "id": 562500306,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzczMDgzODM5",
            "number": 450,
            "title": "Consistent Model Hosts",
            "user": {
                "login": "matthiaslau",
                "id": 574305,
                "node_id": "MDQ6VXNlcjU3NDMwNQ==",
                "avatar_url": "https://avatars1.githubusercontent.com/u/574305?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/matthiaslau",
                "html_url": "https://github.com/matthiaslau",
                "followers_url": "https://api.github.com/users/matthiaslau/followers",
                "following_url": "https://api.github.com/users/matthiaslau/following{/other_user}",
                "gists_url": "https://api.github.com/users/matthiaslau/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/matthiaslau/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/matthiaslau/subscriptions",
                "organizations_url": "https://api.github.com/users/matthiaslau/orgs",
                "repos_url": "https://api.github.com/users/matthiaslau/repos",
                "events_url": "https://api.github.com/users/matthiaslau/events{/privacy}",
                "received_events_url": "https://api.github.com/users/matthiaslau/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-10T11:30:28Z",
            "updated_at": "2020-02-11T02:48:33Z",
            "closed_at": "2020-02-11T02:48:33Z",
            "author_association": "CONTRIBUTOR",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/450",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/450",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/450.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/450.patch"
            },
            "body": "# Consistent Model Hosts\r\n\r\n## Description\r\n\r\nCurrently the model hosts / nodes are always randomly selected when serving an unencrypted model. When updating the model it could happen that some nodes are still hosting the old version of the model and some other received the new one.\r\n\r\nWith this PR the gateway could search the nodes for the model and return these nodes instead. If no model id is given or no nodes were found the model host is still selected randomly.\r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [x] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3020177795,
        "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMjAxNzc3OTU=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3020177795",
        "actor": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "subscribed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-08T21:42:26Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3020177793,
        "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAyMDE3Nzc5Mw==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3020177793",
        "actor": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "mentioned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-08T21:42:26Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3019879276,
        "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMTk4NzkyNzY=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3019879276",
        "actor": {
            "login": "vvmnnnkv",
            "id": 12518480,
            "node_id": "MDQ6VXNlcjEyNTE4NDgw",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12518480?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vvmnnnkv",
            "html_url": "https://github.com/vvmnnnkv",
            "followers_url": "https://api.github.com/users/vvmnnnkv/followers",
            "following_url": "https://api.github.com/users/vvmnnnkv/following{/other_user}",
            "gists_url": "https://api.github.com/users/vvmnnnkv/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vvmnnnkv/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vvmnnnkv/subscriptions",
            "organizations_url": "https://api.github.com/users/vvmnnnkv/orgs",
            "repos_url": "https://api.github.com/users/vvmnnnkv/repos",
            "events_url": "https://api.github.com/users/vvmnnnkv/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vvmnnnkv/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "subscribed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-08T12:25:31Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3019879274,
        "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAxOTg3OTI3NA==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3019879274",
        "actor": {
            "login": "vvmnnnkv",
            "id": 12518480,
            "node_id": "MDQ6VXNlcjEyNTE4NDgw",
            "avatar_url": "https://avatars2.githubusercontent.com/u/12518480?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vvmnnnkv",
            "html_url": "https://github.com/vvmnnnkv",
            "followers_url": "https://api.github.com/users/vvmnnnkv/followers",
            "following_url": "https://api.github.com/users/vvmnnnkv/following{/other_user}",
            "gists_url": "https://api.github.com/users/vvmnnnkv/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vvmnnnkv/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vvmnnnkv/subscriptions",
            "organizations_url": "https://api.github.com/users/vvmnnnkv/orgs",
            "repos_url": "https://api.github.com/users/vvmnnnkv/repos",
            "events_url": "https://api.github.com/users/vvmnnnkv/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vvmnnnkv/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "mentioned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-08T12:25:31Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3019829486,
        "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMwMTk4Mjk0ODY=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3019829486",
        "actor": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "subscribed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-08T10:30:22Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3019829485,
        "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzAxOTgyOTQ4NQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3019829485",
        "actor": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "mentioned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-08T10:30:21Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3018107360,
        "node_id": "MDE1OlVuYXNzaWduZWRFdmVudDMwMTgxMDczNjA=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3018107360",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "unassigned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T15:41:39Z",
        "assignee": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "assigner": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3018107356,
        "node_id": "MDE1OlVuYXNzaWduZWRFdmVudDMwMTgxMDczNTY=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3018107356",
        "actor": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "unassigned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T15:41:39Z",
        "assignee": {
            "login": "vkkhare",
            "id": 18126069,
            "node_id": "MDQ6VXNlcjE4MTI2MDY5",
            "avatar_url": "https://avatars1.githubusercontent.com/u/18126069?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/vkkhare",
            "html_url": "https://github.com/vkkhare",
            "followers_url": "https://api.github.com/users/vkkhare/followers",
            "following_url": "https://api.github.com/users/vkkhare/following{/other_user}",
            "gists_url": "https://api.github.com/users/vkkhare/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/vkkhare/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/vkkhare/subscriptions",
            "organizations_url": "https://api.github.com/users/vkkhare/orgs",
            "repos_url": "https://api.github.com/users/vkkhare/repos",
            "events_url": "https://api.github.com/users/vkkhare/events{/privacy}",
            "received_events_url": "https://api.github.com/users/vkkhare/received_events",
            "type": "User",
            "site_admin": false
        },
        "assigner": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3018107353,
        "node_id": "MDE1OlVuYXNzaWduZWRFdmVudDMwMTgxMDczNTM=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3018107353",
        "actor": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "unassigned",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T15:41:39Z",
        "assignee": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "assigner": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/445/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/445",
            "id": 560578787,
            "node_id": "MDU6SXNzdWU1NjA1Nzg3ODc=",
            "number": 445,
            "title": "Add API worker websocket and HTTP endpoints for FL to PyGrid",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 1353400255,
                    "node_id": "MDU6TGFiZWwxMzUzNDAwMjU1",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/epic",
                    "name": "epic",
                    "color": "3E4B9E",
                    "default": false,
                    "description": ""
                }
            ],
            "state": "open",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 11,
            "created_at": "2020-02-05T19:25:00Z",
            "updated_at": "2020-02-13T12:28:25Z",
            "closed_at": null,
            "author_association": "MEMBER",
            "body": "The various worker libraries will need to communicate with PyGrid according to an API that's defined in PyGrid. I currently believe that we should aim to support both Websocket messages as well as HTTPS endpoints to accomplish this - hopefully with this philosophy becoming a standard of PyGrid.\r\n\r\nAll socket calls should follow the format of:\r\n```\r\n{\r\n  \"type\": \"the type of the message\",\r\n  \"data\": {}\r\n}\r\n```\r\n\r\nI'd like for the following endpoints to be added:\r\n\r\n## Authentication with PyGrid\r\nMethod in worker library:\r\n```js\r\nconst worker = new syft({\r\n  url: 'https://localhost:3000'\r\n});\r\n```\r\nHTTP endpoint: `POST /federated/authenticate`\r\nSocket `\"type\"`: `federated/authenticate`\r\nRequest data: _None_\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to authenticate as a worker with PyGrid.\r\n\r\nResponse:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\"\r\n}\r\n```\r\n\r\nThe response will include a `worker_id` which should be cached for long-term use. **This will be passed with all subsequent calls to PyGrid.**\r\n\r\n## FL Worker Cycle Request\r\nMethod in worker library: `job.start()`\r\nHTTP endpoint: `POST /federated/cycle-request`\r\nSocket `\"type\"`: `federated/cycle-request`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"model\": \"my-federated-model\",\r\n  \"version\": \"0.1.0\",\r\n  \"ping\": \"8ms\",\r\n  \"download\": \"46.3mbps\",\r\n  \"upload\": \"23.7mbps\"\r\n}\r\n```\r\n_Note that `version` supplied above is an optional argument._\r\n\r\nThis endpoint is where the worker library (syft.js, KotlinSyft, or SwiftSyft) is attempting to join an active federated learning cycle. PyGrid, depending on the current state of the cycle, the speed of the worker's connection, and how many workers have already been chosen.\r\n\r\nGiven this information, PyGrid will send **one of two responses**:\r\n\r\n**Rejection**\r\n```json\r\n{\r\n  \"status\": \"rejected\",\r\n  \"timeout\": 2700\r\n}\r\n```\r\n\r\nThis means that the worker was rejected from the current cycle and asked to request to join another cycle in 2700 seconds. The number of seconds will depend on when the next cycle is expected to start.\r\n\r\n**Accepted**\r\n```json\r\n{\r\n  \"status\": \"accepted\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"training_plan\": \"ID OF THE TRAINING PLAN\",\r\n  \"client_config\": \"CLIENT CONFIG OBJECT\",\r\n  \"protocol\": \"ID OF THE PROTOCOL\",\r\n  \"model\": \"ID OF THE MODEL\"\r\n}\r\n```\r\n\r\nIn the event that the worker is accepted into the current cycle, they will be sent the ID of the training plan, the id of the protocol, the id of the model, and the client config. The training plan, protocol, and model will not be downloaded in this response. Instead, the worker will need to make an additional request to receive them (due to the size constraints of the response). They will pass the `request_key` given above as a form of \"authenticating\" the download request. This is specific to the relationship between the worker AND the cycle and cannot be reused for future cycles or other workers. This will be detailed in the [\"Training Plan Download section\"](#Training Plan Download).\r\n\r\n## Training Plan Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-training-plan`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&training_plan=ID OF THE TRAINING PLAN&receive_operations_as=list`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a training plan from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nThe worker also needs to specify how the worker likes to receive training plans: either a list of operations (`\"list\"`) or TorchScript (`\"torchscript\"`) depending on the type of worker requesting (https://github.com/OpenMined/PyGrid/issues/437). This is found in the `receive_operations_as` key of the request data.\r\n\r\nResponse: _This downloads the training plan to the worker._\r\n\r\n## Protocol Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-protocol`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&protocol=ID OF THE PROTOCOL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a protocol from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the protocol to the worker._\r\n\r\n## Model Download\r\nMethod in worker library: _Also part of `job.start()` behind the scenes_\r\nHTTP endpoint: `GET /federated/get-model`\r\nSocket `\"type\"`: N/A\r\nQuery string: `?worker_id=ID OF THE WORKER&request_key=LONG HASH VALUE&model=ID OF THE MODEL`\r\n\r\n**This endpoint is HTTP only.**\r\n\r\nThis method will allow a worker that has been accepted into a cycle to request the download of a model from PyGrid. They need to submit their `request_key` provided in the cycle request call above. This provides an extra means of authentication for PyGrid to ensure it's sending data to the right worker.\r\n\r\nResponse: _This downloads the model to the worker._\r\n\r\n## Report\r\nMethod in worker library: `job.report()`\r\nHTTP endpoint: `POST /federated/report`\r\nSocket `\"type\"`: `federated/report`\r\nRequest data:\r\n```json\r\n{\r\n  \"worker_id\": \"ID OF THE WORKER\",\r\n  \"request_key\": \"LONG HASH VALUE\",\r\n  \"diff\": \"FINAL MODEL DIFF FROM TRAINING\"\r\n}\r\n```\r\n\r\nThis method will allow a worker that has been accepted into a cycle and finished training a model on their device to upload the resulting model diff.\r\n\r\nIf the worker did not receive a protocol to be done after the training plan was executed, then they will simply submit their entire model diff. If they want to manually add noise to this diff as a layer of protection, they may do so at the developer's discretion from inside the worker implementation.\r\n\r\nIf the worker did receive a protocol and they have finished the secure aggregation protocol with other workers, they will now receive a share of the resulting securely aggregated model diff. In this case, they will submit the share of the diff, rather than their original model diff. PyGrid will handle the decryption of the shares once they're all submitted.\r\n\r\nResponse: `{ \"status\": \"success\" }`\r\n\r\nThe response of success is sent if the response is a 200. **The worker should not be informed if the model diff was accepted or denied as part of the global model update.**"
        }
    },
    {
        "id": 3017833741,
        "node_id": "MDI1OlJldmlld1JlcXVlc3RSZW1vdmVkRXZlbnQzMDE3ODMzNzQx",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017833741",
        "actor": {
            "login": "hericlesme",
            "id": 30700596,
            "node_id": "MDQ6VXNlcjMwNzAwNTk2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hericlesme",
            "html_url": "https://github.com/hericlesme",
            "followers_url": "https://api.github.com/users/hericlesme/followers",
            "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
            "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
            "organizations_url": "https://api.github.com/users/hericlesme/orgs",
            "repos_url": "https://api.github.com/users/hericlesme/repos",
            "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hericlesme/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "review_request_removed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T14:27:01Z",
        "review_requester": {
            "login": "hericlesme",
            "id": 30700596,
            "node_id": "MDQ6VXNlcjMwNzAwNTk2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hericlesme",
            "html_url": "https://github.com/hericlesme",
            "followers_url": "https://api.github.com/users/hericlesme/followers",
            "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
            "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
            "organizations_url": "https://api.github.com/users/hericlesme/orgs",
            "repos_url": "https://api.github.com/users/hericlesme/repos",
            "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hericlesme/received_events",
            "type": "User",
            "site_admin": false
        },
        "requested_reviewer": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
            "id": 561608498,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMzg3ODk4",
            "number": 449,
            "title": "Remove Travis File",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T12:27:34Z",
            "updated_at": "2020-02-07T14:27:01Z",
            "closed_at": "2020-02-07T12:40:52Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/449",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/449.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/449.patch"
            },
            "body": "## Description\r\n\r\nSince GitHub Actions worked perfectly, we can remove Travis CI now.\r\n\r\nChanges:\r\n- Removed `travis.yml`\r\n- Update build status badge in `README.md`\r\n\r\nRelated to: #444 \r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3017510085,
        "node_id": "MDExOkNsb3NlZEV2ZW50MzAxNzUxMDA4NQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017510085",
        "actor": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "closed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T12:40:52Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
            "id": 561608498,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMzg3ODk4",
            "number": 449,
            "title": "Remove Travis File",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T12:27:34Z",
            "updated_at": "2020-02-07T14:27:01Z",
            "closed_at": "2020-02-07T12:40:52Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/449",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/449.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/449.patch"
            },
            "body": "## Description\r\n\r\nSince GitHub Actions worked perfectly, we can remove Travis CI now.\r\n\r\nChanges:\r\n- Removed `travis.yml`\r\n- Update build status badge in `README.md`\r\n\r\nRelated to: #444 \r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3017510057,
        "node_id": "MDExOk1lcmdlZEV2ZW50MzAxNzUxMDA1Nw==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017510057",
        "actor": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "merged",
        "commit_id": "920b088b965be49b69d8a7213cd632b1322fe6df",
        "commit_url": "https://api.github.com/repos/OpenMined/PyGrid/commits/920b088b965be49b69d8a7213cd632b1322fe6df",
        "created_at": "2020-02-07T12:40:52Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
            "id": 561608498,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMzg3ODk4",
            "number": 449,
            "title": "Remove Travis File",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T12:27:34Z",
            "updated_at": "2020-02-07T14:27:01Z",
            "closed_at": "2020-02-07T12:40:52Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/449",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/449.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/449.patch"
            },
            "body": "## Description\r\n\r\nSince GitHub Actions worked perfectly, we can remove Travis CI now.\r\n\r\nChanges:\r\n- Removed `travis.yml`\r\n- Update build status badge in `README.md`\r\n\r\nRelated to: #444 \r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3017510054,
        "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwMTc1MTAwNTQ=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017510054",
        "actor": {
            "login": "cereallarceny",
            "id": 1297930,
            "node_id": "MDQ6VXNlcjEyOTc5MzA=",
            "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/cereallarceny",
            "html_url": "https://github.com/cereallarceny",
            "followers_url": "https://api.github.com/users/cereallarceny/followers",
            "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
            "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
            "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
            "repos_url": "https://api.github.com/users/cereallarceny/repos",
            "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
            "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "referenced",
        "commit_id": "920b088b965be49b69d8a7213cd632b1322fe6df",
        "commit_url": "https://api.github.com/repos/OpenMined/PyGrid/commits/920b088b965be49b69d8a7213cd632b1322fe6df",
        "created_at": "2020-02-07T12:40:52Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
            "id": 561608498,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMzg3ODk4",
            "number": 449,
            "title": "Remove Travis File",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T12:27:34Z",
            "updated_at": "2020-02-07T14:27:01Z",
            "closed_at": "2020-02-07T12:40:52Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/449",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/449.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/449.patch"
            },
            "body": "## Description\r\n\r\nSince GitHub Actions worked perfectly, we can remove Travis CI now.\r\n\r\nChanges:\r\n- Removed `travis.yml`\r\n- Update build status badge in `README.md`\r\n\r\nRelated to: #444 \r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3017475921,
        "node_id": "MDIwOlJldmlld1JlcXVlc3RlZEV2ZW50MzAxNzQ3NTkyMQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017475921",
        "actor": {
            "login": "hericlesme",
            "id": 30700596,
            "node_id": "MDQ6VXNlcjMwNzAwNTk2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hericlesme",
            "html_url": "https://github.com/hericlesme",
            "followers_url": "https://api.github.com/users/hericlesme/followers",
            "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
            "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
            "organizations_url": "https://api.github.com/users/hericlesme/orgs",
            "repos_url": "https://api.github.com/users/hericlesme/repos",
            "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hericlesme/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "review_requested",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T12:28:01Z",
        "review_requester": {
            "login": "hericlesme",
            "id": 30700596,
            "node_id": "MDQ6VXNlcjMwNzAwNTk2",
            "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hericlesme",
            "html_url": "https://github.com/hericlesme",
            "followers_url": "https://api.github.com/users/hericlesme/followers",
            "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
            "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
            "organizations_url": "https://api.github.com/users/hericlesme/orgs",
            "repos_url": "https://api.github.com/users/hericlesme/repos",
            "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
            "received_events_url": "https://api.github.com/users/hericlesme/received_events",
            "type": "User",
            "site_admin": false
        },
        "requested_reviewer": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/449/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
            "id": 561608498,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMzg3ODk4",
            "number": 449,
            "title": "Remove Travis File",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T12:27:34Z",
            "updated_at": "2020-02-07T14:27:01Z",
            "closed_at": "2020-02-07T12:40:52Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/449",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/449",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/449.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/449.patch"
            },
            "body": "## Description\r\n\r\nSince GitHub Actions worked perfectly, we can remove Travis CI now.\r\n\r\nChanges:\r\n- Removed `travis.yml`\r\n- Update build status badge in `README.md`\r\n\r\nRelated to: #444 \r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [ ] New Unit tests added\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3017413180,
        "node_id": "MDI2Ok1vdmVkQ29sdW1uc0luUHJvamVjdEV2ZW50MzAxNzQxMzE4MA==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017413180",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "moved_columns_in_project",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T12:03:41Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/444",
            "id": 560280044,
            "node_id": "MDU6SXNzdWU1NjAyODAwNDQ=",
            "number": 444,
            "title": "Migrate PyGrid from Travis to Github Actions",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 817798111,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                    "name": "good first issue",
                    "color": "7057ff",
                    "default": true,
                    "description": "Good for newcomers"
                }
            ],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-05T10:33:10Z",
            "updated_at": "2020-02-07T12:03:40Z",
            "closed_at": "2020-02-07T12:03:40Z",
            "author_association": "MEMBER",
            "body": "We're switching from using Travis to Github actions (https://github.com/OpenMined/PySyft/pull/3013). Please migrate this project to do so as well. It's important to also ensure that pull requests cannot be merged without an all-green CI report."
        }
    },
    {
        "id": 3017413139,
        "node_id": "MDExOkNsb3NlZEV2ZW50MzAxNzQxMzEzOQ==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017413139",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "closed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T12:03:40Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/448",
            "id": 561370710,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMTk0NTYy",
            "number": 448,
            "title": "Setup GitHub Actions Workflow",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T01:42:16Z",
            "updated_at": "2020-02-07T12:03:40Z",
            "closed_at": "2020-02-07T12:03:40Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/448",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/448",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/448.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/448.patch"
            },
            "body": "## Description\r\n\r\nAccording to #444, we're switching from using Travis to Github actions. This PR adds the configuration file for github actions, and some changes to make it work well.\r\n\r\nFixes #444\r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3017413132,
        "node_id": "MDExOkNsb3NlZEV2ZW50MzAxNzQxMzEzMg==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017413132",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "closed",
        "commit_id": null,
        "commit_url": null,
        "created_at": "2020-02-07T12:03:40Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/444/events",
            "html_url": "https://github.com/OpenMined/PyGrid/issues/444",
            "id": 560280044,
            "node_id": "MDU6SXNzdWU1NjAyODAwNDQ=",
            "number": 444,
            "title": "Migrate PyGrid from Travis to Github Actions",
            "user": {
                "login": "cereallarceny",
                "id": 1297930,
                "node_id": "MDQ6VXNlcjEyOTc5MzA=",
                "avatar_url": "https://avatars1.githubusercontent.com/u/1297930?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/cereallarceny",
                "html_url": "https://github.com/cereallarceny",
                "followers_url": "https://api.github.com/users/cereallarceny/followers",
                "following_url": "https://api.github.com/users/cereallarceny/following{/other_user}",
                "gists_url": "https://api.github.com/users/cereallarceny/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/cereallarceny/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/cereallarceny/subscriptions",
                "organizations_url": "https://api.github.com/users/cereallarceny/orgs",
                "repos_url": "https://api.github.com/users/cereallarceny/repos",
                "events_url": "https://api.github.com/users/cereallarceny/events{/privacy}",
                "received_events_url": "https://api.github.com/users/cereallarceny/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [
                {
                    "id": 817798111,
                    "node_id": "MDU6TGFiZWw4MTc3OTgxMTE=",
                    "url": "https://api.github.com/repos/OpenMined/PyGrid/labels/good%20first%20issue",
                    "name": "good first issue",
                    "color": "7057ff",
                    "default": true,
                    "description": "Good for newcomers"
                }
            ],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-05T10:33:10Z",
            "updated_at": "2020-02-07T12:03:40Z",
            "closed_at": "2020-02-07T12:03:40Z",
            "author_association": "MEMBER",
            "body": "We're switching from using Travis to Github actions (https://github.com/OpenMined/PySyft/pull/3013). Please migrate this project to do so as well. It's important to also ensure that pull requests cannot be merged without an all-green CI report."
        }
    },
    {
        "id": 3017413114,
        "node_id": "MDExOk1lcmdlZEV2ZW50MzAxNzQxMzExNA==",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017413114",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "merged",
        "commit_id": "6633dd56e80a000a0da7bdb9d8af092722c0fe6c",
        "commit_url": "https://api.github.com/repos/OpenMined/PyGrid/commits/6633dd56e80a000a0da7bdb9d8af092722c0fe6c",
        "created_at": "2020-02-07T12:03:40Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/448",
            "id": 561370710,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMTk0NTYy",
            "number": 448,
            "title": "Setup GitHub Actions Workflow",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T01:42:16Z",
            "updated_at": "2020-02-07T12:03:40Z",
            "closed_at": "2020-02-07T12:03:40Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/448",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/448",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/448.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/448.patch"
            },
            "body": "## Description\r\n\r\nAccording to #444, we're switching from using Travis to Github actions. This PR adds the configuration file for github actions, and some changes to make it work well.\r\n\r\nFixes #444\r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    },
    {
        "id": 3017413111,
        "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwMTc0MTMxMTE=",
        "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/events/3017413111",
        "actor": {
            "login": "IonesioJunior",
            "id": 26658472,
            "node_id": "MDQ6VXNlcjI2NjU4NDcy",
            "avatar_url": "https://avatars2.githubusercontent.com/u/26658472?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/IonesioJunior",
            "html_url": "https://github.com/IonesioJunior",
            "followers_url": "https://api.github.com/users/IonesioJunior/followers",
            "following_url": "https://api.github.com/users/IonesioJunior/following{/other_user}",
            "gists_url": "https://api.github.com/users/IonesioJunior/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/IonesioJunior/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/IonesioJunior/subscriptions",
            "organizations_url": "https://api.github.com/users/IonesioJunior/orgs",
            "repos_url": "https://api.github.com/users/IonesioJunior/repos",
            "events_url": "https://api.github.com/users/IonesioJunior/events{/privacy}",
            "received_events_url": "https://api.github.com/users/IonesioJunior/received_events",
            "type": "User",
            "site_admin": false
        },
        "event": "referenced",
        "commit_id": "6633dd56e80a000a0da7bdb9d8af092722c0fe6c",
        "commit_url": "https://api.github.com/repos/OpenMined/PyGrid/commits/6633dd56e80a000a0da7bdb9d8af092722c0fe6c",
        "created_at": "2020-02-07T12:03:40Z",
        "issue": {
            "url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448",
            "repository_url": "https://api.github.com/repos/OpenMined/PyGrid",
            "labels_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/labels{/name}",
            "comments_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/comments",
            "events_url": "https://api.github.com/repos/OpenMined/PyGrid/issues/448/events",
            "html_url": "https://github.com/OpenMined/PyGrid/pull/448",
            "id": 561370710,
            "node_id": "MDExOlB1bGxSZXF1ZXN0MzcyMTk0NTYy",
            "number": 448,
            "title": "Setup GitHub Actions Workflow",
            "user": {
                "login": "hericlesme",
                "id": 30700596,
                "node_id": "MDQ6VXNlcjMwNzAwNTk2",
                "avatar_url": "https://avatars2.githubusercontent.com/u/30700596?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/hericlesme",
                "html_url": "https://github.com/hericlesme",
                "followers_url": "https://api.github.com/users/hericlesme/followers",
                "following_url": "https://api.github.com/users/hericlesme/following{/other_user}",
                "gists_url": "https://api.github.com/users/hericlesme/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/hericlesme/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/hericlesme/subscriptions",
                "organizations_url": "https://api.github.com/users/hericlesme/orgs",
                "repos_url": "https://api.github.com/users/hericlesme/repos",
                "events_url": "https://api.github.com/users/hericlesme/events{/privacy}",
                "received_events_url": "https://api.github.com/users/hericlesme/received_events",
                "type": "User",
                "site_admin": false
            },
            "labels": [],
            "state": "closed",
            "locked": false,
            "assignee": null,
            "assignees": [],
            "milestone": null,
            "comments": 0,
            "created_at": "2020-02-07T01:42:16Z",
            "updated_at": "2020-02-07T12:03:40Z",
            "closed_at": "2020-02-07T12:03:40Z",
            "author_association": "MEMBER",
            "pull_request": {
                "url": "https://api.github.com/repos/OpenMined/PyGrid/pulls/448",
                "html_url": "https://github.com/OpenMined/PyGrid/pull/448",
                "diff_url": "https://github.com/OpenMined/PyGrid/pull/448.diff",
                "patch_url": "https://github.com/OpenMined/PyGrid/pull/448.patch"
            },
            "body": "## Description\r\n\r\nAccording to #444, we're switching from using Travis to Github actions. This PR adds the configuration file for github actions, and some changes to make it work well.\r\n\r\nFixes #444\r\n\r\n## Type of change\r\n\r\nPlease mark options that are relevant.\r\n\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\r\n- [ ] This change requires a documentation update\r\n\r\n## Checklist:\r\n\r\n- [x] I did follow the [contribution guidelines](https://github.com/OpenMined/PySyft/blob/master/CONTRIBUTING.md)\r\n- [x] Unit tests pass locally with my changes\r\n"
        }
    }
]